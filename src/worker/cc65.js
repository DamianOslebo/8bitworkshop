var cc65 = function(cc65) {
  cc65 = cc65 || {};
  var Module = cc65;

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof cc65 !== 'undefined' ? cc65 : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;



function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var WASM_PAGE_SIZE = 64 * 1024;

var totalMemory = WASM_PAGE_SIZE;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024;
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 48160;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([254,107,0,0,1,0,0,0,107,60,0,0,2,0,0,0,114,60,0,0,3,0,0,0,121,60,0,0,4,0,0,0,128,60,0,0,5,0,0,0,61,0,0,0,0,0,0,0,145,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,145,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,145,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,145,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,0,0,0,0,9,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,41,0,0,0,213,66,0,0,0,0,0,0,219,66,0,0,1,0,0,0,228,66,0,0,2,0,0,0,235,66,0,0,3,0,0,0,243,66,0,0,4,0,0,0,255,66,0,0,5,0,0,0,10,67,0,0,6,0,0,0,20,67,0,0,7,0,0,0,28,67,0,0,8,0,0,0,37,67,0,0,9,0,0,0,47,67,0,0,10,0,0,0,55,67,0,0,11,0,0,0,69,67,0,0,12,0,0,0,78,67,0,0,14,0,0,0,92,67,0,0,13,0,0,0,103,67,0,0,15,0,0,0,111,67,0,0,16,0,0,0,123,67,0,0,17,0,0,0,133,67,0,0,18,0,0,0,146,67,0,0,19,0,0,0,158,67,0,0,20,0,0,0,172,67,0,0,21,0,0,0,185,67,0,0,22,0,0,0,190,67,0,0,23,0,0,0,207,67,0,0,24,0,0,0,75,137,0,0,3,0,7,0,66,137,0,0,7,0,7,0,251,67,0,0,4,0,0,0,208,120,0,0,3,0,11,0,215,120,0,0,3,0,11,0,222,120,0,0,3,0,11,0,229,120,0,0,3,0,11,0,236,120,0,0,7,0,15,0,2,68,0,0,3,3,11,3,10,68,0,0,3,3,11,3,18,68,0,0,3,3,11,3,26,68,0,0,3,3,15,3,243,120,0,0,3,0,11,0,250,120,0,0,3,0,11,0,1,121,0,0,3,0,11,0,8,121,0,0,3,0,11,0,15,121,0,0,7,0,15,0,34,68,0,0,3,3,11,3,42,68,0,0,3,3,11,3,50,68,0,0,3,3,11,3,58,68,0,0,3,3,15,3,254,132,0,0,1,0,3,0,4,133,0,0,3,0,3,0,66,68,0,0,3,3,3,3,86,122,0,0,0,0,3,0,74,68,0,0,0,0,3,0,81,68,0,0,0,0,3,0,88,68,0,0,0,0,3,0,95,68,0,0,0,0,3,0,75,122,0,0,0,0,3,0,102,68,0,0,0,0,3,0,65,122,0,0,0,0,3,0,57,122,0,0,0,0,3,0,49,122,0,0,0,0,3,0,110,68,0,0,3,0,255,255,25,133,0,0,3,0,3,0,22,121,0,0,3,0,3,0,29,121,0,0,3,0,3,0,36,121,0,0,3,0,3,0,43,121,0,0,3,0,3,0,50,121,0,0,3,0,3,0,57,121,0,0,3,0,3,0,64,121,0,0,3,0,3,0,71,121,0,0,3,0,3,0,78,121,0,0,7,0,11,0,117,68,0,0,7,3,3,3,125,68,0,0,0,0,4,0,132,68,0,0,0,0,1,0,139,68,0,0,0,0,1,0,146,68,0,0,0,0,1,0,153,68,0,0,0,0,1,0,160,68,0,0,0,0,1,0,167,68,0,0,0,0,1,0,174,68,0,0,0,0,1,0,85,121,0,0,3,0,3,0,92,121,0,0,3,0,3,0,99,121,0,0,3,0,15,0,106,121,0,0,3,0,15,0,113,121,0,0,3,0,15,0,120,121,0,0,3,0,15,0,127,121,0,0,3,0,15,0,134,121,0,0,3,0,15,0,141,121,0,0,7,0,15,0,181,68,0,0,0,0,0,0,188,68,0,0,0,0,4,0,195,68,0,0,0,0,4,0,202,68,0,0,0,0,4,0,209,68,0,0,0,0,4,0,216,68,0,0,0,0,4,0,223,68,0,0,0,0,4,0,230,68,0,0,0,0,4,0,84,137,0,0,23,3,39,3,117,137,0,0,3,3,7,3,91,137,0,0,20,0,39,3,99,137,0,0,21,0,39,3,107,137,0,0,7,3,7,3,111,122,0,0,7,0,51,0,116,134,0,0,7,0,51,0,141,137,0,0,0,0,7,0,135,137,0,0,3,0,55,0,127,137,0,0,7,0,55,0,26,144,0,0,4,0,7,0,174,137,0,0,0,0,7,3,158,137,0,0,3,0,55,3,149,137,0,0,7,0,55,3,165,137,0,0,4,0,7,3,191,137,0,0,1,0,3,0,183,137,0,0,3,0,3,0,199,137,0,0,23,3,39,3,232,137,0,0,3,3,7,3,206,137,0,0,20,0,39,3,214,137,0,0,21,0,39,3,222,137,0,0,7,3,7,3,237,68,0,0,3,0,51,0,245,68,0,0,3,0,51,0,252,68,0,0,3,0,51,0,3,69,0,0,3,0,51,0,10,69,0,0,3,0,51,0,17,69,0,0,3,0,51,0,11,133,0,0,3,0,3,0,20,138,0,0,0,0,7,0,116,138,0,0,3,0,4,3,26,138,0,0,0,0,7,0,32,138,0,0,0,0,7,0,38,138,0,0,0,0,7,0,44,138,0,0,0,0,7,0,50,138,0,0,0,0,7,0,56,138,0,0,0,0,7,0,62,138,0,0,0,0,7,0,242,137,0,0,1,0,4,0,68,138,0,0,1,0,6,0,92,138,0,0,0,0,5,0,75,138,0,0,1,0,4,0,13,138,0,0,3,0,4,0,83,138,0,0,4,0,5,0,248,137,0,0,0,0,5,0,255,137,0,0,0,0,5,0,6,138,0,0,0,0,5,0,101,138,0,0,3,3,4,0,109,138,0,0,0,0,7,0,133,138,0,0,3,0,55,0,148,138,0,0,0,0,7,0,124,138,0,0,7,0,55,0,139,138,0,0,4,0,7,0,24,69,0,0,7,0,15,0,32,69,0,0,6,0,1,0,41,69,0,0,6,0,5,0,50,69,0,0,0,0,3,0,58,69,0,0,0,0,3,0,148,121,0,0,3,0,11,0,155,121,0,0,3,0,11,0,162,121,0,0,3,0,11,0,169,121,0,0,3,0,11,0,176,121,0,0,7,0,15,0,66,69,0,0,3,3,11,3,74,69,0,0,3,3,11,3,82,69,0,0,3,3,11,3,90,69,0,0,3,3,15,3,183,121,0,0,3,0,11,0,190,121,0,0,3,0,11,0,197,121,0,0,3,0,11,0,204,121,0,0,3,0,11,0,211,121,0,0,7,0,15,0,98,69,0,0,3,3,11,3,106,69,0,0,3,3,11,3,114,69,0,0,3,3,11,3,122,69,0,0,3,3,15,3,89,134,0,0,5,0,60,0,157,138,0,0,3,0,4,0,226,121,0,0,7,0,56,0,18,144,0,0,7,0,4,0,165,138,0,0,3,3,4,0,37,144,0,0,7,3,4,0,183,138,0,0,3,0,7,0,174,138,0,0,7,0,7,0,216,73,0,0,4,0,5,0,220,138,0,0,3,0,15,3,201,138,0,0,1,0,7,0,192,138,0,0,3,0,7,0,210,138,0,0,3,3,15,3,2,139,0,0,3,0,15,3,239,138,0,0,1,0,7,0,230,138,0,0,3,0,7,0,248,138,0,0,3,3,15,3,63,132,0,0,1,0,15,0,36,104,0,0,1,0,15,3,236,121,0,0,1,0,15,0,78,103,0,0,1,0,15,3,40,139,0,0,3,0,255,255,21,139,0,0,1,0,255,255,12,139,0,0,3,0,255,255,30,139,0,0,3,3,255,255,58,139,0,0,0,0,7,3,66,139,0,0,1,0,7,3,50,139,0,0,3,0,7,3,178,106,0,0,3,3,55,0,82,139,0,0,0,0,7,3,90,139,0,0,1,0,7,3,74,139,0,0,3,0,7,3,133,107,0,0,3,3,55,0,106,139,0,0,0,0,7,3,114,139,0,0,1,0,7,3,98,139,0,0,3,0,7,3,96,107,0,0,3,3,55,0,122,139,0,0,3,0,7,3,130,139,0,0,1,0,7,3,130,69,0,0,3,3,53,0,147,139,0,0,0,0,7,3,155,139,0,0,1,0,7,3,139,139,0,0,3,0,7,3,77,107,0,0,3,3,55,0,171,139,0,0,0,0,7,3,179,139,0,0,1,0,7,3,163,139,0,0,3,0,7,3,21,107,0,0,3,3,55,0,215,139,0,0,3,0,255,255,205,139,0,0,3,3,255,255,253,139,0,0,3,0,255,255,234,139,0,0,1,0,255,255,225,139,0,0,3,0,255,255,243,139,0,0,3,3,255,255,138,69,0,0,0,0,7,3,15,140,0,0,1,0,7,3,7,140,0,0,3,0,7,3,198,106,0,0,3,3,55,0,48,140,0,0,3,0,15,3,31,140,0,0,1,0,15,0,23,140,0,0,3,0,15,0,39,140,0,0,3,3,15,3,88,140,0,0,3,0,15,3,67,140,0,0,1,0,15,0,57,140,0,0,3,0,15,0,77,140,0,0,3,3,15,3,77,132,0,0,1,0,15,0,46,104,0,0,1,0,15,3,245,121,0,0,1,0,15,0,88,103,0,0,1,0,15,3,127,140,0,0,3,0,7,3,108,140,0,0,1,0,7,0,99,140,0,0,3,0,7,0,117,140,0,0,3,3,7,3,168,140,0,0,3,0,255,243,147,140,0,0,1,0,55,3,137,140,0,0,3,0,55,3,157,140,0,0,3,3,255,243,146,69,0,0,0,0,7,3,188,140,0,0,1,0,7,3,179,140,0,0,3,0,7,3,142,107,0,0,3,3,55,0,155,69,0,0,0,0,7,3,206,140,0,0,1,0,7,3,197,140,0,0,3,0,7,3,105,107,0,0,3,3,55,0,164,69,0,0,0,0,7,3,224,140,0,0,1,0,7,3,215,140,0,0,3,0,7,3,86,107,0,0,3,3,55,0,173,69,0,0,0,0,7,3,242,140,0,0,1,0,7,3,233,140,0,0,3,0,7,3,30,107,0,0,3,3,55,0,26,141,0,0,3,0,255,243,5,141,0,0,1,0,55,3,251,140,0,0,3,0,55,3,15,141,0,0,3,3,255,243,68,141,0,0,3,0,255,255,47,141,0,0,1,0,255,255,37,141,0,0,3,0,255,255,57,141,0,0,3,3,255,255,107,141,0,0,3,0,15,3,88,141,0,0,1,0,15,0,79,141,0,0,3,0,15,0,97,141,0,0,3,3,15,3,182,69,0,0,3,3,4,0,189,69,0,0,3,3,4,0,85,0,0,0,41,0,0,0,95,95,110,111,114,101,116,117,114,110,95,95,0,0,0,0,1,0,0,0,95,95,117,110,117,115,101,100,95,95,0,0,0,0,0,0,2,0,0,0,110,111,114,101,116,117,114,110,0,0,0,0,0,0,0,0,1,0,0,0,117,110,117,115,101,100,0,0,0,0,0,0,0,0,0,0,2,0,0,0,188,11,0,0,220,11,0,0,252,11,0,0,28,12,0,0,60,12,0,0,92,12,0,0,124,12,0,0,156,12,0,0,188,12,0,0,220,12,0,0,252,12,0,0,28,13,0,0,60,13,0,0,92,13,0,0,124,13,0,0,156,13,0,0,188,13,0,0,220,13,0,0,252,13,0,0,28,14,0,0,60,14,0,0,92,14,0,0,124,14,0,0,156,14,0,0,188,14,0,0,220,14,0,0,252,14,0,0,28,15,0,0,60,15,0,0,92,15,0,0,124,15,0,0,156,15,0,0,188,15,0,0,220,15,0,0,252,15,0,0,28,16,0,0,60,16,0,0,92,16,0,0,124,16,0,0,156,16,0,0,188,16,0,0,220,16,0,0,252,16,0,0,28,17,0,0,60,17,0,0,92,17,0,0,124,17,0,0,156,17,0,0,188,17,0,0,220,17,0,0,252,17,0,0,28,18,0,0,60,18,0,0,92,18,0,0,124,18,0,0,156,18,0,0,188,18,0,0,220,18,0,0,252,18,0,0,28,19,0,0,60,19,0,0,92,19,0,0,124,19,0,0,156,19,0,0,188,19,0,0,220,19,0,0,252,19,0,0,28,20,0,0,60,20,0,0,92,20,0,0,124,20,0,0,156,20,0,0,188,20,0,0,220,20,0,0,252,20,0,0,28,21,0,0,60,21,0,0,92,21,0,0,124,21,0,0,156,21,0,0,188,21,0,0,220,21,0,0,252,21,0,0,28,22,0,0,60,22,0,0,92,22,0,0,124,22,0,0,156,22,0,0,188,22,0,0,220,22,0,0,252,22,0,0,28,23,0,0,60,23,0,0,92,23,0,0,124,23,0,0,1,0,0,0,51,77,0,0,66,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,39,77,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,24,77,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,16,77,0,0,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,8,77,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,77,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,248,76,0,0,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,240,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,232,76,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,222,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,212,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,201,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,190,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,179,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,168,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,155,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,0,0,141,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,133,76,0,0,42,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,125,76,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0,0,0,117,76,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,109,76,0,0,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,101,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,93,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,85,76,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0,0,0,77,76,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0,69,76,0,0,85,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,0,57,76,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,40,76,0,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,29,0,0,0,23,76,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,11,76,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,254,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,242,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,0,0,0,230,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,0,0,0,217,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,0,0,0,204,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,188,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,173,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,0,0,0,158,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,143,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,134,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41,0,0,0,125,75,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42,0,0,0,116,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,0,0,0,106,75,0,0,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,96,75,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,85,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0,0,73,75,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,0,0,0,60,75,0,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,47,75,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,49,0,0,0,34,75,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,21,75,0,0,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0,0,0,8,75,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,251,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,0,238,74,0,0,190,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0,0,226,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,55,0,0,0,214,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,0,202,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,0,190,74,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,178,74,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,166,74,0,0,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,153,74,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,0,0,0,140,74,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,127,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,118,74,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,109,74,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,98,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,0,0,0,91,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,78,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,65,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,55,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,45,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,71,0,0,0,35,74,0,0,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,25,74,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,0,0,0,15,74,0,0,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,5,74,0,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,75,0,0,0,252,73,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,243,73,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,231,73,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,195,73,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,0,0,0,185,73,0,0,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,175,73,0,0,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,81,0,0,0,165,73,0,0,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0,0,155,73,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,145,73,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,132,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,124,73,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,86,0,0,0,116,73,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,0,0,0,108,73,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,0,0,0,99,73,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,0,0,0,90,73,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,0,0,0,76,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,0,0,0,62,73,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,0,0,0,48,73,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,93,0,0,0,34,73,0,0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,0,0,0,19,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,0,0,0,3,73,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,89,0,0,0,0,0,0,6,0,0,0,237,89,0,0,0,0,0,0,7,0,0,0,249,89,0,0,1,0,0,0,8,0,0,0,4,90,0,0,0,0,0,0,9,0,0,0,18,90,0,0,1,0,0,0,10,0,0,0,30,90,0,0,1,0,0,0,11,0,0,0,41,90,0,0,1,0,0,0,12,0,0,0,47,90,0,0,1,0,0,0,13,0,0,0,60,90,0,0,1,0,0,0,14,0,0,0,78,90,0,0,1,0,0,0,15,0,0,0,90,90,0,0,0,0,0,0,16,0,0,0,98,90,0,0,0,0,0,0,17,0,0,0,111,90,0,0,1,0,0,0,18,0,0,0,123,90,0,0,0,0,0,0,19,0,0,0,142,90,0,0,1,0,0,0,20,0,0,0,155,90,0,0,1,0,0,0,21,0,0,0,169,90,0,0,1,0,0,0,22,0,0,0,182,90,0,0,0,0,0,0,23,0,0,0,189,90,0,0,1,0,0,0,24,0,0,0,203,90,0,0,0,0,0,0,25,0,0,0,220,90,0,0,0,0,0,0,26,0,0,0,236,90,0,0,0,0,0,0,27,0,0,0,252,90,0,0,1,0,0,0,28,0,0,0,11,91,0,0,1,0,0,0,29,0,0,0,28,91,0,0,0,0,0,0,30,0,0,0,44,91,0,0,1,0,0,0,31,0,0,0,58,91,0,0,0,0,0,0,32,0,0,0,73,91,0,0,1,0,0,0,33,0,0,0,84,91,0,0,0,0,0,0,34,0,0,0,100,91,0,0,1,0,0,0,35,0,0,0,109,91,0,0,0,0,0,0,36,0,0,0,119,91,0,0,0,0,0,0,37,0,0,0,129,91,0,0,0,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,192,138,0,0,192,138,0,0,210,138,0,0,210,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,99,140,0,0,99,140,0,0,117,140,0,0,117,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,139,0,0,137,140,0,0,30,139,0,0,157,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,121,0,0,245,121,0,0,78,103,0,0,88,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,139,0,0,37,141,0,0,243,139,0,0,57,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,132,0,0,77,132,0,0,36,104,0,0,46,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,139,0,0,251,140,0,0,205,139,0,0,15,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,230,138,0,0,230,138,0,0,248,138,0,0,248,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,140,0,0,23,140,0,0,39,140,0,0,39,140,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,79,141,0,0,79,141,0,0,97,141,0,0,97,141,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,139,0,0,50,139,0,0,178,106,0,0,178,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,140,0,0,7,140,0,0,198,106,0,0,198,106,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,139,0,0,233,140,0,0,21,107,0,0,30,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,139,139,0,0,215,140,0,0,77,107,0,0,86,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,139,0,0,197,140,0,0,96,107,0,0,105,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,139,0,0,179,140,0,0,133,107,0,0,142,107,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52,0,0,0,85,0,0,0,41,0,0,0,38,119,0,0,99,7,0,0,46,119,0,0,97,7,0,0,53,119,0,0,94,7,0,0,59,119,0,0,98,7,0,0,67,119,0,0,95,7,0,0,73,119,0,0,96,7,0,0,79,119,0,0,32,7,0,0,87,119,0,0,91,7,0,0,146,142,0,0,12,7,0,0,125,142,0,0,92,7,0,0,133,142,0,0,11,7,0,0,101,119,0,0,10,7,0,0,116,142,0,0,93,7,0,0,112,119,0,0,32,4,0,0,116,119,0,0,2,7,0,0,121,119,0,0,35,7,0,0,127,119,0,0,33,7,0,0,132,119,0,0,12,4,0,0,172,142,0,0,14,7,0,0,92,142,0,0,7,7,0,0,138,119,0,0,36,7,0,0,147,119,0,0,34,7,0,0,155,119,0,0,25,7,0,0,208,142,0,0,16,7,0,0,190,127,0,0,37,7,0,0,158,119,0,0,13,7,0,0,74,135,0,0,3,7,0,0,94,160,0,0,92,4,0,0,163,119,0,0,11,4,0,0,202,142,0,0,17,7,0,0,172,119,0,0,26,7,0,0,176,119,0,0,27,7,0,0,201,127,0,0,28,7,0,0,181,119,0,0,10,6,0,0,183,142,0,0,15,7,0,0,187,142,0,0,18,7,0,0,89,160,0,0,93,4,0,0,188,119,0,0,4,7,0,0,107,142,0,0,9,6,0,0,197,119,0,0,29,7,0,0,177,142,0,0,21,7,0,0,156,142,0,0,20,7,0,0,204,119,0,0,39,7,0,0,81,135,0,0,5,7,0,0,211,119,0,0,22,7,0,0,218,119,0,0,30,7,0,0,225,119,0,0,6,7,0,0,233,119,0,0,23,7,0,0,163,142,0,0,19,7,0,0,215,142,0,0,24,7,0,0,98,142,0,0,8,7,0,0,239,119,0,0,31,7,0,0,218,121,0,0,96,0,0,0,0,0,0,0,3,0,0,0,89,134,0,0,97,0,0,0,0,0,0,0,0,0,0,0,226,121,0,0,98,0,0,0,3,0,0,0,0,0,0,0,192,138,0,0,99,0,0,0,0,0,0,0,0,0,0,0,230,138,0,0,100,0,0,0,0,0,0,0,0,0,0,0,63,132,0,0,101,0,0,0,0,0,0,0,0,0,0,0,236,121,0,0,102,0,0,0,0,0,0,0,0,0,0,0,50,139,0,0,103,0,0,0,0,0,0,0,0,0,0,0,74,139,0,0,104,0,0,0,0,0,0,0,48,0,0,0,163,139,0,0,105,0,0,0,0,0,0,0,48,0,0,0,7,140,0,0,106,0,0,0,0,0,0,0,0,0,0,0,23,140,0,0,107,0,0,0,0,0,0,0,0,0,0,0,77,132,0,0,108,0,0,0,0,0,0,0,0,0,0,0,245,121,0,0,109,0,0,0,0,0,0,0,0,0,0,0,99,140,0,0,110,0,0,0,0,0,0,0,48,0,0,0,179,140,0,0,111,0,0,0,0,0,0,0,48,0,0,0,197,140,0,0,112,0,0,0,0,0,0,0,48,0,0,0,215,140,0,0,113,0,0,0,0,0,0,0,48,0,0,0,233,140,0,0,114,0,0,0,0,0,0,0,48,0,0,0,79,141,0,0,115,0,0,0,0,0,0,0,0,0,0,0,208,120,0,0,215,120,0,0,222,120,0,0,229,120,0,0,236,120,0,0,243,120,0,0,250,120,0,0,1,121,0,0,8,121,0,0,15,121,0,0,4,133,0,0,25,133,0,0,22,121,0,0,29,121,0,0,36,121,0,0,43,121,0,0,50,121,0,0,57,121,0,0,64,121,0,0,71,121,0,0,78,121,0,0,85,121,0,0,92,121,0,0,99,121,0,0,106,121,0,0,113,121,0,0,120,121,0,0,127,121,0,0,134,121,0,0,141,121,0,0,127,137,0,0,26,144,0,0,11,133,0,0,148,121,0,0,155,121,0,0,162,121,0,0,169,121,0,0,176,121,0,0,183,121,0,0,190,121,0,0,197,121,0,0,204,121,0,0,211,121,0,0,178,127,0,0,0,0,0,0,185,127,0,0,1,0,0,0,190,127,0,0,2,0,0,0,195,127,0,0,3,0,0,0,151,153,0,0,4,0,0,0,201,127,0,0,5,0,0,0,204,127,0,0,6,0,0,0,210,127,0,0,7,0,0,0,217,127,0,0,8,0,0,0,225,127,0,0,9,0,0,0,230,127,0,0,10,0,0,0,237,127,0,0,11,0,0,0,243,127,0,0,12,0,0,0,255,255,255,255,6,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,85,0,0,0,41,0,0,0,1,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,136,0,0,5,64,0,0,68,136,0,0,4,64,0,0,80,136,0,0,3,64,0,0,95,136,0,0,2,64,0,0,104,136,0,0,1,64,0,0,114,136,0,0,1,0,0,0,122,136,0,0,2,0,0,0,134,136,0,0,4,0,0,0,144,136,0,0,8,0,0,0,154,136,0,0,48,0,0,0,162,136,0,0,32,0,0,0,171,136,0,0,64,0,0,0,180,136,0,0,128,0,0,0,189,136,0,0,0,1,0,0,197,136,0,0,0,4,0,0,208,136,0,0,0,16,0,0,215,136,0,0,0,32,0,0,222,136,0,0,0,128,0,0,66,137,0,0,255,255,255,255,0,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,75,137,0,0,84,137,0,0,1,0,0,0,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,91,137,0,0,84,137,0,0,255,255,0,0,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,99,137,0,0,107,137,0,0,255,255,255,255,0,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,117,137,0,0,127,137,0,0,255,255,255,255,1,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,135,137,0,0,26,144,0,0,255,255,255,255,1,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,141,137,0,0,149,137,0,0,255,255,255,255,3,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,158,137,0,0,165,137,0,0,255,255,255,255,3,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,174,137,0,0,183,137,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,191,137,0,0,199,137,0,0,1,0,0,0,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,206,137,0,0,199,137,0,0,255,255,0,0,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,214,137,0,0,222,137,0,0,255,255,255,255,0,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,232,137,0,0,242,137,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,248,137,0,0,242,137,0,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,255,137,0,0,242,137,0,0,2,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,6,138,0,0,13,138,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,20,138,0,0,13,138,0,0,1,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,26,138,0,0,13,138,0,0,2,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,32,138,0,0,13,138,0,0,3,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,38,138,0,0,13,138,0,0,4,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,44,138,0,0,13,138,0,0,5,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,50,138,0,0,13,138,0,0,6,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,56,138,0,0,13,138,0,0,7,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,62,138,0,0,13,138,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,68,138,0,0,13,138,0,0,255,255,255,0,255,255,255,255,255,255,255,255,255,255,255,255,1,0,0,0,75,138,0,0,83,138,0,0,255,255,255,255,0,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,92,138,0,0,101,138,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,109,138,0,0,101,138,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,116,138,0,0,124,138,0,0,255,255,255,255,1,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,133,138,0,0,139,138,0,0,255,255,255,255,3,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,148,138,0,0,18,144,0,0,255,255,255,255,0,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,157,138,0,0,37,144,0,0,255,255,255,255,0,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,165,138,0,0,174,138,0,0,255,255,255,255,0,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,183,138,0,0,192,138,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,201,138,0,0,210,138,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,220,138,0,0,230,138,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,239,138,0,0,248,138,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,2,139,0,0,12,139,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,21,139,0,0,30,139,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,40,139,0,0,50,139,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,58,139,0,0,50,139,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,66,139,0,0,74,139,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,82,139,0,0,74,139,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,90,139,0,0,98,139,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,106,139,0,0,98,139,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,114,139,0,0,122,139,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,130,139,0,0,139,139,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,147,139,0,0,139,139,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,155,139,0,0,163,139,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,171,139,0,0,163,139,0,0,255,255,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([255,255,255,255,255,255,255,255,0,0,0,0,179,139,0,0,187,139,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,196,139,0,0,205,139,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,215,139,0,0,225,139,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,234,139,0,0,243,139,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,253,139,0,0,7,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,15,140,0,0,23,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,31,140,0,0,39,140,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,48,140,0,0,57,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,67,140,0,0,77,140,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,88,140,0,0,99,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,108,140,0,0,117,140,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,127,140,0,0,137,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,147,140,0,0,157,140,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,168,140,0,0,179,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,188,140,0,0,197,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,206,140,0,0,215,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,224,140,0,0,233,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,242,140,0,0,251,140,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,5,141,0,0,15,141,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,26,141,0,0,37,141,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,47,141,0,0,57,141,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,68,141,0,0,79,141,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,88,141,0,0,97,141,0,0,255,255,255,255,255,255,0,0,0,0,255,255,255,255,255,255,0,0,0,0,107,141,0,0,17,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,145,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,0,1,0,0,0,39,0,0,0,54,0,0,0,1,0,0,0,40,0,0,0,57,0,0,0,1,0,0,0,41,0,0,0,59,0,0,0,1,0,0,0,42,0,0,0,81,0,0,0,1,0,0,0,43,0,0,0,75,0,0,0,1,0,0,0,44,0,0,0,77,0,0,0,1,0,0,0,45,0,0,0,62,0,0,0,1,0,0,0,46,0,0,0,79,0,0,0,1,0,0,0,47,0,0,0,67,0,0,0,1,0,0,0,48,0,0,0,68,0,0,0,3,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,3,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,0,0,0,3,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,1,0,0,0,49,0,0,0,64,0,0,0,1,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,0,0,0,5,0,0,0,51,0,0,0,71,0,0,0,5,0,0,0,52,0,0,0,73,0,0,0,5,0,0,0,53,0,0,0,74,0,0,0,5,0,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,0,0,3,0,0,0,41,0,0,0,60,0,0,0,1,0,0,0,42,0,0,0,82,0,0,0,1,0,0,0,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,100,99,0,0,0,0,0,0,0,1,0,1,0,0,8,1,0,0,0,97,110,100,0,0,0,0,0,0,0,1,0,1,0,0,8,2,0,0,0,97,115,108,0,0,0,0,0,0,0,0,0,0,0,0,40,3,0,0,0,98,99,99,0,0,0,0,0,0,2,0,0,0,0,2,0,4,0,0,0,98,99,115,0,0,0,0,0,0,2,0,0,0,0,2,0,5,0,0,0,98,101,113,0,0,0,0,0,0,2,0,0,0,0,14,0,6,0,0,0,98,105,116,0,0,0,0,0,0,0,1,0,0,0,0,8,7,0,0,0,98,109,105,0,0,0,0,0,0,2,0,0,0,0,10,0,8,0,0,0,98,110,101,0,0,0,0,0,0,2,0,0,0,0,14,0,9,0,0,0,98,112,108,0,0,0,0,0,0,2,0,0,0,0,10,0,10,0,0,0,98,114,97,0,0,0,0,0,0,2,0,0,0,0,1,0,11,0,0,0,98,114,107,0,0,0,0,0,0,1,0,0,0,0,0,0,12,0,0,0,98,118,99,0,0,0,0,0,0,2,0,0,0,0,2,0,13,0,0,0,98,118,115,0,0,0,0,0,0,2,0,0,0,0,2,0,14,0,0,0,99,108,99,0,0,0,0,0,0,1,0,0,0,0,0,0,15,0,0,0,99,108,100,0,0,0,0,0,0,1,0,0,0,0,0,0,16,0,0,0,99,108,105,0,0,0,0,0,0,1,0,0,0,0,0,0,17,0,0,0,99,108,118,0,0,0,0,0,0,1,0,0,0,0,0,0,18,0,0,0,99,109,112,0,0,0,0,0,0,0,1,0,0,0,0,24,19,0,0,0,99,112,120,0,0,0,0,0,0,0,2,0,0,0,0,24,20,0,0,0,99,112,121,0,0,0,0,0,0,0,4,0,0,0,0,24,21,0,0,0,100,101,97,0,0,0,0,0,0,1,1,0,1,0,0,12,22,0,0,0,100,101,99,0,0,0,0,0,0,0,0,0,0,0,0,40,23,0,0,0,100,101,120,0,0,0,0,0,0,1,2,0,2,0,0,12,24,0,0,0,100,101,121,0,0,0,0,0,0,1,4,0,4,0,0,12,25,0,0,0,101,111,114,0,0,0,0,0,0,0,1,0,1,0,0,8,26,0,0,0,105,110,97,0,0,0,0,0,0,1,1,0,1,0,0,12,27,0,0,0,105,110,99,0,0,0,0,0,0,0,0,0,0,0,0,40,28,0,0,0,105,110,120,0,0,0,0,0,0,1,2,0,2,0,0,12,29,0,0,0,105,110,121,0,0,0,0,0,0,1,4,0,4,0,0,12,30,0,0,0,106,99,99,0,0,0,0,0,0,5,0,0,0,0,18,0,31,0,0,0,106,99,115,0,0,0,0,0,0,5,0,0,0,0,18,0,32,0,0,0,106,101,113,0,0,0,0,0,0,5,0,0,0,0,30,0,33,0,0,0,106,109,105,0,0,0,0,0,0,5,0,0,0,0,26,0,34,0,0,0,106,109,112,0,0,0,0,0,0,3,0,0,0,0,17,0,35,0,0,0,106,110,101,0,0,0,0,0,0,5,0,0,0,0,30,0,36,0,0,0,106,112,108,0,0,0,0,0,0,5,0,0,0,0,26,0,37,0,0,0,106,115,114,0,0,0,0,0,0,3,0,0,0,0,0,2,38,0,0,0,106,118,99,0,0,0,0,0,0,5,0,0,0,0,18,0,39,0,0,0,106,118,115,0,0,0,0,0,0,5,0,0,0,0,18,0,40,0,0,0,108,100,97,0,0,0,0,0,0,0,0,0,1,0,64,8,41,0,0,0,108,100,120,0,0,0,0,0,0,0,0,0,2,0,64,8,42,0,0,0,108,100,121,0,0,0,0,0,0,0,0,0,4,0,64,8,43,0,0,0,108,115,114,0,0,0,0,0,0,0,0,0,0,0,0,40,44,0,0,0,110,111,112,0,0,0,0,0,0,1,0,0,0,0,0,0,45,0,0,0,111,114,97,0,0,0,0,0,0,0,1,0,1,0,0,8,46,0,0,0,112,104,97,0,0,0,0,0,0,1,1,0,0,0,0,0,47,0,0,0,112,104,112,0,0,0,0,0,0,1,0,0,0,0,0,0,48,0,0,0,112,104,120,0,0,0,0,0,0,1,2,0,0,0,0,0,49,0,0,0,112,104,121,0,0,0,0,0,0,1,4,0,0,0,0,0,50,0,0,0,112,108,97,0,0,0,0,0,0,1,0,0,1,0,0,8,51,0,0,0,112,108,112,0,0,0,0,0,0,1,0,0,0,0,0,0,52,0,0,0,112,108,120,0,0,0,0,0,0,1,0,0,2,0,0,8,53,0,0,0,112,108,121,0,0,0,0,0,0,1,0,0,4,0,0,8,54,0,0,0,114,111,108,0,0,0,0,0,0,0,0,0,0,0,0,40,55,0,0,0,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,40,56,0,0,0,114,116,105,0,0,0,0,0,0,1,7,0,0,0,32,0,57,0,0,0,114,116,115,0,0,0,0,0,0,1,0,0,0,0,32,0,58,0,0,0,115,98,99,0,0,0,0,0,0,0,1,0,1,0,0,8,59,0,0,0,115,101,99,0,0,0,0,0,0,1,0,0,0,0,0,0,60,0,0,0,115,101,100,0,0,0,0,0,0,1,0,0,0,0,0,0,61,0,0,0,115,101,105,0,0,0,0,0,0,1,0,0,0,0,0,0,62,0,0,0,115,116,97,0,0,0,0,0,0,0,1,0,0,0,128,0,63,0,0,0,115,116,120,0,0,0,0,0,0,0,2,0,0,0,128,0,64,0,0,0,115,116,121,0,0,0,0,0,0,0,4,0,0,0,128,0,65,0,0,0,115,116,122,0,0,0,0,0,0,0,0,0,0,0,128,0,66,0,0,0,116,97,120,0,0,0,0,0,0,1,1,0,2,0,0,9,67,0,0,0,116,97,121,0,0,0,0,0,0,1,1,0,4,0,0,9,68,0,0,0,116,114,98,0,0,0,0,0,0,0,1,0,0,0,0,8,69,0,0,0,116,115,98,0,0,0,0,0,0,0,1,0,0,0,0,8,70,0,0,0,116,115,120,0,0,0,0,0,0,1,0,0,2,0,0,9,71,0,0,0,116,120,97,0,0,0,0,0,0,1,2,0,1,0,0,9,72,0,0,0,116,120,115,0,0,0,0,0,0,1,2,0,0,0,0,1,73,0,0,0,116,121,97,0,0,0,0,0,0,1,4,0,1,0,0,9,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,50,0,0,134,153,0,0,120,50,0,0,151,153,0,0,192,50,0,0,157,153,0,0,228,50,0,0,167,153,0,0,8,51,0,0,178,153,0,0,44,51,0,0,191,153,0,0,80,51,0,0,206,153,0,0,116,51,0,0,219,153,0,0,152,51,0,0,232,153,0,0,146,154,0,0,163,154,0,0,187,154,0,0,1,0,0,0,97,112,112,108,101,50,0,0,0,0,0,0,15,0,0,0,97,112,112,108,101,50,101,110,104,0,0,0,16,0,0,0,97,116,97,114,105,0,0,0,0,0,0,0,2,0,0,0,97,116,97,114,105,53,50,48,48,0,0,0,3,0,0,0,97,116,97,114,105,120,108,0,0,0,0,0,4,0,0,0,97,116,109,111,115,0,0,0,0,0,0,0,20,0,0,0,98,98,99,0,0,0,0,0,0,0,0,0,14,0,0,0,99,49,50,56,0,0,0,0,0,0,0,0,8,0,0,0,99,49,54,0,0,0,0,0,0,0,0,0,6,0,0,0,99,54,52,0,0,0,0,0,0,0,0,0,7,0,0,0,99,54,53,0,0,0,0,0,0,0,0,0,28,0,0,0,99,98,109,53,49,48,0,0,0,0,0,0,10,0,0,0,99,98,109,54,49,48,0,0,0,0,0,0,11,0,0,0,103,97,109,97,116,101,0,0,0,0,0,0,27,0,0,0,103,101,111,115,0,0,0,0,0,0,0,0,17,0,0,0,103,101,111,115,45,97,112,112,108,101,0,0,18,0,0,0,103,101,111,115,45,99,98,109,0,0,0,0,17,0,0,0,108,117,110,105,120,0,0,0,0,0,0,0,19,0,0,0,108,121,110,120,0,0,0,0,0,0,0,0,23,0,0,0,109,111,100,117,108,101,0,0,0,0,0,0,1,0,0,0,110,101,115,0,0,0,0,0,0,0,0,0,21,0,0,0,110,111,110,101,0,0,0,0,0,0,0,0,0,0,0,0,111,115,105,99,49,112,0,0,0,0,0,0,12,0,0,0,112,99,101,0,0,0,0,0,0,0,0,0,26,0,0,0,112,101,116,0,0,0,0,0,0,0,0,0,13,0,0,0,112,108,117,115,52,0,0,0,0,0,0,0,9,0,0,0,115,105,109,54,53,48,50,0,0,0,0,0,24,0,0,0,115,105,109,54,53,99,48,50,0,0,0,0,25,0,0,0,115,117,112,101,114,118,105,115,105,111,110,0,22,0,0,0,118,105,99,50,48,0,0,0,0,0,0,0,5,0,0,0,110,111,110,101,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,155,0,0,109,111,100,117,108,101,0,0,0,0,0,0,1,0,0,0,2,0,0,0,26,155,0,0,97,116,97,114,105,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,156,0,0,97,116,97,114,105,53,50,48,48,0,0,0,1,0,0,0,1,0,0,0,26,156,0,0,97,116,97,114,105,120,108,0,0,0,0,0,1,0,0,0,1,0,0,0,26,156,0,0,118,105,99,50,48,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,157,0,0,99,49,54,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,157,0,0,99,54,52,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,157,0,0,99,49,50,56,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,157,0,0,112,108,117,115,52,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,157,0,0,99,98,109,53,49,48,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,157,0,0,99,98,109,54,49,48,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,157,0,0,111,115,105,99,49,112,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,158,0,0,112,101,116,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,157,0,0,98,98,99,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,155,0,0,97,112,112,108,101,50,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,155,0,0,97,112,112,108,101,50,101,110,104,0,0,0,4,0,0,0,1,0,0,0,26,155,0,0,103,101,111,115,45,99,98,109,0,0,0,0,1,0,0,0,1,0,0,0,26,155,0,0,103,101,111,115,45,97,112,112,108,101,0,0,4,0,0,0,1,0,0,0,26,155,0,0,108,117,110,105,120,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,26,155,0,0,97,116,109,111,115,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,155,0,0,110,101,115,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,155,0,0,115,117,112,101,114,118,105,115,105,111,110,0,3,0,0,0,1,0,0,0,26,155,0,0,108,121,110,120,0,0,0,0,0,0,0,0,3,0,0,0,1,0,0,0,26,155,0,0,115,105,109,54,53,48,50,0,0,0,0,0,1,0,0,0,1,0,0,0,26,155,0,0,115,105,109,54,53,99,48,50,0,0,0,0,4,0,0,0,1,0,0,0,26,155,0,0,112,99,101,0,0,0,0,0,0,0,0,0,7,0,0,0,1,0,0,0,26,155,0,0,103,97,109,97,116,101,0,0,0,0,0,0,1,0,0,0,1,0,0,0,26,155,0,0,99,54,53,0,0,0,0,0,0,0,0,0,9,0,0,0,1,0,0,0,26,157,0,0,255,255,255,255,255,255,255,255,247,162,0,0,252,162,0,0,1,163,0,0,7,163,0,0,14,163,0,0,20,163,0,0,26,163,0,0,34,163,0,0,42,163,0,0,47,163,0,0,1,0,0,0,2,0,0,0,6,0,0,0,10,0,0,0,26,0,0,0,58,0,0,0,64,0,0,0,154,0,0,0,2,1,0,0,26,2,0,0,8,57,0,0,5,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,16,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,57,0,0,5,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,24,184,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,57,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,0,112,116,114,49,0,0,0,0,0,0,0,16,0,48,0,0,112,116,114,49,43,49,0,0,0,0,0,32,0,48,0,0,112,116,114,50,0,0,0,0,0,0,0,64,0,192,0,0,112,116,114,50,43,49,0,0,0,0,0,128,0,192,0,4,112,116,114,51,0,0,0,0,0,0,0,0,0,0,0,4,112,116,114,52,0,0,0,0,0,0,0,0,0,0,0,7,114,101,103,98,97,110,107,0,0,0,0,0,0,0,0,0,114,101,103,115,97,118,101,0,0,0,0,0,4,0,12,0,114,101,103,115,97,118,101,43,49,0,0,0,8,0,12,0,115,112,0,0,0,0,0,0,0,0,0,0,16,0,48,0,115,112,43,49,0,0,0,0,0,0,0,0,32,0,48,0,115,114,101,103,0,0,0,0,0,0,0,0,1,0,3,0,115,114,101,103,43,49,0,0,0,0,0,0,2,0,3,0,116,109,112,49,0,0,0,0,0,0,0,8,0,8,0,0,116,109,112,50,0,0,0,0,0,0,0,0,0,0,0,0,116,109,112,51,0,0,0,0,0,0,0,0,0,0,0,0,116,109,112,52,0,0,0,0,0,0,0,0,0,0,0,95,98,122,101,114,111,0,109,101,109,115,101,116,0,115,116,114,99,109,112,0,115,116,114,99,112,121,0,115,116,114,108,101,110,0,108,100,121,32,35,36,70,70,0,108,100,97,32,40,37,115,41,44,121,0,115,116,97,32,40,37,115,41,44,121,0,99,109,112,32,40,37,115,41,44,121,0,99,109,112,32,37,115,44,121,0,98,101,113,32,37,115,0,108,100,120,32,35,36,48,49,0,67,97,108,108,32,116,111,32,109,101,109,115,101,116,32,104,97,115,32,110,111,32,101,102,102,101,99,116,0,108,100,97,32,112,116,114,49,0,67,97,108,108,32,116,111,32,109,101,109,99,112,121,32,104,97,115,32,110,111,32,101,102,102,101,99,116,0,73,110,100,101,120,32,62,61,32,48,32,38,38,32,73,110,100,101,120,32,60,32,40,105,110,116,41,70,85,78,67,95,67,79,85,78,84,0,99,99,54,53,47,115,116,100,102,117,110,99,46,99,0,73,110,118,97,108,105,100,32,108,111,99,97,116,105,111,110,32,105,110,32,76,111,97,100,69,120,112,114,58,32,48,120,37,48,52,88,0,85,110,107,110,111,119,110,32,99,111,110,115,116,97,110,116,32,116,121,112,101,58,32,37,48,52,88,0,76,45,62,82,101,102,67,111,117,110,116,32,62,61,32,48,0,99,99,54,53,47,108,105,116,112,111,111,108,46,99,0,76,80,32,33,61,32,48,0,66,83,83,0,67,79,68,69,0,68,65,84,65,0,82,79,68,65,84,65,0,83,101,103,109,101,110,116,32,110,97,109,101,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,83,101,103,109,101,110,116,32,110,97,109,101,32,115,116,97,99,107,32,105,115,32,101,109,112,116,121,0,67,111,108,108,67,111,117,110,116,32,40,38,83,101,103,109,101,110,116,83,116,97,99,107,41,32,62,32,48,0,99,99,54,53,47,115,101,103,109,101,110,116,115,46,99,0,67,83,32,38,38,32,68,83,101,103,32,33,61,32,83,69,71,95,67,79,68,69,0,67,83,32,33,61,32,48,0,73,110,118,97,108,105,100,32,100,97,116,97,32,115,101,103,109,101,110,116,0,45,0,73,110,118,97,108,105,100,32,112,114,97,103,109,97,0,85,110,107,110,111,119,110,32,112,114,97,103,109,97,32,96,37,115,39,0,39,40,39,32,101,120,112,101,99,116,101,100,0,35,112,114,97,103,109,97,32,98,115,115,115,101,103,32,105,115,32,111,98,115,111,108,101,116,101,44,32,112,108,101,97,115,101,32,117,115,101,32,35,112,114,97,103,109,97,32,98,115,115,45,110,97,109,101,32,105,110,115,116,101,97,100,0,67,111,110,115,116,97,110,116,32,105,110,116,101,103,101,114,32,101,120,112,101,99,116,101,100,0,67,104,97,114,97,99,116,101,114,32,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,67,111,109,109,97,32,101,120,112,101,99,116,101,100,0,67,104,97,114,97,99,116,101,114,32,99,111,100,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,82,101,109,97,112,112,105,110,103,32,102,114,111,109,32,48,32,105,115,32,100,97,110,103,101,114,111,117,115,32,119,105,116,104,32,115,116,114,105,110,103,32,102,117,110,99,116,105,111,110,115,0,82,101,109,97,112,112,105,110,103,32,116,111,32,48,32,99,97,110,32,109,97,107,101,32,115,116,114,105,110,103,32,102,117,110,99,116,105,111,110,115,32,115,116,111,112,32,117,110,101,120,112,101,99,116,101,100,108,121,0,35,112,114,97,103,109,97,32,99,104,101,99,107,115,116,97,99,107,32,105,115,32,111,98,115,111,108,101,116,101,44,32,112,108,101,97,115,101,32,117,115,101,32,35,112,114,97,103,109,97,32,99,104,101,99,107,45,115,116,97,99,107,32,105,110,115,116,101,97,100,0,35,112,114,97,103,109,97,32,99,111,100,101,115,101,103,32,105,115,32,111,98,115,111,108,101,116,101,44,32,112,108,101,97,115,101,32,117,115,101,32,35,112,114,97,103,109,97,32,99,111,100,101,45,110,97,109,101,32,105,110,115,116,101,97,100,0,35,112,114,97,103,109,97,32,100,97,116,97,115,101,103,32,105,115,32,111,98,115,111,108,101,116,101,44,32,112,108,101,97,115,101,32,117,115,101,32,35,112,114,97,103,109,97,32,100,97,116,97,45,110,97,109,101,32,105,110,115,116,101,97,100,0,35,112,114,97,103,109,97,32,114,101,103,118,97,114,115,32,105,115,32,111,98,115,111,108,101,116,101,44,32,112,108,101,97,115,101,32,117,115,101,32,35,112,114,97,103,109,97,32,114,101,103,105,115,116,101,114,45,118,97,114,115,32,105,110,115,116,101,97,100,0,35,112,114,97,103,109,97,32,114,111,100,97,116,97,115,101,103,32,105,115,32,111,98,115,111,108,101,116,101,44,32,112,108,101,97,115,101,32,117,115,101,32,35,112,114,97,103,109,97,32,114,111,100,97,116,97,45,110,97,109,101,32,105,110,115,116,101,97,100,0,35,112,114,97,103,109,97,32,115,105,103,110,101,100,99,104,97,114,115,32,105,115,32,111,98,115,111,108,101,116,101,44,32,112,108,101,97,115,101,32,117,115,101,32,35,112,114,97,103,109,97,32,115,105,103,110,101,100,45,99,104,97,114,115,32,105,110,115,116,101,97,100,0,35,112,114,97,103,109,97,32,115,116,97,116,105,99,108,111,99,97,108,115,32,105,115,32,111,98,115,111,108,101,116,101,44,32,112,108,101,97,115,101,32,117,115,101,32,35,112,114,97,103,109,97,32,115,116,97,116,105,99,45,108,111,99,97,108,115,32,105,110,115,116,101,97,100,0,80,114,97,103,109,97,32,101,120,112,101,99,116,115,32,97,32,119,97,114,110,105,110,103,32,110,97,109,101,32,97,115,32,102,105,114,115,116,32,97,114,103,117,109,101,110,116,0,112,111,112,0,112,117,115,104,0,67,97,110,110,111,116,32,112,111,112,44,32,115,116,97,99,107,32,105,115,32,101,109,112,116,121,0,116,114,117,101,0,102,97,108,115,101,0,73,110,118,97,108,105,100,32,112,114,97,103,109,97,32,97,114,103,117,109,101,110,116,0,67,97,110,110,111,116,32,112,117,115,104,58,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,39,41,39,32,101,120,112,101,99,116,101,100,0,85,110,101,120,112,101,99,116,101,100,32,105,110,112,117,116,32,102,111,108,108,111,119,105,110,103,32,112,114,97,103,109,97,32,100,105,114,101,99,116,105,118,101,0,80,114,97,103,109,97,32,97,114,103,117,109,101,110,116,32,109,117,115,116,32,98,101,32,111,110,101,32,111,102,32,96,111,110,39,44,32,96,111,102,102,39,44,32,96,116,114,117,101,39,32,111,114,32,96,102,97,108,115,101,39,0,73,108,108,101,103,97,108,32,115,101,103,109,101,110,116,32,110,97,109,101,58,32,96,37,115,39,0,80,114,97,103,109,97,32,97,114,103,117,109,101,110,116,32,111,117,116,32,111,102,32,98,111,117,110,100,115,32,40,37,108,100,45,37,108,100,41,0,97,108,105,103,110,0,98,115,115,45,110,97,109,101,0,98,115,115,115,101,103,0,99,104,97,114,109,97,112,0,99,104,101,99,107,45,115,116,97,99,107,0,99,104,101,99,107,115,116,97,99,107,0,99,111,100,101,45,110,97,109,101,0,99,111,100,101,115,101,103,0,99,111,100,101,115,105,122,101,0,100,97,116,97,45,110,97,109,101,0,100,97,116,97,115,101,103,0,108,111,99,97,108,45,115,116,114,105,110,103,115,0,111,112,116,105,109,105,122,101,0,114,101,103,105,115,116,101,114,45,118,97,114,115,0,114,101,103,118,97,114,97,100,100,114,0,114,101,103,118,97,114,115,0,114,111,100,97,116,97,45,110,97,109,101,0,114,111,100,97,116,97,115,101,103,0,115,105,103,110,101,100,45,99,104,97,114,115,0,115,105,103,110,101,100,99,104,97,114,115,0,115,116,97,116,105,99,45,108,111,99,97,108,115,0,115,116,97,116,105,99,108,111,99,97,108,115,0,119,97,114,110,0,119,114,105,116,97,98,108,101,45,115,116,114,105,110,103,115,0,122,112,115,121,109,0,78,111,32,105,110,102,111,32,97,98,111,117,116,32,105,110,116,101,114,110,97,108,32,102,117,110,99,116,105,111,110,32,96,37,115,39,10,0,97,100,100,121,115,112,0,97,115,108,101,97,120,49,0,97,115,108,101,97,120,50,0,97,115,108,101,97,120,51,0,97,115,108,101,97,120,52,0,97,115,114,101,97,120,49,0,97,115,114,101,97,120,50,0,97,115,114,101,97,120,51,0,97,115,114,101,97,120,52,0,98,110,101,103,101,97,120,0,98,111,111,108,103,101,0,98,111,111,108,103,116,0,98,111,111,108,108,101,0,98,111,111,108,108,116,0,98,111,111,108,117,103,101,0,99,97,108,108,97,120,0,100,101,99,101,97,120,121,0,100,101,99,115,112,49,0,100,101,99,115,112,50,0,100,101,99,115,112,51,0,100,101,99,115,112,52,0,100,101,99,115,112,53,0,100,101,99,115,112,54,0,100,101,99,115,112,55,0,100,101,99,115,112,56,0,105,110,99,115,112,49,0,105,110,99,115,112,50,0,105,110,99,115,112,51,0,105,110,99,115,112,52,0,105,110,99,115,112,53,0,105,110,99,115,112,54,0,105,110,99,115,112,55,0,105,110,99,115,112,56,0,109,117,108,97,120,49,48,0,109,117,108,97,120,51,0,109,117,108,97,120,53,0,109,117,108,97,120,54,0,109,117,108,97,120,55,0,109,117,108,97,120,57,0,114,101,103,115,119,97,112,0,114,101,103,115,119,97,112,49,0,114,101,103,115,119,97,112,50,0,114,101,116,117,114,110,48,0,114,101,116,117,114,110,49,0,115,104,108,101,97,120,49,0,115,104,108,101,97,120,50,0,115,104,108,101,97,120,51,0,115,104,108,101,97,120,52,0,115,104,114,101,97,120,49,0,115,104,114,101,97,120,50,0,115,104,114,101,97,120,51,0,115,104,114,101,97,120,52,0,116,111,115,108,99,109,112,0,116,111,115,110,101,48,48,0,116,111,115,117,103,101,48,48,0,116,111,115,117,103,116,48,48,0,116,111,115,117,108,101,48,48,0,116,111,115,117,108,116,48,48,0,116,115,116,101,97,120,0,117,116,115,116,101,97,120,0,71,101,116,82,101,103,73,110,102,111,50,58,32,78,111,32,110,101,120,116,32,101,110,116,114,121,33,0,98,111,111,108,0,101,113,0,0,110,101,0,0,103,116,0,0,103,101,0,0,108,116,0,0,108,101,0,0,117,103,116,0,117,103,101,0,117,108,116,0,117,108,101,0,116,111,115,0,97,120,0,46,105,0,46,115,0,79,117,116,112,117,116,70,105,108,101,32,61,61,32,48,32,38,38,32,79,117,116,112,117,116,70,105,108,101,110,97,109,101,32,33,61,32,48,0,99,99,54,53,47,111,117,116,112,117,116,46,99,0,67,97,110,110,111,116,32,111,112,101,110,32,111,117,116,112,117,116,32,102,105,108,101,32,96,37,115,39,58,32,37,115,0,79,112,101,110,101,100,32,111,117,116,112,117,116,32,102,105,108,101,32,96,37,115,39,10,0,79,117,116,112,117,116,70,105,108,101,32,61,61,32,48,0,67,97,110,110,111,116,32,111,112,101,110,32,100,101,98,117,103,32,111,117,116,112,117,116,32,102,105,108,101,32,96,37,115,39,58,32,37,115,0,79,112,101,110,101,100,32,100,101,98,117,103,32,111,117,116,112,117,116,32,102,105,108,101,32,96,37,115,39,10,0,79,117,116,112,117,116,70,105,108,101,32,33,61,32,48,0,67,97,110,110,111,116,32,119,114,105,116,101,32,116,111,32,111,117,116,112,117,116,32,102,105,108,101,32,40,100,105,115,107,32,102,117,108,108,63,41,0,67,108,111,115,101,100,32,111,117,116,112,117,116,32,102,105,108,101,32,96,37,115,39,10,0,95,95,67,67,54,53,95,95,0,95,95,67,67,54,53,95,83,84,68,95,67,56,57,95,95,0,95,95,67,67,54,53,95,83,84,68,95,67,57,57,95,95,0,95,95,67,67,54,53,95,83,84,68,95,67,67,54,53,95,95,0,95,95,67,67,54,53,95,83,84,68,95,95,0,95,95,79,80,84,95,95,0,95,95,79,80,84,95,105,95,95,0,95,95,79,80,84,95,114,95,95,0,95,95,79,80,84,95,115,95,95,0,74,97,110,0,70,101,98,0,77,97,114,0,65,112,114,0,77,97,121,0,74,117,110,0,74,117,108,0,65,117,103,0,83,101,112,0,79,99,116,0,78,111,118,0,68,101,99,0,34,37,115,32,37,50,100,32,37,100,34,0,34,37,72,58,37,77,58,37,83,34,0,95,95,68,65,84,69,95,95,0,95,95,84,73,77,69,95,95,0,95,95,83,84,68,67,95,72,79,83,84,69,68,95,95,0,37,46,42,115,10,0,95,95,97,115,109,95,95,32,105,115,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,0,73,108,108,101,103,97,108,32,116,121,112,101,32,102,111,114,32,118,97,114,105,97,98,108,101,32,96,37,115,39,0,66,111,100,121,32,102,111,114,32,102,117,110,99,116,105,111,110,32,96,37,115,39,32,104,97,115,32,97,108,114,101,97,100,121,32,98,101,101,110,32,100,101,102,105,110,101,100,0,73,110,118,97,108,105,100,32,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,58,32,96,37,99,39,0,65,116,116,114,105,98,117,116,101,32,110,97,109,101,32,101,120,112,101,99,116,101,100,0,73,108,108,101,103,97,108,32,97,116,116,114,105,98,117,116,101,58,32,96,37,115,39,0,114,101,103,115,97,118,101,0,114,101,103,115,97,118,101,43,49,0,97,110,121,0,79,112,116,105,109,105,122,97,116,105,111,110,32,115,116,101,112,32,96,37,115,39,32,110,111,116,32,102,111,117,110,100,0,79,112,116,85,110,117,115,101,100,83,116,111,114,101,115,0,79,112,116,85,110,117,115,101,100,76,111,97,100,115,0,79,112,116,84,114,97,110,115,102,101,114,115,52,0,79,112,116,84,114,97,110,115,102,101,114,115,51,0,79,112,116,84,114,97,110,115,102,101,114,115,50,0,79,112,116,84,114,97,110,115,102,101,114,115,49,0,79,112,116,84,101,115,116,50,0,79,112,116,84,101,115,116,49,0,79,112,116,83,117,98,51,0,79,112,116,83,117,98,50,0,79,112,116,83,117,98,49,0,79,112,116,83,116,111,114,101,76,111,97,100,0,79,112,116,83,116,111,114,101,53,0,79,112,116,83,116,111,114,101,52,0,79,112,116,83,116,111,114,101,51,0,79,112,116,83,116,111,114,101,50,0,79,112,116,83,116,111,114,101,49,0,79,112,116,83,116,97,99,107,80,116,114,79,112,115,0,100,101,99,115,112,0,115,117,98,121,115,112,0,100,101,99,115,112,37,117,0,79,112,116,83,116,97,99,107,79,112,115,0,79,112,116,83,105,122,101,50,0,79,112,116,83,105,122,101,49,0,79,112,116,83,104,105,102,116,54,0,79,112,116,83,104,105,102,116,53,0,79,112,116,83,104,105,102,116,52,0,79,112,116,83,104,105,102,116,51,0,79,112,116,83,104,105,102,116,50,0,79,112,116,83,104,105,102,116,49,0,79,112,116,82,84,83,74,117,109,112,115,50,0,79,112,116,82,84,83,74,117,109,112,115,49,0,79,112,116,82,84,83,0,79,112,116,80,117,115,104,80,111,112,0,79,112,116,80,117,115,104,50,0,79,112,116,80,117,115,104,49,0,79,112,116,80,116,114,83,116,111,114,101,51,0,79,112,116,80,116,114,83,116,111,114,101,50,0,79,112,116,80,116,114,83,116,111,114,101,49,0,79,112,116,80,116,114,76,111,97,100,55,0,79,112,116,80,116,114,76,111,97,100,54,0,79,112,116,80,116,114,76,111,97,100,53,0,79,112,116,80,116,114,76,111,97,100,52,0,79,112,116,80,116,114,76,111,97,100,51,0,79,112,116,80,116,114,76,111,97,100,50,0,79,112,116,80,116,114,76,111,97,100,49,55,0,79,112,116,80,116,114,76,111,97,100,49,54,0,79,112,116,80,116,114,76,111,97,100,49,53,0,79,112,116,80,116,114,76,111,97,100,49,52,0,79,112,116,80,116,114,76,111,97,100,49,51,0,79,112,116,80,116,114,76,111,97,100,49,50,0,79,112,116,80,116,114,76,111,97,100,49,49,0,79,112,116,80,116,114,76,111,97,100,49,0,79,112,116,80,114,101,99,97,108,99,0,79,112,116,78,101,103,65,88,50,0,79,112,116,78,101,103,65,88,49,0,79,112,116,76,111,97,100,51,0,79,112,116,76,111,97,100,50,0,79,112,116,76,111,97,100,49,0,79,112,116,74,117,109,112,84,97,114,103,101,116,51,0,79,112,116,74,117,109,112,84,97,114,103,101,116,50,0,79,112,116,74,117,109,112,84,97,114,103,101,116,49,0,79,112,116,74,117,109,112,67,97,115,99,97,100,101,115,0,79,112,116,73,110,100,76,111,97,100,115,50,0,79,112,116,73,110,100,76,111,97,100,115,49,0,79,112,116,68,117,112,76,111,97,100,115,0,79,112,116,68,101,99,111,117,112,108,101,0,79,112,116,68,101,97,100,74,117,109,112,115,0,79,112,116,68,101,97,100,67,111,100,101,0,79,112,116,67,111,110,100,66,114,97,110,99,104,101,115,50,0,79,112,116,67,111,110,100,66,114,97,110,99,104,101,115,49,0,79,112,116,67,111,109,112,108,65,88,49,0,79,112,116,67,109,112,57,0,79,112,116,67,109,112,56,0,79,112,116,67,109,112,55,0,79,112,116,67,109,112,54,0,79,112,116,67,109,112,53,0,79,112,116,67,109,112,52,0,79,112,116,67,109,112,51,0,79,112,116,67,109,112,50,0,79,112,116,67,109,112,49,0,79,112,116,66,114,97,110,99,104,68,105,115,116,0,79,112,116,66,111,111,108,84,114,97,110,115,0,79,112,116,66,78,101,103,65,88,52,0,79,112,116,66,78,101,103,65,88,51,0,79,112,116,66,78,101,103,65,88,50,0,79,112,116,66,78,101,103,65,88,49,0,79,112,116,66,78,101,103,65,50,0,79,112,116,66,78,101,103,65,49,0,79,112,116,65,100,100,54,0,79,112,116,65,100,100,53,0,79,112,116,65,100,100,52,0,79,112,116,65,100,100,51,0,79,112,116,65,100,100,50,0,79,112,116,65,100,100,49,0,79,112,116,54,53,67,48,50,83,116,111,114,101,115,0,79,112,116,54,53,67,48,50,73,110,100,0,79,112,116,54,53,67,48,50,66,105,116,79,112,115,0,97,110,121,10,0,67,67,54,53,95,79,80,84,83,84,65,84,83,0,37,51,49,115,32,37,108,117,32,37,42,117,32,37,108,117,32,37,42,117,0,82,117,110,110,105,110,103,32,111,112,116,105,109,105,122,101,114,32,102,111,114,32,102,117,110,99,116,105,111,110,32,96,37,115,39,10,0,82,117,110,110,105,110,103,32,111,112,116,105,109,105,122,101,114,32,102,111,114,32,103,108,111,98,97,108,32,99,111,100,101,32,115,101,103,109,101,110,116,10,0,103,108,111,98,97,108,0,46,111,112,116,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,10,0,60,103,108,111,98,97,108,62,0,73,110,105,116,105,97,108,32,99,111,100,101,32,102,111,114,32,102,117,110,99,116,105,111,110,32,96,37,115,39,58,10,0,59,32,79,112,116,105,109,105,122,101,114,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,84,111,116,97,108,32,32,32,32,32,32,76,97,115,116,32,32,32,32,32,32,32,84,111,116,97,108,32,32,32,32,32,32,76,97,115,116,10,59,32,32,32,83,116,101,112,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,82,117,110,115,32,32,32,32,32,32,32,82,117,110,115,32,32,32,32,32,32,32,32,67,104,103,32,32,32,32,32,32,32,67,104,103,10,0,37,45,50,48,115,32,37,49,48,108,117,32,37,49,48,108,117,32,37,49,48,108,117,32,37,49,48,108,117,10,0,65,112,112,108,105,101,100,32,37,115,58,32,37,117,32,99,104,97,110,103,101,115,10,0,67,111,100,101,32,97,102,116,101,114,32,97,112,112,108,121,105,110,103,32,96,37,115,39,58,10,0,67,97,110,110,111,116,32,117,115,101,32,111,112,116,105,111,110,32,96,37,115,39,32,116,119,105,99,101,0,97,100,100,105,116,105,111,110,97,108,32,102,105,108,101,32,115,112,101,99,115,32,105,103,110,111,114,101,100,10,0,78,111,32,105,110,112,117,116,32,102,105,108,101,115,0,87,114,111,116,101,32,111,117,116,112,117,116,32,116,111,32,96,37,115,39,10,0,37,115,32,86,37,115,10,0,67,97,110,110,111,116,32,117,115,101,32,96,109,111,100,117,108,101,39,32,97,115,32,97,32,116,97,114,103,101,116,32,102,111,114,32,116,104,101,32,99,111,109,112,105,108,101,114,0,95,95,65,84,65,82,73,53,50,48,48,95,95,0,95,95,65,84,65,82,73,95,95,0,95,95,65,84,65,82,73,88,76,95,95,0,95,95,67,66,77,95,95,0,95,95,67,49,54,95,95,0,95,95,67,54,52,95,95,0,95,95,86,73,67,50,48,95,95,0,95,95,67,49,50,56,95,95,0,95,95,80,76,85,83,52,95,95,0,95,95,67,66,77,53,49,48], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([95,95,0,95,95,67,66,77,54,49,48,95,95,0,95,95,80,69,84,95,95,0,95,95,66,66,67,95,95,0,95,95,65,80,80,76,69,50,95,95,0,95,95,65,80,80,76,69,50,69,78,72,95,95,0,95,95,71,65,77,65,84,69,95,95,0,95,95,71,69,79,83,95,95,0,95,95,71,69,79,83,95,67,66,77,95,95,0,95,95,71,69,79,83,95,65,80,80,76,69,95,95,0,95,95,76,85,78,73,88,95,95,0,95,95,65,84,77,79,83,95,95,0,95,95,78,69,83,95,95,0,95,95,83,85,80,69,82,86,73,83,73,79,78,95,95,0,95,95,76,89,78,88,95,95,0,95,95,83,73,77,54,53,48,50,95,95,0,95,95,83,73,77,54,53,67,48,50,95,95,0,95,95,79,83,73,67,49,80,95,95,0,95,95,80,67,69,95,95,0,85,110,107,110,111,119,110,32,116,97,114,103,101,116,32,115,121,115,116,101,109,32,116,121,112,101,32,37,100,0,85,115,97,103,101,58,32,37,115,32,91,111,112,116,105,111,110,115,93,32,102,105,108,101,10,83,104,111,114,116,32,111,112,116,105,111,110,115,58,10,32,32,45,67,108,9,9,9,9,77,97,107,101,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,32,115,116,97,116,105,99,10,32,32,45,68,115,121,109,91,61,100,101,102,110,93,9,9,9,68,101,102,105,110,101,32,97,32,115,121,109,98,111,108,10,32,32,45,69,9,9,9,9,83,116,111,112,32,97,102,116,101,114,32,116,104,101,32,112,114,101,112,114,111,99,101,115,115,105,110,103,32,115,116,97,103,101,10,32,32,45,73,32,100,105,114,9,9,9,83,101,116,32,97,110,32,105,110,99,108,117,100,101,32,100,105,114,101,99,116,111,114,121,32,115,101,97,114,99,104,32,112,97,116,104,10,32,32,45,79,9,9,9,9,79,112,116,105,109,105,122,101,32,99,111,100,101,10,32,32,45,79,105,9,9,9,9,79,112,116,105,109,105,122,101,32,99,111,100,101,44,32,105,110,108,105,110,101,32,109,111,114,101,32,99,111,100,101,10,32,32,45,79,114,9,9,9,9,69,110,97,98,108,101,32,114,101,103,105,115,116,101,114,32,118,97,114,105,97,98,108,101,115,10,32,32,45,79,115,9,9,9,9,73,110,108,105,110,101,32,115,111,109,101,32,107,110,111,119,110,32,102,117,110,99,116,105,111,110,115,10,32,32,45,84,9,9,9,9,73,110,99,108,117,100,101,32,115,111,117,114,99,101,32,97,115,32,99,111,109,109,101,110,116,10,32,32,45,86,9,9,9,9,80,114,105,110,116,32,116,104,101,32,99,111,109,112,105,108,101,114,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,10,32,32,45,87,32,119,97,114,110,105,110,103,91,44,46,46,46,93,9,9,83,117,112,112,114,101,115,115,32,119,97,114,110,105,110,103,115,10,32,32,45,100,9,9,9,9,68,101,98,117,103,32,109,111,100,101,10,32,32,45,103,9,9,9,9,65,100,100,32,100,101,98,117,103,32,105,110,102,111,32,116,111,32,111,98,106,101,99,116,32,102,105,108,101,10,32,32,45,104,9,9,9,9,72,101,108,112,32,40,116,104,105,115,32,116,101,120,116,41,10,32,32,45,106,9,9,9,9,68,101,102,97,117,108,116,32,99,104,97,114,97,99,116,101,114,115,32,97,114,101,32,115,105,103,110,101,100,10,32,32,45,109,109,32,109,111,100,101,108,9,9,9,83,101,116,32,116,104,101,32,109,101,109,111,114,121,32,109,111,100,101,108,10,32,32,45,111,32,110,97,109,101,9,9,9,78,97,109,101,32,116,104,101,32,111,117,116,112,117,116,32,102,105,108,101,10,32,32,45,114,9,9,9,9,69,110,97,98,108,101,32,114,101,103,105,115,116,101,114,32,118,97,114,105,97,98,108,101,115,10,32,32,45,116,32,115,121,115,9,9,9,83,101,116,32,116,104,101,32,116,97,114,103,101,116,32,115,121,115,116,101,109,10,32,32,45,118,9,9,9,9,73,110,99,114,101,97,115,101,32,118,101,114,98,111,115,105,116,121,10,10,76,111,110,103,32,111,112,116,105,111,110,115,58,10,32,32,45,45,97,100,100,45,115,111,117,114,99,101,9,9,9,73,110,99,108,117,100,101,32,115,111,117,114,99,101,32,97,115,32,99,111,109,109,101,110,116,10,32,32,45,45,97,108,108,45,99,100,101,99,108,9,9,9,77,97,107,101,32,102,117,110,99,116,105,111,110,115,32,100,101,102,97,117,108,116,32,116,111,32,95,95,99,100,101,99,108,95,95,10,32,32,45,45,98,115,115,45,110,97,109,101,32,115,101,103,9,9,83,101,116,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,66,83,83,32,115,101,103,109,101,110,116,10,32,32,45,45,99,104,101,99,107,45,115,116,97,99,107,9,9,9,71,101,110,101,114,97,116,101,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,99,104,101,99,107,115,10,32,32,45,45,99,111,100,101,45,110,97,109,101,32,115,101,103,9,9,83,101,116,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,67,79,68,69,32,115,101,103,109,101,110,116,10,32,32,45,45,99,111,100,101,115,105,122,101,32,120,9,9,9,65,99,99,101,112,116,32,108,97,114,103,101,114,32,99,111,100,101,32,98,121,32,102,97,99,116,111,114,32,120,10,32,32,45,45,99,112,117,32,116,121,112,101,9,9,9,83,101,116,32,99,112,117,32,116,121,112,101,32,40,54,53,48,50,44,32,54,53,99,48,50,41,10,32,32,45,45,99,114,101,97,116,101,45,100,101,112,32,110,97,109,101,9,9,67,114,101,97,116,101,32,97,32,109,97,107,101,32,100,101,112,101,110,100,101,110,99,121,32,102,105,108,101,10,32,32,45,45,99,114,101,97,116,101,45,102,117,108,108,45,100,101,112,32,110,97,109,101,9,67,114,101,97,116,101,32,97,32,102,117,108,108,32,109,97,107,101,32,100,101,112,101,110,100,101,110,99,121,32,102,105,108,101,10,32,32,45,45,100,97,116,97,45,110,97,109,101,32,115,101,103,9,9,83,101,116,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,68,65,84,65,32,115,101,103,109,101,110,116,10,32,32,45,45,100,101,98,117,103,9,9,9,68,101,98,117,103,32,109,111,100,101,10,32,32,45,45,100,101,98,117,103,45,105,110,102,111,9,9,9,65,100,100,32,100,101,98,117,103,32,105,110,102,111,32,116,111,32,111,98,106,101,99,116,32,102,105,108,101,10,32,32,45,45,100,101,98,117,103,45,111,112,116,32,110,97,109,101,9,9,68,101,98,117,103,32,111,112,116,105,109,105,122,97,116,105,111,110,32,115,116,101,112,115,10,32,32,45,45,100,101,112,45,116,97,114,103,101,116,32,116,97,114,103,101,116,9,9,85,115,101,32,116,104,105,115,32,100,101,112,101,110,100,101,110,99,121,32,116,97,114,103,101,116,10,32,32,45,45,100,105,115,97,98,108,101,45,111,112,116,32,110,97,109,101,9,9,68,105,115,97,98,108,101,32,97,110,32,111,112,116,105,109,105,122,97,116,105,111,110,32,115,116,101,112,10,32,32,45,45,101,110,97,98,108,101,45,111,112,116,32,110,97,109,101,9,9,69,110,97,98,108,101,32,97,110,32,111,112,116,105,109,105,122,97,116,105,111,110,32,115,116,101,112,10,32,32,45,45,104,101,108,112,9,9,9,72,101,108,112,32,40,116,104,105,115,32,116,101,120,116,41,10,32,32,45,45,105,110,99,108,117,100,101,45,100,105,114,32,100,105,114,9,9,83,101,116,32,97,110,32,105,110,99,108,117,100,101,32,100,105,114,101,99,116,111,114,121,32,115,101,97,114,99,104,32,112,97,116,104,10,32,32,45,45,108,105,115,116,45,111,112,116,45,115,116,101,112,115,9,9,76,105,115,116,32,97,108,108,32,111,112,116,105,109,105,122,101,114,32,115,116,101,112,115,32,97,110,100,32,101,120,105,116,10,32,32,45,45,108,105,115,116,45,119,97,114,110,105,110,103,115,9,9,76,105,115,116,32,97,118,97,105,108,97,98,108,101,32,119,97,114,110,105,110,103,32,116,121,112,101,115,32,102,111,114,32,45,87,10,32,32,45,45,108,111,99,97,108,45,115,116,114,105,110,103,115,9,9,69,109,105,116,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,115,32,105,109,109,101,100,105,97,116,101,108,121,10,32,32,45,45,109,101,109,111,114,121,45,109,111,100,101,108,32,109,111,100,101,108,9,9,83,101,116,32,116,104,101,32,109,101,109,111,114,121,32,109,111,100,101,108,10,32,32,45,45,114,101,103,105,115,116,101,114,45,115,112,97,99,101,32,98,9,9,83,101,116,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,32,102,111,114,32,114,101,103,105,115,116,101,114,32,118,97,114,105,97,98,108,101,115,10,32,32,45,45,114,101,103,105,115,116,101,114,45,118,97,114,115,9,9,69,110,97,98,108,101,32,114,101,103,105,115,116,101,114,32,118,97,114,105,97,98,108,101,115,10,32,32,45,45,114,111,100,97,116,97,45,110,97,109,101,32,115,101,103,9,9,83,101,116,32,116,104,101,32,110,97,109,101,32,111,102,32,116,104,101,32,82,79,68,65,84,65,32,115,101,103,109,101,110,116,10,32,32,45,45,115,105,103,110,101,100,45,99,104,97,114,115,9,9,68,101,102,97,117,108,116,32,99,104,97,114,97,99,116,101,114,115,32,97,114,101,32,115,105,103,110,101,100,10,32,32,45,45,115,116,97,110,100,97,114,100,32,115,116,100,9,9,76,97,110,103,117,97,103,101,32,115,116,97,110,100,97,114,100,32,40,99,56,57,44,32,99,57,57,44,32,99,99,54,53,41,10,32,32,45,45,115,116,97,116,105,99,45,108,111,99,97,108,115,9,9,77,97,107,101,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,32,115,116,97,116,105,99,10,32,32,45,45,116,97,114,103,101,116,32,115,121,115,9,9,9,83,101,116,32,116,104,101,32,116,97,114,103,101,116,32,115,121,115,116,101,109,10,32,32,45,45,118,101,114,98,111,115,101,9,9,9,73,110,99,114,101,97,115,101,32,118,101,114,98,111,115,105,116,121,10,32,32,45,45,118,101,114,115,105,111,110,9,9,9,80,114,105,110,116,32,116,104,101,32,99,111,109,112,105,108,101,114,32,118,101,114,115,105,111,110,32,110,117,109,98,101,114,10,32,32,45,45,119,114,105,116,97,98,108,101,45,115,116,114,105,110,103,115,9,9,77,97,107,101,32,115,116,114,105,110,103,32,108,105,116,101,114,97,108,115,32,119,114,105,116,97,98,108,101,10,0,45,45,97,100,100,45,115,111,117,114,99,101,0,45,45,97,108,108,45,99,100,101,99,108,0,45,45,98,115,115,45,110,97,109,101,0,45,45,99,104,101,99,107,45,115,116,97,99,107,0,45,45,99,111,100,101,45,110,97,109,101,0,45,45,99,111,100,101,115,105,122,101,0,45,45,99,112,117,0,45,45,99,114,101,97,116,101,45,100,101,112,0,45,45,99,114,101,97,116,101,45,102,117,108,108,45,100,101,112,0,45,45,100,97,116,97,45,110,97,109,101,0,45,45,100,101,98,117,103,0,45,45,100,101,98,117,103,45,105,110,102,111,0,45,45,100,101,98,117,103,45,111,112,116,0,45,45,100,101,98,117,103,45,111,112,116,45,111,117,116,112,117,116,0,45,45,100,101,112,45,116,97,114,103,101,116,0,45,45,100,105,115,97,98,108,101,45,111,112,116,0,45,45,101,110,97,98,108,101,45,111,112,116,0,45,45,104,101,108,112,0,45,45,105,110,99,108,117,100,101,45,100,105,114,0,45,45,108,105,115,116,45,111,112,116,45,115,116,101,112,115,0,45,45,108,105,115,116,45,119,97,114,110,105,110,103,115,0,45,45,108,111,99,97,108,45,115,116,114,105,110,103,115,0,45,45,109,101,109,111,114,121,45,109,111,100,101,108,0,45,45,114,101,103,105,115,116,101,114,45,115,112,97,99,101,0,45,45,114,101,103,105,115,116,101,114,45,118,97,114,115,0,45,45,114,111,100,97,116,97,45,110,97,109,101,0,45,45,115,105,103,110,101,100,45,99,104,97,114,115,0,45,45,115,116,97,110,100,97,114,100,0,45,45,115,116,97,116,105,99,45,108,111,99,97,108,115,0,45,45,116,97,114,103,101,116,0,45,45,118,101,114,98,111,115,101,0,45,45,118,101,114,115,105,111,110,0,45,45,119,114,105,116,97,98,108,101,45,115,116,114,105,110,103,115,0,79,112,116,105,111,110,32,37,115,32,103,105,118,101,110,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,0,83,101,103,109,101,110,116,32,110,97,109,101,32,96,37,115,39,32,105,115,32,105,110,118,97,108,105,100,0,37,117,0,65,114,103,117,109,101,110,116,32,102,111,114,32,111,112,116,105,111,110,32,37,115,32,105,115,32,105,110,118,97,108,105,100,0,85,110,107,110,111,119,110,32,109,101,109,111,114,121,32,109,111,100,101,108,58,32,37,115,0,85,110,115,117,112,112,111,114,116,101,100,32,109,101,109,111,114,121,32,109,111,100,101,108,58,32,37,115,0,67,97,110,110,111,116,32,111,112,101,110,32,96,37,115,39,58,32,37,115,0,37,117,37,99,0,65,114,103,117,109,101,110,116,32,102,111,114,32,37,115,32,105,115,32,105,110,118,97,108,105,100,0,43,43,76,101,120,105,99,97,108,76,101,118,101,108,32,61,61,32,76,69,88,95,76,69,86,69,76,95,71,76,79,66,65,76,0,99,99,54,53,47,115,121,109,116,97,98,46,99,0,76,101,120,105,99,97,108,76,101,118,101,108,45,45,32,61,61,32,76,69,88,95,76,69,86,69,76,95,71,76,79,66,65,76,0,71,108,111,98,97,108,32,115,121,109,98,111,108,32,116,97,98,108,101,0,71,108,111,98,97,108,32,116,97,103,32,116,97,98,108,101,0,40,101,109,112,116,121,41,10,0,10,10,10,0,80,97,114,97,109,101,116,101,114,32,96,37,115,39,32,105,115,32,110,101,118,101,114,32,117,115,101,100,0,96,37,115,39,32,105,115,32,100,101,102,105,110,101,100,32,98,117,116,32,110,101,118,101,114,32,117,115,101,100,0,85,110,100,101,102,105,110,101,100,32,108,97,98,101,108,58,32,96,37,115,39,0,83,116,114,117,99,116,32,33,61,32,48,0,84,121,112,101,32,61,61,32,83,67,95,83,84,82,85,67,84,32,124,124,32,84,121,112,101,32,61,61,32,83,67,95,85,78,73,79,78,0,77,117,108,116,105,112,108,101,32,100,101,102,105,110,105,116,105,111,110,32,102,111,114,32,96,37,115,39,0,76,97,98,101,108,32,96,37,115,39,32,105,115,32,100,101,102,105,110,101,100,32,109,111,114,101,32,116,104,97,110,32,111,110,99,101,0,73,110,118,97,108,105,100,32,102,108,97,103,115,32,105,110,32,65,100,100,76,111,99,97,108,83,121,109,58,32,37,48,52,88,0,67,111,110,102,108,105,99,116,105,110,103,32,116,121,112,101,115,32,102,111,114,32,96,37,115,39,0,115,116,97,116,105,99,32,100,101,99,108,97,114,97,116,105,111,110,32,102,111,108,108,111,119,115,32,110,111,110,45,115,116,97,116,105,99,32,100,101,99,108,97,114,97,116,105,111,110,32,111,102,32,96,37,115,39,46,0,112,117,98,108,105,99,32,100,101,99,108,97,114,97,116,105,111,110,32,102,111,108,108,111,119,115,32,115,116,97,116,105,99,32,100,101,99,108,97,114,97,116,105,111,110,32,111,102,32,96,37,115,39,46,0,9,46,100,98,103,9,9,115,121,109,0,9,46,100,98,103,9,115,121,109,0,37,115,44,32,34,37,115,34,44,32,34,48,48,34,44,32,97,117,116,111,44,32,37,100,0,37,115,44,32,34,37,115,34,44,32,34,48,48,34,44,32,114,101,103,105,115,116,101,114,44,32,34,114,101,103,98,97,110,107,34,44,32,37,100,0,37,115,44,32,34,37,115,34,44,32,34,48,48,34,44,32,37,115,44,32,34,37,115,34,0,59,0,59,32,70,105,108,101,32,103,101,110,101,114,97,116,101,100,32,98,121,32,99,99,54,53,32,118,32,37,115,0,9,46,102,111,112,116,9,9,99,111,109,112,105,108,101,114,44,34,99,99,54,53,32,118,32,37,115,34,0,9,46,115,101,116,99,112,117,9,9,34,54,53,48,50,34,0,9,46,115,101,116,99,112,117,9,9,34,54,53,48,50,88,34,0,9,46,115,101,116,99,112,117,9,9,34,54,53,83,67,48,50,34,0,9,46,115,101,116,99,112,117,9,9,34,54,53,67,48,50,34,0,9,46,115,101,116,99,112,117,9,9,34,54,53,56,49,54,34,0,9,46,115,101,116,99,112,117,9,9,34,72,85,67,54,50,56,48,34,0,85,110,107,110,111,119,110,32,67,80,85,58,32,37,100,0,9,46,115,109,97,114,116,9,9,111,110,0,9,46,97,117,116,111,105,109,112,111,114,116,9,111,110,0,9,46,99,97,115,101,9,9,111,110,0,111,110,0,111,102,102,0,9,46,100,101,98,117,103,105,110,102,111,9,37,115,0,9,46,105,109,112,111,114,116,122,112,9,115,112,44,32,115,114,101,103,44,32,114,101,103,115,97,118,101,44,32,114,101,103,98,97,110,107,0,9,46,105,109,112,111,114,116,122,112,9,116,109,112,49,44,32,116,109,112,50,44,32,116,109,112,51,44,32,116,109,112,52,44,32,112,116,114,49,44,32,112,116,114,50,44,32,112,116,114,51,44,32,112,116,114,52,0,9,46,109,97,99,112,97,99,107,9,108,111,110,103,98,114,97,110,99,104,0,9,46,100,98,103,9,9,102,105,108,101,44,32,34,37,115,34,44,32,37,108,117,44,32,37,108,117,0,46,115,101,103,109,101,110,116,9,34,37,115,34,0,70,108,111,97,116,105,110,103,32,112,111,105,110,116,32,116,121,112,101,32,105,115,32,99,117,114,114,101,110,116,108,121,32,117,110,115,117,112,112,111,114,116,101,100,0,73,110,118,97,108,105,100,32,116,121,112,101,32,105,110,32,67,70,32,102,108,97,103,115,58,32,37,48,52,88,44,32,116,121,112,101,32,61,32,37,117,0,37,115,9,58,61,9,37,115,43,37,108,100,0,95,37,115,58,0,9,46,101,120,112,111,114,116,122,112,9,95,37,115,0,9,46,101,120,112,111,114,116,9,9,95,37,115,0,9,46,105,109,112,111,114,116,122,112,9,95,37,115,0,9,46,105,109,112,111,114,116,9,9,95,37,115,0,9,46,102,111,114,99,101,105,109,112,111,114,116,9,95,95,83,84,65,82,84,85,80,95,95,0,9,46,102,111,114,99,101,105,109,112,111,114,116,9,105,110,105,116,109,97,105,110,97,114,103,115,0,106,115,114,32,101,110,116,101,114,0,106,115,114,32,108,101,97,118,101,0,108,100,121,32,35,36,37,48,50,88,0,106,115,114,32,108,101,97,118,101,121,0,114,116,115,0,112,104,97,0,108,100,97,32,35,36,37,48,50,88,0,99,108,99,0,97,100,99,32,115,112,0,115,116,97,32,115,112,0,97,100,99,32,115,112,43,49,0,115,116,97,32,115,112,43,49,0,112,108,97,0,106,115,114,32,97,100,100,121,115,112,0,106,115,114,32,105,110,99,115,112,37,117,0,84,111,111,32,109,97,110,121,32,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,108,100,120,32,35,36,37,48,50,88,0,106,115,114,32,114,101,103,115,119,97,112,49,0,108,100,97,32,40,115,112,41,44,121,0,108,100,120,32,114,101,103,98,97,110,107,37,43,100,0,115,116,97,32,114,101,103,98,97,110,107,37,43,100,0,116,120,97,0,115,116,97,32,40,115,112,41,44,121,0,106,115,114,32,114,101,103,115,119,97,112,50,0,106,115,114,32,114,101,103,115,119,97,112,0,108,100,97,32,114,101,103,98,97,110,107,37,43,100,0,106,115,114,32,112,117,115,104,97,0,106,115,114,32,112,117,115,104,97,120,0,108,100,97,32,114,101,103,98,97,110,107,37,43,100,44,120,0,100,101,121,0,100,101,120,0,98,110,101,32,37,115,0,108,100,97,32,115,112,0,115,101,99,0,115,98,99,32,35,36,37,48,50,88,0,108,100,97,32,115,112,43,49,0,106,115,114,32,115,117,98,121,115,112,0,106,115,114,32,100,101,99,115,112,37,117,0,105,110,121,0,115,116,97,32,114,101,103,98,97,110,107,37,43,100,44,121,0,99,112,121,32,35,36,37,48,50,88,0,115,116,120,32,116,109,112,49,0,115,116,97,32,114,101,103,98,97,110,107,37,43,100,44,120,0,98,112,108,32,37,115,0,108,100,120,32,116,109,112,49,0,115,116,120,32,115,114,101,103,0,115,116,120,32,115,114,101,103,43,49,0,115,116,97,32,115,114,101,103,0,115,116,97,32,115,114,101,103,43,49,0,66,49,32,61,61,32,66,51,0,99,99,54,53,47,99,111,100,101,103,101,110,46,99,0,66,49,32,61,61,32,66,52,0,108,100,97,32,35,60,40,37,115,41,0,108,100,120,32,35,62,40,37,115,41,0,95,37,115,37,43,108,100,0,95,37,115,0,73,110,118,97,108,105,100,32,97,100,100,114,101,115,115,32,102,108,97,103,115,58,32,37,48,52,88,0,108,100,97,32,37,115,0,108,100,120,32,35,36,48,48,0,111,114,97,32,37,115,43,49,0,108,100,120,32,37,115,43,49,0,108,100,97,32,37,115,43,51,0,111,114,97,32,37,115,43,50,0,111,114,97,32,37,115,43,48,0,108,100,97,32,37,115,43,50,0,111,114,97,32,40,115,112,41,44,121,0,106,115,114,32,108,100,97,120,121,115,112,0,106,115,114,32,108,100,101,97,120,121,115,112,0,106,115,114,32,117,116,115,116,101,97,120,0,106,115,114,32,116,115,116,101,97,120,0,116,97,120,0,111,114,97,32,116,109,112,49,0,106,115,114,32,108,100,97,117,105,100,120,0,106,115,114,32,108,100,97,105,100,120,0,115,116,97,32,112,116,114,49,0,115,116,120,32,112,116,114,49,43,49,0,108,100,97,32,40,112,116,114,49,41,44,121,0,111,114,97,32,40,112,116,114,49,41,44,121,0,106,115,114,32,108,100,97,120,105,100,120,0,106,115,114,32,108,100,101,97,120,105,100,120,0,105,110,97,0,97,100,99,32,35,36,37,48,50,88,0,105,110,120,0,106,115,114,32,105,110,99,97,120,37,108,117,0,106,115,114,32,105,110,99,97,120,121,0,98,99,99,32,37,115,0,106,115,114,32,105,110,99,101,97,120,121,0,106,115,114,32,37,115,0,106,115,114,32,112,117,115,104,101,97,120,0,108,100,120,32,115,112,43,49,0,106,115,114,32,108,101,97,97,48,115,112,0,106,115,114,32,108,101,97,97,120,115,112,0,83,116,97,99,107,80,116,114,32,60,61,32,48,0,100,101,97,0,106,115,114,32,100,101,99,97,120,37,100,0,106,115,114,32,100,101,99,97,120,121,0,98,99,115,32,37,115,0,106,115,114,32,100,101,99,101,97,120,121,0,115,116,97,32,37,115,0,115,116,120,32,37,115,43,49,0,108,100,121,32,115,114,101,103,0,115,116,121,32,37,115,43,50,0,108,100,121,32,115,114,101,103,43,49,0,115,116,121,32,37,115,43,51,0,116,121,97,0,106,115,114,32,115,116,97,120,121,115,112,0,106,115,114,32,115,116,101,97,120,121,115,112,0,108,100,121,32,35,36,48,48,0,97,100,99,32,40,115,112,41,44,121,0,108,100,121,32,35,36,48,49,0,106,115,114,32,115,116,97,115,112,105,100,120,0,106,115,114,32,115,116,97,120,115,112,105,100,120,0,106,115,114,32,115,116,101,97,120,115,112,105,100,120,0,106,115,114,32,116,111,115,117,108,111,110,103,0,106,115,114,32,116,111,115,108,111,110,103,0,106,115,114,32,116,111,115,105,110,116,0,99,109,112,32,35,36,56,48,0,106,115,114,32,97,117,108,111,110,103,0,106,115,114,32,97,108,111,110,103,0,115,116,121,32,115,114,101,103,0,115,116,121,32,115,114,101,103,43,49,0,106,115,114,32,97,120,117,108,111,110,103,0,106,115,114,32,97,120,108,111,110,103,0,68,97,116,97,32,116,121,112,101,32,104,97,115,32,110,111,32,115,105,122,101,0,97,115,108,32,97,0,106,115,114,32,115,104,108,97,120,37,100,0,106,115,114,32,97,115,108,97,120,37,100,0,106,115,114,32,115,104,108,101,97,120,37,100,0,106,115,114,32,97,115,108,101,97,120,37,100,0,108,115,114,32,97,0,114,111,114,32,97,0,106,115,114,32,108,115,114,97,120,37,100,0,106,115,114,32,97,115,114,97,120,37,100,0,106,115,114,32,108,115,114,101,97,120,37,100,0,106,115,114,32,97,115,114,101,97,120,37,100,0,99,112,120,32,35,36,56,48,0,106,115,114,32,115,104,114,97,120,52,0,106,115,114,32,97,115,114,97,120,52,0,106,115,114,32,115,104,114,97,120,37,108,100,0,106,115,114,32,97,115,114,97,120,37,108,100,0,108,100,97,32,115,114,101,103,43,49,0,108,100,120,32,115,114,101,103,43,49,0,108,100,97,32,115,114,101,103,0,108,100,120,32,115,114,101,103,0,99,112,121,32,35,36,56,48,0,106,115,114,32,115,104,114,101,97,120,52,0,106,115,114,32,97,115,114,101,97,120,52,0,106,115,114,32,115,104,114,101,97,120,37,108,100,0,106,115,114,32,97,115,114,101,97,120,37,108,100,0,116,111,115,97,115,114,101,97,120,0,116,111,115,115,104,114,101,97,120,0,115,116,97,32,116,109,112,49,0,97,100,99,32,116,109,112,49,0,106,115,114,32,109,117,108,97,120,51,0,106,115,114,32,109,117,108,97,120,53,0,106,115,114,32,109,117,108,97,120,54,0,106,115,114,32,109,117,108,97,120,55,0,106,115,114,32,109,117,108,97,120,57,0,106,115,114,32,109,117,108,97,120,49,48,0,108,100,97,32,35,36,48,48,0,106,115,114,32,115,104,108,97,120,52,0,106,115,114,32,97,115,108,97,120,52,0,106,115,114,32,115,104,108,97,120,37,108,100,0,106,115,114,32,97,115,108,97,120,37,108,100,0,106,115,114,32,115,104,108,101,97,120,52,0,106,115,114,32,97,115,108,101,97,120,52,0,106,115,114,32,115,104,108,101,97,120,37,108,100,0,106,115,114,32,97,115,108,101,97,120,37,108,100,0,116,111,115,97,115,108,101,97,120,0,116,111,115,115,104,108,101,97,120,0,97,100,99,32,37,115,0,116,97,121,0,97,100,99,32,37,115,43,49,0,105,110,99,32,37,115,0,105,110,99,32,37,115,43,49,0,115,116,97,32,37,115,43,49,0,108,100,121,32,35,60,40,37,115,41,0,115,116,121,32,112,116,114,49,0,108,100,121,32,35,62,40,37,115,41,0,106,115,114,32,108,97,100,100,101,113,49,0,106,115,114,32,108,97,100,100,101,113,97,0,106,115,114,32,108,97,100,100,101,113,0,106,115,114,32,97,100,100,101,113,121,115,112,0,106,115,114,32,108,97,100,100,101,113,121,115,112,0,97,100,99,32,40,112,116,114,49,41,44,121,0,115,116,97,32,40,112,116,114,49,41,44,121,0,100,101,99,32,37,115,0,101,111,114,32,35,36,70,70,0,100,101,99,32,37,115,43,49,0,108,100,97,32,37,115,43,49,0,106,115,114,32,108,115,117,98,101,113,97,0,106,115,114,32,108,115,117,98,101,113,0,106,115,114,32,115,117,98,101,113,121,115,112,0,106,115,114,32,108,115,117,98,101,113,121,115,112,0,97,100,99,32,35,60,40,37,115,41,0,97,100,99,32,35,62,40,37,115,41,0,115,116,97,32,114,101,103,115,97,118,101,0,115,116,120,32,114,101,103,115,97,118,101,43,49,0,106,115,114,32,115,97,118,101,101,97,120,0,108,100,97,32,114,101,103,115,97,118,101,0,108,100,120,32,114,101,103,115,97,118,101,43,49,0,106,115,114,32,114,101,115,116,101,97,120,0,99,109,112,32,35,36,37,48,50,88,0,99,112,120,32,35,36,37,48,50,88,0,106,115,114,32,115,119,97,112,115,116,107,0,106,115,114,32,115,119,97,112,101,115,116,107,0,106,115,114,32,95,37,115,0,106,115,114,32,99,97,108,108,97,120,0,115,116,97,32,106,109,112,118,101,99,43,49,0,115,116,97,32,106,109,112,118,101,99,43,50,0,106,115,114,32,106,109,112,118,101,99,0,106,109,112,32,37,115,0,106,110,101,32,37,115,0,106,101,113,32,37,115,0,106,115,114,32,99,115,116,107,99,104,107,0,106,115,114,32,115,116,107,99,104,107,0,97,110,100,32,35,36,37,48,50,88,0,111,114,97,32,35,36,37,48,50,88,0,108,100,120,32,35,36,70,70,0,101,111,114,32,35,36,37,48,50,88,0,97,100,99,32,35,36,48,49,0,106,115,114,32,110,101,103,97,120,0,106,115,114,32,110,101,103,101,97,120,0,106,115,114,32,98,110,101,103,97,0,106,115,114,32,98,110,101,103,97,120,0,106,115,114,32,98,110,101,103,101,97,120,0,106,115,114,32,99,111,109,112,108,97,120,0,106,115,114,32,99,111,109,112,108,101,97,120,0,106,115,114,32,98,111,111,108,101,113,0,116,111,115,101,113,101,97,120,0,106,115,114,32,98,111,111,108,110,101,0,116,111,115,110,101,101,97,120,0,67,111,110,100,105,116,105,111,110,32,105,115,32,110,101,118,101,114,32,116,114,117,101,0,106,115,114,32,114,101,116,117,114,110,48,0,106,115,114,32,98,111,111,108,117,108,116,0,114,111,108,32,97,0,98,118,99,32,37,115,0,101,111,114,32,35,36,56,48,0,116,111,115,108,116,101,97,120,0,116,111,115,117,108,116,101,97,120,0,67,111,110,100,105,116,105,111,110,32,105,115,32,97,108,119,97,121,115,32,116,114,117,101,0,106,115,114,32,114,101,116,117,114,110,49,0,116,111,115,108,101,101,97,120,0,116,111,115,117,108,101,101,97,120,0,116,111,115,103,116,101,97,120,0,116,111,115,117,103,116,101,97,120,0,106,115,114,32,98,111,111,108,103,101,0,98,118,115,32,37,115,0,116,111,115,103,101,101,97,120,0,116,111,115,117,103,101,101,97,120,0,9,46,114,101,115,9,37,117,44,36,48,48,0,9,46,98,121,116,101,9,36,37,48,50,108,88,0,9,46,119,111,114,100,9,36,37,48,52,108,88,0,9,46,100,119,111,114,100,9,36,37,48,56,108,88,0,9,46,97,100,100,114,9,37,115,0,108,100,97,32,37,115,44,120,0,115,116,97,32,37,115,44,120,0,108,100,97,32,37,115,44,121,0,115,116,97,32,37,115,44,121,0,109,101,109,99,112,121,0,73,110,118,97,108,105,100,32,100,101,112,116,104,32,105,110,32,103,95,115,119,105,116,99,104,58,32,37,117,0,37,46,42,115,0,69,45,62,74,117,109,112,84,111,32,61,61,32,79,108,100,76,97,98,101,108,0,99,99,54,53,47,99,111,100,101,108,97,98,46,99,0,37,115,58,0,84,111,111,32,109,97,110,121,32,116,121,112,101,32,115,112,101,99,105,102,105,101,114,115,0,81,32,61,61,32,84,95,81,85,65,76,95,78,79,78,69,0,99,99,54,53,47,100,101,99,108,97,114,101,46,99,0,80,111,105,110,116,101,114,32,100,117,112,108,105,99,97,116,101,115,32,102,117,110,99,116,105,111,110,39,115,32,99,97,108,108,105,110,103,32,99,111,110,118,101,110,116,105,111,110,0,70,117,110,99,116,105,111,110,39,115,32,97,110,100,32,112,111,105,110,116,101,114,39,115,32,99,97,108,108,105,110,103,32,99,111,110,118,101,110,116,105,111,110,115,32,97,114,101,32,100,105,102,102,101,114,101,110,116,0,86,97,114,105,97,100,105,99,45,102,117,110,99,116,105,111,110,32,112,111,105,110,116,101,114,115,32,99,97,110,110,111,116,32,98,101,32,95,95,102,97,115,116,99,97,108,108,95,95,0,78,111,116,32,112,111,105,110,116,101,114,32,116,111,32,97,32,102,117,110,99,116,105,111,110,59,32,99,97,110,39,116,32,117,115,101,32,97,32,99,97,108,108,105,110,103,32,99,111,110,118,101,110,116,105,111,110,0,65,100,100,114,101,115,115,32,115,105,122,101,32,113,117,97,108,105,102,105,101,114,32,109,105,115,109,97,116,99,104,0,70,117,110,99,116,105,111,110,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,32,114,101,116,117,114,110,32,102,117,110,99,116,105,111,110,115,0,70,117,110,99,116,105,111,110,115,32,97,114,101,32,110,111,116,32,97,108,108,111,119,101,100,32,116,111,32,114,101,116,117,114,110,32,97,114,114,97,121,115,0,102,117,110,99,116,105,111,110,32,100,101,102,105,110,105,116,105,111,110,32,104,97,115,32,113,117,97,108,105,102,105,101,100,32,118,111,105,100,32,114,101,116,117,114,110,32,116,121,112,101,0,116,121,112,101,32,113,117,97,108,105,102,105,101,114,115,32,105,103,110,111,114,101,100,32,111,110,32,102,117,110,99,116,105,111,110,32,114,101,116,117,114,110,32,116,121,112,101,0,73,109,112,108,105,99,105,116,32,96,105,110,116,39,32,114,101,116,117,114,110,32,116,121,112,101,32,105,115,32,97,110,32,111,98,115,111,108,101,116,101,32,102,101,97,116,117,114,101,0,73,109,112,108,105,99,105,116,32,96,105,110,116,39,32,105,115,32,97,110,32,111,98,115,111,108,101,116,101,32,102,101,97,116,117,114,101,0,83,105,122,101,32,111,102,32,96,37,115,39,32,105,115,32,105,110,118,97,108,105,100,32,40,48,120,37,48,54,88,41,0,73,110,118,97,108,105,100,32,115,105,122,101,32,105,110,32,100,101,99,108,97,114,97,116,105,111,110,32,40,48,120,37,48,54,88,41,0,86,97,114,105,97,100,105,99,32,102,117,110,99,116,105,111,110,115,32,99,97,110,110,111,116,32,98,101,32,95,95,102,97,115,116,99,97,108,108,95,95,0,73,110,118,97,108,105,100,32,113,117,97,108,105,102,105,101,114,115,32,102,111,114,32,97,114,114,97,121,0,83,105,122,101,32,111,102,32,97,114,114,97,121,32,96,37,115,39,32,105,115,32,105,110,118,97,108,105,100,0,83,105,122,101,32,111,102,32,97,114,114,97,121,32,105,115,32,105,110,118,97,108,105,100,0,73,110,118,97,108,105,100,32,96,95,95,110,101,97,114,95,95,39,32,113,117,97,108,105,102,105,101,114,0,73,110,118,97,108,105,100,32,96,95,95,102,97,114,95,95,39,32,113,117,97,108,105,102,105,101,114,0,73,110,118,97,108,105,100,32,96,95,95,102,97,115,116,99,97,108,108,95,95,39,32,113,117,97,108,105,102,105,101,114,0,73,110,118,97,108,105,100,32,96,95,95,99,100,101,99,108,95,95,39,32,113,117,97,108,105,102,105,101,114,0,73,108,108,101,103,97,108,32,115,116,111,114,97,103,101,32,99,108,97,115,115,0,82,101,100,101,102,105,110,105,116,105,111,110,32,102,111,114,32,112,97,114,97,109,101,116,101,114,32,96,37,115,39,0,85,110,107,110,111,119,110,32,105,100,101,110,116,105,102,105,101,114,58,32,96,37,115,39,0,80,97,115,115,105,110,103,32,115,116,114,117,99,116,32,98,121,32,118,97,108,117,101,32,102,111,114,32,112,97,114,97,109,101,116,101,114,32,96,37,115,39,0,68,117,112,108,105,99,97,116,101,32,113,117,97,108,105,102,105,101,114,58,32,96,37,115,39,0,67,97,110,110,111,116,32,115,112,101,99,105,102,121,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,97,100,100,114,101,115,115,32,115,105,122,101,32,113,117,97,108,105,102,105,101,114,0,67,97,110,110,111,116,32,115,112,101,99,105,102,121,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,99,97,108,108,105,110,103,32,99,111,110,118,101,110,116,105,111,110,32,113,117,97,108,105,102,105,101,114,0,83,121,109,98,111,108,32,96,37,115,39,32,105,115,32,97,108,114,101,97,100,121,32,100,105,102,102,101,114,101,110,116,32,107,105,110,100,0,69,110,116,114,121,45,62,65,116,116,114,32,61,61,32,48,0,68,101,99,108,97,114,97,116,105,111,110,32,100,111,101,115,32,110,111,116,32,100,101,99,108,97,114,101,32,97,110,121,116,104,105,110,103,0,70,108,101,120,105,98,108,101,32,97,114,114,97,121,32,109,101,109,98,101,114,32,109,117,115,116,32,98,101,32,108,97,115,116,32,102,105,101,108,100,0,98,105,116,45,102,105,101,108,100,0,70,108,101,120,105,98,108,101,32,97,114,114,97,121,32,109,101,109,98,101,114,32,99,97,110,110,111,116,32,98,101,32,102,105,114,115,116,32,115,116,114,117,99,116,32,102,105,101,108,100,0,66,105,116,79,102,102,115,32,60,61,32,40,105,110,116,41,32,73,78,84,95,66,73,84,83,0,84,121,112,101,32,101,120,112,101,99,116,101,100,0,78,101,103,97,116,105,118,101,32,119,105,100,116,104,32,105,110,32,98,105,116,45,102,105,101,108,100,0,87,105,100,116,104,32,111,102,32,98,105,116,45,102,105,101,108,100,32,101,120,99,101,101,100,115,32,105,116,115,32,116,121,112,101,0,90,101,114,111,32,119,105,100,116,104,32,102,111,114,32,110,97,109,101,100,32,98,105,116,45,102,105,101,108,100,0,66,105,116,45,102,105,101,108,100,32,104,97,115,32,105,110,118,97,108,105,100,32,116,121,112,101,0,85,115,101,108,101,115,115,32,100,101,99,108,97,114,97,116,105,111,110,0,78,111,110,32,99,111,110,115,116,97,110,116,32,105,110,105,116,105,97,108,105,122,101,114,115,0,66,114,97,99,101,115,32,97,114,111,117,110,100,32,115,99,97,108,97,114,32,105,110,105,116,105,97,108,105,122,101,114,0,84,111,111,32,109,97,110,121,32,105,110,105,116,105,97,108,105,122,101,114,115,0,67,97,110,110,111,116,32,105,110,105,116,105,97,108,105,122,101,32,118,97,114,105,97,98,108,101,115,32,119,105,116,104,32,105,110,99,111,109,112,108,101,116,101,32,116,121,112,101,0,69,110,116,114,121,45,62,86,46,66,46,79,102,102,115,32,42,32,67,72,65,82,95,66,73,84,83,32,43,32,69,110,116,114,121,45,62,86,46,66,46,66,105,116,79,102,102,115,32,61,61,32,83,73,46,79,102,102,115,32,42,32,67,72,65,82,95,66,73,84,83,32,43,32,83,73,46,86,97,108,66,105,116,115,0,83,73,46,86,97,108,66,105,116,115,32,60,61,32,73,78,84,95,66,73,84,83,0,67,111,110,115,116,97,110,116,32,105,110,105,116,105,97,108,105,122,101,114,32,101,120,112,101,99,116,101,100,0,84,114,117,110,99,97,116,105,110,103,32,118,97,108,117,101,32,105,110,32,98,105,116,45,102,105,101,108,100,32,105,110,105,116,105,97,108,105,122,101,114,0,83,73,46,86,97,108,66,105,116,115,32,61,61,32,48,0,73,108,108,101,103,97,108,32,116,121,112,101,32,105,110,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,0,67,97,110,110,111,116,32,116,97,107,101,32,116,104,101,32,97,100,100,114,101,115,115,32,111,102,32,97,32,114,101,103,105,115,116,101,114,32,118,97,114,105,97,98,108,101,0,78,111,110,32,99,111,110,115,116,97,110,116,32,105,110,105,116,105,97,108,105,122,101,114,0,85,110,107,110,111,119,110,32,99,111,110,115,116,97,110,116,32,116,121,112,101,58,32,48,120,37,48,52,88,0,68,117,112,108,105,99,97,116,101,32,109,97,99,114,111,32,112,97,114,97,109,101,116,101,114,58,32,96,37,115,39,0,10,10,77,97,99,114,111,32,72,97,115,104,32,84,97,98,108,101,32,83,117,109,109,97,114,121,10,0,37,51,117,32,58,32,0,101,109,112,116,121,10,0,67,67,54,53,95,73,78,67,0,67,67,54,53,95,72,79,77,69,0,47,115,114,99,47,105,110,99,108,117,100,101,0,67,97,110,110,111,116,32,111,112,101,110,32,105,110,112,117,116,32,102,105,108,101,32,96,37,115,39,58,32,37,115,0,67,97,110,110,111,116,32,115,116,97,116,32,96,37,115,39,58,32,37,115,0,73,110,99,108,117,100,101,32,110,101,115,116,105,110,103,32,116,111,111,32,100,101,101,112,0,73,110,99,108,117,100,101,32,102,105,108,101,32,96,37,115,39,32,110,111,116,32,102,111,117,110,100,0,67,97,110,110,111,116,32,111,112,101,110,32,105,110,99,108,117,100,101,32,102,105,108,101,32,96,37,115,39,58,32,37,115,0,79,112,101,110,101,100,32,105,110,99,108,117,100,101,32,102,105,108,101,32,96,37,115,39,10,0,67,45,62,67,111,117,110,116,32,62,32,48,0,65,70,105,108,101,67,111,117,110,116,32,62,32,48,0,99,99,54,53,47,105,110,112,117,116,46,99,0,40,111,117,116,115,105,100,101,32,102,105,108,101,32,115,99,111,112,101,41,0,119,0,67,97,110,110,111,116,32,111,112,101,110,32,100,101,112,101,110,100,101,110,99,121,32,102,105,108,101,32,96,37,115,39,58,32,37,115,0,58,9,0,58,10,10,0,67,97,110,110,111,116,32,119,114,105,116,101,32,116,111,32,100,101,112,101,110,100,101,110,121,32,102,105,108,101,32,40,100,105,115,107,32,102,117,108,108,63,41,0,99,99,54,53,47,108,111,111,112,46,99,0,78,117,109,101,114,105,99,32,99,111,110,115,116,97,110,116,32,99,111,110,116,97,105,110,115,32,100,105,103,105,116,115,32,98,101,121,111,110,100,32,116,104,101,32,114,97,100,105,120,0,67,111,110,115,116,97,110,116,32,105,115,32,108,111,110,103,0,70,108,111,97,116,105,110,103,32,99,111,110,115,116,97,110,116,32,101,120,112,111,110,101,110,116,32,104,97,115,32,110,111,32,100,105,103,105,116,115,0,70,108,111,97,116,105,110,103,32,99,111,110,115,116,97,110,116,32,101,120,112,111,110,101,110,116,32,105,115,32,116,111,111,32,108,97,114,103,101,0,70,73,76,69,95,95,0,76,73,78,69,95,95,0,102,117,110,99,95,95,0,73,110,118,97,108,105,100,32,105,110,112,117,116,32,99,104,97,114,97,99,116,101,114,32,119,105,116,104,32,99,111,100,101,32,37,48,50,88,0,92,120,32,117,115,101,100,32,119,105,116,104,32,110,111,32,102,111,108,108,111,119,105,110,103,32,104,101,120,32,100,105,103,105,116,115,0,72,101,120,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,0,79,99,116,97,108,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,0,73,108,108,101,103,97,108,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,0,95,80,114,97,103,109,97,0,95,95,65,88,95,95,0,95,95,65,95,95,0,95,95,69,65,88,95,95,0,95,95,88,95,95,0,95,95,89,95,95,0,95,95,97,115,109,95,95,0,95,95,97,116,116,114,105,98,117,116,101,95,95,0,95,95,105,110,108,105,110,101,95,95,0,97,115,109,0,97,117,116,111,0,98,114,101,97,107,0,99,97,115,101,0,99,100,101,99,108,0,99,111,110,116,105,110,117,101,0,100,101,102,97,117,108,116,0,100,111,0,101,110,117,109,0,102,97,115,116,99,97,108,108,0,102,111,114,0,103,111,116,111,0,105,110,108,105,110,101,0,114,101,103,105,115,116,101,114,0,114,101,116,117,114,110,0,115,105,122,101,111,102,0,115,116,114,117,99,116,0,115,119,105,116,99,104,0,116,121,112,101,100,101,102,0,117,110,105,111,110,0,119,104,105,108,101,0,85,110,101,120,112,101,99,116,101,100,32,110,101,119,108,105,110,101], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);
/* memory initializer */ allocate([96,58,39,32,101,120,112,101,99,116,101,100,0,96,44,39,32,101,120,112,101,99,116,101,100,0,96,40,39,32,101,120,112,101,99,116,101,100,0,96,93,39,32,101,120,112,101,99,116,101,100,0,96,125,39,32,101,120,112,101,99,116,101,100,0,97,115,108,97,120,0,97,115,114,97,120,0,115,114,101,103,0,115,114,101,103,43,49,0,112,116,114,50,0,112,116,114,50,43,49,0,69,45,62,65,77,32,61,61,32,65,77,54,53,95,90,80,95,73,78,68,89,32,124,124,32,69,45,62,82,73,45,62,73,110,46,82,101,103,89,32,62,61,32,40,115,104,111,114,116,41,32,79,102,102,115,0,99,99,54,53,47,99,111,112,116,115,116,111,112,46,99,0,115,116,114,99,109,112,32,40,69,45,62,65,114,103,44,32,34,115,112,34,41,32,61,61,32,48,0,97,115,108,97,120,49,0,97,115,108,97,120,50,0,97,115,108,97,120,51,0,97,115,108,97,120,52,0,97,115,108,97,120,121,0,97,115,114,97,120,49,0,97,115,114,97,120,50,0,97,115,114,97,120,51,0,97,115,114,97,120,52,0,97,115,114,97,120,121,0,100,101,99,97,120,49,0,100,101,99,97,120,50,0,100,101,99,97,120,51,0,100,101,99,97,120,52,0,100,101,99,97,120,53,0,100,101,99,97,120,54,0,100,101,99,97,120,55,0,100,101,99,97,120,56,0,100,101,99,97,120,121,0,105,110,99,97,120,49,0,105,110,99,97,120,50,0,105,110,99,97,120,51,0,105,110,99,97,120,52,0,105,110,99,97,120,53,0,105,110,99,97,120,54,0,105,110,99,97,120,55,0,105,110,99,97,120,56,0,105,110,99,97,120,121,0,115,104,108,97,120,49,0,115,104,108,97,120,50,0,115,104,108,97,120,51,0,115,104,108,97,120,52,0,115,104,108,97,120,121,0,115,104,114,97,120,49,0,115,104,114,97,120,50,0,115,104,114,97,120,51,0,115,104,114,97,120,52,0,115,104,114,97,120,121,0,95,95,98,122,101,114,111,0,115,116,97,120,115,112,105,100,120,0,116,111,115,97,115,114,97,120,0,116,111,115,115,104,114,97,120,0,40,68,45,62,82,104,115,46,65,46,70,108,97,103,115,32,38,32,68,45,62,82,104,115,46,88,46,70,108,97,103,115,32,38,32,76,73,95,68,73,82,69,67,84,41,32,33,61,32,48,0,98,111,111,108,117,108,116,0,98,111,111,108,117,108,101,0,98,111,111,108,117,103,116,0,97,0,98,111,111,108,110,101,0,36,56,48,0,98,111,111,108,101,113,0,68,45,62,78,101,120,116,69,110,116,114,121,32,33,61,32,48,0,108,100,97,105,100,120,0,78,32,33,61,32,48,0,82,73,32,33,61,32,48,0,85,110,107,110,111,119,110,32,88,70,82,32,105,110,115,110,32,105,110,32,84,114,97,99,107,76,111,97,100,115,0,37,115,45,37,115,45,37,48,52,88,0,36,97,110,111,110,0,105,110,99,97,120,0,76,97,98,101,108,32,97,116,32,101,110,100,32,111,102,32,99,111,109,112,111,117,110,100,32,115,116,97,116,101,109,101,110,116,0,96,123,39,32,101,120,112,101,99,116,101,100,0,96,119,104,105,108,101,39,32,101,120,112,101,99,116,101,100,0,82,101,116,117,114,110,105,110,103,32,97,32,118,97,108,117,101,32,105,110,32,102,117,110,99,116,105,111,110,32,119,105,116,104,32,114,101,116,117,114,110,32,116,121,112,101,32,118,111,105,100,0,70,117,110,99,116,105,111,110,32,96,37,115,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,118,97,108,117,101,0,96,59,39,32,101,120,112,101,99,116,101,100,0,96,98,114,101,97,107,39,32,115,116,97,116,101,109,101,110,116,32,110,111,116,32,119,105,116,104,105,110,32,108,111,111,112,32,111,114,32,115,119,105,116,99,104,0,96,99,111,110,116,105,110,117,101,39,32,115,116,97,116,101,109,101,110,116,32,110,111,116,32,119,105,116,104,105,110,32,97,32,108,111,111,112,0,83,116,97,116,101,109,101,110,116,32,104,97,115,32,110,111,32,101,102,102,101,99,116,0,76,111,99,97,108,32,108,97,98,101,108,32,111,118,101,114,102,108,111,119,0,70,117,110,99,116,105,111,110,32,109,117,115,116,32,98,101,32,101,120,116,101,114,110,0,112,97,114,97,109,0,67,97,110,110,111,116,32,105,110,105,116,105,97,108,105,122,101,32,102,108,101,120,105,98,108,101,32,97,114,114,97,121,32,109,101,109,98,101,114,115,32,111,102,32,115,116,111,114,97,103,101,32,99,108,97,115,115,32,96,114,101,103,105,115,116,101,114,39,0,86,97,114,105,97,98,108,101,32,96,37,115,39,32,104,97,115,32,117,110,107,110,111,119,110,32,115,105,122,101,0,67,97,110,110,111,116,32,105,110,105,116,105,97,108,105,122,101,32,101,120,116,101,114,110,97,108,115,0,73,110,118,97,108,105,100,32,115,116,111,114,97,103,101,32,99,108,97,115,115,32,105,110,32,80,97,114,115,101,79,110,101,68,101,99,108,58,32,37,48,52,88,0,83,116,114,117,99,116,115,32,111,102,32,116,104,105,115,32,115,105,122,101,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,68,117,112,108,105,99,97,116,101,32,99,97,115,101,32,108,97,98,101,108,0,80,114,101,112,114,111,99,101,115,115,111,114,32,100,105,114,101,99,116,105,118,101,32,101,120,112,101,99,116,101,100,0,95,95,86,65,95,65,82,71,83,95,95,0,96,95,95,86,65,95,65,82,71,83,95,95,39,32,99,97,110,32,111,110,108,121,32,97,112,112,101,97,114,32,105,110,32,116,104,101,32,101,120,112,97,110,115,105,111,110,32,111,102,32,97,32,67,57,57,32,118,97,114,105,97,100,105,99,32,109,97,99,114,111,0,96,46,46,46,39,32,101,120,112,101,99,116,101,100,0,96,41,39,32,101,120,112,101,99,116,101,100,0,77,97,99,114,111,32,114,101,100,101,102,105,110,105,116,105,111,110,32,105,115,32,110,111,116,32,105,100,101,110,116,105,99,97,108,0,68,117,112,108,105,99,97,116,101,32,35,101,108,115,101,47,35,101,108,105,102,0,85,110,101,120,112,101,99,116,101,100,32,35,101,108,105,102,0,68,117,112,108,105,99,97,116,101,32,35,101,108,115,101,0,85,110,101,120,112,101,99,116,101,100,32,96,35,101,108,115,101,39,0,73,102,73,110,100,101,120,32,62,61,32,48,0,99,99,54,53,47,112,114,101,112,114,111,99,46,99,0,85,110,101,120,112,101,99,116,101,100,32,96,35,101,110,100,105,102,39,0,73,110,118,97,108,105,100,32,35,101,114,114,111,114,32,100,105,114,101,99,116,105,118,101,0,35,101,114,114,111,114,58,32,37,115,0,96,34,39,32,111,114,32,96,60,39,32,101,120,112,101,99,116,101,100,0,35,105,110,99,108,117,100,101,32,101,120,112,101,99,116,115,32,34,70,73,76,69,78,65,77,69,34,32,111,114,32,60,70,73,76,69,78,65,77,69,62,0,95,80,114,97,103,109,97,32,40,0,73,110,118,97,108,105,100,32,35,119,97,114,110,105,110,103,32,100,105,114,101,99,116,105,118,101,0,35,119,97,114,110,105,110,103,58,32,37,115,0,96,35,101,110,100,105,102,39,32,101,120,112,101,99,116,101,100,0,37,115,40,37,117,41,58,32,37,46,42,115,10,0,96,35,39,32,105,115,32,110,111,116,32,102,111,108,108,111,119,101,100,32,98,121,32,97,32,109,97,99,114,111,32,112,97,114,97,109,101,116,101,114,0,85,110,116,101,114,109,105,110,97,116,101,100,32,97,114,103,117,109,101,110,116,32,108,105,115,116,32,105,110,118,111,107,105,110,103,32,109,97,99,114,111,32,96,37,115,39,0,77,97,99,114,111,32,97,114,103,117,109,101,110,116,32,99,111,117,110,116,32,109,105,115,109,97,116,99,104,0,69,110,100,45,111,102,45,102,105,108,101,32,114,101,97,99,104,101,100,32,105,110,32,99,111,109,109,101,110,116,32,115,116,97,114,116,105,110,103,32,97,116,32,108,105,110,101,32,37,117,0,96,47,42,39,32,102,111,117,110,100,32,105,110,115,105,100,101,32,97,32,99,111,109,109,101,110,116,0,84,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,35,105,102,32,99,108,97,117,115,101,115,0,59,59,0,100,101,102,105,110,101,100,0,100,101,102,105,110,101,0,101,108,105,102,0,101,108,115,101,0,101,110,100,105,102,0,105,102,0,105,102,100,101,102,0,105,102,110,100,101,102,0,105,110,99,108,117,100,101,0,108,105,110,101,0,112,114,97,103,109,97,0,117,110,100,101,102,0,119,97,114,110,105,110,103,0,69,120,112,114,45,62,70,108,97,103,115,32,38,32,69,95,72,65,86,69,95,77,65,82,75,83,0,99,99,54,53,47,101,120,112,114,100,101,115,99,46,99,0,37,115,37,43,108,100,0,37,115,0,114,101,103,98,97,110,107,43,37,117,0,73,110,118,97,108,105,100,32,108,111,99,97,116,105,111,110,32,105,110,32,69,68,95,71,101,116,76,97,98,101,108,78,97,109,101,58,32,48,120,37,48,52,88,0,69,68,95,73,115,76,111,99,83,116,97,99,107,32,40,69,120,112,114,41,0,79,102,102,115,32,62,61,32,48,0,85,110,114,101,97,99,104,97,98,108,101,32,99,111,100,101,0,1,0,5,4,3,2,9,8,7,6,73,110,118,97,108,105,100,32,112,114,111,103,114,97,109,32,102,108,111,119,0,85,110,107,110,111,119,110,32,106,117,109,112,32,99,111,110,100,105,116,105,111,110,58,32,37,100,0,73,110,118,97,108,105,100,32,111,112,99,111,100,101,32,105,110,32,71,101,116,67,109,112,82,101,103,86,97,108,0,85,110,107,110,111,119,110,32,98,114,97,110,99,104,32,99,111,110,100,105,116,105,111,110,0,85,110,107,110,111,119,110,32,98,114,97,110,99,104,32,99,111,110,100,105,116,105,111,110,32,105,110,32,79,112,116,67,109,112,57,0,32,9,0,65,83,77,32,99,111,100,101,32,101,114,114,111,114,58,32,115,121,110,116,97,120,32,101,114,114,111,114,0,65,83,77,32,99,111,100,101,32,101,114,114,111,114,58,32,80,115,101,117,100,111,32,105,110,115,116,114,117,99,116,105,111,110,32,96,37,115,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,32,9,58,0,65,83,77,32,99,111,100,101,32,101,114,114,111,114,58,32,37,115,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,109,110,101,109,111,110,105,99,0,44,41,0,65,83,77,32,99,111,100,101,32,101,114,114,111,114,58,32,96,88,39,32,101,120,112,101,99,116,101,100,0,65,83,77,32,99,111,100,101,32,101,114,114,111,114,58,32,96,41,39,32,101,120,112,101,99,116,101,100,0,65,83,77,32,99,111,100,101,32,101,114,114,111,114,58,32,96,89,39,32,101,120,112,101,99,116,101,100,0,44,0,65,83,77,32,99,111,100,101,32,101,114,114,111,114,58,32,67,97,110,110,111,116,32,117,115,101,32,108,111,99,97,108,32,108,97,98,101,108,32,96,37,115,39,32,105,110,32,115,117,98,114,111,117,116,105,110,101,32,99,97,108,108,0,65,83,77,32,108,97,98,101,108,32,96,37,115,39,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,0,76,105,115,116,32,33,61,32,48,0,99,99,54,53,47,99,111,100,101,115,101,103,46,99,0,76,105,115,116,45,62,78,101,120,116,32,33,61,32,48,0,76,32,33,61,32,48,0,83,116,97,114,116,32,60,32,69,110,116,114,121,67,111,117,110,116,0,82,101,109,111,118,105,110,103,32,117,110,117,115,101,100,32,103,108,111,98,97,108,32,108,97,98,101,108,32,96,37,115,39,0,79,108,100,76,97,98,101,108,32,33,61,32,48,0,70,105,114,115,116,32,60,61,32,76,97,115,116,0,59,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,59,32,0,10,59,32,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,10,0,46,115,101,103,109,101,110,116,9,34,37,115,34,10,10,46,112,114,111,99,9,95,37,115,0,58,32,110,101,97,114,0,58,32,102,97,114,0,10,10,0,10,46,101,110,100,112,114,111,99,10,10,0,46,115,101,103,109,101,110,116,9,34,37,115,34,10,10,0,59,10,59,32,0,37,46,42,115,10,59,32,0,59,10,0,9,46,100,98,103,9,108,105,110,101,44,32,34,37,115,34,44,32,37,117,10,0,9,46,100,98,103,9,108,105,110,101,10,0,69,45,62,70,108,97,103,115,32,38,32,67,69,70,95,78,85,77,65,82,71,0,99,99,54,53,47,99,111,100,101,101,110,116,46,99,0,73,110,118,97,108,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,115,105,122,101,32,105,110,32,67,69,95,83,101,116,78,117,109,65,114,103,0,116,111,115,97,115,108,97,120,0,72,101,121,33,0,116,111,115,115,104,108,97,120,0,9,37,115,0,37,42,115,97,0,37,42,115,35,37,115,0,37,42,115,37,115,0,37,42,115,37,115,44,120,0,37,42,115,37,115,44,121,0,37,42,115,40,37,115,44,120,41,0,37,42,115,40,37,115,41,44,121,0,37,42,115,40,37,115,41,0,37,42,115,59,32,85,83,69,58,32,37,45,49,50,115,32,67,72,71,58,32,37,45,49,50,115,32,83,73,90,69,58,32,37,117,0,65,58,88,88,32,0,65,58,37,48,50,88,32,0,88,58,88,88,32,0,88,58,37,48,50,88,32,0,89,58,88,88,0,89,58,37,48,50,88,0,32,32,32,32,73,110,32,37,115,32,32,79,117,116,32,37,115,0,10,0,84,49,0,95,95,0,98,110,101,103,97,0,98,110,101,103,97,120,0,110,101,103,97,120,0,36,70,70,0,36,48,49,0,99,111,109,112,108,97,120,0,83,116,114,105,110,103,32,108,105,116,101,114,97,108,32,101,120,112,101,99,116,101,100,0,82,97,110,103,101,32,101,114,114,111,114,32,105,110,32,97,114,103,117,109,101,110,116,32,37,117,0,36,37,48,50,108,88,0,76,97,98,101,108,32,110,97,109,101,32,101,120,112,101,99,116,101,100,0,36,37,48,56,108,88,0,65,114,103,117,109,101,110,116,32,37,117,32,104,97,115,32,110,111,32,102,105,120,101,100,32,115,116,97,99,107,32,111,102,102,115,101,116,0,37,108,100,0,114,101,103,98,97,110,107,43,37,100,0,76,37,48,52,88,0,36,37,48,52,108,88,0,69,114,114,111,114,32,105,110,32,95,95,97,115,109,95,95,32,102,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,32,37,117,0,73,100,101,110,116,105,102,105,101,114,32,101,120,112,101,99,116,101,100,32,102,111,114,32,97,114,103,117,109,101,110,116,32,37,117,0,85,110,100,101,102,105,110,101,100,32,115,121,109,98,111,108,32,96,37,115,39,32,102,111,114,32,97,114,103,117,109,101,110,116,32,37,117,0,84,121,112,101,32,111,102,32,97,114,103,117,109,101,110,116,32,37,117,32,100,105,102,102,101,114,115,32,102,114,111,109,32,102,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,0,115,116,97,115,112,105,100,120,0,112,116,114,49,0,112,116,114,49,43,49,0,36,37,48,52,88,0,108,100,97,117,105,100,120,0,115,104,108,97,120,0,115,104,114,97,120,0,114,101,103,98,97,110,107,43,0,36,48,48,0,99,56,57,0,99,57,57,0,99,99,54,53,0,80,97,114,97,109,101,116,101,114,32,110,97,109,101,32,111,109,105,116,116,101,100,0,95,95,102,105,120,97,114,103,115,95,95,0,95,95,97,114,103,115,105,122,101,95,95,0,109,97,105,110,0,96,109,97,105,110,39,32,99,97,110,110,111,116,32,98,101,32,100,101,99,108,97,114,101,100,32,97,115,32,95,95,102,97,115,116,99,97,108,108,95,95,0,96,109,97,105,110,39,32,109,117,115,116,32,97,108,119,97,121,115,32,114,101,116,117,114,110,32,97,110,32,105,110,116,0,67,111,110,116,114,111,108,32,114,101,97,99,104,101,115,32,101,110,100,32,111,102,32,110,111,110,45,118,111,105,100,32,102,117,110,99,116,105,111,110,0,101,120,116,101,114,110,0,115,116,97,116,105,99,0,9,46,100,98,103,9,102,117,110,99,44,32,34,37,115,34,44,32,34,48,48,34,44,32,37,115,44,32,34,37,115,34,0,116,109,112,49,0,100,101,99,97,120,0,83,116,97,114,116,45,62,80,111,115,32,60,61,32,69,110,100,45,62,80,111,115,0,99,99,54,53,47,97,115,109,99,111,100,101,46,99,0,83,116,97,114,116,45,62,83,80,32,61,61,32,69,110,100,45,62,83,80,0,33,72,97,118,101,71,108,111,98,97,108,67,111,100,101,32,40,41,0,83,104,105,102,116,32,99,111,117,110,116,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,111,112,101,114,97,110,100,32,116,121,112,101,0,37,115,58,10,0,32,32,32,32,65,115,109,78,97,109,101,58,32,37,115,10,0,32,32,32,32,70,108,97,103,115,58,0,32,37,115,0,32,48,120,37,48,53,88,0,32,32,32,32,84,121,112,101,58,32,32,0,40,110,111,110,101,41,0,83,67,95,84,89,80,69,68,69,70,0,83,67,95,66,73,84,70,73,69,76,68,0,83,67,95,83,84,82,85,67,84,70,73,69,76,68,0,83,67,95,85,78,73,79,78,0,83,67,95,83,84,82,85,67,84,0,83,67,95,65,85,84,79,0,83,67,95,82,69,71,73,83,84,69,82,0,83,67,95,83,84,65,84,73,67,0,83,67,95,69,88,84,69,82,78,0,83,67,95,69,78,85,77,0,83,67,95,67,79,78,83,84,0,83,67,95,76,65,66,69,76,0,83,67,95,80,65,82,65,77,0,83,67,95,70,85,78,67,0,83,67,95,83,84,79,82,65,71,69,0,83,67,95,68,69,70,0,83,67,95,82,69,70,0,83,67,95,90,69,82,79,80,65,71,69,0,65,116,116,114,105,98,117,116,101,115,32,109,117,115,116,32,98,101,32,115,112,101,99,105,102,105,101,100,32,105,110,32,116,104,101,32,102,105,114,115,116,32,100,101,99,108,97,114,97,116,105,111,110,0,83,121,109,45,62,65,115,109,78,97,109,101,32,61,61,32,48,0,99,99,54,53,47,115,121,109,101,110,116,114,121,46,99,0,97,100,100,101,113,121,115,112,0,97,100,100,101,113,48,115,112,0,108,97,100,100,101,113,0,108,97,100,100,101,113,49,0,108,97,100,100,101,113,97,0,108,97,100,100,101,113,121,115,112,0,108,97,100,100,101,113,48,115,112,0,108,100,97,120,105,100,120,0,108,100,97,120,105,0,108,100,97,120,48,115,112,0,108,100,101,97,120,105,100,120,0,108,100,101,97,120,105,0,108,100,101,97,120,121,115,112,0,108,100,101,97,120,48,115,112,0,108,101,97,97,120,115,112,0,108,101,97,97,48,115,112,0,108,115,117,98,101,113,0,108,115,117,98,101,113,49,0,108,115,117,98,101,113,97,0,108,115,117,98,101,113,121,115,112,0,108,115,117,98,101,113,48,115,112,0,112,117,115,104,97,0,112,117,115,104,99,48,0,112,117,115,104,99,49,0,112,117,115,104,99,50,0,112,117,115,104,97,120,0,112,117,115,104,48,0,112,117,115,104,49,0,112,117,115,104,50,0,112,117,115,104,51,0,112,117,115,104,52,0,112,117,115,104,53,0,112,117,115,104,54,0,112,117,115,104,55,0,112,117,115,104,97,48,0,112,117,115,104,97,70,70,0,112,117,115,104,97,121,115,112,0,112,117,115,104,97,48,115,112,0,112,117,115,104,101,97,120,0,112,117,115,104,108,48,0,112,117,115,104,48,97,120,0,112,117,115,104,119,105,100,120,0,112,117,115,104,119,0,112,117,115,104,119,121,115,112,0,112,117,115,104,119,48,115,112,0,115,116,97,120,48,115,112,0,115,116,101,97,120,48,115,112,0,115,117,98,101,113,121,115,112,0,115,117,98,101,113,48,115,112,0,116,111,115,97,100,100,97,120,0,116,111,115,97,100,100,97,48,0,116,111,115,97,100,100,101,97,120,0,116,111,115,97,100,100,48,97,120,0,116,111,115,97,110,100,97,120,0,116,111,115,97,110,100,97,48,0,116,111,115,97,110,100,101,97,120,0,116,111,115,97,110,100,48,97,120,0,116,111,115,100,105,118,97,120,0,116,111,115,100,105,118,97,48,0,116,111,115,100,105,118,101,97,120,0,116,111,115,100,105,118,48,97,120,0,116,111,115,101,113,97,120,0,116,111,115,101,113,48,48,0,116,111,115,101,113,97,48,0,116,111,115,103,101,97,120,0,116,111,115,103,101,48,48,0,116,111,115,103,101,97,48,0,116,111,115,103,116,97,120,0,116,111,115,103,116,48,48,0,116,111,115,103,116,97,48,0,116,111,115,105,99,109,112,0,116,111,115,105,99,109,112,48,0,116,111,115,108,101,97,120,0,116,111,115,108,101,48,48,0,116,111,115,108,101,97,48,0,116,111,115,108,116,97,120,0,116,111,115,108,116,48,48,0,116,111,115,108,116,97,48,0,116,111,115,109,111,100,97,120,0,116,111,115,109,111,100,97,48,0,116,111,115,109,111,100,101,97,120,0,116,111,115,109,111,100,48,97,120,0,116,111,115,109,117,108,97,120,0,116,111,115,109,117,108,97,48,0,116,111,115,109,117,108,101,97,120,0,116,111,115,109,117,108,48,97,120,0,116,111,115,110,101,97,120,0,116,111,115,110,101,97,48,0,116,111,115,111,114,97,120,0,116,111,115,111,114,97,48,0,116,111,115,111,114,101,97,120,0,116,111,115,111,114,48,97,120,0,116,111,115,114,115,117,98,97,120,0,116,111,115,114,115,117,98,97,48,0,116,111,115,114,115,117,98,101,97,120,0,116,111,115,114,115,117,98,48,97,120,0,116,111,115,115,117,98,97,120,0,116,111,115,115,117,98,97,48,0,116,111,115,115,117,98,101,97,120,0,116,111,115,115,117,98,48,97,120,0,116,111,115,117,100,105,118,97,120,0,116,111,115,117,100,105,118,97,48,0,116,111,115,117,100,105,118,101,97,120,0,116,111,115,117,100,105,118,48,97,120,0,116,111,115,117,103,101,97,120,0,116,111,115,117,103,101,97,48,0,116,111,115,117,103,116,97,120,0,116,111,115,117,103,116,97,48,0,116,111,115,117,108,101,97,120,0,116,111,115,117,108,101,97,48,0,116,111,115,117,108,116,97,120,0,116,111,115,117,108,116,97,48,0,116,111,115,117,109,111,100,97,120,0,116,111,115,117,109,111,100,97,48,0,116,111,115,117,109,111,100,101,97,120,0,116,111,115,117,109,111,100,48,97,120,0,116,111,115,117,109,117,108,97,120,0,116,111,115,117,109,117,108,97,48,0,116,111,115,117,109,117,108,101,97,120,0,116,111,115,117,109,117,108,48,97,120,0,116,111,115,120,111,114,97,120,0,116,111,115,120,111,114,97,48,0,116,111,115,120,111,114,101,97,120,0,116,111,115,120,111,114,48,97,120,0,83,119,105,116,99,104,32,113,117,97,110,116,105,116,121,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,0,78,111,32,99,97,115,101,32,108,97,98,101,108,115,0,82,97,110,103,101,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,116,121,112,101,58,32,37,48,54,108,88,0,67,97,115,101,32,108,97,98,101,108,32,110,111,116,32,119,105,116,104,105,110,32,97,32,115,119,105,116,99,104,32,115,116,97,116,101,109,101,110,116,0,77,117,108,116,105,112,108,101,32,100,101,102,97,117,108,116,32,108,97,98,101,108,115,32,105,110,32,111,110,101,32,115,119,105,116,99,104,0,96,100,101,102,97,117,108,116,39,32,108,97,98,101,108,32,110,111,116,32,119,105,116,104,105,110,32,97,32,115,119,105,116,99,104,32,115,116,97,116,101,109,101,110,116,0,73,110,118,97,108,105,100,32,97,100,100,114,101,115,115,32,115,105,122,101,0,37,115,32,0,99,111,110,115,116,0,118,111,108,97,116,105,108,101,0,114,101,115,116,114,105,99,116,0,95,95,110,101,97,114,95,95,0,95,95,102,97,114,95,95,0,95,95,102,97,115,116,99,97,108,108,95,95,0,95,95,99,100,101,99,108,95,95,0,115,105,103,110,101,100,0,117,110,115,105,103,110,101,100,0,99,104,97,114,0,115,104,111,114,116,0,105,110,116,0,108,111,110,103,0,108,111,110,103,32,108,111,110,103,0,102,108,111,97,116,0,100,111,117,98,108,101,0,118,111,105,100,0,115,116,114,117,99,116,32,37,115,0,117,110,105,111,110,32,37,115,0,32,91,93,0,32,91,37,108,100,93,0,32,42,0,102,117,110,99,116,105,111,110,32,114,101,116,117,114,110,105,110,103,32,0,117,110,107,110,111,119,110,32,116,121,112,101,58,32,37,48,52,108,88,0,73,115,67,108,97,115,115,70,117,110,99,32,40,84,41,0,99,99,54,53,47,100,97,116,97,116,121,112,101,46,99,0,32,95,95,110,101,97,114,95,95,0,32,95,95,102,97,114,95,95,0,32,95,95,102,97,115,116,99,97,108,108,95,95,0,32,95,95,99,100,101,99,108,95,95,0,32,37,115,32,40,0,44,32,0,114,101,103,105,115,116,101,114,32,0,85,110,107,110,111,119,110,32,116,121,112,101,32,105,110,32,83,105,122,101,79,102,58,32,37,48,52,108,88,0,73,115,67,108,97,115,115,80,116,114,32,40,84,41,0,83,105,122,101,32,111,102,32,100,97,116,97,32,116,121,112,101,32,105,115,32,117,110,107,110,111,119,110,0,73,108,108,101,103,97,108,32,116,121,112,101,32,37,48,52,108,88,0,73,115,84,121,112,101,65,114,114,97,121,32,40,84,41,0,73,115,67,108,97,115,115,83,116,114,117,99,116,32,40,84,41,0,73,115,67,108,97,115,115,73,110,116,32,40,84,41,0,115,116,97,120,121,115,112,0,108,100,97,120,121,115,112,0,115,112,0,115,116,101,97,120,121,115,112,0,36,37,48,50,88,0,67,111,100,101,32,103,101,110,101,114,97,116,105,111,110,32,109,101,115,115,101,100,32,117,112,58,32,83,116,97,99,107,80,116,114,32,105,115,32,37,100,44,32,115,104,111,117,108,100,32,98,101,32,37,100,0,71,108,111,98,97,108,77,111,100,101,70,108,97,103,115,58,32,73,110,118,97,108,105,100,32,108,111,99,97,116,105,111,110,32,102,108,97,103,115,32,118,97,108,117,101,58,32,48,120,37,48,52,88,0,73,110,118,97,108,105,100,32,108,118,97,108,117,101,0,73,110,99,114,101,109,101,110,116,32,111,102,32,114,101,97,100,45,111,110,108,121,32,118,97,114,105,97,98,108,101,0,73,110,118,97,108,105,100,32,108,111,99,97,116,105,111,110,32,105,110,32,80,114,101,73,110,99,40,41,58,32,48,120,37,48,52,88,0,68,101,99,114,101,109,101,110,116,32,111,102,32,114,101,97,100,45,111,110,108,121,32,118,97,114,105,97,98,108,101,0,73,110,118,97,108,105,100,32,108,111,99,97,116,105,111,110,32,105,110,32,80,114,101,68,101,99,40,41,58,32,48,120,37,48,52,88,0,65,114,103,117,109,101,110,116,32,109,117,115,116,32,104,97,118,101,32,105,110,116,101,103,101,114,32,116,121,112,101,0,85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,58,32,37,100,0,73,108,108,101,103,97,108,32,105,110,100,105,114,101,99,116,105,111,110,0,73,108,108,101,103,97,108,32,97,100,100,114,101,115,115,0,67,97,110,110,111,116,32,116,97,107,101,32,97,100,100,114,101,115,115,32,111,102,32,98,105,116,45,102,105,101,108,100,0,80,114,101,112,114,111,99,101,115,115,111,114,32,101,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,0,40,83,121,109,45,62,70,108,97,103,115,32,38,32,83,67,95,76,65,66,69,76,41,32,33,61,32,83,67,95,76,65,66,69,76,0,99,99,54,53,47,101,120,112,114,46,99,0,86,97,114,105,97,98,108,101,32,105,100,101,110,116,105,102,105,101,114,32,101,120,112,101,99,116,101,100,0,67,97,108,108,32,116,111,32,117,110,100,101,102,105,110,101,100,32,102,117,110,99,116,105,111,110,32,96,37,115,39,0,85,110,100,101,102,105,110,101,100,32,115,121,109,98,111,108,58,32,96,37,115,39,0,69,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,0,65,114,114,97,121,32,115,117,98,115,99,114,105,112,116,32,105,115,32,110,111,116,32,97,110,32,105,110,116,101,103,101,114,0,83,117,98,115,99,114,105,112,116,101,100,32,118,97,108,117,101,32,105,115,32,110,101,105,116,104,101,114,32,97,114,114,97,121,32,110,111,114,32,112,111,105,110,116,101,114,0,67,97,110,110,111,116,32,115,117,98,115,99,114,105,112,116,0,73,108,108,101,103,97,108,32,102,117,110,99,116,105,111,110,32,99,97,108,108,0,105,108,108,101,103,97,108,95,102,117,110,99,116,105,111,110,95,99,97,108,108,0,84,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,105,110,32,102,117,110,99,116,105,111,110,32,99,97,108,108,0,40,80,97,114,97,109,45,62,70,108,97,103,115,32,38,32,83,67,95,80,65,82,65,77,41,32,33,61,32,48,0,84,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,32,105,110,32,102,117,110,99,116,105,111,110,32,99,97,108,108,0,83,116,114,117,99,116,32,101,120,112,101,99,116,101,100,0,83,116,114,117,99,116,32,112,111,105,110,116,101,114,32,101,120,112,101,99,116,101,100,0,73,100,101,110,116,105,102,105,101,114,32,101,120,112,101,99,116,101,100,0,83,116,114,117,99,116,47,117,110,105,111,110,32,104,97,115,32,110,111,32,102,105,101,108,100,32,110,97,109,101,100,32,96,37,115,39,0,70,105,101,108,100,45,62,86,46,79,102,102,115,32,43,32,83,105,122,101,32,60,61,32,83,73,90,69,79,70,95,76,79,78,71,0,73,110,118,97,108,105,100,32,115,116,114,117,99,116,32,115,105,122,101,58,32,37,117,0,67,111,110,115,116,97,110,116,32,105,110,116,101,103,101,114,32,101,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,0,73,110,99,111,109,112,97,116,105,98,108,101,32,112,111,105,110,116,101,114,32,116,121,112,101,115,0,43,61,0,45,61,0,42,61,0,47,61,0,37,61,0,60,60,61,0,62,62,61,0,38,61,0,94,61,0,124,61,0,73,110,118,97,108,105,100,32,108,118,97,108,117,101,32,105,110,32,97,115,115,105,103,110,109,101,110,116,0,65,115,115,105,103,110,109,101,110,116,32,116,111,32,99,111,110,115,116,0,73,110,118,97,108,105,100,32,108,101,102,116,32,111,112,101,114,97,110,100,32,116,121,112,101,0,73,110,118,97,108,105,100,32,114,105,103,104,116,32,111,112,101,114,97,110,100,32,102,111,114,32,98,105,110,97,114,121,32,111,112,101,114,97,116,111,114,32,96,37,115,39,0,68,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,0,77,111,100,117,108,111,32,111,112,101,114,97,116,105,111,110,32,119,105,116,104,32,122,101,114,111,0,73,110,118,97,108,105,100,32,108,111,99,97,116,105,111,110,32,105,110,32,83,116,111,114,101,40,41,58,32,48,120,37,48,52,88,0,73,110,116,101,103,101,114,32,101,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,0,104,105,101,95,105,110,116,101,114,110,97,108,58,32,103,111,116,32,116,111,107,101,110,32,48,120,37,88,10,0,73,110,118,97,108,105,100,32,108,101,102,116,32,111,112,101,114,97,110,100,32,102,111,114,32,114,101,108,97,116,105,111,110,97,108,32,111,112,101,114,97,116,111,114,0,73,110,118,97,108,105,100,32,114,105,103,104,116,32,111,112,101,114,97,110,100,32,102,111,114,32,114,101,108,97,116,105,111,110,97,108,32,111,112,101,114,97,116,111,114,0,82,101,115,117,108,116,32,111,102,32,99,111,109,112,97,114,105,115,111,110,32,105,115,32,99,111,110,115,116,97,110,116,0,104,105,101,95,99,111,109,112,97,114,101,58,32,103,111,116,32,116,111,107,101,110,32,48,120,37,88,10,0,73,110,118,97,108,105,100,32,111,112,101,114,97,110,100,115,32,102,111,114,32,98,105,110,97,114,121,32,111,112,101,114,97,116,111,114,32,96,43,39,0,73,110,118,97,108,105,100,32,108,101,102,116,32,111,112,101,114,97,110,100,32,102,111,114,32,98,105,110,97,114,121,32,111,112,101,114,97,116,111,114,32,96,45,39,0,73,110,118,97,108,105,100,32,114,105,103,104,116,32,111,112,101,114,97,110,100,32,102,111,114,32,98,105,110,97,114,121,32,111,112,101,114,97,116,111,114,32,96,45,39,0,73,110,118,97,108,105,100,32,111,112,101,114,97,110,100,115,32,102,111,114,32,98,105,110,97,114,121,32,111,112,101,114,97,116,111,114,32,96,45,39,0,67,111,110,115,116,97,110,116,32,101,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,0,66,111,111,108,101,97,110,32,101,120,112,114,101,115,115,105,111,110,32,101,120,112,101,99,116,101,100,0,73,110,118,97,108,105,100,32,97,100,100,114,101,115,115,105,110,103,32,109,111,100,101,0,71,101,116,73,110,118,101,114,115,101,66,114,97,110,99,104,58,32,73,110,118,97,108,105,100,32,111,112,99,111,100,101,58,32,37,100,0,77,97,107,101,83,104,111,114,116,66,114,97,110,99,104,58,32,73,110,118,97,108,105,100,32,111,112,99,111,100,101,58,32,37,100,0,77,97,107,101,76,111,110,103,66,114,97,110,99,104,58,32,73,110,118,97,108,105,100,32,111,112,99,111,100,101,58,32,37,100,0,71,101,116,66,114,97,110,99,104,67,111,110,100,58,32,73,110,118,97,108,105,100,32,111,112,99,111,100,101,58,32,37,100,0,71,101,116,73,110,118,101,114,115,101,67,111,110,100,58,32,73,110,118,97,108,105,100,32,99,111,110,100,105,116,105,111,110,58,32,37,100,0,73,108,108,101,103,97,108,32,116,121,112,101,0,67,111,110,118,101,114,116,105,110,103,32,112,111,105,110,116,101,114,32,116,111,32,105,110,116,101,103,101,114,32,119,105,116,104,111,117,116,32,97,32,99,97,115,116,0,73,110,99,111,109,112,97,116,105,98,108,101,32,116,121,112,101,115,0,85,110,107,110,111,119,110,0,73,110,99,111,109,112,97,116,105,98,108,101,32,112,111,105,110,116,101,114,32,116,121,112,101,115,32,97,116,32,39,37,115,39,0,80,111,105,110,116,101,114,32,116,121,112,101,115,32,100,105,102,102,101,114,32,105,110,32,116,121,112,101,32,113,117,97,108,105,102,105,101,114,115,0,67,111,110,118,101,114,116,105,110,103,32,105,110,116,101,103,101,114,32,116,111,32,112,111,105,110,116,101,114,32,119,105,116,104,111,117,116,32,97,32,99,97,115,116,0,67,97,110,110,111,116,32,99,111,110,118,101,114,116,32,102,114,111,109,32,96,118,111,105,100,39,32,116,111,32,115,111,109,101,116,104,105,110,103,32,101,108,115,101,0,76,73,32,33,61,32,48,0,99,99,54,53,47,108,105,110,101,105,110,102,111,46,99,0,76,73,32,38,38,32,76,73,45,62,82,101,102,67,111,117,110,116,32,62,32,48,0,85,110,107,110,111,119,110,32,98,114,97,110,99,104,32,99,111,110,100,105,116,105,111,110,32,105,110,32,79,112,116,67,111,110,100,66,114,97,110,99,104,101,115,50,0,43,49,0,37,115,40,37,117,41,58,32,70,97,116,97,108,58,32,0,73,110,112,117,116,58,32,37,46,42,115,10,0,37,115,40,37,117,41,58,32,73,110,116,101,114,110,97,108,32,99,111,109,112,105,108,101,114,32,101,114,114,111,114,58,10,0,10,73,110,112,117,116,58,32,37,46,42,115,10,0,37,115,40,37,117,41,58,32,69,114,114,111,114,58,32,0,84,111,111,32,109,97,110,121,32,101,114,114,111,114,115,0,37,115,40,37,117,41,58,32,87,97,114,110,105,110,103,58,32,0,99,111,110,115,116,45,99,111,109,112,97,114,105,115,111,110,0,101,114,114,111,114,0,110,111,45,101,102,102,101,99,116,0,114,101,109,97,112,45,122,101,114,111,0,115,116,114,117,99,116,45,112,97,114,97,109,0,117,110,107,110,111,119,110,45,112,114,97,103,109,97,0,117,110,117,115,101,100,45,108,97,98,101,108,0,117,110,117,115,101,100,45,112,97,114,97,109,0,117,110,117,115,101,100,45,118,97,114,0,37,115,10,0,37,117,32,101,114,114,111,114,115,44,32,37,117,32,119,97,114,110,105,110,103,115,10,0,85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,115,116,114,105,110,103,0,67,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,0,73,108,108,101,103,97,108,32,99,104,97,114,97,99,116,101,114,32,99,111,110,115,116,97,110,116,32,48,120,37,48,50,88,0,96,39,39,32,101,120,112,101,99,116,101,100,0,73,110,118,97,108,105,100,32,104,101,120,97,100,101,99,105,109,97,108,32,110,117,109,98,101,114,0,73,110,116,101,114,110,97,108,32,101,114,114,111,114,58,32,0,80,114,101,99,111,110,100,105,116,105,111,110,32,118,105,111,108,97,116,101,100,58,32,0,67,104,101,99,107,32,102,97,105,108,101,100,58,32,0,37,115,37,115,44,32,102,105,108,101,32,96,37,115,39,44,32,108,105,110,101,32,37,117,0,37,115,58,32,0,84,97,114,103,101,116,32,62,61,32,48,32,38,38,32,84,97,114,103,101,116,32,60,32,84,71,84,95,67,79,85,78,84,0,99,111,109,109,111,110,47,116,97,114,103,101,116,46,99,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,253,8,127,155,11,125,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,20,9,13,17,147,10,14,15,16,11,18,19,8,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,91,191,93,94,164,173,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,179,221,171,177,223,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,12,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,125,124,127,126,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,114,0,67,97,110,110,111,116,32,111,112,101,110,32,34,37,115,34,58,32,37,115,0,85,110,107,110,111,119,110,32,111,112,116,105,111,110,58,32,37,115,0,79,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,37,115,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,102,111,114,32,37,115,58,32,96,37,115,39,0,73,110,118,97,108,105,100,32,100,101,102,105,110,105,116,105,111,110,58,32,96,37,115,39,0,99,111,109,109,111,110,47,115,116,114,115,116,97,99,107,46,99,0,83,45,62,67,111,117,110,116,32,62,32,49,0,73,110,100,101,120,32,60,61,32,67,45,62,67,111,117,110,116,0,99,111,109,109,111,110,47,99,111,108,108,46,99,0,73,110,100,101,120,32,60,32,67,45,62,67,111,117,110,116,0,73,110,100,101,120,32,62,61,32,48,0,99,111,109,109,111,110,47,99,111,108,108,46,104,0,83,116,97,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30720);
/* memory initializer */ allocate([116,32,60,32,67,45,62,67,111,117,110,116,32,38,38,32,83,116,97,114,116,32,43,32,67,111,117,110,116,32,60,61,32,67,45,62,67,111,117,110,116,32,38,38,32,84,97,114,103,101,116,32,60,61,32,67,45,62,67,111,117,110,116,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,2,2,1,110,101,97,114,0,102,97,114,0,104,117,103,101,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,73,110,100,101,120,32,60,32,115,105,122,101,111,102,32,40,84,97,98,41,0,99,111,109,109,111,110,47,116,103,116,116,114,97,110,115,46,99,0,73,110,118,97,108,105,100,32,116,121,112,101,32,115,105,122,101,32,105,110,32,78,101,120,116,73,86,97,108,0,99,111,109,109,111,110,47,120,115,112,114,105,110,116,102,46,99,0,73,110,118,97,108,105,100,32,116,121,112,101,32,115,105,122,101,32,105,110,32,78,101,120,116,85,86,97,108,0,83,80,116,114,32,33,61,32,48,0,83,32,33,61,32,48,0,73,110,118,97,108,105,100,32,115,105,122,101,32,109,111,100,105,102,105,101,114,32,102,111,114,32,37,110,32,102,111,114,109,97,116,32,115,112,101,99,32,105,110,32,120,118,115,110,112,114,105,110,116,102,0,73,110,118,97,108,105,100,32,102,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,32,105,110,32,120,118,115,110,112,114,105,110,116,102,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,0,82,101,115,32,62,61,32,48,32,38,38,32,40,117,110,115,105,103,110,101,100,41,32,40,82,101,115,43,49,41,32,60,32,66,117,102,83,105,122,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,45,32,114,101,113,117,101,115,116,101,100,32,98,108,111,99,107,32,115,105,122,101,32,61,32,37,108,117,0,79,117,116,32,111,102,32,109,101,109,111,114,121,32,105,110,32,114,101,97,108,108,111,99,32,45,32,114,101,113,117,101,115,116,101,100,32,98,108,111,99,107,32,115,105,122,101,32,61,32,37,108,117,0,110,111,110,101,0,54,53,48,50,0,54,53,48,50,88,0,54,53,83,67,48,50,0,54,53,67,48,50,0,54,53,56,49,54,0,115,119,101,101,116,49,54,0,104,117,99,54,50,56,48,0,109,55,52,48,0,52,53,49,48,0,67,111,117,110,116,32,60,61,32,66,45,62,76,101,110,0,99,111,109,109,111,110,47,115,116,114,98,117,102,46,99,0,83,105,122,101,78,101,101,100,101,100,32,62,61,32,48,0,37,117,46,37,117,0,83,45,62,67,111,117,110,116,32,62,32,48,0,99,111,109,109,111,110,47,105,110,116,115,116,97,99,107,46,99,0,83,45,62,67,111,117,110,116,32,60,32,115,105,122,101,111,102,32,40,83,45,62,83,116,97,99,107,41,32,47,32,115,105,122,101,111,102,32,40,83,45,62,83,116,97,99,107,91,48,93,41,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0,105,110,102,105,110,105,116,121,0,110,97,110,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40960);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___unlock() {}

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  var _llvm_pow_f64=Math_pow;

   
  Module["_sbrk"] = _sbrk;

   
  Module["_memmove"] = _memmove;

   
  Module["___uremdi3"] = ___uremdi3;

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory



function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_llvm_pow_f64": _llvm_pow_f64, "_abort": _abort, "___syscall40": ___syscall40, "_pthread_cleanup_push": _pthread_cleanup_push, "___buildEnvironment": ___buildEnvironment, "__addDays": __addDays, "_localtime_r": _localtime_r, "_tzset": _tzset, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__exit": __exit, "_strftime": _strftime, "__arraySum": __arraySum, "___syscall195": ___syscall195, "_getenv": _getenv, "___syscall33": ___syscall33, "___syscall54": ___syscall54, "___unlock": ___unlock, "__isLeapYear": __isLeapYear, "___syscall10": ___syscall10, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "___syscall140": ___syscall140, "_localtime": _localtime, "_exit": _exit, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _abort=env._abort;
  var ___syscall40=env.___syscall40;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var ___buildEnvironment=env.___buildEnvironment;
  var __addDays=env.__addDays;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __exit=env.__exit;
  var _strftime=env._strftime;
  var __arraySum=env.__arraySum;
  var ___syscall195=env.___syscall195;
  var _getenv=env._getenv;
  var ___syscall33=env.___syscall33;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var __isLeapYear=env.__isLeapYear;
  var ___syscall10=env.___syscall10;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var ___syscall140=env.___syscall140;
  var _localtime=env._localtime;
  var _exit=env._exit;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _AddCmpCodeIfSizeNot256($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(256);
 if ($2) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = $1;
 _AddCodeLine($0,$vararg_buffer);
 STACKTOP = sp;return;
}
function _FindStdFunc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_bsearch($0,8,5,8,1)|0);
 $2 = ($1|0)==(0|0);
 $3 = $1;
 $4 = (($3) - (8))|0;
 $5 = $4 >> 3;
 $$0 = $2 ? -1 : $5;
 return ($$0|0);
}
function _CmpFunc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($0,$2)|0);
 return ($3|0);
}
function _StdFunc_memcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $$idx80 = 0, $$idx80$val = 0, $$idx81 = 0, $$idx81$val = 0, $$idx82 = 0, $$idx82$val = 0, $$idx83 = 0, $$idx83$val = 0, $$idx84 = 0, $$idx84$val = 0, $$idx85 = 0, $$idx85$val = 0, $$lobit$i = 0, $$lobit$i109 = 0, $$lobit$i112 = 0, $$lobit$i115 = 0, $$pre = 0, $$pre$phi141Z2D = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $notlhs = 0;
 var $notlhs144 = 0, $notlhs78 = 0, $notrhs = 0, $notrhs145 = 0, $notrhs79 = 0, $or$cond = 0, $or$cond121$not = 0, $or$cond125 = 0, $or$cond129 = 0, $or$cond135 = 0, $or$cond143 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer101 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0;
 var $vararg_buffer112 = 0, $vararg_buffer114 = 0, $vararg_buffer117 = 0, $vararg_buffer119 = 0, $vararg_buffer12 = 0, $vararg_buffer122 = 0, $vararg_buffer125 = 0, $vararg_buffer128 = 0, $vararg_buffer130 = 0, $vararg_buffer133 = 0, $vararg_buffer135 = 0, $vararg_buffer137 = 0, $vararg_buffer140 = 0, $vararg_buffer143 = 0, $vararg_buffer145 = 0, $vararg_buffer148 = 0, $vararg_buffer15 = 0, $vararg_buffer150 = 0, $vararg_buffer153 = 0, $vararg_buffer156 = 0;
 var $vararg_buffer158 = 0, $vararg_buffer161 = 0, $vararg_buffer163 = 0, $vararg_buffer166 = 0, $vararg_buffer168 = 0, $vararg_buffer17 = 0, $vararg_buffer170 = 0, $vararg_buffer173 = 0, $vararg_buffer176 = 0, $vararg_buffer178 = 0, $vararg_buffer180 = 0, $vararg_buffer183 = 0, $vararg_buffer185 = 0, $vararg_buffer187 = 0, $vararg_buffer189 = 0, $vararg_buffer192 = 0, $vararg_buffer194 = 0, $vararg_buffer196 = 0, $vararg_buffer198 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer200 = 0, $vararg_buffer203 = 0, $vararg_buffer206 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer61 = 0;
 var $vararg_buffer64 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0;
 $vararg_buffer206 = sp + 960|0;
 $vararg_buffer203 = sp + 952|0;
 $vararg_buffer200 = sp + 944|0;
 $vararg_buffer198 = sp + 936|0;
 $vararg_buffer196 = sp + 928|0;
 $vararg_buffer194 = sp + 920|0;
 $vararg_buffer192 = sp + 912|0;
 $vararg_buffer189 = sp + 904|0;
 $vararg_buffer187 = sp + 896|0;
 $vararg_buffer185 = sp + 888|0;
 $vararg_buffer183 = sp + 880|0;
 $vararg_buffer180 = sp + 872|0;
 $vararg_buffer178 = sp + 864|0;
 $vararg_buffer176 = sp + 856|0;
 $vararg_buffer173 = sp + 848|0;
 $vararg_buffer170 = sp + 840|0;
 $vararg_buffer168 = sp + 832|0;
 $vararg_buffer166 = sp + 824|0;
 $vararg_buffer163 = sp + 816|0;
 $vararg_buffer161 = sp + 808|0;
 $vararg_buffer158 = sp + 800|0;
 $vararg_buffer156 = sp + 792|0;
 $vararg_buffer153 = sp + 784|0;
 $vararg_buffer150 = sp + 776|0;
 $vararg_buffer148 = sp + 768|0;
 $vararg_buffer145 = sp + 760|0;
 $vararg_buffer143 = sp + 752|0;
 $vararg_buffer140 = sp + 744|0;
 $vararg_buffer137 = sp + 736|0;
 $vararg_buffer135 = sp + 728|0;
 $vararg_buffer133 = sp + 720|0;
 $vararg_buffer130 = sp + 712|0;
 $vararg_buffer128 = sp + 704|0;
 $vararg_buffer125 = sp + 696|0;
 $vararg_buffer122 = sp + 688|0;
 $vararg_buffer119 = sp + 680|0;
 $vararg_buffer117 = sp + 672|0;
 $vararg_buffer114 = sp + 664|0;
 $vararg_buffer112 = sp + 656|0;
 $vararg_buffer109 = sp + 648|0;
 $vararg_buffer106 = sp + 640|0;
 $vararg_buffer103 = sp + 632|0;
 $vararg_buffer101 = sp + 624|0;
 $vararg_buffer99 = sp + 616|0;
 $vararg_buffer97 = sp + 608|0;
 $vararg_buffer94 = sp + 600|0;
 $vararg_buffer91 = sp + 592|0;
 $vararg_buffer89 = sp + 584|0;
 $vararg_buffer86 = sp + 576|0;
 $vararg_buffer83 = sp + 568|0;
 $vararg_buffer81 = sp + 560|0;
 $vararg_buffer79 = sp + 552|0;
 $vararg_buffer76 = sp + 544|0;
 $vararg_buffer73 = sp + 536|0;
 $vararg_buffer70 = sp + 528|0;
 $vararg_buffer68 = sp + 520|0;
 $vararg_buffer66 = sp + 512|0;
 $vararg_buffer64 = sp + 504|0;
 $vararg_buffer61 = sp + 496|0;
 $vararg_buffer58 = sp + 488|0;
 $vararg_buffer55 = sp + 480|0;
 $vararg_buffer52 = sp + 472|0;
 $vararg_buffer50 = sp + 464|0;
 $vararg_buffer48 = sp + 456|0;
 $vararg_buffer45 = sp + 448|0;
 $vararg_buffer42 = sp + 440|0;
 $vararg_buffer39 = sp + 432|0;
 $vararg_buffer36 = sp + 424|0;
 $vararg_buffer34 = sp + 416|0;
 $vararg_buffer31 = sp + 408|0;
 $vararg_buffer28 = sp + 400|0;
 $vararg_buffer25 = sp + 392|0;
 $vararg_buffer22 = sp + 384|0;
 $vararg_buffer20 = sp + 376|0;
 $vararg_buffer17 = sp + 368|0;
 $vararg_buffer15 = sp + 360|0;
 $vararg_buffer12 = sp + 352|0;
 $vararg_buffer9 = sp + 344|0;
 $vararg_buffer6 = sp + 336|0;
 $vararg_buffer3 = sp + 328|0;
 $vararg_buffer1 = sp + 320|0;
 $vararg_buffer = sp + 312|0;
 $2 = sp + 208|0;
 $3 = sp + 104|0;
 $4 = sp;
 _ParseArg($2,224);
 $5 = ((($2)) + 100|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = ((($2)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 _g_push($6,$9);
 $10 = ((($2)) + 92|0);
 _GetCodePos($10);
 $11 = (_SizeOf(224)|0);
 (_ConsumeComma()|0);
 _ParseArg($3,248);
 $12 = ((($3)) + 100|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($3)) + 8|0);
 $15 = ((($3)) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 _g_push($13,$16);
 $17 = ((($3)) + 92|0);
 _GetCodePos($17);
 $18 = (_SizeOf(248)|0);
 $19 = (($18) + ($11))|0;
 (_ConsumeComma()|0);
 _ParseArg($4,272);
 $20 = ((($4)) + 100|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 32;
 $23 = ($22|0)==(0);
 $$pre = ((($4)) + 8|0);
 if (!($23)) {
  _LoadExpr(0,$$pre);
 }
 _g_call(256,27646,$19);
 $24 = (_ED_IsConstAbsInt($$pre)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  $26 = ((($4)) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if ($28) {
   _Warning(15600,$vararg_buffer);
   $29 = ((($2)) + 84|0);
   _RemoveCode($29);
   dest=$1; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   (_ConsumeRParen()|0);
   STACKTOP = sp;return;
  }
 }
 $30 = (_ED_IsConstAbsInt($$pre)|0);
 $31 = ($30|0)==(0);
 do {
  if (!($31)) {
   $32 = ((($4)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)<(257);
   if ($34) {
    $$idx85 = ((($3)) + 16|0);
    $$idx85$val = HEAP32[$$idx85>>2]|0;
    $$lobit$i = $$idx85$val & 256;
    $35 = $$idx85$val & 143;
    $notlhs144 = ($$lobit$i|0)==(0);
    $notrhs145 = ($35|0)!=(0);
    $or$cond121$not = $notrhs145 & $notlhs144;
    $36 = $$idx85$val & 511;
    $37 = ($36|0)==(264);
    $or$cond143 = $or$cond121$not | $37;
    if ($or$cond143) {
     $$idx84 = ((($2)) + 16|0);
     $$idx84$val = HEAP32[$$idx84>>2]|0;
     $$lobit$i112 = $$idx84$val & 256;
     $38 = ($$lobit$i112|0)!=(0);
     $39 = $$idx84$val & 143;
     $40 = ($39|0)==(0);
     $or$cond125 = $38 | $40;
     $41 = $$idx84$val & 511;
     if ($or$cond125) {
      $42 = ($41|0)==(264);
      if ($42) {
       $$pre$phi141Z2D = 264;
      } else {
       break;
      }
     } else {
      $$pre$phi141Z2D = $41;
     }
     $43 = ($$pre$phi141Z2D|0)==(264);
     $44 = $$idx85$val & 511;
     $45 = ($44|0)==(264);
     $46 = ((($2)) + 52|0);
     _RemoveCode($46);
     $47 = (_GetLocalLabel()|0);
     $48 = HEAP32[$32>>2]|0;
     $49 = ($48|0)<(128);
     if ($49) {
      $50 = (($48) + 255)|0;
      $51 = $50 & 255;
      HEAP32[$vararg_buffer1>>2] = $51;
      _AddCodeLine(24910,$vararg_buffer1);
      _g_defcodelabel($47);
      $52 = (_ED_GetLabelName($14,0)|0);
      if ($45) {
       HEAP32[$vararg_buffer3>>2] = $52;
       _AddCodeLine(15504,$vararg_buffer3);
      } else {
       HEAP32[$vararg_buffer6>>2] = $52;
       _AddCodeLine(27628,$vararg_buffer6);
      }
      $53 = (_ED_GetLabelName($7,0)|0);
      if ($43) {
       HEAP32[$vararg_buffer9>>2] = $53;
       _AddCodeLine(15515,$vararg_buffer9);
      } else {
       HEAP32[$vararg_buffer12>>2] = $53;
       _AddCodeLine(27637,$vararg_buffer12);
      }
      _AddCodeLine(25197,$vararg_buffer15);
      $54 = (_LocalLabelName($47)|0);
      HEAP32[$vararg_buffer17>>2] = $54;
      _AddCodeLine(25324,$vararg_buffer17);
     } else {
      _AddCodeLine(25968,$vararg_buffer20);
      _g_defcodelabel($47);
      $55 = (_ED_GetLabelName($14,0)|0);
      if ($45) {
       HEAP32[$vararg_buffer22>>2] = $55;
       _AddCodeLine(15504,$vararg_buffer22);
      } else {
       HEAP32[$vararg_buffer25>>2] = $55;
       _AddCodeLine(27628,$vararg_buffer25);
      }
      $56 = (_ED_GetLabelName($7,0)|0);
      if ($43) {
       HEAP32[$vararg_buffer28>>2] = $56;
       _AddCodeLine(15515,$vararg_buffer28);
      } else {
       HEAP32[$vararg_buffer31>>2] = $56;
       _AddCodeLine(27637,$vararg_buffer31);
      }
      _AddCodeLine(25266,$vararg_buffer34);
      $57 = HEAP32[$32>>2]|0;
      $58 = ($57|0)==(256);
      if (!($58)) {
       HEAP32[$vararg_buffer36>>2] = $57;
       _AddCodeLine(25287,$vararg_buffer36);
      }
      $59 = (_LocalLabelName($47)|0);
      HEAP32[$vararg_buffer39>>2] = $59;
      _AddCodeLine(25205,$vararg_buffer39);
     }
     dest=$1; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     (_ConsumeRParen()|0);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $60 = (_ED_IsConstAbsInt($$pre)|0);
 $61 = ($60|0)==(0);
 if (!($61)) {
  $62 = ((($4)) + 24|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)<(257);
  if ($64) {
   $$idx83 = ((($3)) + 16|0);
   $$idx83$val = HEAP32[$$idx83>>2]|0;
   $$lobit$i115 = $$idx83$val & 256;
   $65 = ($$lobit$i115|0)!=(0);
   $66 = $$idx83$val & 143;
   $67 = ($66|0)==(0);
   $or$cond129 = $65 | $67;
   if (!($or$cond129)) {
    $$idx82 = ((($2)) + 16|0);
    $$idx82$val = HEAP32[$$idx82>>2]|0;
    $68 = $$idx82$val & 511;
    $69 = ($68|0)==(16);
    if ($69) {
     $70 = HEAP32[$8>>2]|0;
     $71 = HEAP32[11252]|0;
     $72 = (($70) + ($63))|0;
     $73 = (($72) - ($71))|0;
     $74 = ($73|0)<(256);
     if ($74) {
      $75 = $$idx83$val & 255;
      $76 = ($75|0)==(8);
      if ($76) {
       $84 = 0;
      } else {
       $77 = HEAP32[$15>>2]|0;
       $notlhs78 = ($75|0)!=(1);
       $notrhs79 = ($77|0)>(255);
       $78 = $notlhs78 | $notrhs79;
       $84 = $78;
      }
      $79 = (_ED_GetStackOffs($7,0)|0);
      $80 = ((($2)) + 52|0);
      _RemoveCode($80);
      $81 = (_GetLocalLabel()|0);
      $82 = HEAP32[$62>>2]|0;
      $83 = ($82|0)>(127);
      $or$cond = $84 | $83;
      $85 = ($79|0)==(0);
      do {
       if ($or$cond) {
        $or$cond3 = $84 | $85;
        if ($or$cond3) {
         $96 = $79 & 255;
         HEAP32[$vararg_buffer73>>2] = $96;
         _AddCodeLine(24910,$vararg_buffer73);
         _g_defcodelabel($81);
         $97 = (0 - ($79))|0;
         $98 = (_ED_GetLabelName($14,$97)|0);
         HEAP32[$vararg_buffer76>>2] = $98;
         _AddCodeLine(27628,$vararg_buffer76);
         _AddCodeLine(25108,$vararg_buffer79);
         _AddCodeLine(25266,$vararg_buffer81);
         $99 = HEAP32[$62>>2]|0;
         $100 = (($99) + ($79))|0;
         $101 = ($100|0)==(256);
         if (!($101)) {
          HEAP32[$vararg_buffer83>>2] = $100;
          _AddCodeLine(25287,$vararg_buffer83);
         }
         $102 = (_LocalLabelName($81)|0);
         HEAP32[$vararg_buffer86>>2] = $102;
         _AddCodeLine(25205,$vararg_buffer86);
         break;
        } else {
         _AddCodeLine(25482,$vararg_buffer89);
         $103 = $79 & 255;
         HEAP32[$vararg_buffer91>>2] = $103;
         _AddCodeLine(24910,$vararg_buffer91);
         _g_defcodelabel($81);
         $104 = (_ED_GetLabelName($14,0)|0);
         HEAP32[$vararg_buffer94>>2] = $104;
         _AddCodeLine(27610,$vararg_buffer94);
         _AddCodeLine(25108,$vararg_buffer97);
         _AddCodeLine(25266,$vararg_buffer99);
         _AddCodeLine(25726,$vararg_buffer101);
         $105 = HEAP32[$62>>2]|0;
         $106 = ($105|0)==(256);
         if (!($106)) {
          HEAP32[$vararg_buffer103>>2] = $105;
          _AddCodeLine(27037,$vararg_buffer103);
         }
         $107 = (_LocalLabelName($81)|0);
         HEAP32[$vararg_buffer106>>2] = $107;
         _AddCodeLine(25205,$vararg_buffer106);
         break;
        }
       } else {
        $86 = (($82) + 255)|0;
        $87 = $86 & 255;
        if ($85) {
         HEAP32[$vararg_buffer42>>2] = $87;
         _AddCodeLine(24910,$vararg_buffer42);
         _g_defcodelabel($81);
         $88 = (_ED_GetLabelName($14,0)|0);
         HEAP32[$vararg_buffer45>>2] = $88;
         _AddCodeLine(27628,$vararg_buffer45);
         _AddCodeLine(25108,$vararg_buffer48);
         _AddCodeLine(25197,$vararg_buffer50);
         $89 = (_LocalLabelName($81)|0);
         HEAP32[$vararg_buffer52>>2] = $89;
         _AddCodeLine(25324,$vararg_buffer52);
         break;
        } else {
         HEAP32[$vararg_buffer55>>2] = $87;
         _AddCodeLine(25039,$vararg_buffer55);
         $90 = HEAP32[$62>>2]|0;
         $91 = (($79) + 255)|0;
         $92 = (($91) + ($90))|0;
         $93 = $92 & 255;
         HEAP32[$vararg_buffer58>>2] = $93;
         _AddCodeLine(24910,$vararg_buffer58);
         _g_defcodelabel($81);
         $94 = (_ED_GetLabelName($14,0)|0);
         HEAP32[$vararg_buffer61>>2] = $94;
         _AddCodeLine(27610,$vararg_buffer61);
         _AddCodeLine(25108,$vararg_buffer64);
         _AddCodeLine(25197,$vararg_buffer66);
         _AddCodeLine(25201,$vararg_buffer68);
         $95 = (_LocalLabelName($81)|0);
         HEAP32[$vararg_buffer70>>2] = $95;
         _AddCodeLine(25324,$vararg_buffer70);
         break;
        }
       }
      } while(0);
      dest=$1; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      (_ConsumeRParen()|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $108 = (_ED_IsConstAbsInt($$pre)|0);
 $109 = ($108|0)==(0);
 if (!($109)) {
  $110 = ((($4)) + 24|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)<(257);
  if ($112) {
   $$idx81 = ((($3)) + 16|0);
   $$idx81$val = HEAP32[$$idx81>>2]|0;
   $113 = $$idx81$val & 511;
   $114 = ($113|0)==(16);
   if ($114) {
    $115 = HEAP32[$15>>2]|0;
    $116 = HEAP32[11252]|0;
    $117 = (($115) + ($111))|0;
    $118 = (($117) - ($116))|0;
    $119 = ($118|0)<(256);
    if ($119) {
     $$idx80 = ((($2)) + 16|0);
     $$idx80$val = HEAP32[$$idx80>>2]|0;
     $$lobit$i109 = $$idx80$val & 256;
     $120 = ($$lobit$i109|0)!=(0);
     $121 = $$idx80$val & 143;
     $122 = ($121|0)==(0);
     $or$cond135 = $120 | $122;
     if (!($or$cond135)) {
      $123 = $$idx80$val & 255;
      $124 = ($123|0)==(8);
      if ($124) {
       $132 = 0;
      } else {
       $125 = HEAP32[$8>>2]|0;
       $notlhs = ($123|0)!=(1);
       $notrhs = ($125|0)>(255);
       $126 = $notlhs | $notrhs;
       $132 = $126;
      }
      $127 = (_ED_GetStackOffs($14,0)|0);
      $128 = ((($2)) + 52|0);
      _RemoveCode($128);
      $129 = (_GetLocalLabel()|0);
      $130 = HEAP32[$110>>2]|0;
      $131 = ($130|0)>(127);
      $or$cond5 = $132 | $131;
      $133 = ($127|0)==(0);
      do {
       if ($or$cond5) {
        $or$cond7 = $132 | $133;
        if ($or$cond7) {
         $144 = $127 & 255;
         HEAP32[$vararg_buffer140>>2] = $144;
         _AddCodeLine(24910,$vararg_buffer140);
         _g_defcodelabel($129);
         _AddCodeLine(25063,$vararg_buffer143);
         $145 = (0 - ($127))|0;
         $146 = (_ED_GetLabelName($7,$145)|0);
         HEAP32[$vararg_buffer145>>2] = $146;
         _AddCodeLine(27637,$vararg_buffer145);
         _AddCodeLine(25266,$vararg_buffer148);
         $147 = HEAP32[$110>>2]|0;
         $148 = (($147) + ($127))|0;
         $149 = ($148|0)==(256);
         if (!($149)) {
          HEAP32[$vararg_buffer150>>2] = $148;
          _AddCodeLine(25287,$vararg_buffer150);
         }
         $150 = (_LocalLabelName($129)|0);
         HEAP32[$vararg_buffer153>>2] = $150;
         _AddCodeLine(25205,$vararg_buffer153);
         break;
        } else {
         _AddCodeLine(25482,$vararg_buffer156);
         $151 = $127 & 255;
         HEAP32[$vararg_buffer158>>2] = $151;
         _AddCodeLine(24910,$vararg_buffer158);
         _g_defcodelabel($129);
         _AddCodeLine(25063,$vararg_buffer161);
         $152 = (_ED_GetLabelName($7,0)|0);
         HEAP32[$vararg_buffer163>>2] = $152;
         _AddCodeLine(27619,$vararg_buffer163);
         _AddCodeLine(25266,$vararg_buffer166);
         _AddCodeLine(25726,$vararg_buffer168);
         $153 = HEAP32[$110>>2]|0;
         $154 = ($153|0)==(256);
         if (!($154)) {
          HEAP32[$vararg_buffer170>>2] = $153;
          _AddCodeLine(27037,$vararg_buffer170);
         }
         $155 = (_LocalLabelName($129)|0);
         HEAP32[$vararg_buffer173>>2] = $155;
         _AddCodeLine(25205,$vararg_buffer173);
         break;
        }
       } else {
        $134 = (($130) + 255)|0;
        $135 = $134 & 255;
        if ($133) {
         HEAP32[$vararg_buffer109>>2] = $135;
         _AddCodeLine(24910,$vararg_buffer109);
         _g_defcodelabel($129);
         _AddCodeLine(25063,$vararg_buffer112);
         $136 = (_ED_GetLabelName($7,0)|0);
         HEAP32[$vararg_buffer114>>2] = $136;
         _AddCodeLine(27637,$vararg_buffer114);
         _AddCodeLine(25197,$vararg_buffer117);
         $137 = (_LocalLabelName($129)|0);
         HEAP32[$vararg_buffer119>>2] = $137;
         _AddCodeLine(25324,$vararg_buffer119);
         break;
        } else {
         HEAP32[$vararg_buffer122>>2] = $135;
         _AddCodeLine(25039,$vararg_buffer122);
         $138 = HEAP32[$110>>2]|0;
         $139 = (($127) + 255)|0;
         $140 = (($139) + ($138))|0;
         $141 = $140 & 255;
         HEAP32[$vararg_buffer125>>2] = $141;
         _AddCodeLine(24910,$vararg_buffer125);
         _g_defcodelabel($129);
         _AddCodeLine(25063,$vararg_buffer128);
         $142 = (_ED_GetLabelName($7,0)|0);
         HEAP32[$vararg_buffer130>>2] = $142;
         _AddCodeLine(27619,$vararg_buffer130);
         _AddCodeLine(25197,$vararg_buffer133);
         _AddCodeLine(25201,$vararg_buffer135);
         $143 = (_LocalLabelName($129)|0);
         HEAP32[$vararg_buffer137>>2] = $143;
         _AddCodeLine(25324,$vararg_buffer137);
         break;
        }
       }
      } while(0);
      dest=$1; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      (_ConsumeRParen()|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $156 = (_ED_IsConstAbsInt($$pre)|0);
 $157 = ($156|0)==(0);
 if (!($157)) {
  $158 = ((($4)) + 24|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($159|0)<(257);
  if ($160) {
   $$idx = ((($3)) + 16|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $161 = $$idx$val & 511;
   $162 = ($161|0)==(16);
   if ($162) {
    $163 = (_ED_GetStackOffs($14,0)|0);
    $164 = ($163|0)==(0);
    if ($164) {
     $165 = ((($2)) + 84|0);
     _RemoveCode($165);
     $166 = (_GetLocalLabel()|0);
     _AddCodeLine(25640,$vararg_buffer176);
     _AddCodeLine(25649,$vararg_buffer178);
     $167 = HEAP32[$158>>2]|0;
     $168 = ($167|0)<(128);
     if ($168) {
      $169 = (($167) + 255)|0;
      $170 = $169 & 255;
      HEAP32[$vararg_buffer180>>2] = $170;
      _AddCodeLine(24910,$vararg_buffer180);
      _g_defcodelabel($166);
      _AddCodeLine(25063,$vararg_buffer183);
      _AddCodeLine(26831,$vararg_buffer185);
      _AddCodeLine(25197,$vararg_buffer187);
      $171 = (_LocalLabelName($166)|0);
      HEAP32[$vararg_buffer189>>2] = $171;
      _AddCodeLine(25324,$vararg_buffer189);
     } else {
      _AddCodeLine(25968,$vararg_buffer192);
      _g_defcodelabel($166);
      _AddCodeLine(25063,$vararg_buffer194);
      _AddCodeLine(26831,$vararg_buffer196);
      _AddCodeLine(25266,$vararg_buffer198);
      $172 = HEAP32[$158>>2]|0;
      $173 = ($172|0)==(256);
      if (!($173)) {
       HEAP32[$vararg_buffer200>>2] = $172;
       _AddCodeLine(25287,$vararg_buffer200);
      }
      $174 = (_LocalLabelName($166)|0);
      HEAP32[$vararg_buffer203>>2] = $174;
      _AddCodeLine(25205,$vararg_buffer203);
     }
     _AddCodeLine(15591,$vararg_buffer206);
     (_ED_MakeRValExpr($1)|0);
     $175 = ((($1)) + 4|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = (_GetFuncReturn($176)|0);
     HEAP32[$175>>2] = $177;
     (_ConsumeRParen()|0);
     STACKTOP = sp;return;
    }
   }
  }
 }
 (_ED_MakeRValExpr($1)|0);
 $178 = ((($1)) + 4|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = (_GetFuncReturn($179)|0);
 HEAP32[$178>>2] = $180;
 (_ConsumeRParen()|0);
 STACKTOP = sp;return;
}
function _StdFunc_memset($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$035 = 0, $$idx = 0, $$idx$val = 0, $$idx36 = 0, $$idx36$val = 0, $$lobit$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phi58Z2D = 0, $$pre55 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond59 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer64 = 0;
 var $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer81 = 0, $vararg_buffer84 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $vararg_buffer84 = sp + 576|0;
 $vararg_buffer81 = sp + 568|0;
 $vararg_buffer78 = sp + 560|0;
 $vararg_buffer76 = sp + 552|0;
 $vararg_buffer74 = sp + 544|0;
 $vararg_buffer71 = sp + 536|0;
 $vararg_buffer69 = sp + 528|0;
 $vararg_buffer66 = sp + 520|0;
 $vararg_buffer64 = sp + 512|0;
 $vararg_buffer62 = sp + 504|0;
 $vararg_buffer59 = sp + 496|0;
 $vararg_buffer56 = sp + 488|0;
 $vararg_buffer54 = sp + 480|0;
 $vararg_buffer52 = sp + 472|0;
 $vararg_buffer49 = sp + 464|0;
 $vararg_buffer46 = sp + 456|0;
 $vararg_buffer44 = sp + 448|0;
 $vararg_buffer42 = sp + 440|0;
 $vararg_buffer39 = sp + 432|0;
 $vararg_buffer36 = sp + 424|0;
 $vararg_buffer33 = sp + 416|0;
 $vararg_buffer30 = sp + 408|0;
 $vararg_buffer28 = sp + 400|0;
 $vararg_buffer25 = sp + 392|0;
 $vararg_buffer22 = sp + 384|0;
 $vararg_buffer19 = sp + 376|0;
 $vararg_buffer17 = sp + 368|0;
 $vararg_buffer14 = sp + 360|0;
 $vararg_buffer12 = sp + 352|0;
 $vararg_buffer9 = sp + 344|0;
 $vararg_buffer6 = sp + 336|0;
 $vararg_buffer3 = sp + 328|0;
 $vararg_buffer1 = sp + 320|0;
 $vararg_buffer = sp + 312|0;
 $2 = sp + 208|0;
 $3 = sp + 104|0;
 $4 = sp;
 _ParseArg($2,168);
 $5 = ((($2)) + 100|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($2)) + 8|0);
 $8 = ((($2)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 _g_push($6,$9);
 $10 = ((($2)) + 92|0);
 _GetCodePos($10);
 $11 = (_SizeOf(168)|0);
 (_ConsumeComma()|0);
 _ParseArg($3,192);
 $12 = ((($3)) + 100|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 32;
 $15 = ($14|0)!=(0);
 $$phi$trans$insert = ((($3)) + 24|0);
 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
 $16 = ($$pre|0)==(0);
 $or$cond59 = $15 & $16;
 if ($or$cond59) {
  $$0 = 0;$$035 = $11;
 } else {
  _g_push($13,$$pre);
  $17 = ((($3)) + 92|0);
  _GetCodePos($17);
  $18 = (_SizeOf(192)|0);
  $19 = (($18) + ($11))|0;
  $$0 = 1;$$035 = $19;
 }
 (_ConsumeComma()|0);
 _ParseArg($4,208);
 $20 = ((($4)) + 100|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 32;
 $23 = ($22|0)==(0);
 $$pre55 = ((($4)) + 8|0);
 if (!($23)) {
  _LoadExpr(0,$$pre55);
 }
 $24 = ($$0|0)!=(0);
 $25 = $24 ? 15467 : 15460;
 _g_call(256,$25,$$035);
 $26 = (_ED_IsConstAbsInt($$pre55)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  $28 = ((($4)) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   _Warning(15562,$vararg_buffer);
   $31 = ((($2)) + 84|0);
   _RemoveCode($31);
   dest=$1; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   (_ConsumeRParen()|0);
   STACKTOP = sp;return;
  }
 }
 $32 = (_ED_IsConstAbsInt($$pre55)|0);
 $33 = ($32|0)==(0);
 do {
  if (!($33)) {
   $34 = ((($4)) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)<(257);
   if ($36) {
    $37 = ((($3)) + 8|0);
    $38 = (_ED_IsConstAbsInt($37)|0);
    $39 = ($38|0)==(0);
    if (!($39)) {
     $$idx36 = ((($2)) + 16|0);
     $$idx36$val = HEAP32[$$idx36>>2]|0;
     $$lobit$i = $$idx36$val & 256;
     $40 = ($$lobit$i|0)!=(0);
     $41 = $$idx36$val & 143;
     $42 = ($41|0)==(0);
     $or$cond = $40 | $42;
     $43 = $$idx36$val & 511;
     if ($or$cond) {
      $44 = ($43|0)==(264);
      if ($44) {
       $$pre$phi58Z2D = 264;
      } else {
       break;
      }
     } else {
      $$pre$phi58Z2D = $43;
     }
     $45 = ($$pre$phi58Z2D|0)==(264);
     $46 = ((($2)) + 52|0);
     _RemoveCode($46);
     $47 = (_GetLocalLabel()|0);
     $48 = HEAP32[$34>>2]|0;
     $49 = ($48|0)<(128);
     if ($49) {
      $50 = (($48) + 255)|0;
      $51 = $50 & 255;
      HEAP32[$vararg_buffer1>>2] = $51;
      _AddCodeLine(24910,$vararg_buffer1);
      $52 = ((($3)) + 24|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = $53 & 255;
      HEAP32[$vararg_buffer3>>2] = $54;
      _AddCodeLine(24940,$vararg_buffer3);
      _g_defcodelabel($47);
      $55 = (_ED_GetLabelName($7,0)|0);
      if ($45) {
       HEAP32[$vararg_buffer6>>2] = $55;
       _AddCodeLine(15515,$vararg_buffer6);
      } else {
       HEAP32[$vararg_buffer9>>2] = $55;
       _AddCodeLine(27637,$vararg_buffer9);
      }
      _AddCodeLine(25197,$vararg_buffer12);
      $56 = (_LocalLabelName($47)|0);
      HEAP32[$vararg_buffer14>>2] = $56;
      _AddCodeLine(25324,$vararg_buffer14);
     } else {
      _AddCodeLine(25968,$vararg_buffer17);
      $57 = ((($3)) + 24|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = $58 & 255;
      HEAP32[$vararg_buffer19>>2] = $59;
      _AddCodeLine(24940,$vararg_buffer19);
      _g_defcodelabel($47);
      $60 = (_ED_GetLabelName($7,0)|0);
      if ($45) {
       HEAP32[$vararg_buffer22>>2] = $60;
       _AddCodeLine(15515,$vararg_buffer22);
      } else {
       HEAP32[$vararg_buffer25>>2] = $60;
       _AddCodeLine(27637,$vararg_buffer25);
      }
      _AddCodeLine(25266,$vararg_buffer28);
      $61 = HEAP32[$34>>2]|0;
      $62 = ($61|0)==(256);
      if (!($62)) {
       HEAP32[$vararg_buffer30>>2] = $61;
       _AddCodeLine(25287,$vararg_buffer30);
      }
      $63 = (_LocalLabelName($47)|0);
      HEAP32[$vararg_buffer33>>2] = $63;
      _AddCodeLine(25205,$vararg_buffer33);
     }
     dest=$1; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     (_ConsumeRParen()|0);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $64 = (_ED_IsConstAbsInt($$pre55)|0);
 $65 = ($64|0)==(0);
 if (!($65)) {
  $66 = ((($4)) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)<(257);
  if ($68) {
   $69 = ((($3)) + 8|0);
   $70 = (_ED_IsConstAbsInt($69)|0);
   $71 = ($70|0)==(0);
   if (!($71)) {
    $$idx = ((($2)) + 16|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $72 = $$idx$val & 511;
    $73 = ($72|0)==(16);
    if ($73) {
     $74 = HEAP32[$8>>2]|0;
     $75 = HEAP32[11252]|0;
     $76 = (($74) - ($75))|0;
     $77 = HEAP32[$66>>2]|0;
     $78 = (($76) + ($77))|0;
     $79 = ($78|0)<(256);
     if ($79) {
      $80 = (_ED_GetStackOffs($7,0)|0);
      $81 = ((($2)) + 52|0);
      _RemoveCode($81);
      $82 = (_GetLocalLabel()|0);
      $83 = $80 & 255;
      HEAP32[$vararg_buffer36>>2] = $83;
      _AddCodeLine(24910,$vararg_buffer36);
      $84 = ((($3)) + 24|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = $85 & 255;
      HEAP32[$vararg_buffer39>>2] = $86;
      _AddCodeLine(24940,$vararg_buffer39);
      _g_defcodelabel($82);
      _AddCodeLine(25108,$vararg_buffer42);
      _AddCodeLine(25266,$vararg_buffer44);
      $87 = HEAP32[$66>>2]|0;
      $88 = (($87) + ($80))|0;
      $89 = ($88|0)==(256);
      if (!($89)) {
       HEAP32[$vararg_buffer46>>2] = $88;
       _AddCodeLine(25287,$vararg_buffer46);
      }
      $90 = (_LocalLabelName($82)|0);
      HEAP32[$vararg_buffer49>>2] = $90;
      _AddCodeLine(25205,$vararg_buffer49);
      dest=$1; src=$7; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
      (_ConsumeRParen()|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $91 = (_ED_IsConstAbsInt($$pre55)|0);
 $92 = ($91|0)==(0);
 do {
  if (!($92)) {
   $93 = ((($4)) + 24|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($94|0)<(257);
   if ($95) {
    $96 = ((($3)) + 8|0);
    $97 = (_ED_IsConstAbsInt($96)|0);
    $98 = ($97|0)==(0);
    if (!($98)) {
     $99 = ((($3)) + 24|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==(0);
     if ($101) {
      $102 = (_IS_Get(8588)|0);
      $103 = ($102|0)>(200);
      if (!($103)) {
       break;
      }
     }
     $104 = ((($2)) + 84|0);
     _RemoveCode($104);
     $105 = (_GetLocalLabel()|0);
     _AddCodeLine(25640,$vararg_buffer52);
     _AddCodeLine(25649,$vararg_buffer54);
     $106 = HEAP32[$93>>2]|0;
     $107 = ($106|0)<(128);
     if ($107) {
      $108 = (($106) + 255)|0;
      $109 = $108 & 255;
      HEAP32[$vararg_buffer56>>2] = $109;
      _AddCodeLine(24910,$vararg_buffer56);
      $110 = HEAP32[$99>>2]|0;
      $111 = $110 & 255;
      HEAP32[$vararg_buffer59>>2] = $111;
      _AddCodeLine(24940,$vararg_buffer59);
      _g_defcodelabel($105);
      _AddCodeLine(26831,$vararg_buffer62);
      _AddCodeLine(25197,$vararg_buffer64);
      $112 = (_LocalLabelName($105)|0);
      HEAP32[$vararg_buffer66>>2] = $112;
      _AddCodeLine(25324,$vararg_buffer66);
     } else {
      _AddCodeLine(25968,$vararg_buffer69);
      $113 = HEAP32[$99>>2]|0;
      $114 = $113 & 255;
      HEAP32[$vararg_buffer71>>2] = $114;
      _AddCodeLine(24940,$vararg_buffer71);
      _g_defcodelabel($105);
      _AddCodeLine(26831,$vararg_buffer74);
      _AddCodeLine(25266,$vararg_buffer76);
      $115 = HEAP32[$93>>2]|0;
      $116 = ($115|0)==(256);
      if (!($116)) {
       HEAP32[$vararg_buffer78>>2] = $115;
       _AddCodeLine(25287,$vararg_buffer78);
      }
      $117 = (_LocalLabelName($105)|0);
      HEAP32[$vararg_buffer81>>2] = $117;
      _AddCodeLine(25205,$vararg_buffer81);
     }
     _AddCodeLine(15591,$vararg_buffer84);
     (_ED_MakeRValExpr($1)|0);
     $118 = ((($1)) + 4|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (_GetFuncReturn($119)|0);
     HEAP32[$118>>2] = $120;
     (_ConsumeRParen()|0);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 (_ED_MakeRValExpr($1)|0);
 $121 = ((($1)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (_GetFuncReturn($122)|0);
 HEAP32[$121>>2] = $123;
 (_ConsumeRParen()|0);
 STACKTOP = sp;return;
}
function _StdFunc_strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i94 = 0, $$0 = 0, $$0$i = 0, $$0$i95 = 0, $$061$off = 0, $$061$off64 = 0, $$062 = 0, $$063 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i93 = 0, $$idx68 = 0, $$idx68$val = 0, $$idx69$val = 0, $$idx70 = 0, $$idx70$val = 0, $$idx74$val = 0, $$idx74$val$pre = 0;
 var $$idx75$val = 0, $$idx77$val = 0, $$idx78$val = 0, $$idx88$val = 0, $$idx89 = 0, $$idx89$val = 0, $$idx90 = 0, $$idx90$val = 0, $$idx91 = 0, $$idx91$val = 0, $$lobit$i102 = 0, $$lobit$i104 = 0, $$lobit$i105 = 0, $$lobit$i98 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $notlhs = 0, $notlhs131 = 0, $notlhs133 = 0, $notrhs = 0, $notrhs132 = 0;
 var $notrhs134 = 0, $or$cond = 0, $or$cond107$not = 0, $or$cond111$not = 0, $or$cond119$not = 0, $or$cond126 = 0, $or$cond128 = 0, $or$cond130 = 0, $or$cond67 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $vararg_buffer67 = sp + 432|0;
 $vararg_buffer64 = sp + 424|0;
 $vararg_buffer62 = sp + 416|0;
 $vararg_buffer59 = sp + 408|0;
 $vararg_buffer56 = sp + 400|0;
 $vararg_buffer54 = sp + 392|0;
 $vararg_buffer52 = sp + 384|0;
 $vararg_buffer49 = sp + 376|0;
 $vararg_buffer47 = sp + 368|0;
 $vararg_buffer44 = sp + 360|0;
 $vararg_buffer42 = sp + 352|0;
 $vararg_buffer40 = sp + 344|0;
 $vararg_buffer38 = sp + 336|0;
 $vararg_buffer36 = sp + 328|0;
 $vararg_buffer33 = sp + 320|0;
 $vararg_buffer31 = sp + 312|0;
 $vararg_buffer28 = sp + 304|0;
 $vararg_buffer25 = sp + 296|0;
 $vararg_buffer22 = sp + 288|0;
 $vararg_buffer20 = sp + 280|0;
 $vararg_buffer17 = sp + 272|0;
 $vararg_buffer15 = sp + 264|0;
 $vararg_buffer12 = sp + 256|0;
 $vararg_buffer10 = sp + 248|0;
 $vararg_buffer7 = sp + 240|0;
 $vararg_buffer5 = sp + 232|0;
 $vararg_buffer3 = sp + 224|0;
 $vararg_buffer1 = sp + 216|0;
 $vararg_buffer = sp + 208|0;
 $2 = sp + 104|0;
 $3 = sp;
 $4 = (_GetDefaultChar()|0);
 $5 = $4 | 2048;
 HEAP32[(128)>>2] = $5;
 $6 = (_GetDefaultChar()|0);
 $7 = $6 | 2048;
 HEAP32[(152)>>2] = $7;
 _ParseArg($2,120);
 $8 = ((($2)) + 100|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($2)) + 8|0);
 $11 = ((($2)) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 _g_push($9,$12);
 $13 = (_SizeOf(120)|0);
 (_ConsumeComma()|0);
 _ParseArg($3,144);
 $14 = ((($3)) + 100|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 32;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = ((($3)) + 8|0);
  _LoadExpr(0,$18);
 }
 _g_call(256,15474,$13);
 $$idx90 = ((($2)) + 72|0);
 $$idx90$val = HEAP32[$$idx90>>2]|0;
 $$idx$val$i = HEAP32[$$idx90$val>>2]|0;
 $19 = $$idx$val$i & 15;
 $20 = ($19|0)==(12);
 if ($20) {
  $21 = (_GetElementCount($$idx90$val)|0);
  $22 = ($21|0)==(0);
  $$$i = $22 ? -1 : $21;
  $$0$i = $$$i;
 } else {
  $$0$i = -1;
 }
 $$idx89 = ((($3)) + 72|0);
 $$idx89$val = HEAP32[$$idx89>>2]|0;
 $$idx$val$i93 = HEAP32[$$idx89$val>>2]|0;
 $23 = $$idx$val$i93 & 15;
 $24 = ($23|0)==(12);
 if ($24) {
  $25 = (_GetElementCount($$idx89$val)|0);
  $26 = ($25|0)==(0);
  $$$i94 = $26 ? -1 : $25;
  $$0$i95 = $$$i94;
 } else {
  $$0$i95 = -1;
 }
 $27 = ($$0$i95|0)>($$0$i|0);
 $$ = $27 ? $$0$i95 : $$0$i;
 $28 = ((($3)) + 8|0);
 $$idx91 = ((($3)) + 16|0);
 $$idx91$val = HEAP32[$$idx91>>2]|0;
 $29 = $$idx91$val & 255;
 $30 = ($29|0)==(128);
 if ($30) {
  $31 = (_IS_Get(8264)|0);
  $32 = ($31|0)==(0);
  if ($32) {
   $33 = ((($3)) + 40|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_GetLiteralSize($34)|0);
   $36 = ($35|0)==(1);
   if ($36) {
    $37 = HEAP32[$33>>2]|0;
    $38 = (_GetLiteralStr($37)|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = ($39<<24>>24)==(0);
    if ($40) {
     $41 = ((($2)) + 84|0);
     _RemoveCode($41);
     $42 = HEAP32[$33>>2]|0;
     _ReleaseLiteral($42);
     $43 = HEAP32[$$idx90>>2]|0;
     $$idx88$val = HEAP32[$43>>2]|0;
     $44 = $$idx88$val & 15;
     $45 = ($44|0)==(12);
     if ($45) {
      $$idx70 = ((($2)) + 16|0);
      $$idx70$val = HEAP32[$$idx70>>2]|0;
      $$lobit$i105 = $$idx70$val & 256;
      $46 = ($$lobit$i105|0)==(0);
      if ($46) {
       $47 = $$idx70$val & 255;
       $48 = ($47|0)==(16);
       do {
        if ($48) {
         $49 = (_ED_GetStackOffs($10,0)|0);
         $50 = ($49|0)<(256);
         if (!($50)) {
          $$idx74$val$pre = HEAP32[$$idx70>>2]|0;
          $$idx74$val = $$idx74$val$pre;
          break;
         }
         $51 = ((($2)) + 76|0);
         _RemoveCode($51);
         HEAP32[$vararg_buffer>>2] = 1;
         _AddCodeLine(24910,$vararg_buffer);
         _AddCodeLine(25482,$vararg_buffer1);
         _AddCodeLine(25063,$vararg_buffer3);
         (_ED_MakeRValExpr($1)|0);
         $100 = ((($1)) + 4|0);
         $101 = HEAP32[$100>>2]|0;
         $102 = (_GetFuncReturn($101)|0);
         HEAP32[$100>>2] = $102;
         (_ConsumeRParen()|0);
         STACKTOP = sp;return;
        } else {
         $$idx74$val = $$idx70$val;
        }
       } while(0);
       $52 = $$idx74$val & 143;
       $53 = ($52|0)==(0);
       if (!($53)) {
        $54 = ((($2)) + 76|0);
        _RemoveCode($54);
        _AddCodeLine(25482,$vararg_buffer5);
        $55 = (_ED_GetLabelName($10,0)|0);
        HEAP32[$vararg_buffer7>>2] = $55;
        _AddCodeLine(25475,$vararg_buffer7);
        (_ED_MakeRValExpr($1)|0);
        $100 = ((($1)) + 4|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = (_GetFuncReturn($101)|0);
        HEAP32[$100>>2] = $102;
        (_ConsumeRParen()|0);
        STACKTOP = sp;return;
       }
      }
     }
     _RemoveCode($41);
     _g_getind(11,0);
     (_ED_MakeRValExpr($1)|0);
     $100 = ((($1)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (_GetFuncReturn($101)|0);
     HEAP32[$100>>2] = $102;
     (_ConsumeRParen()|0);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $56 = (_IS_Get(8588)|0);
 $57 = ($56|0)>(164);
 if ($57) {
  $$idx69$val = HEAP32[$$idx91>>2]|0;
  $$lobit$i104 = $$idx69$val & 256;
  $58 = $$idx69$val & 143;
  $notlhs131 = ($$lobit$i104|0)==(0);
  $notrhs132 = ($58|0)!=(0);
  $or$cond107$not = $notrhs132 & $notlhs131;
  $59 = $$idx69$val & 511;
  $60 = ($59|0)==(264);
  $or$cond126 = $or$cond107$not | $60;
  if ($or$cond126) {
   $$idx68 = ((($2)) + 16|0);
   $$idx68$val = HEAP32[$$idx68>>2]|0;
   $$lobit$i102 = $$idx68$val & 256;
   $61 = $$idx68$val & 143;
   $notlhs133 = ($$lobit$i102|0)==(0);
   $notrhs134 = ($61|0)!=(0);
   $or$cond111$not = $notrhs134 & $notlhs133;
   $62 = $$idx68$val & 511;
   $63 = ($62|0)==(264);
   $or$cond128 = $or$cond111$not | $63;
   if ($or$cond128) {
    $64 = (_IS_Get(8336)|0);
    $65 = ($64|0)!=(0);
    $$061$off64 = (($$) + -1)|0;
    $66 = ($$061$off64>>>0)<(255);
    $or$cond = $66 | $65;
    if ($or$cond) {
     $$idx78$val = HEAP32[$$idx68>>2]|0;
     $67 = $$idx78$val & 511;
     $68 = ($67|0)==(264);
     $$062 = $68 ? 15504 : 27628;
     $$idx77$val = HEAP32[$$idx91>>2]|0;
     $69 = $$idx77$val & 511;
     $70 = ($69|0)==(264);
     $$063 = $70 ? 15526 : 15537;
     $71 = ((($2)) + 52|0);
     _RemoveCode($71);
     $72 = (_GetLocalLabel()|0);
     $73 = (_GetLocalLabel()|0);
     $74 = (_GetLocalLabel()|0);
     _AddCodeLine(25968,$vararg_buffer10);
     $75 = (_LocalLabelName($72)|0);
     HEAP32[$vararg_buffer12>>2] = $75;
     _AddCodeLine(15546,$vararg_buffer12);
     _g_defcodelabel($73);
     _AddCodeLine(25604,$vararg_buffer15);
     $76 = (_LocalLabelName($74)|0);
     HEAP32[$vararg_buffer17>>2] = $76;
     _AddCodeLine(15546,$vararg_buffer17);
     _AddCodeLine(25266,$vararg_buffer20);
     _g_defcodelabel($72);
     $77 = (_ED_GetLabelName($10,0)|0);
     HEAP32[$vararg_buffer22>>2] = $77;
     _AddCodeLine($$062,$vararg_buffer22);
     $78 = (_ED_GetLabelName($28,0)|0);
     HEAP32[$vararg_buffer25>>2] = $78;
     _AddCodeLine($$063,$vararg_buffer25);
     $79 = (_LocalLabelName($73)|0);
     HEAP32[$vararg_buffer28>>2] = $79;
     _AddCodeLine(15546,$vararg_buffer28);
     _AddCodeLine(15553,$vararg_buffer31);
     $80 = (_LocalLabelName($74)|0);
     HEAP32[$vararg_buffer33>>2] = $80;
     _AddCodeLine(25866,$vararg_buffer33);
     _AddCodeLine(27195,$vararg_buffer36);
     _g_defcodelabel($74);
     (_ED_MakeRValExpr($1)|0);
     $100 = ((($1)) + 4|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = (_GetFuncReturn($101)|0);
     HEAP32[$100>>2] = $102;
     (_ConsumeRParen()|0);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $81 = (_IS_Get(8588)|0);
 $82 = ($81|0)>(190);
 if (!($82)) {
  (_ED_MakeRValExpr($1)|0);
  $100 = ((($1)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_GetFuncReturn($101)|0);
  HEAP32[$100>>2] = $102;
  (_ConsumeRParen()|0);
  STACKTOP = sp;return;
 }
 $$idx$val = HEAP32[$$idx91>>2]|0;
 $$lobit$i98 = $$idx$val & 256;
 $83 = $$idx$val & 143;
 $notlhs = ($$lobit$i98|0)==(0);
 $notrhs = ($83|0)!=(0);
 $or$cond119$not = $notrhs & $notlhs;
 $84 = $$idx$val & 511;
 $85 = ($84|0)==(264);
 $or$cond130 = $or$cond119$not | $85;
 if (!($or$cond130)) {
  (_ED_MakeRValExpr($1)|0);
  $100 = ((($1)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_GetFuncReturn($101)|0);
  HEAP32[$100>>2] = $102;
  (_ConsumeRParen()|0);
  STACKTOP = sp;return;
 }
 $86 = (_IS_Get(8336)|0);
 $87 = ($86|0)!=(0);
 $$061$off = (($$) + -1)|0;
 $88 = ($$061$off>>>0)<(255);
 $or$cond67 = $88 | $87;
 if (!($or$cond67)) {
  (_ED_MakeRValExpr($1)|0);
  $100 = ((($1)) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_GetFuncReturn($101)|0);
  HEAP32[$100>>2] = $102;
  (_ConsumeRParen()|0);
  STACKTOP = sp;return;
 }
 $$idx75$val = HEAP32[$$idx91>>2]|0;
 $89 = $$idx75$val & 511;
 $90 = ($89|0)==(264);
 $$0 = $90 ? 15526 : 15537;
 $91 = ((($2)) + 84|0);
 _RemoveCode($91);
 $92 = (_GetLocalLabel()|0);
 $93 = (_GetLocalLabel()|0);
 $94 = (_GetLocalLabel()|0);
 _AddCodeLine(25640,$vararg_buffer38);
 _AddCodeLine(25649,$vararg_buffer40);
 _AddCodeLine(25968,$vararg_buffer42);
 $95 = (_LocalLabelName($92)|0);
 HEAP32[$vararg_buffer44>>2] = $95;
 _AddCodeLine(15546,$vararg_buffer44);
 _g_defcodelabel($93);
 _AddCodeLine(25604,$vararg_buffer47);
 $96 = (_LocalLabelName($94)|0);
 HEAP32[$vararg_buffer49>>2] = $96;
 _AddCodeLine(15546,$vararg_buffer49);
 _AddCodeLine(25266,$vararg_buffer52);
 _g_defcodelabel($92);
 _AddCodeLine(25660,$vararg_buffer54);
 $97 = (_ED_GetLabelName($28,0)|0);
 HEAP32[$vararg_buffer56>>2] = $97;
 _AddCodeLine($$0,$vararg_buffer56);
 $98 = (_LocalLabelName($93)|0);
 HEAP32[$vararg_buffer59>>2] = $98;
 _AddCodeLine(15546,$vararg_buffer59);
 _AddCodeLine(15553,$vararg_buffer62);
 $99 = (_LocalLabelName($94)|0);
 HEAP32[$vararg_buffer64>>2] = $99;
 _AddCodeLine(25866,$vararg_buffer64);
 _AddCodeLine(27195,$vararg_buffer67);
 _g_defcodelabel($94);
 (_ED_MakeRValExpr($1)|0);
 $100 = ((($1)) + 4|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (_GetFuncReturn($101)|0);
 HEAP32[$100>>2] = $102;
 (_ConsumeRParen()|0);
 STACKTOP = sp;return;
}
function _StdFunc_strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i = 0, $$053 = 0, $$idx = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx56$val = 0, $$idx57 = 0, $$idx57$val = 0, $$idx58$val$pre = 0, $$idx59 = 0, $$idx59$val = 0, $$idx60 = 0, $$idx60$val = 0, $$idx65$val = 0, $$idx66$val = 0, $$idx79 = 0, $$idx79$val = 0, $$lobit$i = 0;
 var $$lobit$i80 = 0, $$lobit$i82 = 0, $$lobit$i83 = 0, $$lobit$i87 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $notlhs = 0, $notlhs111 = 0, $notlhs113 = 0, $notlhs54 = 0, $notrhs = 0, $notrhs112 = 0;
 var $notrhs114 = 0, $notrhs55 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond108 = 0, $or$cond110 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond90$not = 0, $or$cond94$not = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer8 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0;
 $vararg_buffer56 = sp + 400|0;
 $vararg_buffer54 = sp + 392|0;
 $vararg_buffer51 = sp + 384|0;
 $vararg_buffer49 = sp + 376|0;
 $vararg_buffer47 = sp + 368|0;
 $vararg_buffer45 = sp + 360|0;
 $vararg_buffer43 = sp + 352|0;
 $vararg_buffer40 = sp + 344|0;
 $vararg_buffer38 = sp + 336|0;
 $vararg_buffer35 = sp + 328|0;
 $vararg_buffer32 = sp + 320|0;
 $vararg_buffer29 = sp + 312|0;
 $vararg_buffer27 = sp + 304|0;
 $vararg_buffer25 = sp + 296|0;
 $vararg_buffer23 = sp + 288|0;
 $vararg_buffer21 = sp + 280|0;
 $vararg_buffer18 = sp + 272|0;
 $vararg_buffer16 = sp + 264|0;
 $vararg_buffer14 = sp + 256|0;
 $vararg_buffer11 = sp + 248|0;
 $vararg_buffer8 = sp + 240|0;
 $vararg_buffer5 = sp + 232|0;
 $vararg_buffer3 = sp + 224|0;
 $vararg_buffer1 = sp + 216|0;
 $vararg_buffer = sp + 208|0;
 $2 = sp + 104|0;
 $3 = sp;
 $4 = (_GetDefaultChar()|0);
 HEAP32[(80)>>2] = $4;
 $5 = (_GetDefaultChar()|0);
 $6 = $5 | 2048;
 HEAP32[(104)>>2] = $6;
 _ParseArg($2,72);
 $7 = ((($2)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($2)) + 8|0);
 $10 = ((($2)) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 _g_push($8,$11);
 $12 = ((($2)) + 92|0);
 _GetCodePos($12);
 $13 = (_SizeOf(72)|0);
 (_ConsumeComma()|0);
 _ParseArg($3,96);
 $14 = ((($3)) + 100|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 32;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = ((($3)) + 8|0);
  _LoadExpr(0,$18);
 }
 _g_call(256,15481,$13);
 $$idx79 = ((($2)) + 72|0);
 $$idx79$val = HEAP32[$$idx79>>2]|0;
 $$idx$val$i = HEAP32[$$idx79$val>>2]|0;
 $19 = $$idx$val$i & 15;
 $20 = ($19|0)==(12);
 if ($20) {
  $21 = (_GetElementCount($$idx79$val)|0);
  $22 = ($21|0)==(0);
  $$$i = $22 ? -1 : $21;
  $$0$i = $$$i;
 } else {
  $$0$i = -1;
 }
 $23 = ((($3)) + 8|0);
 $$idx60 = ((($3)) + 16|0);
 $$idx60$val = HEAP32[$$idx60>>2]|0;
 $$lobit$i = $$idx60$val & 256;
 $24 = $$idx60$val & 143;
 $notlhs111 = ($$lobit$i|0)==(0);
 $notrhs112 = ($24|0)!=(0);
 $or$cond90$not = $notrhs112 & $notlhs111;
 $25 = $$idx60$val & 511;
 $26 = ($25|0)==(264);
 $or$cond108 = $or$cond90$not | $26;
 do {
  if ($or$cond108) {
   $$idx59 = ((($2)) + 16|0);
   $$idx59$val = HEAP32[$$idx59>>2]|0;
   $$lobit$i87 = $$idx59$val & 256;
   $27 = $$idx59$val & 143;
   $notlhs113 = ($$lobit$i87|0)==(0);
   $notrhs114 = ($27|0)!=(0);
   $or$cond94$not = $notrhs114 & $notlhs113;
   $28 = $$idx59$val & 511;
   $29 = ($28|0)==(264);
   $or$cond110 = $or$cond94$not | $29;
   if ($or$cond110) {
    $30 = (_IS_Get(8336)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = ($$0$i|0)!=(-1);
     $33 = ($$0$i|0)<(256);
     $or$cond = $32 & $33;
     if (!($or$cond)) {
      $$idx58$val$pre = HEAP32[$$idx60>>2]|0;
      $$idx56$val = $$idx58$val$pre;
      break;
     }
    }
    $$idx66$val = HEAP32[$$idx60>>2]|0;
    $34 = $$idx66$val & 511;
    $35 = ($34|0)==(264);
    $$0 = $35 ? 15504 : 27628;
    $$idx65$val = HEAP32[$$idx59>>2]|0;
    $36 = $$idx65$val & 511;
    $37 = ($36|0)==(264);
    $$053 = $37 ? 15515 : 27637;
    $38 = ((($2)) + 52|0);
    _RemoveCode($38);
    $39 = (_GetLocalLabel()|0);
    _AddCodeLine(15495,$vararg_buffer);
    _g_defcodelabel($39);
    _AddCodeLine(25266,$vararg_buffer1);
    $40 = (_ED_GetLabelName($23,0)|0);
    HEAP32[$vararg_buffer3>>2] = $40;
    _AddCodeLine($$0,$vararg_buffer3);
    $41 = (_ED_GetLabelName($9,0)|0);
    HEAP32[$vararg_buffer5>>2] = $41;
    _AddCodeLine($$053,$vararg_buffer5);
    $42 = (_LocalLabelName($39)|0);
    HEAP32[$vararg_buffer8>>2] = $42;
    _AddCodeLine(25205,$vararg_buffer8);
    dest=$1; src=$9; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    (_ConsumeRParen()|0);
    STACKTOP = sp;return;
   } else {
    $$idx56$val = $$idx60$val;
   }
  } else {
   $$idx56$val = $$idx60$val;
  }
 } while(0);
 $$lobit$i83 = $$idx56$val & 256;
 $43 = ($$lobit$i83|0)==(0);
 if ($43) {
  $44 = $$idx56$val & 255;
  $45 = ($44|0)==(16);
  $46 = HEAP32[11252]|0;
  $47 = ($46|0)>(-256);
  $or$cond3 = $45 & $47;
  if ($or$cond3) {
   $$idx57 = ((($2)) + 16|0);
   $$idx57$val = HEAP32[$$idx57>>2]|0;
   $$lobit$i82 = $$idx57$val & 256;
   $48 = ($$lobit$i82|0)!=(0);
   $49 = $$idx57$val & 143;
   $50 = ($49|0)==(0);
   $or$cond102 = $48 | $50;
   if (!($or$cond102)) {
    $51 = $$idx57$val & 255;
    $52 = ($51|0)==(8);
    if ($52) {
     $61 = 0;
    } else {
     $53 = HEAP32[$10>>2]|0;
     $notlhs54 = ($51|0)!=(1);
     $notrhs55 = ($53|0)>(255);
     $54 = $notlhs54 | $notrhs55;
     $61 = $54;
    }
    $55 = (_ED_GetStackOffs($23,0)|0);
    $56 = ((($2)) + 52|0);
    _RemoveCode($56);
    $57 = (_GetLocalLabel()|0);
    $58 = (($55) + 255)|0;
    $59 = $58 & 255;
    HEAP32[$vararg_buffer11>>2] = $59;
    _AddCodeLine(24910,$vararg_buffer11);
    $60 = ($55|0)==(0);
    $or$cond5 = $61 | $60;
    if ($or$cond5) {
     _g_defcodelabel($57);
     _AddCodeLine(25266,$vararg_buffer14);
     _AddCodeLine(25063,$vararg_buffer16);
     $62 = (0 - ($55))|0;
     $63 = (_ED_GetLabelName($9,$62)|0);
     HEAP32[$vararg_buffer18>>2] = $63;
     _AddCodeLine(27637,$vararg_buffer18);
    } else {
     _AddCodeLine(27195,$vararg_buffer21);
     _g_defcodelabel($57);
     _AddCodeLine(25266,$vararg_buffer23);
     _AddCodeLine(25726,$vararg_buffer25);
     _AddCodeLine(25063,$vararg_buffer27);
     $64 = (_ED_GetLabelName($9,0)|0);
     HEAP32[$vararg_buffer29>>2] = $64;
     _AddCodeLine(27619,$vararg_buffer29);
    }
    $65 = (_LocalLabelName($57)|0);
    HEAP32[$vararg_buffer32>>2] = $65;
    _AddCodeLine(25205,$vararg_buffer32);
    dest=$1; src=$9; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
    (_ConsumeRParen()|0);
    STACKTOP = sp;return;
   }
  }
  $66 = $$idx56$val & 143;
  $67 = ($66|0)==(0);
  if (!($67)) {
   $$idx = ((($2)) + 16|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$lobit$i80 = $$idx$val & 256;
   $68 = ($$lobit$i80|0)==(0);
   if ($68) {
    $69 = $$idx$val & 255;
    $70 = ($69|0)==(16);
    $71 = HEAP32[11252]|0;
    $72 = ($71|0)>(-256);
    $or$cond7 = $70 & $72;
    if ($or$cond7) {
     $73 = $$idx56$val & 255;
     $74 = ($73|0)==(8);
     if ($74) {
      $84 = 0;
     } else {
      $75 = ((($3)) + 24|0);
      $76 = HEAP32[$75>>2]|0;
      $notlhs = ($73|0)!=(1);
      $notrhs = ($76|0)>(255);
      $77 = $notlhs | $notrhs;
      $84 = $77;
     }
     $78 = (_ED_GetStackOffs($9,0)|0);
     $79 = ((($2)) + 52|0);
     _RemoveCode($79);
     $80 = (_GetLocalLabel()|0);
     $81 = (($78) + 255)|0;
     $82 = $81 & 255;
     HEAP32[$vararg_buffer35>>2] = $82;
     _AddCodeLine(24910,$vararg_buffer35);
     $83 = ($78|0)==(0);
     $or$cond9 = $84 | $83;
     if ($or$cond9) {
      _g_defcodelabel($80);
      _AddCodeLine(25266,$vararg_buffer38);
      $85 = (0 - ($78))|0;
      $86 = (_ED_GetLabelName($23,$85)|0);
      HEAP32[$vararg_buffer40>>2] = $86;
      _AddCodeLine(27628,$vararg_buffer40);
      _AddCodeLine(25108,$vararg_buffer43);
     } else {
      _AddCodeLine(27195,$vararg_buffer45);
      _g_defcodelabel($80);
      _AddCodeLine(25266,$vararg_buffer47);
      _AddCodeLine(25726,$vararg_buffer49);
      $87 = (_ED_GetLabelName($23,0)|0);
      HEAP32[$vararg_buffer51>>2] = $87;
      _AddCodeLine(27610,$vararg_buffer51);
      _AddCodeLine(25108,$vararg_buffer54);
     }
     $88 = (_LocalLabelName($80)|0);
     HEAP32[$vararg_buffer56>>2] = $88;
     _AddCodeLine(25205,$vararg_buffer56);
     dest=$1; src=$9; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     (_ConsumeRParen()|0);
     STACKTOP = sp;return;
    }
   }
  }
 }
 (_ED_MakeRValExpr($1)|0);
 $89 = ((($1)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (_GetFuncReturn($90)|0);
 HEAP32[$89>>2] = $91;
 (_ConsumeRParen()|0);
 STACKTOP = sp;return;
}
function _StdFunc_strlen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$049 = 0, $$idx$val = 0, $$idx$val$pre = 0, $$idx51$val = 0, $$idx52$val$pre = 0, $$idx53$val = 0, $$idx54 = 0, $$idx54$val = 0, $$lobit$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $vararg_buffer61 = sp + 288|0;
 $vararg_buffer59 = sp + 280|0;
 $vararg_buffer57 = sp + 272|0;
 $vararg_buffer54 = sp + 264|0;
 $vararg_buffer52 = sp + 256|0;
 $vararg_buffer50 = sp + 248|0;
 $vararg_buffer48 = sp + 240|0;
 $vararg_buffer46 = sp + 232|0;
 $vararg_buffer44 = sp + 224|0;
 $vararg_buffer42 = sp + 216|0;
 $vararg_buffer40 = sp + 208|0;
 $vararg_buffer37 = sp + 200|0;
 $vararg_buffer34 = sp + 192|0;
 $vararg_buffer32 = sp + 184|0;
 $vararg_buffer30 = sp + 176|0;
 $vararg_buffer28 = sp + 168|0;
 $vararg_buffer26 = sp + 160|0;
 $vararg_buffer23 = sp + 152|0;
 $vararg_buffer21 = sp + 144|0;
 $vararg_buffer19 = sp + 136|0;
 $vararg_buffer17 = sp + 128|0;
 $vararg_buffer14 = sp + 120|0;
 $vararg_buffer12 = sp + 112|0;
 $vararg_buffer10 = sp + 104|0;
 $vararg_buffer8 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $2 = sp;
 $3 = (_GetDefaultChar()|0);
 $4 = $3 | 2048;
 HEAP32[(56)>>2] = $4;
 _hie1($2);
 $5 = ((($2)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $$idx53$val = HEAP32[$6>>2]|0;
 $7 = $$idx53$val & 15;
 $8 = ($7|0)==(12);
 if ($8) {
  $9 = (_GetElementCount($6)|0);
  $10 = ($9|0)==(0);
  $$ = $10 ? -1 : $9;
  $$0 = 0;$$049 = $$;
 } else {
  $11 = ($7|0)==(13);
  $12 = $11&1;
  $$0 = $12;$$049 = -1;
 }
 $13 = ($$049|0)!=(-1);
 $14 = ($$049|0)<(256);
 $15 = $13 & $14;
 _TypeConversion($2,48);
 $$idx54 = ((($2)) + 8|0);
 $$idx54$val = HEAP32[$$idx54>>2]|0;
 $16 = $$idx54$val & 255;
 $17 = ($16|0)==(128);
 do {
  if ($17) {
   $18 = (_IS_Get(8264)|0);
   $19 = ($18|0)==(0);
   if (!($19)) {
    $$idx$val$pre = HEAP32[$$idx54>>2]|0;
    $$idx$val = $$idx$val$pre;
    break;
   }
   $20 = ((($2)) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (_GetLiteralSize($21)|0);
   $23 = (($22) + -1)|0;
   (_ED_MakeConstAbs($1,$23,11020)|0);
   $24 = HEAP32[$20>>2]|0;
   _ReleaseLiteral($24);
   (_ConsumeRParen()|0);
   STACKTOP = sp;return;
  } else {
   $$idx$val = $$idx54$val;
  }
 } while(0);
 $25 = $$idx$val & 143;
 $26 = ($25|0)!=(0);
 $or$cond = $8 & $26;
 do {
  if ($or$cond) {
   $27 = (_IS_Get(8336)|0);
   $28 = ($27|0)!=(0);
   $or$cond3 = $15 | $28;
   if (!($or$cond3)) {
    $$idx52$val$pre = HEAP32[$$idx54>>2]|0;
    $$idx51$val = $$idx52$val$pre;
    break;
   }
   $29 = (_GetLocalLabel()|0);
   _AddCodeLine(15495,$vararg_buffer);
   _g_defcodelabel($29);
   _AddCodeLine(25266,$vararg_buffer1);
   $30 = (_ED_GetLabelName($2,0)|0);
   HEAP32[$vararg_buffer3>>2] = $30;
   _AddCodeLine(27628,$vararg_buffer3);
   $31 = (_LocalLabelName($29)|0);
   HEAP32[$vararg_buffer5>>2] = $31;
   _AddCodeLine(25205,$vararg_buffer5);
   _AddCodeLine(25604,$vararg_buffer8);
   _AddCodeLine(25939,$vararg_buffer10);
   (_ED_MakeRValExpr($1)|0);
   $32 = ((($1)) + 4|0);
   HEAP32[$32>>2] = 11020;
   (_ConsumeRParen()|0);
   STACKTOP = sp;return;
  } else {
   $$idx51$val = $$idx$val;
  }
 } while(0);
 $33 = $$idx51$val & 255;
 $34 = ($33|0)==(16);
 $or$cond5 = $8 & $34;
 $or$cond7 = $15 & $or$cond5;
 if ($or$cond7) {
  $35 = ((($2)) + 16|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[11252]|0;
  $38 = (($36) + ($$049))|0;
  $39 = (($38) - ($37))|0;
  $40 = ($39|0)<(256);
  if ($40) {
   $41 = (_ED_GetStackOffs($2,0)|0);
   $42 = (_GetLocalLabel()|0);
   _AddCodeLine(27195,$vararg_buffer12);
   $43 = (($41) + 255)|0;
   $44 = $43 & 255;
   HEAP32[$vararg_buffer14>>2] = $44;
   _AddCodeLine(24910,$vararg_buffer14);
   _g_defcodelabel($42);
   _AddCodeLine(25726,$vararg_buffer17);
   _AddCodeLine(25266,$vararg_buffer19);
   _AddCodeLine(25063,$vararg_buffer21);
   $45 = (_LocalLabelName($42)|0);
   HEAP32[$vararg_buffer23>>2] = $45;
   _AddCodeLine(25205,$vararg_buffer23);
   _AddCodeLine(25104,$vararg_buffer26);
   _AddCodeLine(25482,$vararg_buffer28);
   (_ED_MakeRValExpr($1)|0);
   $46 = ((($1)) + 4|0);
   HEAP32[$46>>2] = 11020;
   (_ConsumeRParen()|0);
   STACKTOP = sp;return;
  }
 }
 $47 = ($33|0)==(8);
 if ($47) {
  $$lobit$i = $$idx51$val & 256;
  $48 = ($$lobit$i|0)!=(0);
  $49 = ($$0|0)!=(0);
  $or$cond9 = $49 & $48;
  if ($or$cond9) {
   $50 = (_IS_Get(8336)|0);
   $51 = ($50|0)==(0);
   if (!($51)) {
    $52 = (_GetLocalLabel()|0);
    _AddCodeLine(15495,$vararg_buffer30);
    _g_defcodelabel($52);
    _AddCodeLine(25266,$vararg_buffer32);
    $53 = (_ED_GetLabelName($2,0)|0);
    HEAP32[$vararg_buffer34>>2] = $53;
    _AddCodeLine(15504,$vararg_buffer34);
    $54 = (_LocalLabelName($52)|0);
    HEAP32[$vararg_buffer37>>2] = $54;
    _AddCodeLine(25205,$vararg_buffer37);
    _AddCodeLine(25604,$vararg_buffer40);
    _AddCodeLine(25939,$vararg_buffer42);
    (_ED_MakeRValExpr($1)|0);
    $55 = ((($1)) + 4|0);
    HEAP32[$55>>2] = 11020;
    (_ConsumeRParen()|0);
    STACKTOP = sp;return;
   }
  }
 }
 $56 = (_IS_Get(8588)|0);
 $57 = ($56|0)>(400);
 if ($57) {
  $58 = (_IS_Get(8336)|0);
  $59 = ($58|0)==(0);
  if (!($59)) {
   _LoadExpr(0,$2);
   $60 = (_GetLocalLabel()|0);
   _AddCodeLine(25640,$vararg_buffer44);
   _AddCodeLine(25649,$vararg_buffer46);
   _AddCodeLine(15495,$vararg_buffer48);
   _g_defcodelabel($60);
   _AddCodeLine(25266,$vararg_buffer50);
   _AddCodeLine(25660,$vararg_buffer52);
   $61 = (_LocalLabelName($60)|0);
   HEAP32[$vararg_buffer54>>2] = $61;
   _AddCodeLine(25205,$vararg_buffer54);
   _AddCodeLine(25604,$vararg_buffer57);
   _AddCodeLine(25939,$vararg_buffer59);
   (_ED_MakeRValExpr($1)|0);
   $62 = ((($1)) + 4|0);
   HEAP32[$62>>2] = 11020;
   (_ConsumeRParen()|0);
   STACKTOP = sp;return;
  }
 }
 _LoadExpr(0,$2);
 HEAP32[$vararg_buffer61>>2] = 15488;
 _AddCodeLine(27073,$vararg_buffer61);
 (_ED_MakeRValExpr($1)|0);
 $63 = ((($1)) + 4|0);
 HEAP32[$63>>2] = 11020;
 (_ConsumeRParen()|0);
 STACKTOP = sp;return;
}
function _ParseArg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 100|0);
 HEAP32[$2>>2] = 512;
 HEAP32[$0>>2] = $1;
 $3 = ((($0)) + 8|0);
 _MarkedExprWithCheck(3,$3);
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 72|0);
 HEAP32[$6>>2] = $5;
 _TypeConversion($3,$1);
 $7 = ((($0)) + 76|0);
 _GetCodePos($7);
 $8 = (_ED_IsConstAbsInt($3)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  label = 4;
 } else {
  $10 = (_ED_CodeRangeIsEmpty($3)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   label = 4;
  } else {
   $12 = HEAP32[$2>>2]|0;
   $13 = $12 | 32;
   HEAP32[$2>>2] = $13;
  }
 }
 if ((label|0) == 4) {
  _LoadExpr(0,$3);
 }
 $14 = ((($0)) + 84|0);
 _GetCodePos($14);
 $15 = ((($0)) + 92|0);
 _GetCodePos($15);
 $16 = HEAP32[$4>>2]|0;
 $17 = (_TypeOf($16)|0);
 $18 = HEAP32[$2>>2]|0;
 $19 = $18 | $17;
 HEAP32[$2>>2] = $19;
 return;
}
function _HandleStdFunc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0>>>0)<(5);
 if ($3) {
  $6 = (((8 + ($0<<3)|0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_vii[$7 & 63]($1,$2);
  return;
 } else {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,15629,15667,1334);
  // unreachable;
 }
}
function _TypeCmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = 5;
 $3 = ($1|0)==($0|0);
 if ($3) {
  $4 = 5;
 } else {
  _DoCompare($0,$1,$2);
  $$pre = HEAP32[$2>>2]|0;
  $4 = $$pre;
 }
 STACKTOP = sp;return ($4|0);
}
function _DoCompare($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i = 0, $$0$i146 = 0, $$0$i155 = 0, $$0$i155$lcssa = 0, $$0$i155190 = 0, $$0$i155192 = 0, $$01$i = 0, $$01$i141 = 0, $$0115$idx$val = 0, $$0115215 = 0, $$0116$idx$val = 0, $$0116209 = 0, $$0118 = 0, $$0119 = 0, $$0121205 = 0, $$0123204 = 0, $$016$i = 0, $$016$i$lcssa = 0, $$016$i191 = 0;
 var $$016$i194 = 0, $$02$i = 0, $$02$i142 = 0, $$038$i = 0, $$039$i = 0, $$040$i = 0, $$040$i174 = 0, $$040$i197 = 0, $$040$i200 = 0, $$041$i = 0, $$041$i198 = 0, $$041$i201 = 0, $$1120 = 0, $$1122 = 0, $$demorgan = 0, $$idx = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i145 = 0, $$idx$val$i157 = 0;
 var $$idx131 = 0, $$idx131$val = 0, $$idx45$val$i = 0, $$lcssa176 = 0, $$lobit = 0, $$pr = 0, $$pr164 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i199 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond126 = 0, $or$cond3$not = 0, $or$cond5 = 0, $trunc = 0, $trunc$clear = 0, $trunc165 = 0, $trunc165$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0);
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 L1: do {
  if ($5) {
   $$lcssa176 = $7;
  } else {
   $$0115$idx$val = $4;$$0115215 = $0;$$0116$idx$val = $6;$$0116209 = $1;$$0121205 = 0;$$0123204 = 0;$210 = $7;
   L3: while(1) {
    if ($210) {
     label = 105;
     break;
    }
    $8 = $$0115$idx$val & 15;
    $9 = $$0116$idx$val & 15;
    $10 = $$0115$idx$val & 260096;
    $11 = $$0116$idx$val & 260096;
    $12 = ($8|0)==(13);
    $13 = ($9|0)==(12);
    $or$cond = $12 & $13;
    $$ = $or$cond ? 13 : $9;
    $14 = ($8|0)==($$|0);
    if (!($14)) {
     label = 5;
     break;
    }
    $17 = $$0116$idx$val ^ $$0115$idx$val;
    $18 = $17 & 384;
    $19 = ($18|0)==(0);
    if (!($19)) {
     $20 = ($$0123204|0)==(0);
     $21 = HEAP32[$2>>2]|0;
     if (!($20)) {
      label = 11;
      break;
     }
     $22 = ($21>>>0)>(1);
     if ($22) {
      HEAP32[$2>>2] = 1;
     }
    }
    $24 = ($8|0)==(14);
    if ($24) {
     $25 = $$0115$idx$val & 196608;
     $26 = ($25|0)==(0);
     if ($26) {
      $27 = HEAP8[47028]|0;
      $28 = ($27<<24>>24)==(0);
      if ($28) {
       $29 = (_IsVariadicFunc($$0115215)|0);
       $30 = ($29|0)==(0);
       if ($30) {
        $32 = 65536;
       } else {
        label = 17;
       }
      } else {
       label = 17;
      }
      if ((label|0) == 17) {
       label = 0;
       $32 = 131072;
      }
      $31 = $32 | $10;
      $$0119 = $31;
     } else {
      $$0119 = $10;
     }
     $33 = $$0116$idx$val & 196608;
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = HEAP8[47028]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $37 = (_IsVariadicFunc($$0116209)|0);
       $38 = ($37|0)==(0);
       if ($38) {
        $40 = 65536;
       } else {
        label = 22;
       }
      } else {
       label = 22;
      }
      if ((label|0) == 22) {
       label = 0;
       $40 = 131072;
      }
      $39 = $40 | $11;
      $$0118 = $39;$$1120 = $$0119;
     } else {
      $$0118 = $11;$$1120 = $$0119;
     }
    } else {
     $$0118 = $11;$$1120 = $10;
    }
    $41 = ($$1120|0)==($$0118|0);
    L29: do {
     if ($41) {
      label = 39;
     } else {
      switch ($$0121205|0) {
      case 0:  {
       $42 = HEAP32[$2>>2]|0;
       $43 = ($42>>>0)>(3);
       if (!($43)) {
        label = 39;
        break L29;
       }
       HEAP32[$2>>2] = 3;
       label = 39;
       break L29;
       break;
      }
      case 1:  {
       break;
      }
      default: {
       label = 26;
       break L3;
      }
      }
      $44 = $$1120 & 2048;
      $45 = $$0118 & 2048;
      $46 = ($44>>>0)<($45>>>0);
      if ($46) {
       label = 31;
      } else {
       $47 = $$1120 & 4096;
       $48 = $$0118 & 4096;
       $49 = ($47>>>0)<($48>>>0);
       if ($49) {
        label = 31;
       } else {
        $52 = HEAP32[$2>>2]|0;
        $53 = ($52>>>0)>(3);
        if ($53) {
         HEAP32[$2>>2] = 3;
         $211 = 3;
        } else {
         $211 = $52;
        }
       }
      }
      if ((label|0) == 31) {
       label = 0;
       $50 = HEAP32[$2>>2]|0;
       $51 = ($50>>>0)>(2);
       if ($51) {
        HEAP32[$2>>2] = 2;
        $211 = 2;
       } else {
        $211 = $50;
       }
      }
      $trunc = $$0115$idx$val&255;
      $trunc$clear = $trunc & 15;
      switch ($trunc$clear<<24>>24) {
      case 13:  {
       label = 40;
       break L29;
       break;
      }
      case 12:  {
       label = 79;
       break L29;
       break;
      }
      case 11: case 10:  {
       label = 82;
       break L29;
       break;
      }
      case 14:  {
       break;
      }
      default: {
       $$1122 = 1;
       break L29;
      }
      }
      $54 = $$0118 ^ $$1120;
      $55 = $54 & 196608;
      $56 = ($55|0)==(0);
      if ($56) {
       label = 41;
      } else {
       $57 = $211;
       break L3;
      }
     }
    } while(0);
    if ((label|0) == 39) {
     label = 0;
     $trunc165 = $$0115$idx$val&255;
     $trunc165$clear = $trunc165 & 15;
     switch ($trunc165$clear<<24>>24) {
     case 13:  {
      label = 40;
      break;
     }
     case 14:  {
      label = 41;
      break;
     }
     case 12:  {
      label = 79;
      break;
     }
     case 11: case 10:  {
      label = 82;
      break;
     }
     default: {
      $$1122 = $$0121205;
     }
     }
    }
    L46: do {
     if ((label|0) == 40) {
      label = 0;
      $59 = (($$0121205) + 1)|0;
      $$1122 = $59;
     }
     else if ((label|0) == 41) {
      label = 0;
      $60 = (_GetFuncDesc($$0115215)|0);
      $61 = (_GetFuncDesc($$0116209)|0);
      $62 = HEAP32[$60>>2]|0;
      $63 = $62 & 1;
      $64 = ($63|0)==(0);
      $65 = HEAP32[$61>>2]|0;
      $66 = $65 & 1;
      $67 = ($66|0)==(0);
      if (!($64)) {
       if (!($67)) {
        $$1122 = $$0121205;
        break;
       }
       $$idx131 = ((($61)) + 4|0);
       $$idx131$val = HEAP32[$$idx131>>2]|0;
       $68 = ((($$idx131$val)) + 4|0);
       $$01$i = HEAP32[$68>>2]|0;
       $69 = ($$01$i|0)==(0|0);
       if ($69) {
        $$1122 = $$0121205;
        break;
       } else {
        $$02$i = $$01$i;
       }
       while(1) {
        $70 = ((($$02$i)) + 20|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = $71 & 128;
        $73 = ($72|0)==(0);
        if ($73) {
         $$1122 = $$0121205;
         break L46;
        }
        $74 = ((($$02$i)) + 24|0);
        $75 = HEAP32[$74>>2]|0;
        $$idx$val$i = HEAP32[$75>>2]|0;
        $76 = $$idx$val$i & 112;
        $77 = ($76|0)==(16);
        if ($77) {
         $78 = (_IntPromotion($75)|0);
         $79 = HEAP32[$74>>2]|0;
         $80 = ($78|0)==($79|0);
         if (!($80)) {
          label = 48;
          break L3;
         }
        }
        $81 = ((($$02$i)) + 8|0);
        $$0$i = HEAP32[$81>>2]|0;
        $82 = ($$0$i|0)==(0|0);
        if ($82) {
         $$1122 = $$0121205;
         break L46;
        } else {
         $$02$i = $$0$i;
        }
       }
      }
      if (!($67)) {
       $$idx = ((($60)) + 4|0);
       $$idx$val = HEAP32[$$idx>>2]|0;
       $85 = ((($$idx$val)) + 4|0);
       $$01$i141 = HEAP32[$85>>2]|0;
       $86 = ($$01$i141|0)==(0|0);
       if ($86) {
        $$1122 = $$0121205;
        break;
       } else {
        $$02$i142 = $$01$i141;
       }
       while(1) {
        $87 = ((($$02$i142)) + 20|0);
        $88 = HEAP32[$87>>2]|0;
        $89 = $88 & 128;
        $90 = ($89|0)==(0);
        if ($90) {
         $$1122 = $$0121205;
         break L46;
        }
        $91 = ((($$02$i142)) + 24|0);
        $92 = HEAP32[$91>>2]|0;
        $$idx$val$i145 = HEAP32[$92>>2]|0;
        $93 = $$idx$val$i145 & 112;
        $94 = ($93|0)==(16);
        if ($94) {
         $95 = (_IntPromotion($92)|0);
         $96 = HEAP32[$91>>2]|0;
         $97 = ($95|0)==($96|0);
         if (!($97)) {
          label = 56;
          break L3;
         }
        }
        $98 = ((($$02$i142)) + 8|0);
        $$0$i146 = HEAP32[$98>>2]|0;
        $99 = ($$0$i146|0)==(0|0);
        if ($99) {
         $$1122 = $$0121205;
         break L46;
        } else {
         $$02$i142 = $$0$i146;
        }
       }
      }
      $102 = $65 ^ $62;
      $103 = $102 & -113;
      $104 = ($103|0)==(0);
      if (!($104)) {
       label = 59;
       break L3;
      }
      $107 = ((($60)) + 4|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ((($61)) + 4|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ((($108)) + 4|0);
      $112 = ((($110)) + 4|0);
      $$040$i197 = HEAP32[$112>>2]|0;
      $$041$i198 = HEAP32[$111>>2]|0;
      $cond$i199 = ($$041$i198|0)==(0|0);
      L69: do {
       if ($cond$i199) {
        $$040$i174 = $$040$i197;
       } else {
        $$040$i200 = $$040$i197;$$041$i201 = $$041$i198;
        while(1) {
         $113 = ((($$041$i201)) + 20|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = $114 & 128;
         $116 = ($115|0)!=(0);
         $117 = ($$040$i200|0)!=(0|0);
         $or$cond$i = $117 & $116;
         if (!($or$cond$i)) {
          break;
         }
         $118 = ((($$040$i200)) + 20|0);
         $119 = HEAP32[$118>>2]|0;
         $120 = $119 & 128;
         $121 = ($120|0)==(0);
         if ($121) {
          break;
         }
         $122 = ((($$041$i201)) + 24|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = ((($$040$i200)) + 24|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = HEAP32[$60>>2]|0;
         $127 = $126 & 16;
         $128 = ($127|0)==(0);
         if ($128) {
          $$039$i = $123;
         } else {
          $$idx45$val$i = HEAP32[$123>>2]|0;
          $129 = $$idx45$val$i & 112;
          $130 = ($129|0)==(16);
          if ($130) {
           $131 = (_IntPromotion($123)|0);
           $$039$i = $131;
          } else {
           $$039$i = $123;
          }
         }
         $132 = HEAP32[$61>>2]|0;
         $133 = $132 & 16;
         $134 = ($133|0)==(0);
         do {
          if ($134) {
           $$038$i = $125;
          } else {
           $$idx$val$i157 = HEAP32[$125>>2]|0;
           $135 = $$idx$val$i157 & 112;
           $136 = ($135|0)==(16);
           if (!($136)) {
            $$038$i = $125;
            break;
           }
           $137 = (_IntPromotion($125)|0);
           $$038$i = $137;
          }
         } while(0);
         HEAP32[$3>>2] = 5;
         $138 = ($$038$i|0)==($$039$i|0);
         if ($138) {
         } else {
          _DoCompare($$039$i,$$038$i,$3);
          $$pr = HEAP32[$3>>2]|0;
          $139 = ($$pr>>>0)<(4);
          if ($139) {
           label = 77;
           break L3;
          }
         }
         $140 = ((($$041$i201)) + 8|0);
         $141 = ((($$040$i200)) + 8|0);
         $$040$i = HEAP32[$141>>2]|0;
         $$041$i = HEAP32[$140>>2]|0;
         $cond$i = ($$041$i|0)==(0|0);
         if ($cond$i) {
          $$040$i174 = $$040$i;
          break L69;
         } else {
          $$040$i200 = $$040$i;$$041$i201 = $$041$i;
         }
        }
        $142 = ($115|0)==(0);
        if ($142) {
         $$040$i174 = $$040$i200;
        } else {
         label = 77;
         break L3;
        }
       }
      } while(0);
      $143 = ($$040$i174|0)==(0|0);
      if ($143) {
       $$1122 = $$0121205;
      } else {
       $144 = ((($$040$i174)) + 20|0);
       $145 = HEAP32[$144>>2]|0;
       $$lobit = $145 & 128;
       $146 = ($$lobit|0)==(0);
       if ($146) {
        $$1122 = $$0121205;
       } else {
        label = 77;
        break L3;
       }
      }
     }
     else if ((label|0) == 79) {
      label = 0;
      $149 = (_GetElementCount($$0115215)|0);
      $150 = (_GetElementCount($$0116209)|0);
      $notlhs = ($149|0)==(-1);
      $notrhs = ($150|0)==(-1);
      $or$cond3$not = $notlhs | $notrhs;
      $151 = ($149|0)==($150|0);
      $or$cond126 = $151 | $or$cond3$not;
      if ($or$cond126) {
       $$1122 = $$0121205;
      } else {
       label = 80;
       break L3;
      }
     }
     else if ((label|0) == 82) {
      label = 0;
      $154 = (_GetSymEntry($$0115215)|0);
      $155 = (_GetSymEntry($$0116209)|0);
      $156 = (_HasAnonName($154)|0);
      $157 = ($156|0)==(0);
      if ($157) {
       label = 84;
      } else {
       $158 = (_HasAnonName($155)|0);
       $159 = ($158|0)==(0);
       if ($159) {
        label = 84;
       }
      }
      if ((label|0) == 84) {
       label = 0;
       $160 = ((($154)) + 48|0);
       $161 = ((($155)) + 48|0);
       $162 = (_strcmp($160,$161)|0);
       $163 = ($162|0)==(0);
       if (!($163)) {
        label = 85;
        break L3;
       }
      }
      $166 = ((($154)) + 36|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ((($155)) + 36|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($167|0)!=(0|0);
      $171 = ($169|0)!=(0|0);
      $or$cond5 = $170 & $171;
      if ($or$cond5) {
       $172 = ((($167)) + 4|0);
       $173 = ((($169)) + 4|0);
       $$0$i155190 = HEAP32[$173>>2]|0;
       $$016$i191 = HEAP32[$172>>2]|0;
       $174 = ($$016$i191|0)!=(0|0);
       $175 = ($$0$i155190|0)!=(0|0);
       $176 = $175 & $174;
       if ($176) {
        $$0$i155192 = $$0$i155190;$$016$i194 = $$016$i191;
        while(1) {
         $177 = (_HasAnonName($$016$i194)|0);
         $178 = ($177|0)==(0);
         if ($178) {
          label = 91;
         } else {
          $179 = (_HasAnonName($$0$i155192)|0);
          $180 = ($179|0)==(0);
          if ($180) {
           label = 91;
          }
         }
         if ((label|0) == 91) {
          label = 0;
          $181 = ((($$016$i194)) + 48|0);
          $182 = ((($$0$i155192)) + 48|0);
          $183 = (_strcmp($181,$182)|0);
          $184 = ($183|0)==(0);
          if (!($184)) {
           label = 97;
           break L3;
          }
         }
         $185 = ((($$016$i194)) + 24|0);
         $186 = HEAP32[$185>>2]|0;
         $187 = ((($$0$i155192)) + 24|0);
         $188 = HEAP32[$187>>2]|0;
         HEAP32[$3>>2] = 5;
         $189 = ($188|0)==($186|0);
         if ($189) {
         } else {
          _DoCompare($186,$188,$3);
          $$pr164 = HEAP32[$3>>2]|0;
          $190 = ($$pr164>>>0)<(4);
          if ($190) {
           label = 97;
           break L3;
          }
         }
         $191 = ((($$016$i194)) + 8|0);
         $192 = ((($$0$i155192)) + 8|0);
         $$0$i155 = HEAP32[$192>>2]|0;
         $$016$i = HEAP32[$191>>2]|0;
         $193 = ($$016$i|0)!=(0|0);
         $194 = ($$0$i155|0)!=(0|0);
         $195 = $194 & $193;
         if ($195) {
          $$0$i155192 = $$0$i155;$$016$i194 = $$016$i;
         } else {
          $$0$i155$lcssa = $$0$i155;$$016$i$lcssa = $$016$i;
          break;
         }
        }
       } else {
        $$0$i155$lcssa = $$0$i155190;$$016$i$lcssa = $$016$i191;
       }
       $196 = ($$016$i$lcssa|0)==(0|0);
       $197 = ($$0$i155$lcssa|0)==(0|0);
       $$demorgan = $197 & $196;
       if ($$demorgan) {
        $$1122 = $$0121205;
       } else {
        label = 97;
        break L3;
       }
      } else {
       $$1122 = $$0121205;
      }
     }
    } while(0);
    $200 = ((($$0115215)) + 8|0);
    $201 = ((($$0116209)) + 8|0);
    $202 = (($$0123204) + 1)|0;
    $203 = HEAP32[$200>>2]|0;
    $204 = ($203|0)==(0);
    $205 = HEAP32[$201>>2]|0;
    $206 = ($205|0)==(0);
    if ($204) {
     $$lcssa176 = $206;
     break L1;
    } else {
     $$0115$idx$val = $203;$$0115215 = $200;$$0116$idx$val = $205;$$0116209 = $201;$$0121205 = $$1122;$$0123204 = $202;$210 = $206;
    }
   }
   switch (label|0) {
    case 5: {
     $15 = HEAP32[$2>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 11: {
     $23 = ($21|0)==(0);
     if ($23) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 26: {
     $$pre = HEAP32[$2>>2]|0;
     $57 = $$pre;
     break;
    }
    case 48: {
     $83 = HEAP32[$2>>2]|0;
     $84 = ($83|0)==(0);
     if ($84) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 56: {
     $100 = HEAP32[$2>>2]|0;
     $101 = ($100|0)==(0);
     if ($101) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 59: {
     $105 = HEAP32[$2>>2]|0;
     $106 = ($105|0)==(0);
     if ($106) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 77: {
     $147 = HEAP32[$2>>2]|0;
     $148 = ($147|0)==(0);
     if ($148) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 80: {
     $152 = HEAP32[$2>>2]|0;
     $153 = ($152|0)==(0);
     if ($153) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 85: {
     $164 = HEAP32[$2>>2]|0;
     $165 = ($164|0)==(0);
     if ($165) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 97: {
     $198 = HEAP32[$2>>2]|0;
     $199 = ($198|0)==(0);
     if ($199) {
      STACKTOP = sp;return;
     }
     HEAP32[$2>>2] = 0;
     STACKTOP = sp;return;
     break;
    }
    case 105: {
     STACKTOP = sp;return;
     break;
    }
   }
   $58 = ($57|0)==(0);
   if ($58) {
    STACKTOP = sp;return;
   }
   HEAP32[$2>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $207 = HEAP32[$2>>2]|0;
 if ($$lcssa176) {
  $208 = ($207>>>0)>(4);
  if (!($208)) {
   STACKTOP = sp;return;
  }
  HEAP32[$2>>2] = 4;
  STACKTOP = sp;return;
 } else {
  $209 = ($207|0)==(0);
  if ($209) {
   STACKTOP = sp;return;
  }
  HEAP32[$2>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _LoadExpr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$2 = 0, $$idx = 0, $$idx$val = 0, $$idx51$val = 0, $$idx53$val = 0, $$idx54$val = 0, $$idx54$val$pre = 0, $$lobit$i = 0, $$lobit$i58 = 0, $$lobit$i59 = 0, $$lobit$i60 = 0, $$lobit$i61 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $trunc = 0, $trunc$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$idx = ((($1)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$lobit$i = $$idx$val & 256;
 $2 = ($$lobit$i|0)==(0);
 if ($2) {
  $57 = $$idx$val & 255;
  $58 = ($57|0)==(64);
  L3: do {
   if ($58) {
    $59 = ((($1)) + 16|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = ($60|0)==(0);
    if ($61) {
     $$2 = $0;
    } else {
     $62 = ((($1)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (_TypeOf($63)|0);
     $65 = $64 | $0;
     $66 = $65 | 32;
     $67 = HEAP32[$59>>2]|0;
     _g_inc($66,$67);
     $$2 = $65;
    }
   } else {
    $trunc$i = $$idx$val&255;
    switch ($trunc$i<<24>>24) {
    case 1:  {
     $68 = ((($1)) + 4|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (_TypeOf($69)|0);
     $71 = $70 | $0;
     $72 = $71 | 32;
     $73 = ((($1)) + 16|0);
     $74 = HEAP32[$73>>2]|0;
     _g_getimmed($72,$74,0);
     $$2 = $0;
     break L3;
     break;
    }
    case 2:  {
     $75 = $0 & -4129;
     $76 = $75 | 4096;
     $77 = ((($1)) + 12|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ((($1)) + 16|0);
     $80 = HEAP32[$79>>2]|0;
     _g_getimmed($76,$78,$80);
     $$2 = $0;
     break L3;
     break;
    }
    case -128: case 4:  {
     $81 = $0 & -33;
     $82 = ((($1)) + 12|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ((($1)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     _g_getimmed($81,$83,$85);
     $$2 = $0;
     break L3;
     break;
    }
    case 8:  {
     $86 = (_IS_Get(8408)|0);
     $87 = ($86|0)==(0);
     if ($87) {
      _Error(29618,$vararg_buffer1);
     }
     $88 = $0 & -32801;
     $89 = $88 | 32768;
     $90 = ((($1)) + 12|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ((($1)) + 16|0);
     $93 = HEAP32[$92>>2]|0;
     _g_getimmed($89,$91,$93);
     $$2 = $0;
     break L3;
     break;
    }
    case 16:  {
     $94 = ((($1)) + 16|0);
     $95 = HEAP32[$94>>2]|0;
     _g_leasp($95);
     $$2 = $0;
     break L3;
     break;
    }
    default: {
     HEAP32[$vararg_buffer3>>2] = $$idx$val;
     _Internal(15719,$vararg_buffer3);
     // unreachable;
    }
    }
   }
  } while(0);
  $$idx53$val = HEAP32[$$idx>>2]|0;
  $$lobit$i58 = $$idx53$val & 1024;
  $96 = ($$lobit$i58|0)==(0);
  if ($96) {
   STACKTOP = sp;return;
  }
  $97 = ((($1)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (_TypeOf($98)|0);
  $100 = $99 | $$2;
  _g_test($100);
  $101 = HEAP32[$$idx>>2]|0;
  $102 = $101 & -3073;
  $103 = $102 | 2048;
  HEAP32[$$idx>>2] = $103;
  STACKTOP = sp;return;
 }
 $$lobit$i59 = $$idx$val & 512;
 $3 = ($$lobit$i59|0)==(0);
 if ($3) {
  $13 = ((($1)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_TypeOf($14)|0);
  $16 = $15 | $0;
  $$idx54$val$pre = HEAP32[$$idx>>2]|0;
  $$0 = $16;$$idx54$val = $$idx54$val$pre;
 } else {
  $4 = ((($1)) + 36|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($1)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($5))|0;
  $9 = ($8>>>0)<(9);
  $10 = $9 ? 3 : 1;
  $11 = $10 | $0;
  $12 = $11 | 8;
  $$0 = $12;$$idx54$val = $$idx$val;
 }
 $$lobit$i60 = $$idx54$val >>> 3;
 $17 = $$lobit$i60 & 128;
 $18 = $17 | $$0;
 $trunc = $$idx54$val&255;
 switch ($trunc<<24>>24) {
 case 1:  {
  $19 = $18 | 8192;
  $20 = ((($1)) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  _g_getstatic($19,$21,0);
  break;
 }
 case 2:  {
  $22 = $18 | 4096;
  $23 = ((($1)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ((($1)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  _g_getstatic($22,$24,$26);
  break;
 }
 case -128: case 4:  {
  $27 = ((($1)) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($1)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  _g_getstatic($18,$28,$30);
  break;
 }
 case 8:  {
  $31 = $18 | 32768;
  $32 = ((($1)) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($1)) + 16|0);
  $35 = HEAP32[$34>>2]|0;
  _g_getstatic($31,$33,$35);
  break;
 }
 case 16:  {
  $36 = ((($1)) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  _g_getlocal($18,$37);
  break;
 }
 case 32:  {
  $38 = $18 & 128;
  $39 = ($38|0)==(0);
  if (!($39)) {
   _g_test($18);
  }
  break;
 }
 case 64:  {
  $40 = ((($1)) + 16|0);
  $41 = HEAP32[$40>>2]|0;
  _g_getind($18,$41);
  break;
 }
 default: {
  $42 = $$idx54$val & 255;
  HEAP32[$vararg_buffer>>2] = $42;
  _Internal(15682,$vararg_buffer);
  // unreachable;
 }
 }
 $$idx51$val = HEAP32[$$idx>>2]|0;
 $$lobit$i61 = $$idx51$val & 512;
 $43 = ($$lobit$i61|0)==(0);
 L38: do {
  if (!($43)) {
   $44 = $18 & 128;
   $45 = $44 | 41;
   $46 = ((($1)) + 36|0);
   $47 = HEAP32[$46>>2]|0;
   _g_asr($45,$47);
   $48 = HEAP32[$46>>2]|0;
   $49 = ((($1)) + 40|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($48))|0;
   switch ($51|0) {
   case 16: case 8:  {
    break L38;
    break;
   }
   default: {
   }
   }
   $52 = 1 << $50;
   $53 = (($52) + -1)|0;
   _g_and($45,$53);
  }
 } while(0);
 $54 = HEAP32[$$idx>>2]|0;
 $55 = $54 & -3073;
 $56 = $55 | 2048;
 HEAP32[$$idx>>2] = $56;
 STACKTOP = sp;return;
}
function _UseLiteral($0) {
 $0 = $0|0;
 var $$idx$i$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx2$i$i = 0, $$idx2$val$i$i = 0, $$idx5$val$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = (_IS_Get(8300)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  return ($0|0);
 }
 $6 = (_IS_Get(8264)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  _g_userodata();
 } else {
  _g_usedata();
 }
 $$idx$i$i = ((($0)) + 12|0);
 $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
 $$idx2$i$i = ((($0)) + 16|0);
 $$idx2$val$i$i = HEAP32[$$idx2$i$i>>2]|0;
 _TgtTranslateBuf($$idx$val$i$i,$$idx2$val$i$i);
 $8 = HEAP32[$0>>2]|0;
 _g_defdatalabel($8);
 $$idx5$val$i = HEAP32[$$idx$i$i>>2]|0;
 $$idx$val$i = HEAP32[$$idx2$i$i>>2]|0;
 _g_defbytes($$idx5$val$i,$$idx$val$i);
 $9 = ((($0)) + 8|0);
 HEAP32[$9>>2] = 1;
 return ($0|0);
}
function _ReleaseLiteral($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ($2|0)>(0);
 if ($4) {
  return;
 } else {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,15747,15764,172);
  // unreachable;
 }
}
function _TranslateLiteral($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 12|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx2 = ((($0)) + 16|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 _TgtTranslateBuf($$idx$val,$$idx2$val);
 return;
}
function _GetLiteralLabel($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function _GetLiteralStr($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 12|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 return ($$idx$val|0);
}
function _GetLiteralStrBuf($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 return ($1|0);
}
function _GetLiteralSize($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 16|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 return ($$idx$val|0);
}
function _InitLiteralPool() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xmalloc(28)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 (_InitCollection($1)|0);
 $2 = ((($0)) + 16|0);
 (_InitCollection($2)|0);
 HEAP32[11204] = $0;
 HEAP32[11205] = $0;
 return;
}
function _PushLiteralPool($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11204]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,15779,15764,276);
  // unreachable;
 } else {
  $5 = HEAP32[11206]|0;
  _CollInsert(44824,$1,$5);
  $6 = (_xmalloc(28)|0);
  HEAP32[$6>>2] = $0;
  $7 = ((($6)) + 4|0);
  (_InitCollection($7)|0);
  $8 = ((($6)) + 16|0);
  (_InitCollection($8)|0);
  HEAP32[11204] = $6;
  return;
 }
}
function _PopLiteralPool() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11206]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[3332]|0;
  $3 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$2 & 1]($3,29992,40950,202);
  // unreachable;
 } else {
  $4 = HEAP32[11204]|0;
  $5 = (($0) + -1)|0;
  HEAP32[11206] = $5;
  $6 = HEAP32[(44832)>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[11204] = $8;
  return ($4|0);
 }
 return (0)|0;
}
function _MoveLiteralPool($0) {
 $0 = $0|0;
 var $$013$i = 0, $$013$i6 = 0, $$idx$val$i = 0, $$idx$val$i8 = 0, $$idx$val12$i = 0, $$idx$val12$i4 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[11205]|0;
 $3 = ((($2)) + 4|0);
 $$idx$val12$i = HEAP32[$1>>2]|0;
 $4 = ($$idx$val12$i|0)==(0);
 do {
  if ($4) {
   $25 = $2;
  } else {
   $5 = ((($0)) + 12|0);
   $$013$i = 0;$6 = $$idx$val12$i;
   while(1) {
    $7 = ($6>>>0)>($$013$i>>>0);
    if (!($7)) {
     label = 4;
     break;
    }
    $10 = HEAP32[$5>>2]|0;
    $11 = (($10) + ($$013$i<<2)|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($12)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if ($15) {
     label = 8;
    } else {
     $16 = ((($12)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $19 = HEAP32[$3>>2]|0;
      _CollInsert($3,$12,$19);
     } else {
      label = 8;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $20 = ((($12)) + 12|0);
     _SB_Done($20);
     _xfree($12);
    }
    $21 = (($$013$i) + 1)|0;
    $$idx$val$i = HEAP32[$1>>2]|0;
    $22 = ($21>>>0)<($$idx$val$i>>>0);
    if ($22) {
     $$013$i = $21;$6 = $$idx$val$i;
    } else {
     label = 10;
     break;
    }
   }
   if ((label|0) == 4) {
    $8 = HEAP32[3332]|0;
    $9 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
    // unreachable;
   }
   else if ((label|0) == 10) {
    $$pre = HEAP32[11205]|0;
    $25 = $$pre;
    break;
   }
  }
 } while(0);
 $23 = ((($0)) + 16|0);
 $24 = ((($25)) + 16|0);
 $$idx$val12$i4 = HEAP32[$23>>2]|0;
 $26 = ($$idx$val12$i4|0)==(0);
 if ($26) {
  _DoneCollection($1);
  _DoneCollection($23);
  _xfree($0);
  return;
 }
 $27 = ((($0)) + 24|0);
 $$013$i6 = 0;$28 = $$idx$val12$i4;
 while(1) {
  $29 = ($28>>>0)>($$013$i6>>>0);
  if (!($29)) {
   label = 14;
   break;
  }
  $32 = HEAP32[$27>>2]|0;
  $33 = (($32) + ($$013$i6<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ((($34)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($36|0)==(0);
  if ($37) {
   label = 18;
  } else {
   $38 = ((($34)) + 8|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = HEAP32[$24>>2]|0;
    _CollInsert($24,$34,$41);
   } else {
    label = 18;
   }
  }
  if ((label|0) == 18) {
   label = 0;
   $42 = ((($34)) + 12|0);
   _SB_Done($42);
   _xfree($34);
  }
  $43 = (($$013$i6) + 1)|0;
  $$idx$val$i8 = HEAP32[$23>>2]|0;
  $44 = ($43>>>0)<($$idx$val$i8>>>0);
  if ($44) {
   $$013$i6 = $43;$28 = $$idx$val$i8;
  } else {
   label = 20;
   break;
  }
 }
 if ((label|0) == 14) {
  $30 = HEAP32[3332]|0;
  $31 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$30 & 1]($31,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 20) {
  _DoneCollection($1);
  _DoneCollection($23);
  _xfree($0);
  return;
 }
}
function _OutputLiteralPool() {
 var $$014$i = 0, $$04563$i = 0, $$067$i = 0, $$idx$i$i$i = 0, $$idx$i58$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i$i$i = 0, $$idx$val$i3 = 0, $$idx$val$i59$i = 0, $$idx$val$pre$i = 0, $$idx$val13$i = 0, $$idx$val15$i = 0, $$idx11$i = 0, $$idx11$val$i = 0, $$idx12$i = 0, $$idx12$val$i = 0, $$idx2$i$i = 0, $$idx2$i$i$i = 0, $$idx2$val$i$i = 0;
 var $$idx2$val$i$i$i = 0, $$idx49$val$i = 0, $$idx5$val$i$i = 0, $$idx50$i = 0, $$idx50$val$i = 0, $$idx51$val$i = 0, $$idx52$val$i = 0, $$idx53$val$i = 0, $$idx54$val$i = 0, $$idx54$val$pre$i = 0, $$idx54$val66$i = 0, $$idx55$val$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11205]|0;
 $$idx11$i = ((($0)) + 4|0);
 $$idx11$val$i = HEAP32[$$idx11$i>>2]|0;
 $1 = ($$idx11$val$i|0)==(0);
 if (!($1)) {
  _g_usedata();
  $$idx$val13$i = HEAP32[$$idx11$i>>2]|0;
  $2 = ($$idx$val13$i|0)==(0);
  if (!($2)) {
   $$idx12$i = ((($0)) + 12|0);
   $$014$i = 0;$$idx$val15$i = $$idx$val13$i;
   while(1) {
    $$idx12$val$i = HEAP32[$$idx12$i>>2]|0;
    $3 = (($$idx12$val$i) + ($$014$i<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ((($4)) + 4|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)>(0);
    if ($7) {
     $8 = ((($4)) + 8|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = ($9|0)==(0);
     if ($10) {
      $$idx$i$i$i = ((($4)) + 12|0);
      $$idx$val$i$i$i = HEAP32[$$idx$i$i$i>>2]|0;
      $$idx2$i$i$i = ((($4)) + 16|0);
      $$idx2$val$i$i$i = HEAP32[$$idx2$i$i$i>>2]|0;
      _TgtTranslateBuf($$idx$val$i$i$i,$$idx2$val$i$i$i);
      $11 = HEAP32[$4>>2]|0;
      _g_defdatalabel($11);
      $$idx5$val$i$i = HEAP32[$$idx$i$i$i>>2]|0;
      $$idx$val$i$i = HEAP32[$$idx2$i$i$i>>2]|0;
      _g_defbytes($$idx5$val$i$i,$$idx$val$i$i);
      HEAP32[$8>>2] = 1;
      $$idx$val$pre$i = HEAP32[$$idx11$i>>2]|0;
      $$idx$val$i = $$idx$val$pre$i;
     } else {
      $$idx$val$i = $$idx$val15$i;
     }
    } else {
     $$idx$val$i = $$idx$val15$i;
    }
    $12 = (($$014$i) + 1)|0;
    $13 = ($12>>>0)<($$idx$val$i>>>0);
    if ($13) {
     $$014$i = $12;$$idx$val15$i = $$idx$val$i;
    } else {
     break;
    }
   }
  }
 }
 $14 = HEAP32[11205]|0;
 $15 = ((($14)) + 16|0);
 $$idx55$val$i = HEAP32[$15>>2]|0;
 $16 = ($$idx55$val$i|0)==(0);
 if ($16) {
  return;
 }
 _g_userodata();
 _CollSort($15,5,0);
 $$idx54$val66$i = HEAP32[$15>>2]|0;
 $17 = ($$idx54$val66$i|0)==(0);
 if ($17) {
  return;
 }
 $18 = ((($14)) + 24|0);
 $$067$i = 0;$19 = $$idx54$val66$i;
 L17: while(1) {
  $20 = ($19>>>0)>($$067$i>>>0);
  if (!($20)) {
   label = 12;
   break;
  }
  $23 = HEAP32[$18>>2]|0;
  $24 = (($23) + ($$067$i<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  if ($28) {
   $$idx54$val$i = $19;
  } else {
   $29 = ((($25)) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(0);
   if ($31) {
    $$idx$i58$i = ((($25)) + 12|0);
    $$idx$val$i59$i = HEAP32[$$idx$i58$i>>2]|0;
    $$idx2$i$i = ((($25)) + 16|0);
    $$idx2$val$i$i = HEAP32[$$idx2$i$i>>2]|0;
    _TgtTranslateBuf($$idx$val$i59$i,$$idx2$val$i$i);
    $32 = ($$067$i|0)==(0);
    L23: do {
     if ($32) {
      label = 23;
     } else {
      $33 = HEAP32[$15>>2]|0;
      $$04563$i = 0;
      while(1) {
       $34 = ($33>>>0)>($$04563$i>>>0);
       if (!($34)) {
        label = 18;
        break L17;
       }
       $37 = HEAP32[$18>>2]|0;
       $38 = (($37) + ($$04563$i<<2)|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ((($39)) + 4|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ($41|0)==(0);
       if (!($42)) {
        $43 = ((($39)) + 12|0);
        $$idx53$val$i = HEAP32[$43>>2]|0;
        $$idx50$i = ((($39)) + 16|0);
        $$idx50$val$i = HEAP32[$$idx50$i>>2]|0;
        $44 = (($$idx53$val$i) + ($$idx50$val$i)|0);
        $$idx49$val$i = HEAP32[$$idx2$i$i>>2]|0;
        $45 = (0 - ($$idx49$val$i))|0;
        $46 = (($44) + ($45)|0);
        $$idx52$val$i = HEAP32[$$idx$i58$i>>2]|0;
        $47 = (_memcmp($46,$$idx52$val$i,$$idx49$val$i)|0);
        $48 = ($47|0)==(0);
        if ($48) {
         break;
        }
       }
       $49 = (($$04563$i) + 1)|0;
       $50 = ($49>>>0)<($$067$i>>>0);
       if ($50) {
        $$04563$i = $49;
       } else {
        label = 23;
        break L23;
       }
      }
      $51 = HEAP32[$25>>2]|0;
      $52 = HEAP32[$39>>2]|0;
      $53 = (($$idx50$val$i) - ($$idx49$val$i))|0;
      _g_aliasdatalabel($51,$52,$53);
     }
    } while(0);
    if ((label|0) == 23) {
     label = 0;
     $54 = HEAP32[$25>>2]|0;
     _g_defdatalabel($54);
     $$idx51$val$i = HEAP32[$$idx$i58$i>>2]|0;
     $$idx$val$i3 = HEAP32[$$idx2$i$i>>2]|0;
     _g_defbytes($$idx51$val$i,$$idx$val$i3);
    }
    HEAP32[$29>>2] = 1;
    $$idx54$val$pre$i = HEAP32[$15>>2]|0;
    $$idx54$val$i = $$idx54$val$pre$i;
   } else {
    $$idx54$val$i = $19;
   }
  }
  $55 = (($$067$i) + 1)|0;
  $56 = ($55>>>0)<($$idx54$val$i>>>0);
  if ($56) {
   $$067$i = $55;$19 = $$idx54$val$i;
  } else {
   label = 26;
   break;
  }
 }
 if ((label|0) == 12) {
  $21 = HEAP32[3332]|0;
  $22 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$21 & 1]($22,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 18) {
  $35 = HEAP32[3332]|0;
  $36 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$35 & 1]($36,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 26) {
  return;
 }
}
function _Compare($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx$i = 0, $$idx$i2 = 0, $$idx$val$i = 0, $$idx$val$i3 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($2)) + 16|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $$idx$i2 = ((($1)) + 16|0);
 $$idx$val$i3 = HEAP32[$$idx$i2>>2]|0;
 $3 = (($$idx$val$i) - ($$idx$val$i3))|0;
 return ($3|0);
}
function _AddLiteral($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_xmalloc(28)|0);
 $4 = (_GetLocalLabel()|0);
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 12|0);
 ;HEAP32[$7>>2]=HEAP32[46076>>2]|0;HEAP32[$7+4>>2]=HEAP32[46076+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[46076+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[46076+12>>2]|0;
 _SB_AppendBuf($7,$0,$2);
 $8 = (_IS_Get(8264)|0);
 $9 = ($8|0)==(0);
 $10 = HEAP32[11204]|0;
 if ($9) {
  $13 = ((($10)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  _CollInsert($13,$3,$14);
  return ($3|0);
 } else {
  $11 = ((($10)) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  _CollInsert($11,$3,$12);
  return ($3|0);
 }
 return (0)|0;
}
function _AddLiteralStr($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, $$idx2$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx2$val = HEAP32[$0>>2]|0;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $1 = (_xmalloc(28)|0);
 $2 = (_GetLocalLabel()|0);
 HEAP32[$1>>2] = $2;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 12|0);
 ;HEAP32[$5>>2]=HEAP32[46076>>2]|0;HEAP32[$5+4>>2]=HEAP32[46076+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[46076+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[46076+12>>2]|0;
 _SB_AppendBuf($5,$$idx2$val,$$idx$val);
 $6 = (_IS_Get(8264)|0);
 $7 = ($6|0)==(0);
 $8 = HEAP32[11204]|0;
 if ($7) {
  $11 = ((($8)) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  _CollInsert($11,$1,$12);
  return ($1|0);
 } else {
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  _CollInsert($9,$1,$10);
  return ($1|0);
 }
 return (0)|0;
}
function _InitSegNames() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _SS_Push((44952),15787);
 _SS_Push(44844,15791);
 _SS_Push((44916),15796);
 _SS_Push((44880),15801);
 return;
}
function _SetSegName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (44844 + (($0*36)|0)|0);
 _SS_Set($2,$1);
 return;
}
function _PushSegName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (44844 + (($0*36)|0)|0);
 $$idx$val = HEAP32[$2>>2]|0;
 $3 = ($$idx$val>>>0)>(7);
 if ($3) {
  _Error(15808,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _SS_Push($2,$1);
  STACKTOP = sp;return;
 }
}
function _PopSegName($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (44844 + (($0*36)|0)|0);
 $$idx$val = HEAP32[$1>>2]|0;
 $2 = ($$idx$val>>>0)<(2);
 if ($2) {
  _Error(15836,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  _SS_Drop($1);
  STACKTOP = sp;return;
 }
}
function _GetSegName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (44844 + (($0*36)|0)|0);
 $2 = (_SS_Get($1)|0);
 return ($2|0);
}
function _PushSegments($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11209]|0;
 $2 = HEAP32[11247]|0;
 _CollInsert(44988,$1,$2);
 $3 = (_xmalloc(24)|0);
 $4 = (_NewTextSeg($0)|0);
 HEAP32[$3>>2] = $4;
 $5 = (_SS_Get(44844)|0);
 $6 = (_NewCodeSeg($5,$0)|0);
 $7 = ((($3)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (_SS_Get((44916))|0);
 $9 = (_NewDataSeg($8,$0)|0);
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (_SS_Get((44880))|0);
 $12 = (_NewDataSeg($11,$0)|0);
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $12;
 $14 = (_SS_Get((44952))|0);
 $15 = (_NewDataSeg($14,$0)|0);
 $16 = ((($3)) + 16|0);
 HEAP32[$16>>2] = $15;
 $17 = ((($3)) + 20|0);
 HEAP32[$17>>2] = 2;
 HEAP32[11209] = $3;
 return ($3|0);
}
function _PopSegments() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $SegmentStack$idx$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $SegmentStack$idx$val = HEAP32[11247]|0;
 $0 = ($SegmentStack$idx$val|0)==(0);
 if ($0) {
  $1 = HEAP32[3332]|0;
  $2 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$1 & 1]($2,15864,15894,178);
  // unreachable;
 } else {
  $3 = (($SegmentStack$idx$val) + -1)|0;
  HEAP32[11247] = $3;
  $4 = HEAP32[(44996)>>2]|0;
  $5 = (($4) + ($3<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[11209] = $6;
  return;
 }
}
function _CreateGlobalSegments() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_PushSegments(0)|0);
 HEAP32[11210] = $0;
 return;
}
function _UseDataSeg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11209]|0;
 $2 = ($1|0)!=(0|0);
 $3 = ($0|0)!=(0);
 $or$cond = $3 & $2;
 if ($or$cond) {
  $6 = ((($1)) + 20|0);
  HEAP32[$6>>2] = $0;
  return;
 } else {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,15910,15894,198);
  // unreachable;
 }
}
function _AddTextLine($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[11209]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,15933,15894,227);
  // unreachable;
 } else {
  $6 = HEAP32[$2>>2]|0;
  _TS_AddVLine($6,$0,$1);
  STACKTOP = sp;return;
 }
}
function _AddCodeLine($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[11209]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,15933,15894,239);
  // unreachable;
 } else {
  $6 = ((($2)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[(44712)>>2]|0;
  _CS_AddVLine($7,$8,$0,$1);
  STACKTOP = sp;return;
 }
}
function _AddDataLine($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $$0$i = 0, $$0$in$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[11209]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,15933,15894,260);
  // unreachable;
 }
 $6 = ((($2)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 switch ($7|0) {
 case 3:  {
  $8 = ((($2)) + 16|0);
  $$0$in$i = $8;
  break;
 }
 case 2:  {
  $9 = ((($2)) + 8|0);
  $$0$in$i = $9;
  break;
 }
 case 1:  {
  $10 = ((($2)) + 12|0);
  $$0$in$i = $10;
  break;
 }
 default: {
  $11 = HEAP32[3332]|0;
  $12 = HEAP32[3329]|0;
  FUNCTION_TABLE_viiii[$11 & 1]($12,15941,15894,215);
  // unreachable;
 }
 }
 $$0$i = HEAP32[$$0$in$i>>2]|0;
 _DS_AddVLine($$0$i,$0,$1);
 STACKTOP = sp;return;
}
function _HaveGlobalCode() {
 var $$idx$i = 0, $$idx$val$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11210]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $$idx$i = ((($2)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $3 = ($$idx$val$i|0)!=(0);
 $4 = $3&1;
 return ($4|0);
}
function _RemoveGlobalCode() {
 var $$idx$i = 0, $$idx$val$i = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11210]|0;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $$idx$i = ((($2)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 _CS_DelEntries($2,0,$$idx$val$i);
 return;
}
function _OutputSegments($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _CS_OutputPrologue($2);
 $3 = HEAP32[$0>>2]|0;
 _TS_Output($3);
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 _DS_Output($5);
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 _DS_Output($7);
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 _DS_Output($9);
 $10 = HEAP32[$1>>2]|0;
 _CS_Output($10);
 $11 = HEAP32[$1>>2]|0;
 _CS_OutputEpilogue($11);
 return;
}
function _DoPragma() {
 var $$$i$i$i$i = 0, $$$i$i33$i$i = 0, $$$i$i42$i$i = 0, $$$i$i51$i$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i$i$i = 0, $$idx$val$i16$i$i = 0, $$idx$val$i23$i$i = 0, $$idx$val$i25$i$i = 0, $$idx$val$i32$i$pre$i = 0, $$idx$val$i50$i$i = 0, $$idx$val$i55$i$i = 0, $$idx10$val$i = 0, $$idx11$val$i = 0, $$idx12$val$i$i$i = 0, $$idx13$val$i$i$i = 0, $$idx3$i = 0;
 var $$idx3$val$i = 0, $$idx4$val$i = 0, $$idx5$val$i = 0, $$idx6$val$i = 0, $$idx7$val$i = 0, $$idx7$val$pre$i = 0, $$idx8$val$i = 0, $$idx8$val$pre$i = 0, $$idx9$val$i = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $storemerge$i$i = 0, $storemerge62$i$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $vararg_buffer55 = sp + 224|0;
 $vararg_buffer53 = sp + 216|0;
 $vararg_buffer51 = sp + 208|0;
 $vararg_buffer49 = sp + 200|0;
 $vararg_buffer47 = sp + 192|0;
 $vararg_buffer45 = sp + 184|0;
 $vararg_buffer43 = sp + 176|0;
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer39 = sp + 160|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer35 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 272|0;
 $1 = sp + 264|0;
 $2 = sp + 248|0;
 $3 = sp + 232|0;
 _NextToken();
 $4 = (_ConsumeLParen()|0);
 $5 = ($4|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = HEAP32[11156]|0;
 $7 = ($6|0)==(86);
 if ($7) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
  $8 = HEAP32[(44640)>>2]|0;
  $9 = (_GetLiteralStrBuf($8)|0);
  $$idx$val$i = HEAP32[$9>>2]|0;
  $$idx3$i = ((($9)) + 4|0);
  $$idx3$val$i = HEAP32[$$idx3$i>>2]|0;
  _SB_AppendBuf($3,$$idx$val$i,$$idx3$val$i);
  _NextToken();
  _SB_SkipWhite($3);
  $10 = (_SB_GetSym($3,$2,15962)|0);
  $11 = ($10|0)==(0);
  do {
   if ($11) {
    _Error(15964,$vararg_buffer1);
   } else {
    $$idx5$val$i = HEAP32[$2>>2]|0;
    $12 = (_bsearch($$idx5$val$i,296,25,8,2)|0);
    $13 = ($12|0)==(0|0);
    if (!($13)) {
     $14 = ((($12)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(-1);
     if (!($16)) {
      _SB_SkipWhite($3);
      $19 = ((($3)) + 8|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ((($3)) + 4|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($20>>>0)<($22>>>0);
      if ($23) {
       $24 = (($20) + 1)|0;
       HEAP32[$19>>2] = $24;
       $25 = HEAP32[$3>>2]|0;
       $26 = (($25) + ($20)|0);
       $27 = HEAP8[$26>>0]|0;
       $28 = ($27<<24>>24)==(40);
       if ($28) {
        _SB_SkipWhite($3);
        do {
         switch ($15|0) {
         case 0:  {
          _IntPragma($3,8624,1,4096);
          break;
         }
         case 2:  {
          _Warning(16012,$vararg_buffer7);
          label = 16;
          break;
         }
         case 1:  {
          label = 16;
          break;
         }
         case 3:  {
          $29 = (_SB_GetNumber($3,$0)|0);
          $30 = ($29|0)==(0);
          do {
           if ($30) {
            _Error(16076,$vararg_buffer9);
           } else {
            $31 = HEAP32[$0>>2]|0;
            $32 = ($31>>>0)>(255);
            if ($32) {
             _Error(16102,$vararg_buffer11);
             break;
            }
            _SB_SkipWhite($3);
            $33 = HEAP32[$19>>2]|0;
            $34 = HEAP32[$21>>2]|0;
            $35 = ($33>>>0)<($34>>>0);
            if ($35) {
             $36 = (($33) + 1)|0;
             HEAP32[$19>>2] = $36;
             $37 = HEAP32[$3>>2]|0;
             $38 = (($37) + ($33)|0);
             $39 = HEAP8[$38>>0]|0;
             $40 = ($39<<24>>24)==(44);
             if ($40) {
              _SB_SkipWhite($3);
              $41 = (_SB_GetNumber($3,$1)|0);
              $42 = ($41|0)==(0);
              if ($42) {
               _Error(16076,$vararg_buffer15);
               break;
              }
              $43 = HEAP32[$1>>2]|0;
              $44 = ($43>>>0)>(255);
              if ($44) {
               _Error(16146,$vararg_buffer17);
               break;
              }
              $45 = HEAP32[$0>>2]|0;
              $46 = (0 - ($43))|0;
              $47 = ($45|0)==($46|0);
              do {
               if (!($47)) {
                $48 = (_IS_Get(13028)|0);
                $49 = ($48|0)==(0);
                if ($49) {
                 break;
                }
                $50 = HEAP32[$0>>2]|0;
                $51 = ($50|0)==(0);
                if ($51) {
                 _Warning(16174,$vararg_buffer19);
                 break;
                }
                $52 = HEAP32[$1>>2]|0;
                $53 = ($52|0)==(0);
                if (!($53)) {
                 break;
                }
                _Warning(16226,$vararg_buffer21);
               }
              } while(0);
              $54 = HEAP32[$0>>2]|0;
              $55 = HEAP32[$1>>2]|0;
              $56 = $55&255;
              _TgtTranslateSet($54,$56);
              break;
             }
            }
            _Error(16131,$vararg_buffer13);
           }
          } while(0);
          break;
         }
         case 5:  {
          _Warning(16285,$vararg_buffer23);
          label = 37;
          break;
         }
         case 4:  {
          label = 37;
          break;
         }
         case 7:  {
          _Warning(16356,$vararg_buffer25);
          label = 39;
          break;
         }
         case 6:  {
          label = 39;
          break;
         }
         case 8:  {
          _IntPragma($3,8588,10,1000);
          break;
         }
         case 10:  {
          _Warning(16422,$vararg_buffer27);
          label = 42;
          break;
         }
         case 9:  {
          label = 42;
          break;
         }
         case 11:  {
          _FlagPragma($3,8300);
          break;
         }
         case 12:  {
          _FlagPragma($3,8552);
          break;
         }
         case 13:  {
          _FlagPragma($3,8408);
          break;
         }
         case 15:  {
          _Warning(16488,$vararg_buffer29);
          label = 47;
          break;
         }
         case 14:  {
          label = 47;
          break;
         }
         case 17:  {
          _Warning(16558,$vararg_buffer31);
          label = 49;
          break;
         }
         case 16:  {
          label = 49;
          break;
         }
         case 19:  {
          _Warning(16628,$vararg_buffer33);
          label = 51;
          break;
         }
         case 18:  {
          label = 51;
          break;
         }
         case 21:  {
          _Warning(16701,$vararg_buffer35);
          label = 53;
          break;
         }
         case 20:  {
          label = 53;
          break;
         }
         case 22:  {
          ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
          $57 = (_SB_GetSym($3,$0,15962)|0);
          $58 = ($57|0)==(0);
          if ($58) {
           $$0$i$i$i = 0;
          } else {
           $$idx$val$i$i$i = HEAP32[$0>>2]|0;
           $59 = (_FindWarning($$idx$val$i$i$i)|0);
           $60 = ($59|0)==(0|0);
           if ($60) {
            _Error(16776,$vararg_buffer37);
            $$0$i$i$i = 0;
           } else {
            $$0$i$i$i = $59;
           }
          }
          _SB_Done($0);
          $61 = ($$0$i$i$i|0)==(0|0);
          L61: do {
           if (!($61)) {
            _SB_SkipWhite($3);
            $62 = HEAP32[$19>>2]|0;
            $63 = HEAP32[$21>>2]|0;
            $64 = ($62>>>0)<($63>>>0);
            if ($64) {
             $65 = (($62) + 1)|0;
             HEAP32[$19>>2] = $65;
             $66 = HEAP32[$3>>2]|0;
             $67 = (($66) + ($62)|0);
             $68 = HEAP8[$67>>0]|0;
             $69 = ($68<<24>>24)==(44);
             if ($69) {
              _SB_SkipWhite($3);
              ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
              $$idx$val$i16$i$i = HEAP32[$19>>2]|0;
              $70 = (_SB_GetSym($3,$0,0)|0);
              $71 = ($70|0)==(0);
              L66: do {
               if ($71) {
                label = 67;
               } else {
                $72 = (_SB_CompareStr($0,16824)|0);
                $73 = ($72|0)==(0);
                if ($73) {
                 _SB_Done($0);
                 $$idx$val$i23$i$i = HEAP32[$$0$i$i$i>>2]|0;
                 $84 = ($$idx$val$i23$i$i>>>0)<(2);
                 if ($84) {
                  _Error(16833,$vararg_buffer43);
                  break L61;
                 } else {
                  _IS_Drop($$0$i$i$i);
                  break L61;
                 }
                }
                $74 = (_SB_CompareStr($0,16828)|0);
                $75 = ($74|0)==(0);
                if (!($75)) {
                 HEAP32[$19>>2] = $$idx$val$i16$i$i;
                 label = 67;
                 break;
                }
                _SB_SkipWhite($3);
                $76 = HEAP32[$19>>2]|0;
                $77 = HEAP32[$21>>2]|0;
                $78 = ($76>>>0)<($77>>>0);
                do {
                 if ($78) {
                  $79 = (($76) + 1)|0;
                  HEAP32[$19>>2] = $79;
                  $80 = HEAP32[$3>>2]|0;
                  $81 = (($80) + ($76)|0);
                  $82 = HEAP8[$81>>0]|0;
                  $83 = ($82<<24>>24)==(44);
                  if (!($83)) {
                   break;
                  }
                  _SB_SkipWhite($3);
                  _SB_Done($0);
                  $$0$i$i = 1;
                  break L66;
                 }
                } while(0);
                _Error(16131,$vararg_buffer41);
                _SB_Done($0);
                break L61;
               }
              } while(0);
              if ((label|0) == 67) {
               _SB_Done($0);
               $$0$i$i = 0;
              }
              $$idx13$val$i$i$i = HEAP32[$21>>2]|0;
              $$idx12$val$i$i$i = HEAP32[$19>>2]|0;
              $85 = (($$idx13$val$i$i$i) - ($$idx12$val$i$i$i))|0;
              $86 = ($85>>>0)<(4);
              do {
               if ($86) {
                $92 = ($85>>>0)<(2);
                if ($92) {
                 label = 88;
                 break;
                }
                $$idx$val$i32$i$pre$i = HEAP32[$3>>2]|0;
                $$idx$val$i50$i$i = $$idx$val$i32$i$pre$i;
                label = 78;
               } else {
                $$idx$val$i25$i$i = HEAP32[$3>>2]|0;
                $87 = (($$idx$val$i25$i$i) + ($$idx12$val$i$i$i)|0);
                $88 = (_strncmp($87,16860,4)|0);
                $89 = ($88|0)==(0);
                $90 = (($$idx12$val$i$i$i) + 4)|0;
                if (!($89)) {
                 $$idx$val$i50$i$i = $$idx$val$i25$i$i;
                 label = 78;
                 break;
                }
                $91 = ($90>>>0)>($$idx13$val$i$i$i>>>0);
                $$$i$i$i$i = $91 ? $$idx13$val$i$i$i : $90;
                $storemerge62$i$i = $$$i$i$i$i;
                label = 80;
               }
              } while(0);
              L89: do {
               if ((label|0) == 78) {
                $93 = (($$idx$val$i50$i$i) + ($$idx12$val$i$i$i)|0);
                $94 = (_strncmp($93,24493,2)|0);
                $95 = ($94|0)==(0);
                $96 = (($$idx12$val$i$i$i) + 2)|0;
                if ($95) {
                 $97 = ($96>>>0)>($$idx13$val$i$i$i>>>0);
                 $$$i$i33$i$i = $97 ? $$idx13$val$i$i$i : $96;
                 $storemerge62$i$i = $$$i$i33$i$i;
                 label = 80;
                 break;
                }
                $98 = ($85>>>0)<(5);
                do {
                 if ($98) {
                  $103 = ($85>>>0)<(3);
                  if ($103) {
                   label = 88;
                   break L89;
                  } else {
                   label = 85;
                  }
                 } else {
                  $99 = (_strncmp($93,16865,5)|0);
                  $100 = ($99|0)==(0);
                  $101 = (($$idx12$val$i$i$i) + 5)|0;
                  if (!($100)) {
                   label = 85;
                   break;
                  }
                  $102 = ($101>>>0)>($$idx13$val$i$i$i>>>0);
                  $$$i$i42$i$i = $102 ? $$idx13$val$i$i$i : $101;
                  $storemerge$i$i = $$$i$i42$i$i;
                 }
                } while(0);
                if ((label|0) == 85) {
                 $104 = (_strncmp($93,24496,3)|0);
                 $105 = ($104|0)==(0);
                 $106 = (($$idx12$val$i$i$i) + 3)|0;
                 if (!($105)) {
                  label = 88;
                  break;
                 }
                 $107 = ($106>>>0)>($$idx13$val$i$i$i>>>0);
                 $$$i$i51$i$i = $107 ? $$idx13$val$i$i$i : $106;
                 $storemerge$i$i = $$$i$i51$i$i;
                }
                HEAP32[$19>>2] = $storemerge$i$i;
                HEAP32[$1>>2] = 0;
                $112 = 0;
               }
              } while(0);
              do {
               if ((label|0) == 80) {
                HEAP32[$19>>2] = $storemerge62$i$i;
                HEAP32[$1>>2] = 1;
                $112 = 1;
               }
               else if ((label|0) == 88) {
                $108 = (_SB_GetNumber($3,$1)|0);
                $109 = ($108|0)==(0);
                if ($109) {
                 _Error(16871,$vararg_buffer45);
                 break L61;
                } else {
                 $$pre$i$i = HEAP32[$1>>2]|0;
                 $112 = $$pre$i$i;
                 break;
                }
               }
              } while(0);
              $110 = ($$0$i$i|0)==(0);
              if ($110) {
               _IS_Set($$0$i$i$i,$112);
               break;
              }
              $$idx$val$i55$i$i = HEAP32[$$0$i$i$i>>2]|0;
              $111 = ($$idx$val$i55$i$i>>>0)>(7);
              if ($111) {
               _Error(16895,$vararg_buffer47);
               break;
              } else {
               _IS_Push($$0$i$i$i,$112);
               break;
              }
             }
            }
            _Error(16131,$vararg_buffer39);
           }
          } while(0);
          break;
         }
         case 23:  {
          _FlagPragma($3,8264);
          break;
         }
         case 24:  {
          ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
          $113 = (_SB_GetString($3,$0)|0);
          $114 = ($113|0)==(0);
          if ($114) {
           _Error(34081,$vararg_buffer49);
          } else {
           $$idx$val$i$i = HEAP32[$0>>2]|0;
           _MakeZPSym($$idx$val$i$i);
          }
          _SB_Done($0);
          break;
         }
         default: {
          _Internal(15964,$vararg_buffer51);
          // unreachable;
         }
         }
        } while(0);
        if ((label|0) == 16) {
         _SegNamePragma($3,3);
        }
        else if ((label|0) == 37) {
         _FlagPragma($3,8516);
        }
        else if ((label|0) == 39) {
         _SegNamePragma($3,0);
        }
        else if ((label|0) == 42) {
         _SegNamePragma($3,2);
        }
        else if ((label|0) == 47) {
         _FlagPragma($3,8372);
        }
        else if ((label|0) == 49) {
         _SegNamePragma($3,1);
        }
        else if ((label|0) == 51) {
         _FlagPragma($3,8480);
        }
        else if ((label|0) == 53) {
         _FlagPragma($3,8444);
        }
        _SB_SkipWhite($3);
        $115 = HEAP32[$19>>2]|0;
        $116 = HEAP32[$21>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = (($115) + 1)|0;
         HEAP32[$19>>2] = $118;
         $119 = HEAP32[$3>>2]|0;
         $120 = (($119) + ($115)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(41);
         if ($122) {
          _SB_SkipWhite($3);
          $$idx10$val$i = HEAP32[$21>>2]|0;
          $$idx11$val$i = HEAP32[$19>>2]|0;
          $123 = ($$idx11$val$i>>>0)<($$idx10$val$i>>>0);
          if ($123) {
           $$idx9$val$i = HEAP32[$3>>2]|0;
           $124 = (($$idx9$val$i) + ($$idx11$val$i)|0);
           $125 = HEAP8[$124>>0]|0;
           $126 = ($125<<24>>24)==(59);
           if ($126) {
            $127 = (($$idx11$val$i) + 1)|0;
            HEAP32[$19>>2] = $127;
            _SB_SkipWhite($3);
            $$idx7$val$pre$i = HEAP32[$21>>2]|0;
            $$idx8$val$pre$i = HEAP32[$19>>2]|0;
            $$idx7$val$i = $$idx7$val$pre$i;$$idx8$val$i = $$idx8$val$pre$i;
           } else {
            $$idx7$val$i = $$idx10$val$i;$$idx8$val$i = $$idx11$val$i;
           }
          } else {
           $$idx7$val$i = $$idx10$val$i;$$idx8$val$i = $$idx11$val$i;
          }
          $128 = ($$idx8$val$i>>>0)<($$idx7$val$i>>>0);
          if (!($128)) {
           break;
          }
          $$idx6$val$i = HEAP32[$3>>2]|0;
          $129 = (($$idx6$val$i) + ($$idx8$val$i)|0);
          $130 = HEAP8[$129>>0]|0;
          $131 = ($130<<24>>24)==(0);
          if ($131) {
           break;
          }
          _Error(16936,$vararg_buffer55);
          break;
         }
        }
        _Error(16923,$vararg_buffer53);
        break;
       }
      }
      _Error(15999,$vararg_buffer5);
      break;
     }
    }
    $17 = (_IS_Get(13100)|0);
    $18 = ($17|0)==(0);
    if (!($18)) {
     $$idx4$val$i = HEAP32[$2>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $$idx4$val$i;
     _Warning(15979,$vararg_buffer3);
    }
   }
  } while(0);
  _SB_Done($3);
  _SB_Done($2);
 } else {
  _Error(34081,$vararg_buffer);
  _SkipTokens(288,2);
 }
 (_ConsumeRParen()|0);
 STACKTOP = sp;return;
}
function _CmpKey($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($0,$2)|0);
 return ($3|0);
}
function _IntPragma($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i11 = 0, $$idx$val$i14 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 40|0;
 $5 = sp + 36|0;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $6 = (_SB_GetSym($0,$4,0)|0);
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   label = 7;
  } else {
   $8 = (_SB_CompareStr($4,16824)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    _SB_Done($4);
    $$idx$val$i11 = HEAP32[$1>>2]|0;
    $21 = ($$idx$val$i11>>>0)<(2);
    if ($21) {
     _Error(16833,$vararg_buffer1);
     STACKTOP = sp;return;
    } else {
     _IS_Drop($1);
     STACKTOP = sp;return;
    }
   }
   $10 = (_SB_CompareStr($4,16828)|0);
   $11 = ($10|0)==(0);
   if (!($11)) {
    HEAP32[$$idx$i>>2] = $$idx$val$i;
    label = 7;
    break;
   }
   _SB_SkipWhite($0);
   $12 = HEAP32[$$idx$i>>2]|0;
   $13 = ((($0)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($12>>>0)<($14>>>0);
   if ($15) {
    $16 = (($12) + 1)|0;
    HEAP32[$$idx$i>>2] = $16;
    $17 = HEAP32[$0>>2]|0;
    $18 = (($17) + ($12)|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(44);
    if ($20) {
     _SB_SkipWhite($0);
     _SB_Done($4);
     $$0 = 1;
     break;
    }
   }
   _Error(16131,$vararg_buffer);
   _SB_Done($4);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 7) {
  _SB_Done($4);
  $$0 = 0;
 }
 $22 = (_SB_GetNumber($0,$5)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  _Error(16076,$vararg_buffer3);
  STACKTOP = sp;return;
 }
 $24 = HEAP32[$5>>2]|0;
 $25 = ($24|0)<($2|0);
 $26 = ($24|0)>($3|0);
 $or$cond = $25 | $26;
 if ($or$cond) {
  HEAP32[$vararg_buffer5>>2] = $2;
  $vararg_ptr7 = ((($vararg_buffer5)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $3;
  _Error(17069,$vararg_buffer5);
  STACKTOP = sp;return;
 }
 $27 = ($$0|0)==(0);
 if ($27) {
  _IS_Set($1,$24);
  STACKTOP = sp;return;
 }
 $$idx$val$i14 = HEAP32[$1>>2]|0;
 $28 = ($$idx$val$i14>>>0)>(7);
 if ($28) {
  _Error(16895,$vararg_buffer8);
  STACKTOP = sp;return;
 } else {
  _IS_Push($1,$24);
  STACKTOP = sp;return;
 }
}
function _SegNamePragma($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$idx$i = 0, $$idx$val = 0, $$idx$val$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = sp + 24|0;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $4 = (_SB_GetSym($0,$2,0)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   label = 7;
  } else {
   $6 = (_SB_CompareStr($2,16824)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    _SB_Done($2);
    _PopSegName($1);
    _g_segname($1);
    _SB_Done($3);
    STACKTOP = sp;return;
   }
   $8 = (_SB_CompareStr($2,16828)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    HEAP32[$$idx$i>>2] = $$idx$val$i;
    label = 7;
    break;
   }
   _SB_SkipWhite($0);
   $10 = HEAP32[$$idx$i>>2]|0;
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($10>>>0)<($12>>>0);
   if ($13) {
    $14 = (($10) + 1)|0;
    HEAP32[$$idx$i>>2] = $14;
    $15 = HEAP32[$0>>2]|0;
    $16 = (($15) + ($10)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(44);
    if ($18) {
     _SB_SkipWhite($0);
     _SB_Done($2);
     $$0 = 1;
     break;
    }
   }
   _Error(16131,$vararg_buffer);
   _SB_Done($2);
   _SB_Done($3);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 7) {
  _SB_Done($2);
  $$0 = 0;
 }
 $19 = (_SB_GetString($0,$3)|0);
 $20 = ($19|0)==(0);
 if ($20) {
  _Error(34081,$vararg_buffer1);
  _SB_Done($3);
  STACKTOP = sp;return;
 }
 $$idx$val = HEAP32[$3>>2]|0;
 $21 = (_ValidSegName($$idx$val)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  HEAP32[$vararg_buffer3>>2] = $$idx$val;
  _Error(17042,$vararg_buffer3);
  _SB_Done($3);
  STACKTOP = sp;return;
 }
 $23 = ($$0|0)==(0);
 if ($23) {
  _SetSegName($1,$$idx$val);
 } else {
  _PushSegName($1,$$idx$val);
 }
 _g_segname($1);
 _SB_Done($3);
 STACKTOP = sp;return;
}
function _FlagPragma($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i13 = 0, $$01217 = 0, $$01218 = 0, $$01220 = 0, $$idx$val$i = 0, $$idx$val$i16 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 40|0;
 $3 = sp + 36|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $4 = (_SB_GetSym($0,$2,0)|0);
 $5 = ($4|0)==(0);
 L1: do {
  if ($5) {
   $$01218 = 0;
   label = 17;
  } else {
   $6 = (_SB_CompareStr($2,16824)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$idx$val$i = HEAP32[$1>>2]|0;
    $8 = ($$idx$val$i>>>0)<(2);
    if ($8) {
     _Error(16833,$vararg_buffer);
     STACKTOP = sp;return;
    } else {
     _IS_Drop($1);
     STACKTOP = sp;return;
    }
   }
   $9 = (_SB_CompareStr($2,16828)|0);
   $10 = ($9|0)==(0);
   do {
    if ($10) {
     _SB_SkipWhite($0);
     $11 = ((($0)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = ((($0)) + 4|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($12>>>0)<($14>>>0);
     if ($15) {
      $16 = (($12) + 1)|0;
      HEAP32[$11>>2] = $16;
      $17 = HEAP32[$0>>2]|0;
      $18 = (($17) + ($12)|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)==(44);
      if ($20) {
       _SB_SkipWhite($0);
       $21 = (_SB_GetSym($0,$2,0)|0);
       $22 = ($21|0)==(0);
       if ($22) {
        $$01218 = 1;
        label = 17;
        break L1;
       } else {
        $$01220 = 1;
        break;
       }
      }
     }
     _Error(16131,$vararg_buffer1);
     break L1;
    } else {
     $$01220 = 0;
    }
   } while(0);
   $23 = (_SB_CompareStr($2,16860)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $$0$i13 = 1;
   } else {
    $25 = (_SB_CompareStr($2,24493)|0);
    $26 = ($25|0)==(0);
    if ($26) {
     $$0$i13 = 1;
    } else {
     $27 = (_SB_CompareStr($2,16865)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $$0$i13 = 0;
     } else {
      $29 = (_SB_CompareStr($2,24496)|0);
      $30 = ($29|0)==(0);
      if ($30) {
       $$0$i13 = 0;
      } else {
       _Error(16980,$vararg_buffer3);
       $$0$i13 = 0;
      }
     }
    }
   }
   HEAP32[$3>>2] = $$0$i13;
   $$01217 = $$01220;$35 = $$0$i13;
   label = 20;
  }
 } while(0);
 do {
  if ((label|0) == 17) {
   $31 = (_SB_GetNumber($0,$3)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    _Error(16076,$vararg_buffer5);
    break;
   } else {
    $$pre = HEAP32[$3>>2]|0;
    $$01217 = $$01218;$35 = $$pre;
    label = 20;
    break;
   }
  }
 } while(0);
 do {
  if ((label|0) == 20) {
   $33 = ($$01217|0)==(0);
   if ($33) {
    _IS_Set($1,$35);
    break;
   }
   $$idx$val$i16 = HEAP32[$1>>2]|0;
   $34 = ($$idx$val$i16>>>0)>(7);
   if ($34) {
    _Error(16895,$vararg_buffer7);
    break;
   } else {
    _IS_Push($1,$35);
    break;
   }
  }
 } while(0);
 _SB_Done($2);
 STACKTOP = sp;return;
}
function _GetFuncInfo($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx$val = 0, $$lobit$i = 0, $$lobit$i37 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $storemerge = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)==(95);
 if (!($4)) {
  $29 = (_IsDigit($3)|0);
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = HEAP8[$0>>0]|0;
   $32 = ($31<<24>>24)==(36);
   if (!($32)) {
    $33 = (_bsearch($0,496,255,8,3)|0);
    $34 = ($33|0)==(0|0);
    if ($34) {
     $39 = HEAP8[47051]|0;
     $40 = ($39<<24>>24)==(0);
     if (!($40)) {
      $41 = HEAP32[3649]|0;
      HEAP32[$vararg_buffer>>2] = $0;
      (_fprintf($41,17365,$vararg_buffer)|0);
     }
     HEAP16[$1>>1] = -1;
     $storemerge = -1;
    } else {
     $35 = ((($33)) + 4|0);
     $36 = HEAP16[$35>>1]|0;
     HEAP16[$1>>1] = $36;
     $37 = ((($33)) + 6|0);
     $38 = HEAP16[$37>>1]|0;
     $storemerge = $38;
    }
    HEAP16[$2>>1] = $storemerge;
    STACKTOP = sp;return;
   }
  }
  HEAP16[$1>>1] = -1;
  HEAP16[$2>>1] = -1;
  STACKTOP = sp;return;
 }
 $5 = ((($0)) + 1|0);
 $6 = (_FindGlobalSym($5)|0);
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = ((($6)) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $$idx$val = HEAP32[$9>>2]|0;
  $10 = $$idx$val & 15;
  $11 = ($10|0)==(14);
  if ($11) {
   $12 = ((($6)) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 4;
   $16 = ($15|0)==(0);
   L20: do {
    if ($16) {
     $17 = ((($13)) + 12|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ($18|0)==(0);
     do {
      if (!($19)) {
       $20 = HEAP8[47028]|0;
       $21 = ($20<<24>>24)==(0);
       if ($21) {
        $$lobit$i = $$idx$val & 131072;
        $23 = ($$lobit$i|0)==(0);
        if (!($23)) {
         break;
        }
       } else {
        $$lobit$i37 = $$idx$val & 65536;
        $22 = ($$lobit$i37|0)==(0);
        if ($22) {
         break;
        }
       }
       $24 = ((($13)) + 20|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ((($25)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (_CheckedSizeOf($27)|0);
       switch ($28|0) {
       case 1:  {
        HEAP16[$1>>1] = 1;
        break L20;
        break;
       }
       case 2:  {
        HEAP16[$1>>1] = 3;
        break L20;
        break;
       }
       default: {
        HEAP16[$1>>1] = 771;
        break L20;
       }
       }
      }
     } while(0);
     HEAP16[$1>>1] = 0;
    } else {
     HEAP16[$1>>1] = 4;
    }
   } while(0);
   HEAP16[$2>>1] = -1;
   STACKTOP = sp;return;
  }
 }
 HEAP16[$1>>1] = 775;
 HEAP16[$2>>1] = -1;
 STACKTOP = sp;return;
}
function _CompareFuncInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($0,$2)|0);
 return ($3|0);
}
function _GetZPInfo($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_bsearch($0,15188,17,16,4)|0);
 return ($1|0);
}
function _CompareZPInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$019 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if ($3) {
   $4 = ((($1)) + 1|0);
   $5 = (_strcmp($0,$4)|0);
   $$019 = $5;
  } else {
   $6 = $2&255;
   $7 = ((($1)) + 1|0);
   $8 = (_strncmp($0,$7,$6)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $10 = (($0) + ($6)|0);
    $11 = HEAP8[$10>>0]|0;
    switch ($11<<24>>24) {
    case 43: case 0:  {
     $$019 = 0;
     break L1;
     break;
    }
    default: {
    }
    }
    $$019 = -1;
   } else {
    $$019 = $8;
   }
  }
 } while(0);
 return ($$019|0);
}
function _GetRegInfo($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i12 = 0, $$idx1$val$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $4 = ($$idx$val$i>>>0)>($1>>>0);
 if (!($4)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($1<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 (_InitCollection($3)|0);
 $$idx1$val$i = HEAP32[$3>>2]|0;
 $9 = (_GetRegInfo2($0,$8,$1,$3,0,0,$2)|0);
 $$idx$val$i12 = HEAP32[$3>>2]|0;
 $10 = ($$idx$val$i12>>>0)>($$idx1$val$i>>>0);
 L4: do {
  if ($10) {
   $11 = ((($3)) + 8|0);
   $12 = ($$idx$val$i12|0)==(0);
   if ($12) {
    $14 = HEAP32[3332]|0;
    $15 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$14 & 1]($15,40922,40950,129);
    // unreachable;
   }
   $13 = (($$idx$val$i12) + -1)|0;
   $18 = $13;
   while(1) {
    $16 = HEAP32[$11>>2]|0;
    $17 = (($16) + ($18<<2)|0);
    $19 = HEAP32[$17>>2]|0;
    $20 = ((($19)) + 3|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = $21&255;
    $23 = $22 & 254;
    $24 = $23&255;
    HEAP8[$20>>0] = $24;
    _CollDelete($3,$18);
    $25 = ($18>>>0)>($$idx1$val$i>>>0);
    if (!($25)) {
     break L4;
    }
    $$pre$i = HEAP32[$3>>2]|0;
    $26 = (($18) + -1)|0;
    $27 = ($$pre$i>>>0)>($26>>>0);
    if ($27) {
     $18 = $26;
    } else {
     break;
    }
   }
   $14 = HEAP32[3332]|0;
   $15 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$14 & 1]($15,40922,40950,129);
   // unreachable;
  }
 } while(0);
 _DoneCollection($3);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _GetRegInfo2($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$062 = 0, $$064 = 0, $$065$be = 0, $$065$idx = 0, $$065$idx$val = 0, $$065$idx$val92 = 0, $$065$idx91 = 0, $$06596 = 0, $$06895 = 0, $$071$ = 0, $$07194 = 0, $$074$be = 0, $$07493 = 0, $$169 = 0, $$175 = 0, $$2 = 0, $$276 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$065$idx91 = ((($1)) + 3|0);
 $$065$idx$val92 = HEAP8[$$065$idx91>>0]|0;
 $7 = $$065$idx$val92 & 1;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $$2 = $4;
  STACKTOP = sp;return ($$2|0);
 }
 $9 = ((($0)) + 148|0);
 $10 = ((($0)) + 8|0);
 $11 = ((($0)) + 16|0);
 $$06596 = $1;$$06895 = $5;$$07194 = $4;$$07493 = $2;$14 = $$065$idx$val92;
 while(1) {
  $12 = ((($$06596)) + 3|0);
  $13 = $14&255;
  $15 = $13 | 1;
  $16 = $15&255;
  HEAP8[$12>>0] = $16;
  $17 = HEAP32[$3>>2]|0;
  _CollInsert($3,$$06596,$17);
  $18 = ((($$06596)) + 14|0);
  $19 = HEAP16[$18>>1]|0;
  $20 = $19&65535;
  $21 = HEAP8[$$06596>>0]|0;
  $22 = ($21<<24>>24)==(57);
  if ($22) {
   label = 6;
  } else {
   $23 = ((($$06596)) + 12|0);
   $24 = HEAP16[$23>>1]|0;
   $25 = $24 & 1;
   $26 = ($25<<16>>16)==(0);
   if ($26) {
    $$064 = $20;
   } else {
    $27 = ((($$06596)) + 20|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(0|0);
    if ($29) {
     label = 6;
    } else {
     $$064 = $20;
    }
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $30 = HEAP16[$9>>1]|0;
   $31 = $30 | $19;
   $32 = $31&65535;
   $$064 = $32;
  }
  $33 = $$06895 ^ -1;
  $34 = $$064 & $33;
  $$071$ = $34 | $$07194;
  $35 = ((($$06596)) + 16|0);
  $36 = HEAP16[$35>>1]|0;
  $37 = ($36<<16>>16)==(0);
  $38 = $36&65535;
  $39 = $$071$ ^ -1;
  $40 = $38 & $39;
  $41 = $37 ? 0 : $40;
  $$169 = $41 | $$06895;
  $42 = $$169 | $$071$;
  $43 = $42 & $6;
  $44 = ($43|0)==($6|0);
  if ($44) {
   $$2 = $$071$;
   label = 30;
   break;
  }
  $45 = ((($$06596)) + 12|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46&65535;
  $48 = $47 & 32;
  $49 = ($48|0)==(0);
  if (!($49)) {
   $$2 = $$071$;
   label = 30;
   break;
  }
  $50 = $47 & 1;
  $51 = ($50|0)==(0);
  if ($51) {
   $57 = $47 & 2;
   $58 = ($57|0)==(0);
   if (!($58)) {
    label = 13;
    break;
   }
   $78 = ($$07493|0)<(0);
   if ($78) {
    $79 = (_CS_GetEntryIndex($0,$$06596)|0);
    $$276 = $79;
   } else {
    $$276 = $$07493;
   }
   $80 = (($$276) + 1)|0;
   $81 = HEAP32[$10>>2]|0;
   $82 = ($81>>>0)>($80>>>0);
   if (!($82)) {
    label = 25;
    break;
   }
   $85 = HEAP32[$11>>2]|0;
   $86 = (($85) + ($80<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==(0|0);
   if ($88) {
    label = 28;
    break;
   } else {
    $$065$be = $87;$$074$be = $80;
   }
  } else {
   $52 = ((($$06596)) + 20|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    $$2 = $$071$;
    label = 30;
    break;
   }
   $55 = ((($53)) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $$065$be = $56;$$074$be = -1;
  }
  $$065$idx = ((($$065$be)) + 3|0);
  $$065$idx$val = HEAP8[$$065$idx>>0]|0;
  $89 = $$065$idx$val & 1;
  $90 = ($89<<24>>24)==(0);
  if ($90) {
   $$06596 = $$065$be;$$06895 = $$169;$$07194 = $$071$;$$07493 = $$074$be;$14 = $$065$idx$val;
  } else {
   $$2 = $$071$;
   label = 30;
   break;
  }
 }
 if ((label|0) == 13) {
  $59 = ((($$06596)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(0|0);
  if ($61) {
   $65 = HEAP16[$9>>1]|0;
   $66 = $65&65535;
   $$062 = $66;
  } else {
   $62 = ((($60)) + 12|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (_GetRegInfo2($0,$63,-1,$3,$$071$,$$169,$6)|0);
   $$062 = $64;
  }
  $67 = ($$07493|0)<(0);
  if ($67) {
   $68 = (_CS_GetEntryIndex($0,$$06596)|0);
   $$175 = $68;
  } else {
   $$175 = $$07493;
  }
  $69 = (($$175) + 1)|0;
  $70 = HEAP32[$10>>2]|0;
  $71 = ($70>>>0)>($69>>>0);
  if (!($71)) {
   $72 = HEAP32[3332]|0;
   $73 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$72 & 1]($73,40922,40950,129);
   // unreachable;
  }
  $74 = HEAP32[$11>>2]|0;
  $75 = (($74) + ($69<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)==(0|0);
  if ($77) {
   _Internal(17861,$vararg_buffer);
   // unreachable;
  } else {
   $91 = (_GetRegInfo2($0,$76,$69,$3,$$071$,$$169,$6)|0);
   $92 = $91 | $$062;
   STACKTOP = sp;return ($92|0);
  }
 }
 else if ((label|0) == 25) {
  $83 = HEAP32[3332]|0;
  $84 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$83 & 1]($84,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 28) {
  _Internal(17861,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 30) {
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _RegAUsed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_GetRegInfo($0,$1,1)|0);
 $3 = $2 & 1;
 return ($3|0);
}
function _RegXUsed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lobit = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_GetRegInfo($0,$1,2)|0);
 $3 = $2 >>> 1;
 $$lobit = $3 & 1;
 return ($$lobit|0);
}
function _RegYUsed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lobit = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_GetRegInfo($0,$1,4)|0);
 $3 = $2 >>> 2;
 $$lobit = $3 & 1;
 return ($$lobit|0);
}
function _RegAXUsed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_GetRegInfo($0,$1,3)|0);
 $3 = $2 & 3;
 $4 = ($3|0)!=(0);
 $5 = $4&1;
 return ($5|0);
}
function _RegEAXUsed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_GetRegInfo($0,$1,771)|0);
 $3 = $2 & 771;
 $4 = ($3|0)!=(0);
 $5 = $4&1;
 return ($5|0);
}
function _GetKnownReg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $phitmp24 = 0, $phitmp25 = 0, $phitmp26 = 0, $phitmp27 = 0, $phitmp28 = 0, $phitmp29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $0 & 1;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $9 = $0 & 2;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = ($1|0)==(0|0);
    if ($11) {
     $$0 = 2;
     break;
    }
    $12 = ((($1)) + 2|0);
    $13 = HEAP16[$12>>1]|0;
    $14 = ($13<<16>>16)>(-1);
    $phitmp29 = $14 ? 2 : 0;
    $$0 = $phitmp29;
    break;
   }
   $15 = $0 & 4;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $17 = ($1|0)==(0|0);
    if ($17) {
     $$0 = 4;
     break;
    }
    $18 = ((($1)) + 4|0);
    $19 = HEAP16[$18>>1]|0;
    $20 = ($19<<16>>16)>(-1);
    $phitmp28 = $20 ? 4 : 0;
    $$0 = $phitmp28;
    break;
   }
   $21 = $0 & 8;
   $22 = ($21|0)==(0);
   if (!($22)) {
    $23 = ($1|0)==(0|0);
    if ($23) {
     $$0 = 8;
     break;
    }
    $24 = ((($1)) + 14|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($25<<16>>16)>(-1);
    $phitmp27 = $26 ? 8 : 0;
    $$0 = $phitmp27;
    break;
   }
   $27 = $0 & 16;
   $28 = ($27|0)==(0);
   if (!($28)) {
    $29 = ($1|0)==(0|0);
    if ($29) {
     $$0 = 16;
     break;
    }
    $30 = ((($1)) + 10|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = ($31<<16>>16)>(-1);
    $phitmp26 = $32 ? 16 : 0;
    $$0 = $phitmp26;
    break;
   }
   $33 = $0 & 32;
   $34 = ($33|0)==(0);
   if (!($34)) {
    $35 = ($1|0)==(0|0);
    if ($35) {
     $$0 = 32;
     break;
    }
    $36 = ((($1)) + 12|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = ($37<<16>>16)>(-1);
    $phitmp25 = $38 ? 32 : 0;
    $$0 = $phitmp25;
    break;
   }
   $39 = $0 & 256;
   $40 = ($39|0)==(0);
   if (!($40)) {
    $41 = ($1|0)==(0|0);
    if ($41) {
     $$0 = 256;
     break;
    }
    $42 = ((($1)) + 6|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = ($43<<16>>16)>(-1);
    $phitmp24 = $44 ? 256 : 0;
    $$0 = $phitmp24;
    break;
   }
   $45 = $0 & 512;
   $46 = ($45|0)==(0);
   if ($46) {
    $$0 = 0;
   } else {
    $47 = ($1|0)==(0|0);
    if ($47) {
     $$0 = 512;
    } else {
     $48 = ((($1)) + 8|0);
     $49 = HEAP16[$48>>1]|0;
     $50 = ($49<<16>>16)>(-1);
     $phitmp = $50 ? 512 : 0;
     $$0 = $phitmp;
    }
   }
  } else {
   $4 = ($1|0)==(0|0);
   if ($4) {
    $8 = 1;
   } else {
    $5 = HEAP16[$1>>1]|0;
    $6 = ($5<<16>>16)>(-1);
    $8 = $6;
   }
   $7 = $8&1;
   $$0 = $7;
  }
 } while(0);
 return ($$0|0);
}
function _FindBoolCmpCond($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strncmp($0,17889,4)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = -1;
  return ($$0|0);
 }
 $3 = ((($0)) + 4|0);
 $4 = (_strlen($0)|0);
 $5 = (($4) + -4)|0;
 $6 = (_FindCmpCond($3,$5)|0);
 $$0 = $6;
 return ($$0|0);
}
function _FindCmpCond($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strncmp($0,17894,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$06 = 0;
 } else {
  $4 = (_strncmp($0,(17898),$1)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$06 = 1;
  } else {
   $6 = (_strncmp($0,(17902),$1)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $$06 = 2;
   } else {
    $8 = (_strncmp($0,(17906),$1)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$06 = 3;
    } else {
     $10 = (_strncmp($0,(17910),$1)|0);
     $11 = ($10|0)==(0);
     if ($11) {
      $$06 = 4;
     } else {
      $12 = (_strncmp($0,(17914),$1)|0);
      $13 = ($12|0)==(0);
      if ($13) {
       $$06 = 5;
      } else {
       $14 = (_strncmp($0,(17918),$1)|0);
       $15 = ($14|0)==(0);
       if ($15) {
        $$06 = 6;
       } else {
        $16 = (_strncmp($0,(17922),$1)|0);
        $17 = ($16|0)==(0);
        if ($17) {
         $$06 = 7;
        } else {
         $18 = (_strncmp($0,(17926),$1)|0);
         $19 = ($18|0)==(0);
         if ($19) {
          $$06 = 8;
         } else {
          $20 = (_strncmp($0,(17930),$1)|0);
          $21 = ($20|0)==(0);
          $$ = $21 ? 9 : -1;
          return ($$|0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 return ($$06|0);
}
function _FindTosCmpCond($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (_strncmp($0,17934,3)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = -1;
  return ($$0|0);
 }
 $4 = (($0) + ($1)|0);
 $5 = ((($4)) + -2|0);
 $6 = (_strcmp($5,17938)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = -1;
  return ($$0|0);
 }
 $8 = (($1) + -5)|0;
 $9 = ((($0)) + 3|0);
 $10 = (_FindCmpCond($9,$8)|0);
 $$0 = $10;
 return ($$0|0);
}
function _SetOutputName($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[11250] = $0;
 return;
}
function _MakeDefaultOutputName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11250]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP8[$1>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   return;
  }
 }
 $5 = HEAP8[47030]|0;
 $6 = ($5<<24>>24)!=(0);
 $7 = $6 ? 17941 : 17944;
 $8 = (_MakeFilename($0,$7)|0);
 HEAP32[11250] = $8;
 return;
}
function _OpenOutputFile() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11251]|0;
 $1 = ($0|0)==(0|0);
 $2 = HEAP32[11250]|0;
 $3 = ($2|0)!=(0|0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,17947,17986,100);
  // unreachable;
 }
 $6 = (_fopen($2,30054)|0);
 HEAP32[11251] = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = HEAP32[11250]|0;
  $9 = (___errno_location()|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_strerror($10)|0);
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $11;
  _Fatal(18000,$vararg_buffer);
  // unreachable;
 } else {
  $12 = HEAP32[3678]|0;
  $13 = HEAP32[11250]|0;
  HEAP32[$vararg_buffer2>>2] = $13;
  _Print($12,1,18033,$vararg_buffer2);
  STACKTOP = sp;return;
 }
}
function _OpenDebugOutputFile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[11251]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,18058,17986,118);
  // unreachable;
 }
 $5 = (_fopen($0,30054)|0);
 HEAP32[11251] = $5;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_strerror($8)|0);
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  _Fatal(18074,$vararg_buffer);
  // unreachable;
 } else {
  $10 = HEAP32[3678]|0;
  HEAP32[$vararg_buffer2>>2] = $0;
  _Print($10,1,18113,$vararg_buffer2);
  STACKTOP = sp;return;
 }
}
function _CloseOutputFile() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11251]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = HEAP32[3332]|0;
  $3 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$2 & 1]($3,18144,17986,134);
  // unreachable;
 }
 $4 = (_fclose($0)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $7 = HEAP32[3678]|0;
  $8 = HEAP32[11250]|0;
  HEAP32[$vararg_buffer1>>2] = $8;
  _Print($7,1,18201,$vararg_buffer1);
  HEAP32[11251] = 0;
  STACKTOP = sp;return;
 } else {
  $6 = HEAP32[11250]|0;
  (_remove($6)|0);
  _Fatal(18160,$vararg_buffer);
  // unreachable;
 }
}
function _WriteOutput($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = HEAP32[11251]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,18144,17986,157);
  // unreachable;
 } else {
  HEAP32[$1>>2] = $varargs;
  $6 = HEAP32[11251]|0;
  $7 = (_vfprintf($6,$0,$1)|0);
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function _GotoStatement() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _NextToken();
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(40);
 if ($1) {
  $2 = (_AddLabelSym((44644),8192)|0);
  $3 = ((($2)) + 36|0);
  $4 = HEAP32[$3>>2]|0;
  _g_jump($4);
  _NextToken();
  STACKTOP = sp;return;
 } else {
  _Error(34139,$vararg_buffer);
  _NextToken();
  STACKTOP = sp;return;
 }
}
function _DoLabel() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_AddLabelSym((44644),4096)|0);
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 _g_defcodelabel($2);
 _NextToken();
 _NextToken();
 return;
}
function _IsIdent($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_IsAlpha($0)|0);
 $2 = ($0<<24>>24)==(95);
 $not$ = ($1|0)!=(0);
 $$ = $2 | $not$;
 $3 = $$&1;
 return ($3|0);
}
function _Compile($0) {
 $0 = $0|0;
 var $$0$lcssa$i = 0, $$032$lcssa$i = 0, $$054$i = 0, $$056$i = 0, $$133$idx$i = 0, $$133$idx$val$i = 0, $$133$ph$i = 0, $$idx = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx41$val$i = 0, $$idx44$val$i = 0, $$idx45$val$i = 0, $$idx9$val = 0, $$lobit$i$i = 0, $$lobit$i46$i = 0, $$phi$trans$insert$i = 0, $$pre$i = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $or$cond38$i = 0, $or$cond40$i = 0;
 var $or$cond50$i = 0, $trunc$i = 0, $trunc$i$clear = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0;
 $vararg_buffer23 = sp + 304|0;
 $vararg_buffer20 = sp + 296|0;
 $vararg_buffer17 = sp + 288|0;
 $vararg_buffer14 = sp + 280|0;
 $vararg_buffer11 = sp + 272|0;
 $vararg_buffer9 = sp + 264|0;
 $vararg_buffer7 = sp + 256|0;
 $vararg_buffer3 = sp + 248|0;
 $vararg_buffer = sp;
 $1 = sp + 312|0;
 $2 = sp + 664|0;
 $3 = sp + 632|0;
 $4 = sp + 308|0;
 $5 = (_GetVersionAsNumber()|0);
 _DefineNumericMacro(18226,$5);
 _DefineNumericMacro(18235,0);
 _DefineNumericMacro(18252,1);
 _DefineNumericMacro(18269,2);
 $6 = (_IS_Get(8668)|0);
 _DefineNumericMacro(18287,$6);
 $7 = (_IS_Get(8552)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = (_IS_Get(8588)|0);
  _DefineNumericMacro(18300,1);
  $10 = ($9|0)>(100);
  if ($10) {
   _DefineNumericMacro(18308,$9);
  }
  $11 = (_IS_Get(8372)|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   _DefineNumericMacro(18318,1);
  }
  $13 = (_IS_Get(8336)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   _DefineNumericMacro(18328,1);
  }
 }
 $15 = (_time((0|0))|0);
 HEAP32[$4>>2] = $15;
 $16 = (_localtime(($4|0))|0);
 $17 = ((($16)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (18338 + ($18<<2)|0);
 $20 = ((($16)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($16)) + 20|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 1900)|0;
 HEAP32[$vararg_buffer>>2] = $19;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $21;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $24;
 (_xsprintf($2,32,18386,$vararg_buffer)|0);
 (_strftime(($3|0),32,(18398|0),($16|0))|0);
 _DefineTextMacro(18409,$2);
 _DefineTextMacro(18418,$3);
 _DefineNumericMacro(18427,1);
 _EnterGlobalLevel();
 _CreateGlobalSegments();
 _InitLiteralPool();
 _g_preamble();
 _OpenMainFile($0);
 $25 = HEAP8[47030]|0;
 $26 = ($25<<24>>24)==(0);
 L11: do {
  if ($26) {
   _NextToken();
   _NextToken();
   $32 = HEAP32[11156]|0;
   $33 = ($32|0)==(1);
   if (!($33)) {
    $34 = ((($1)) + 244|0);
    $35 = ((($1)) + 4|0);
    $36 = ((($vararg_buffer)) + 244|0);
    $37 = $32;
    while(1) {
     L16: do {
      switch ($37|0) {
      case 41:  {
       _NextToken();
       break;
      }
      case 32:  {
       _Error(18449,$vararg_buffer7);
       _AsmStatement();
       (_ConsumeSemi()|0);
       _RemoveGlobalCode();
       break;
      }
      case 99:  {
       _DoPragma();
       break;
      }
      default: {
       _ParseDeclSpec($vararg_buffer,12,275);
       $38 = HEAP32[$vararg_buffer>>2]|0;
       $39 = $38 & 16384;
       $40 = ($39|0)!=(0);
       $41 = $38 & 3;
       $42 = ($41|0)==(0);
       $or$cond50$i = $40 | $42;
       if (!($or$cond50$i)) {
        _Error(28626,$vararg_buffer9);
        HEAP32[$vararg_buffer>>2] = 12;
       }
       $43 = HEAP32[11156]|0;
       $44 = ($43|0)==(41);
       if ($44) {
        _CheckEmptyDecl($vararg_buffer);
        _NextToken();
        break L16;
       }
       _ParseDecl($vararg_buffer,$1,0);
       $45 = HEAP8[$34>>0]|0;
       $46 = ($45<<24>>24)==(0);
       L24: do {
        if ($46) {
         $$0$lcssa$i = 0;$$032$lcssa$i = 0;
         label = 23;
        } else {
         $$056$i = 0;
         while(1) {
          $47 = HEAP32[$1>>2]|0;
          $48 = $47 & 256;
          $49 = ($48|0)!=(0);
          $50 = $47 & 16399;
          $51 = ($50|0)==(16389);
          $or$cond38$i = $49 | $51;
          do {
           if ($or$cond38$i) {
            $63 = $47;
           } else {
            $52 = HEAP32[$36>>2]|0;
            $53 = $52 & 1;
            $54 = ($53|0)!=(0);
            $55 = $47 & 12;
            $56 = ($55|0)==(4);
            $or$cond40$i = $56 | $54;
            if (!($or$cond40$i)) {
             $57 = $47 & 8;
             $58 = ($57|0)!=(0);
             $59 = HEAP32[11156]|0;
             $60 = ($59|0)==(70);
             $or$cond$i = $58 & $60;
             if (!($or$cond$i)) {
              $63 = $47;
              break;
             }
            }
            $61 = $47 | 5120;
            HEAP32[$1>>2] = $61;
            $63 = $61;
           }
          } while(0);
          $62 = $63 & 256;
          $64 = ($62|0)==(0);
          L33: do {
           if (!($64)) {
            $65 = HEAP32[11156]|0;
            switch ($65|0) {
            case 41: case 52:  {
             break L33;
             break;
            }
            default: {
            }
            }
            $66 = (_GetFuncDesc($35)|0);
            $67 = HEAP32[$66>>2]|0;
            $68 = $67 & 1;
            $69 = ($68|0)==(0);
            if (!($69)) {
             $70 = $67 & -8;
             $71 = $70 | 2;
             HEAP32[$66>>2] = $71;
            }
           }
          } while(0);
          $72 = (_AddGlobalSym($34,$35,$63)|0);
          _SymUseAttr($72,$1);
          $73 = HEAP32[$1>>2]|0;
          $74 = $73 & 1024;
          $75 = ($74|0)==(0);
          do {
           if (!($75)) {
            $76 = (_SizeOf($35)|0);
            $77 = HEAP32[11156]|0;
            $78 = ($77|0)==(70);
            if ($78) {
             $79 = ($76|0)==(0);
             L42: do {
              if ($79) {
               $$idx41$val$i = HEAP32[$35>>2]|0;
               $trunc$i = $$idx41$val$i&255;
               $trunc$i$clear = $trunc$i & 15;
               switch ($trunc$i$clear<<24>>24) {
               case 12:  {
                break L42;
                break;
               }
               case 9:  {
                break;
               }
               default: {
                HEAP32[$vararg_buffer11>>2] = $34;
                _Error(31810,$vararg_buffer11);
                break L42;
               }
               }
               $80 = (_IS_Get(8668)|0);
               $81 = ($80|0)==(2);
               if (!($81)) {
                HEAP32[$vararg_buffer14>>2] = $34;
                _Error(18477,$vararg_buffer14);
               }
              }
             } while(0);
             $82 = (_GetBaseElementType($35)|0);
             $$idx44$val$i = HEAP32[$82>>2]|0;
             $$lobit$i46$i = $$idx44$val$i & 2048;
             $83 = ($$lobit$i46$i|0)==(0);
             if ($83) {
              _g_usedata();
             } else {
              _g_userodata();
             }
             $84 = ((($72)) + 48|0);
             _g_defgloblabel($84);
             _NextToken();
             $85 = ((($72)) + 24|0);
             $86 = HEAP32[$85>>2]|0;
             (_ParseInit($86)|0);
             break;
            } else {
             $$idx$val$i = HEAP32[$35>>2]|0;
             $87 = $$idx$val$i & 15;
             $88 = ($87|0)==(9);
             do {
              if ($88) {
               HEAP32[$vararg_buffer17>>2] = $34;
               _Error(18477,$vararg_buffer17);
               $89 = ((($72)) + 20|0);
               $90 = HEAP32[$89>>2]|0;
               $91 = $90 & -5121;
               HEAP32[$89>>2] = $91;
               $98 = $91;
              } else {
               $92 = ($76|0)==(0);
               if (!($92)) {
                $$phi$trans$insert$i = ((($72)) + 20|0);
                $$pre$i = HEAP32[$$phi$trans$insert$i>>2]|0;
                $98 = $$pre$i;
                break;
               }
               $93 = ($87|0)==(12);
               if (!($93)) {
                HEAP32[$vararg_buffer20>>2] = $34;
                _Error(31810,$vararg_buffer20);
               }
               $94 = ((($72)) + 20|0);
               $95 = HEAP32[$94>>2]|0;
               $96 = $95 & -5121;
               HEAP32[$94>>2] = $96;
               $98 = $96;
              }
             } while(0);
             $97 = $98 & 1024;
             $99 = ($97|0)==(0);
             if ($99) {
              break;
             }
             _g_usebss();
             $100 = ((($72)) + 48|0);
             _g_defgloblabel($100);
             _g_res($76);
             break;
            }
           }
          } while(0);
          $101 = HEAP32[11156]|0;
          $102 = ($101|0)==(52);
          if (!($102)) {
           $$054$i = $$056$i;$$133$ph$i = $72;
           break L24;
          }
          _NextToken();
          _ParseDecl($vararg_buffer,$1,0);
          $103 = HEAP8[$34>>0]|0;
          $104 = ($103<<24>>24)==(0);
          if ($104) {
           $$0$lcssa$i = 1;$$032$lcssa$i = $72;
           label = 23;
           break;
          } else {
           $$056$i = 1;
          }
         }
        }
       } while(0);
       if ((label|0) == 23) {
        label = 0;
        _NextToken();
        $$054$i = $$0$lcssa$i;$$133$ph$i = $$032$lcssa$i;
       }
       $105 = ($$133$ph$i|0)==(0|0);
       if (!($105)) {
        $106 = ((($$133$ph$i)) + 24|0);
        $107 = HEAP32[$106>>2]|0;
        $$idx45$val$i = HEAP32[$107>>2]|0;
        $108 = $$idx45$val$i & 15;
        $109 = ($108|0)==(14);
        if ($109) {
         $110 = ($$054$i|0)==(0);
         if (!($110)) {
          break L16;
         }
         $111 = HEAP32[11156]|0;
         $112 = ($111|0)==(41);
         if ($112) {
          _NextToken();
          break L16;
         }
         $$133$idx$i = ((($$133$ph$i)) + 20|0);
         $$133$idx$val$i = HEAP32[$$133$idx$i>>2]|0;
         $$lobit$i$i = $$133$idx$val$i & 4096;
         $113 = ($$lobit$i$i|0)==(0);
         if (!($113)) {
          $114 = ((($$133$ph$i)) + 48|0);
          HEAP32[$vararg_buffer23>>2] = $114;
          _Error(18508,$vararg_buffer23);
         }
         _NewFunc($$133$ph$i);
         break L16;
        }
       }
       (_ConsumeSemi()|0);
      }
      }
     } while(0);
     $115 = HEAP32[11156]|0;
     $116 = ($115|0)==(1);
     if ($116) {
      break L11;
     } else {
      $37 = $115;
     }
    }
   }
  } else {
   _OpenOutputFile();
   $27 = (_NextLine()|0);
   $28 = ($27|0)==(0);
   if (!($28)) {
    while(1) {
     _Preprocess();
     $29 = HEAP32[11473]|0;
     $$idx = ((($29)) + 4|0);
     $$idx$val = HEAP32[$$idx>>2]|0;
     $$idx9$val = HEAP32[$29>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $$idx$val;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $$idx9$val;
     (_WriteOutput(18443,$vararg_buffer3)|0);
     $30 = (_NextLine()|0);
     $31 = ($30|0)==(0);
     if ($31) {
      break;
     }
    }
   }
   _CloseOutputFile();
  }
 } while(0);
 $117 = HEAP8[47051]|0;
 $118 = ($117<<24>>24)==(0);
 if ($118) {
  _ErrorReport();
  STACKTOP = sp;return;
 }
 $119 = HEAP32[3678]|0;
 _PrintMacroStats($119);
 _ErrorReport();
 STACKTOP = sp;return;
}
function _FinishCompile() {
 var $$0 = 0, $$010 = 0, $$011 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_GetGlobalSymTab()|0);
 $1 = ((($0)) + 4|0);
 $$010 = HEAP32[$1>>2]|0;
 $2 = ($$010|0)==(0|0);
 if ($2) {
  _OutputLiteralPool();
  _EmitDebugInfo();
  _EmitExternals();
  _LeaveGlobalLevel();
  return;
 } else {
  $$011 = $$010;
 }
 while(1) {
  $3 = (_SymIsOutputFunc($$011)|0);
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = ((($$011)) + 44|0);
   $6 = HEAP32[$5>>2]|0;
   _MoveLiteralPool($6);
   $7 = ((($$011)) + 40|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($8)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   _CS_MergeLabels($10);
   $11 = HEAP32[$7>>2]|0;
   $12 = ((($11)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   _RunOpt($13);
  }
  $14 = ((($$011)) + 8|0);
  $$0 = HEAP32[$14>>2]|0;
  $15 = ($$0|0)==(0|0);
  if ($15) {
   break;
  } else {
   $$011 = $$0;
  }
 }
 _OutputLiteralPool();
 _EmitDebugInfo();
 _EmitExternals();
 _LeaveGlobalLevel();
 return;
}
function _HexVal($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = $0&255;
 $2 = (_IsXDigit($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $0;
  _Error(18556,$vararg_buffer);
 }
 $4 = (_IsDigit($1)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $7 = (_toupper($0)|0);
  $8 = (($7) + -55)|0;
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 } else {
  $6 = (($0) + -48)|0;
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _PowerOf2($0) {
 $0 = $0|0;
 var $$ = 0, $$011 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(1);
 do {
  if ($1) {
   $$011 = 0;
  } else {
   $2 = ($0|0)==(2);
   if ($2) {
    $$011 = 1;
   } else {
    $3 = ($0|0)==(4);
    if ($3) {
     $$011 = 2;
    } else {
     $4 = ($0|0)==(8);
     if ($4) {
      $$011 = 3;
     } else {
      $5 = ($0|0)==(16);
      if ($5) {
       $$011 = 4;
      } else {
       $6 = ($0|0)==(32);
       if ($6) {
        $$011 = 5;
       } else {
        $7 = ($0|0)==(64);
        if ($7) {
         $$011 = 6;
        } else {
         $8 = ($0|0)==(128);
         if ($8) {
          $$011 = 7;
         } else {
          $9 = ($0|0)==(256);
          if ($9) {
           $$011 = 8;
          } else {
           $10 = ($0|0)==(512);
           if ($10) {
            $$011 = 9;
           } else {
            $11 = ($0|0)==(1024);
            if ($11) {
             $$011 = 10;
            } else {
             $12 = ($0|0)==(2048);
             if ($12) {
              $$011 = 11;
             } else {
              $13 = ($0|0)==(4096);
              if ($13) {
               $$011 = 12;
              } else {
               $14 = ($0|0)==(8192);
               if ($14) {
                $$011 = 13;
               } else {
                $15 = ($0|0)==(16384);
                if ($15) {
                 $$011 = 14;
                } else {
                 $16 = ($0|0)==(32768);
                 if ($16) {
                  $$011 = 15;
                 } else {
                  $17 = ($0|0)==(65536);
                  if ($17) {
                   $$011 = 16;
                  } else {
                   $18 = ($0|0)==(131072);
                   if ($18) {
                    $$011 = 17;
                   } else {
                    $19 = ($0|0)==(262144);
                    if ($19) {
                     $$011 = 18;
                    } else {
                     $20 = ($0|0)==(524288);
                     if ($20) {
                      $$011 = 19;
                      break;
                     }
                     $21 = ($0|0)==(1048576);
                     if ($21) {
                      $$011 = 20;
                      break;
                     }
                     $22 = ($0|0)==(2097152);
                     if ($22) {
                      $$011 = 21;
                      break;
                     }
                     $23 = ($0|0)==(4194304);
                     if ($23) {
                      $$011 = 22;
                      break;
                     }
                     $24 = ($0|0)==(8388608);
                     if ($24) {
                      $$011 = 23;
                      break;
                     }
                     $25 = ($0|0)==(16777216);
                     if ($25) {
                      $$011 = 24;
                      break;
                     }
                     $26 = ($0|0)==(33554432);
                     if ($26) {
                      $$011 = 25;
                      break;
                     }
                     $27 = ($0|0)==(67108864);
                     if ($27) {
                      $$011 = 26;
                      break;
                     }
                     $28 = ($0|0)==(134217728);
                     if ($28) {
                      $$011 = 27;
                      break;
                     }
                     $29 = ($0|0)==(268435456);
                     if ($29) {
                      $$011 = 28;
                      break;
                     }
                     $30 = ($0|0)==(536870912);
                     if ($30) {
                      $$011 = 29;
                      break;
                     }
                     $31 = ($0|0)==(1073741824);
                     if ($31) {
                      $$011 = 30;
                      break;
                     }
                     $32 = ($0|0)==(-2147483648);
                     $$ = $32 ? 31 : -1;
                     return ($$|0);
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($$011|0);
}
function _ParseAttribute($0) {
 $0 = $0|0;
 var $$07$lcssa$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 12|0;
 $2 = HEAP32[11156]|0;
 $3 = ($2|0)==(91);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 _NextToken();
 (_ConsumeLParen()|0);
 (_ConsumeLParen()|0);
 $4 = HEAP32[11156]|0;
 $5 = ($4|0)==(40);
 L4: do {
  if ($5) {
   while(1) {
    (_strcpy($1,(44644))|0);
    $8 = (_strcmp($1,2544)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$07$lcssa$i = 0;
    } else {
     $10 = (_strcmp($1,(2564))|0);
     $11 = ($10|0)==(0);
     if ($11) {
      $$07$lcssa$i = 1;
     } else {
      $12 = (_strcmp($1,(2584))|0);
      $13 = ($12|0)==(0);
      if ($13) {
       $$07$lcssa$i = 2;
      } else {
       $14 = (_strcmp($1,(2604))|0);
       $15 = ($14|0)==(0);
       if ($15) {
        $$07$lcssa$i = 3;
       } else {
        label = 9;
        break;
       }
      }
     }
    }
    $16 = (2544 + (($$07$lcssa$i*20)|0)|0);
    _NextToken();
    $17 = ($16|0)==(0|0);
    if ($17) {
     break;
    }
    $18 = (((2544 + (($$07$lcssa$i*20)|0)|0)) + 16|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vi[$19 & 15]($0);
    $20 = HEAP32[11156]|0;
    $21 = ($20|0)==(52);
    if (!($21)) {
     label = 16;
     break;
    }
    _NextToken();
    $24 = HEAP32[11156]|0;
    $25 = ($24|0)==(40);
    if (!($25)) {
     label = 3;
     break L4;
    }
   }
   if ((label|0) == 9) {
    _NextToken();
   }
   else if ((label|0) == 16) {
    (_ConsumeRParen()|0);
    (_ConsumeRParen()|0);
    STACKTOP = sp;return;
   }
   HEAP32[$vararg_buffer1>>2] = $1;
   _Error(18612,$vararg_buffer1);
   _SkipTokens(2536,2);
   $22 = HEAP32[11156]|0;
   $23 = ($22|0)==(85);
   if ($23) {
    (_ConsumeRParen()|0);
    (_ConsumeRParen()|0);
   }
  } else {
   label = 3;
  }
 } while(0);
 if ((label|0) == 3) {
  _Error(18588,$vararg_buffer);
  _SkipTokens(2536,2);
  $6 = HEAP32[11156]|0;
  $7 = ($6|0)==(85);
  if ($7) {
   (_ConsumeRParen()|0);
   (_ConsumeRParen()|0);
  }
 }
 STACKTOP = sp;return;
}
function _NoReturnAttr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_xmalloc(4)|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 312|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_NewCollection()|0);
  HEAP32[$2>>2] = $5;
  $7 = $5;
 } else {
  $7 = $3;
 }
 $6 = HEAP32[$7>>2]|0;
 _CollInsert($7,$1,$6);
 return;
}
function _UnusedAttr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_xmalloc(4)|0);
 HEAP32[$1>>2] = 1;
 $2 = ((($0)) + 312|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (_NewCollection()|0);
  HEAP32[$2>>2] = $5;
  $7 = $5;
 } else {
  $7 = $3;
 }
 $6 = HEAP32[$7>>2]|0;
 _CollInsert($7,$1,$6);
 return;
}
function _OptPtrLoad1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$053 = 0, $$05459 = 0, $$061 = 0, $$1 = 0, $$idx$i = 0, $$idx$i55 = 0, $$idx$val$i = 0, $$idx$val$i56 = 0, $$idx$val$i58 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i58 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i58|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 20|0);
 $9 = ((($1)) + 24|0);
 $10 = ((($1)) + 28|0);
 $11 = ((($1)) + 32|0);
 $$05459 = 0;$$061 = 0;$12 = $$idx$val$i58;
 while(1) {
  $13 = ($12>>>0)>($$05459>>>0);
  if (!($13)) {
   label = 4;
   break;
  }
  $16 = HEAP32[$3>>2]|0;
  $17 = (($16) + ($$05459<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$1>>2] = $18;
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==(14);
  $21 = (($$05459) + 1)|0;
  L7: do {
   if ($20) {
    $22 = (_CS_GetEntries($0,$4,$21,8)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $$1 = $$061;
    } else {
     $24 = HEAP32[$4>>2]|0;
     $25 = HEAP16[$24>>1]|0;
     $26 = $25&255;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $28 = ($25&65535) >>> 8;
      $29 = $28&255;
      switch ($29<<24>>24) {
      case 2: case 3: case 6:  {
       break;
      }
      default: {
       $$1 = $$061;
       break L7;
      }
      }
      $30 = HEAP32[$5>>2]|0;
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(67);
      if ($32) {
       $33 = HEAP32[$6>>2]|0;
       $34 = HEAP8[$33>>0]|0;
       $35 = ($34<<24>>24)==(71);
       if ($35) {
        $36 = HEAP32[$7>>2]|0;
        $37 = HEAP8[$36>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $39 = HEAP32[$8>>2]|0;
         $40 = HEAP8[$39>>0]|0;
         $41 = ($40<<24>>24)==(66);
         if ($41) {
          $42 = HEAP32[$9>>2]|0;
          $43 = HEAP8[$42>>0]|0;
          $44 = ($43<<24>>24)==(73);
          if ($44) {
           $45 = HEAP32[$10>>2]|0;
           $46 = HEAP8[$45>>0]|0;
           $47 = ($46<<24>>24)==(42);
           if ($47) {
            $48 = (_CE_IsKnownImm($45,0)|0);
            $49 = ($48|0)==(0);
            if ($49) {
             $$1 = $$061;
            } else {
             $50 = HEAP32[$11>>2]|0;
             $51 = HEAP8[$50>>0]|0;
             $52 = ($51<<24>>24)==(37);
             if ($52) {
              $53 = ((($50)) + 4|0);
              $54 = HEAP32[$53>>2]|0;
              $55 = (_strcmp($54,34420)|0);
              $56 = ($55|0)==(0);
              if ($56) {
               $57 = (_CS_RangeHasLabel($0,$21,8)|0);
               $58 = ($57|0)==(0);
               if ($58) {
                $59 = (($$05459) + 9)|0;
                $60 = HEAP32[$5>>2]|0;
                $61 = ((($60)) + 36|0);
                $62 = HEAP32[$61>>2]|0;
                $63 = (_NewCodeEntry(62,3,34402,0,$62)|0);
                $64 = (($$05459) + 10)|0;
                _CS_InsertEntry($0,$63,$59);
                $65 = (_CS_GetPrevEntry($0,$$05459)|0);
                $66 = ($65|0)==(0|0);
                do {
                 if ($66) {
                  label = 23;
                 } else {
                  $67 = HEAP16[$65>>1]|0;
                  $68 = $67&255;
                  $69 = ($68<<24>>24)==(41);
                  $70 = ($67&65535) >>> 8;
                  $71 = $70&65535;
                  if ($69) {
                   $$idx$i55 = ((($65)) + 24|0);
                   $$idx$val$i56 = HEAP32[$$idx$i55>>2]|0;
                   $72 = ($$idx$val$i56|0)==(0);
                   if (!($72)) {
                    label = 23;
                    break;
                   }
                   $73 = ((($65)) + 4|0);
                   $74 = HEAP32[$73>>2]|0;
                   $75 = ((($65)) + 36|0);
                   $76 = HEAP32[$75>>2]|0;
                   $77 = (_NewCodeEntry(40,$71,$74,0,$76)|0);
                   $$053 = $77;
                  } else {
                   label = 23;
                  }
                 }
                } while(0);
                if ((label|0) == 23) {
                 label = 0;
                 $78 = HEAP32[$6>>2]|0;
                 $79 = ((($78)) + 36|0);
                 $80 = HEAP32[$79>>2]|0;
                 $81 = (_NewCodeEntry(71,0,0,0,$80)|0);
                 $$053 = $81;
                }
                $82 = (($$05459) + 11)|0;
                _CS_InsertEntry($0,$$053,$64);
                $83 = HEAP32[$1>>2]|0;
                $84 = ((($83)) + 36|0);
                $85 = HEAP32[$84>>2]|0;
                $86 = (_NewCodeEntry(14,0,0,0,$85)|0);
                $87 = (($$05459) + 12)|0;
                _CS_InsertEntry($0,$86,$82);
                $88 = HEAP32[$7>>2]|0;
                $89 = ((($88)) + 1|0);
                $90 = HEAP8[$89>>0]|0;
                $91 = $90&255;
                $92 = ((($88)) + 4|0);
                $93 = HEAP32[$92>>2]|0;
                $94 = ((($88)) + 36|0);
                $95 = HEAP32[$94>>2]|0;
                $96 = (_NewCodeEntry(0,$91,$93,0,$95)|0);
                $97 = (($$05459) + 13)|0;
                _CS_InsertEntry($0,$96,$87);
                $98 = HEAP32[$8>>2]|0;
                $99 = ((($98)) + 36|0);
                $100 = HEAP32[$99>>2]|0;
                $101 = (_NewCodeEntry(62,3,34407,0,$100)|0);
                $102 = (($$05459) + 14)|0;
                _CS_InsertEntry($0,$101,$97);
                $103 = HEAP32[$4>>2]|0;
                $104 = ((($103)) + 1|0);
                $105 = HEAP8[$104>>0]|0;
                $106 = $105&255;
                $107 = ((($103)) + 4|0);
                $108 = HEAP32[$107>>2]|0;
                $109 = ((($103)) + 36|0);
                $110 = HEAP32[$109>>2]|0;
                $111 = (_NewCodeEntry(42,$106,$108,0,$110)|0);
                $112 = (($$05459) + 15)|0;
                _CS_InsertEntry($0,$111,$102);
                $113 = HEAP32[$11>>2]|0;
                $114 = ((($113)) + 36|0);
                $115 = HEAP32[$114>>2]|0;
                $116 = (_NewCodeEntry(41,2,34449,0,$115)|0);
                $117 = (($$05459) + 16)|0;
                _CS_InsertEntry($0,$116,$112);
                $118 = HEAP32[$11>>2]|0;
                $119 = ((($118)) + 36|0);
                $120 = HEAP32[$119>>2]|0;
                $121 = (_NewCodeEntry(40,10,34402,0,$120)|0);
                _CS_InsertEntry($0,$121,$117);
                _CS_DelEntries($0,$$05459,9);
                $122 = (($$061) + 1)|0;
                $$1 = $122;
               } else {
                $$1 = $$061;
               }
              } else {
               $$1 = $$061;
              }
             } else {
              $$1 = $$061;
             }
            }
           } else {
            $$1 = $$061;
           }
          } else {
           $$1 = $$061;
          }
         } else {
          $$1 = $$061;
         }
        } else {
         $$1 = $$061;
        }
       } else {
        $$1 = $$061;
       }
      } else {
       $$1 = $$061;
      }
     } else {
      $$1 = $$061;
     }
    }
   } else {
    $$1 = $$061;
   }
  } while(0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $123 = ($21>>>0)<($$idx$val$i>>>0);
  if ($123) {
   $$05459 = $21;$$061 = $$1;$12 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 26;
   break;
  }
 }
 if ((label|0) == 4) {
  $14 = HEAP32[3332]|0;
  $15 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$14 & 1]($15,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03538 = 0, $$039 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i37 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i37 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i37|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 20|0);
 $9 = ((($1)) + 24|0);
 $10 = ((($1)) + 28|0);
 $11 = ((($1)) + 32|0);
 $$03538 = 0;$$039 = 0;$12 = $$idx$val$i37;
 while(1) {
  $13 = ($12>>>0)>($$03538>>>0);
  if (!($13)) {
   label = 4;
   break;
  }
  $16 = HEAP32[$3>>2]|0;
  $17 = (($16) + ($$03538<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$1>>2] = $18;
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==(0);
  $21 = (($$03538) + 1)|0;
  if ($20) {
   $22 = (_CS_GetEntries($0,$4,$21,8)|0);
   $23 = ($22|0)==(0);
   if ($23) {
    $$1 = $$039;
   } else {
    $24 = HEAP32[$4>>2]|0;
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(46);
    if ($26) {
     $27 = HEAP32[$5>>2]|0;
     $28 = HEAP8[$27>>0]|0;
     $29 = ($28<<24>>24)==(71);
     if ($29) {
      $30 = HEAP32[$6>>2]|0;
      $31 = HEAP8[$30>>0]|0;
      $32 = ($31<<24>>24)==(29);
      if ($32) {
       $33 = HEAP32[$7>>2]|0;
       $34 = HEAP8[$33>>0]|0;
       $35 = ($34<<24>>24)==(0);
       if ($35) {
        $36 = HEAP32[$8>>2]|0;
        $37 = HEAP8[$36>>0]|0;
        $38 = ($37<<24>>24)==(66);
        if ($38) {
         $39 = HEAP32[$9>>2]|0;
         $40 = HEAP8[$39>>0]|0;
         $41 = ($40<<24>>24)==(50);
         if ($41) {
          $42 = HEAP32[$10>>2]|0;
          $43 = HEAP8[$42>>0]|0;
          $44 = ($43<<24>>24)==(42);
          if ($44) {
           $45 = HEAP32[$11>>2]|0;
           $46 = HEAP8[$45>>0]|0;
           $47 = ($46<<24>>24)==(37);
           if ($47) {
            $48 = ((($45)) + 4|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = (_strcmp($49,34420)|0);
            $51 = ($50|0)==(0);
            if ($51) {
             $52 = (_CS_RangeHasLabel($0,$21,8)|0);
             $53 = ($52|0)==(0);
             if ($53) {
              $54 = HEAP32[$1>>2]|0;
              $55 = ((($54)) + 36|0);
              $56 = HEAP32[$55>>2]|0;
              $57 = (_NewCodeEntry(62,3,34402,0,$56)|0);
              _CS_InsertEntry($0,$57,$21);
              $58 = HEAP32[$7>>2]|0;
              $59 = ((($58)) + 36|0);
              $60 = HEAP32[$59>>2]|0;
              $61 = (_NewCodeEntry(62,3,34407,0,$60)|0);
              $62 = (($$03538) + 6)|0;
              _CS_InsertEntry($0,$61,$62);
              $63 = HEAP32[$9>>2]|0;
              $64 = ((($63)) + 36|0);
              $65 = HEAP32[$64>>2]|0;
              $66 = (_NewCodeEntry(41,2,34449,0,$65)|0);
              $67 = (($$03538) + 10)|0;
              _CS_InsertEntry($0,$66,$67);
              $68 = HEAP32[$9>>2]|0;
              $69 = ((($68)) + 36|0);
              $70 = HEAP32[$69>>2]|0;
              $71 = (_NewCodeEntry(40,10,34402,0,$70)|0);
              $72 = (($$03538) + 11)|0;
              _CS_InsertEntry($0,$71,$72);
              $73 = (($$03538) + 12)|0;
              _CS_DelEntry($0,$73);
              $74 = (($$03538) + 8)|0;
              _CS_DelEntry($0,$74);
              $75 = (($$03538) + 7)|0;
              _CS_DelEntry($0,$75);
              $76 = (($$03538) + 2)|0;
              _CS_DelEntry($0,$76);
              $77 = (($$039) + 1)|0;
              $$1 = $77;
             } else {
              $$1 = $$039;
             }
            } else {
             $$1 = $$039;
            }
           } else {
            $$1 = $$039;
           }
          } else {
           $$1 = $$039;
          }
         } else {
          $$1 = $$039;
         }
        } else {
         $$1 = $$039;
        }
       } else {
        $$1 = $$039;
       }
      } else {
       $$1 = $$039;
      }
     } else {
      $$1 = $$039;
     }
    } else {
     $$1 = $$039;
    }
   }
  } else {
   $$1 = $$039;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $78 = ($21>>>0)<($$idx$val$i>>>0);
  if ($78) {
   $$03538 = $21;$$039 = $$1;$12 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 19;
   break;
  }
 }
 if ((label|0) == 4) {
  $14 = HEAP32[3332]|0;
  $15 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$14 & 1]($15,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad3($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03843 = 0, $$045 = 0, $$1 = 0, $$idx$i = 0, $$idx$i39 = 0, $$idx$val$i = 0, $$idx$val$i40 = 0, $$idx$val$i42 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i42 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i42|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 24|0);
 $9 = ((($1)) + 20|0);
 $10 = ((($1)) + 28|0);
 $$03843 = 0;$$045 = 0;$11 = $$idx$val$i42;
 while(1) {
  $12 = ($11>>>0)>($$03843>>>0);
  if (!($12)) {
   label = 4;
   break;
  }
  $15 = HEAP32[$3>>2]|0;
  $16 = (($15) + ($$03843<<2)|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$1>>2] = $17;
  $18 = HEAP16[$17>>1]|0;
  $19 = ($18<<16>>16)==(552);
  L7: do {
   if ($19) {
    $20 = (($$03843) + 1)|0;
    $21 = (_CS_GetEntries($0,$4,$20,7)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $$1 = $$045;
    } else {
     $23 = HEAP32[$4>>2]|0;
     $24 = HEAP16[$23>>1]|0;
     $25 = ($24<<16>>16)==(553);
     if ($25) {
      $26 = HEAP32[$5>>2]|0;
      $27 = HEAP8[$26>>0]|0;
      $28 = ($27<<24>>24)==(14);
      if ($28) {
       $29 = HEAP32[$6>>2]|0;
       $30 = HEAP16[$29>>1]|0;
       $31 = $30&255;
       $32 = ($31<<24>>24)==(0);
       if ($32) {
        $33 = ($30&65535) >>> 8;
        $34 = $33&255;
        switch ($34<<24>>24) {
        case 3: case 6:  {
         break;
        }
        default: {
         $$1 = $$045;
         break L7;
        }
        }
        $35 = HEAP32[$7>>2]|0;
        $36 = HEAP8[$35>>0]|0;
        switch ($36<<24>>24) {
        case 30: case 3:  {
         break;
        }
        default: {
         $$1 = $$045;
         break L7;
        }
        }
        $37 = ((($35)) + 20|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = ($38|0)==(0|0);
        if ($39) {
         $$1 = $$045;
        } else {
         $40 = ((($38)) + 12|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = HEAP32[$8>>2]|0;
         $43 = ($41|0)==($42|0);
         if ($43) {
          $44 = HEAP32[$9>>2]|0;
          $45 = HEAP8[$44>>0]|0;
          $46 = ($45<<24>>24)==(28);
          if ($46) {
           $47 = HEAP8[$41>>0]|0;
           $48 = ($47<<24>>24)==(42);
           if ($48) {
            $49 = (_CE_IsKnownImm($41,0)|0);
            $50 = ($49|0)==(0);
            if ($50) {
             $$1 = $$045;
            } else {
             $51 = HEAP32[$10>>2]|0;
             $52 = HEAP8[$51>>0]|0;
             $53 = ($52<<24>>24)==(37);
             if ($53) {
              $54 = ((($51)) + 4|0);
              $55 = HEAP32[$54>>2]|0;
              $56 = (_strcmp($55,34420)|0);
              $57 = ($56|0)==(0);
              if ($57) {
               $58 = (_CS_RangeHasLabel($0,$20,5)|0);
               $59 = ($58|0)==(0);
               if ($59) {
                $60 = HEAP32[$10>>2]|0;
                $$idx$i39 = ((($60)) + 24|0);
                $$idx$val$i40 = HEAP32[$$idx$i39>>2]|0;
                $61 = ($$idx$val$i40|0)==(0);
                if ($61) {
                 $62 = HEAP32[$1>>2]|0;
                 $63 = ((($62)) + 4|0);
                 $64 = HEAP32[$63>>2]|0;
                 $65 = (_strlen($64)|0);
                 $66 = ($65>>>0)>(3);
                 if ($66) {
                  $67 = HEAP8[$64>>0]|0;
                  $68 = ($67<<24>>24)==(60);
                  if ($68) {
                   $69 = ((($64)) + 1|0);
                   $70 = HEAP8[$69>>0]|0;
                   $71 = ($70<<24>>24)==(40);
                   if (!($71)) {
                    $$1 = $$045;
                    break;
                   }
                   $72 = HEAP32[$4>>2]|0;
                   $73 = ((($72)) + 4|0);
                   $74 = HEAP32[$73>>2]|0;
                   $75 = (_strlen($74)|0);
                   $76 = ($75|0)==($65|0);
                   if (!($76)) {
                    $$1 = $$045;
                    break;
                   }
                   $77 = HEAP8[$74>>0]|0;
                   $78 = ($77<<24>>24)==(62);
                   if (!($78)) {
                    $$1 = $$045;
                    break;
                   }
                   $79 = ((($74)) + 1|0);
                   $80 = (($65) + -1)|0;
                   $81 = (_memcmp($69,$79,$80)|0);
                   $82 = ($81|0)==(0);
                   if (!($82)) {
                    $$1 = $$045;
                    break;
                   }
                   $83 = HEAP32[$6>>2]|0;
                   $84 = ((($83)) + 1|0);
                   $85 = HEAP8[$84>>0]|0;
                   $86 = $85&255;
                   $87 = ((($83)) + 4|0);
                   $88 = HEAP32[$87>>2]|0;
                   $89 = ((($62)) + 36|0);
                   $90 = HEAP32[$89>>2]|0;
                   $91 = (_NewCodeEntry(42,$86,$88,0,$90)|0);
                   $92 = (($$03843) + 8)|0;
                   _CS_InsertEntry($0,$91,$92);
                   $93 = HEAP32[$1>>2]|0;
                   $94 = ((($93)) + 36|0);
                   $95 = HEAP32[$94>>2]|0;
                   $96 = (_NewCodeEntry(41,2,34449,0,$95)|0);
                   $97 = (($$03843) + 9)|0;
                   _CS_InsertEntry($0,$96,$97);
                   $98 = (($65) + -2)|0;
                   $99 = (_xmalloc($98)|0);
                   $100 = HEAP32[$1>>2]|0;
                   $101 = ((($100)) + 4|0);
                   $102 = HEAP32[$101>>2]|0;
                   $103 = ((($102)) + 2|0);
                   $104 = (($65) + -3)|0;
                   _memcpy(($99|0),($103|0),($104|0))|0;
                   $105 = (($99) + ($104)|0);
                   HEAP8[$105>>0] = 0;
                   $106 = HEAP32[$1>>2]|0;
                   $107 = ((($106)) + 36|0);
                   $108 = HEAP32[$107>>2]|0;
                   $109 = (_NewCodeEntry(40,8,$99,0,$108)|0);
                   $110 = (($$03843) + 10)|0;
                   _CS_InsertEntry($0,$109,$110);
                   _xfree($99);
                   _CS_DelEntries($0,$$03843,8);
                   $111 = (($$045) + 1)|0;
                   $$1 = $111;
                  } else {
                   $$1 = $$045;
                  }
                 } else {
                  $$1 = $$045;
                 }
                } else {
                 $$1 = $$045;
                }
               } else {
                $$1 = $$045;
               }
              } else {
               $$1 = $$045;
              }
             } else {
              $$1 = $$045;
             }
            }
           } else {
            $$1 = $$045;
           }
          } else {
           $$1 = $$045;
          }
         } else {
          $$1 = $$045;
         }
        }
       } else {
        $$1 = $$045;
       }
      } else {
       $$1 = $$045;
      }
     } else {
      $$1 = $$045;
     }
    }
   } else {
    $$1 = $$045;
   }
  } while(0);
  $112 = (($$03843) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $113 = ($112>>>0)<($$idx$val$i>>>0);
  if ($113) {
   $$03843 = $112;$$045 = $$1;$11 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 29;
   break;
  }
 }
 if ((label|0) == 4) {
  $13 = HEAP32[3332]|0;
  $14 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$13 & 1]($14,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 29) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad4($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04158 = 0, $$060 = 0, $$1 = 0, $$idx$i = 0, $$idx$i42 = 0, $$idx$i44 = 0, $$idx$i46 = 0, $$idx$i48 = 0, $$idx$i50 = 0, $$idx$i52 = 0, $$idx$i54 = 0, $$idx$val$i = 0, $$idx$val$i43 = 0, $$idx$val$i45 = 0, $$idx$val$i47 = 0, $$idx$val$i49 = 0, $$idx$val$i51 = 0, $$idx$val$i53 = 0, $$idx$val$i55 = 0;
 var $$idx$val$i57 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i57 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i57|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 20|0);
 $9 = ((($1)) + 28|0);
 $10 = ((($1)) + 24|0);
 $11 = ((($1)) + 32|0);
 $$04158 = 0;$$060 = 0;$12 = $$idx$val$i57;
 while(1) {
  $13 = ($12>>>0)>($$04158>>>0);
  if (!($13)) {
   label = 4;
   break;
  }
  $16 = HEAP32[$3>>2]|0;
  $17 = (($16) + ($$04158<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$1>>2] = $18;
  $19 = HEAP16[$18>>1]|0;
  $20 = ($19<<16>>16)==(552);
  L7: do {
   if ($20) {
    $21 = (($$04158) + 1)|0;
    $22 = (_CS_GetEntries($0,$4,$21,8)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $$1 = $$060;
    } else {
     $24 = HEAP32[$4>>2]|0;
     $25 = HEAP16[$24>>1]|0;
     $26 = ($25<<16>>16)==(553);
     if ($26) {
      $$idx$i44 = ((($24)) + 24|0);
      $$idx$val$i45 = HEAP32[$$idx$i44>>2]|0;
      $27 = ($$idx$val$i45|0)==(0);
      if ($27) {
       $28 = HEAP32[$5>>2]|0;
       $29 = HEAP8[$28>>0]|0;
       $30 = ($29<<24>>24)==(42);
       if ($30) {
        $31 = (_CE_IsConstImm($28)|0);
        $32 = ($31|0)==(0);
        if ($32) {
         $$1 = $$060;
        } else {
         $33 = HEAP32[$5>>2]|0;
         $$idx$i54 = ((($33)) + 24|0);
         $$idx$val$i55 = HEAP32[$$idx$i54>>2]|0;
         $34 = ($$idx$val$i55|0)==(0);
         if ($34) {
          $35 = HEAP32[$6>>2]|0;
          $36 = HEAP8[$35>>0]|0;
          $37 = ($36<<24>>24)==(14);
          if ($37) {
           $$idx$i52 = ((($35)) + 24|0);
           $$idx$val$i53 = HEAP32[$$idx$i52>>2]|0;
           $38 = ($$idx$val$i53|0)==(0);
           if ($38) {
            $39 = HEAP32[$7>>2]|0;
            $40 = HEAP16[$39>>1]|0;
            $41 = ($40<<16>>16)==(2560);
            if ($41) {
             $$idx$i50 = ((($39)) + 24|0);
             $$idx$val$i51 = HEAP32[$$idx$i50>>2]|0;
             $42 = ($$idx$val$i51|0)==(0);
             if ($42) {
              $43 = HEAP32[$8>>2]|0;
              $44 = HEAP8[$43>>0]|0;
              switch ($44<<24>>24) {
              case 30: case 3:  {
               break;
              }
              default: {
               $$1 = $$060;
               break L7;
              }
              }
              $45 = ((($43)) + 20|0);
              $46 = HEAP32[$45>>2]|0;
              $47 = ($46|0)==(0|0);
              if ($47) {
               $$1 = $$060;
              } else {
               $48 = ((($46)) + 12|0);
               $49 = HEAP32[$48>>2]|0;
               $50 = HEAP32[$9>>2]|0;
               $51 = ($49|0)==($50|0);
               if ($51) {
                $$idx$i48 = ((($43)) + 24|0);
                $$idx$val$i49 = HEAP32[$$idx$i48>>2]|0;
                $52 = ($$idx$val$i49|0)==(0);
                if ($52) {
                 $53 = HEAP32[$10>>2]|0;
                 $54 = HEAP8[$53>>0]|0;
                 $55 = ($54<<24>>24)==(28);
                 if ($55) {
                  $$idx$i46 = ((($53)) + 24|0);
                  $$idx$val$i47 = HEAP32[$$idx$i46>>2]|0;
                  $56 = ($$idx$val$i47|0)==(0);
                  if ($56) {
                   $57 = HEAP8[$49>>0]|0;
                   $58 = ($57<<24>>24)==(42);
                   if (!($58)) {
                    $$1 = $$060;
                    break;
                   }
                   $59 = (_CE_IsKnownImm($49,0)|0);
                   $60 = ($59|0)==(0);
                   if ($60) {
                    $$1 = $$060;
                    break;
                   }
                   $61 = HEAP32[$11>>2]|0;
                   $62 = HEAP8[$61>>0]|0;
                   $63 = ($62<<24>>24)==(37);
                   if (!($63)) {
                    $$1 = $$060;
                    break;
                   }
                   $64 = ((($61)) + 4|0);
                   $65 = HEAP32[$64>>2]|0;
                   $66 = (_strcmp($65,34420)|0);
                   $67 = ($66|0)==(0);
                   if (!($67)) {
                    $$1 = $$060;
                    break;
                   }
                   $$idx$i42 = ((($61)) + 24|0);
                   $$idx$val$i43 = HEAP32[$$idx$i42>>2]|0;
                   $68 = ($$idx$val$i43|0)==(0);
                   if (!($68)) {
                    $$1 = $$060;
                    break;
                   }
                   $69 = HEAP32[$1>>2]|0;
                   $70 = ((($69)) + 4|0);
                   $71 = HEAP32[$70>>2]|0;
                   $72 = (_strlen($71)|0);
                   $73 = ($72>>>0)>(3);
                   if (!($73)) {
                    $$1 = $$060;
                    break;
                   }
                   $74 = HEAP8[$71>>0]|0;
                   $75 = ($74<<24>>24)==(60);
                   if (!($75)) {
                    $$1 = $$060;
                    break;
                   }
                   $76 = ((($71)) + 1|0);
                   $77 = HEAP8[$76>>0]|0;
                   $78 = ($77<<24>>24)==(40);
                   if (!($78)) {
                    $$1 = $$060;
                    break;
                   }
                   $79 = HEAP32[$4>>2]|0;
                   $80 = ((($79)) + 4|0);
                   $81 = HEAP32[$80>>2]|0;
                   $82 = (_strlen($81)|0);
                   $83 = ($82|0)==($72|0);
                   if (!($83)) {
                    $$1 = $$060;
                    break;
                   }
                   $84 = HEAP8[$81>>0]|0;
                   $85 = ($84<<24>>24)==(62);
                   if (!($85)) {
                    $$1 = $$060;
                    break;
                   }
                   $86 = ((($81)) + 1|0);
                   $87 = (($72) + -1)|0;
                   $88 = (_memcmp($76,$86,$87)|0);
                   $89 = ($88|0)==(0);
                   if (!($89)) {
                    $$1 = $$060;
                    break;
                   }
                   $90 = HEAP32[$7>>2]|0;
                   $91 = ((($90)) + 4|0);
                   $92 = HEAP32[$91>>2]|0;
                   $93 = ((($69)) + 36|0);
                   $94 = HEAP32[$93>>2]|0;
                   $95 = (_NewCodeEntry(40,10,$92,0,$94)|0);
                   $96 = (($$04158) + 3)|0;
                   _CS_InsertEntry($0,$95,$96);
                   $97 = HEAP32[$1>>2]|0;
                   $98 = ((($97)) + 36|0);
                   $99 = HEAP32[$98>>2]|0;
                   $100 = (_NewCodeEntry(67,0,0,0,$99)|0);
                   $101 = (($$04158) + 4)|0;
                   _CS_InsertEntry($0,$100,$101);
                   $102 = HEAP32[$1>>2]|0;
                   $103 = ((($102)) + 36|0);
                   $104 = HEAP32[$103>>2]|0;
                   $105 = (_NewCodeEntry(41,2,34449,0,$104)|0);
                   $106 = (($$04158) + 5)|0;
                   _CS_InsertEntry($0,$105,$106);
                   $107 = (($72) + -2)|0;
                   $108 = (_xmalloc($107)|0);
                   $109 = HEAP32[$1>>2]|0;
                   $110 = ((($109)) + 4|0);
                   $111 = HEAP32[$110>>2]|0;
                   $112 = ((($111)) + 2|0);
                   $113 = (($72) + -3)|0;
                   _memcpy(($108|0),($112|0),($113|0))|0;
                   $114 = (($108) + ($113)|0);
                   HEAP8[$114>>0] = 0;
                   $115 = HEAP32[$1>>2]|0;
                   $116 = ((($115)) + 36|0);
                   $117 = HEAP32[$116>>2]|0;
                   $118 = (_NewCodeEntry(40,8,$108,0,$117)|0);
                   $119 = (($$04158) + 6)|0;
                   _CS_InsertEntry($0,$118,$119);
                   _xfree($108);
                   _CS_DelEntries($0,$$04158,2);
                   _CS_DelEntries($0,$106,6);
                   $120 = (($$060) + 1)|0;
                   $$1 = $120;
                  } else {
                   $$1 = $$060;
                  }
                 } else {
                  $$1 = $$060;
                 }
                } else {
                 $$1 = $$060;
                }
               } else {
                $$1 = $$060;
               }
              }
             } else {
              $$1 = $$060;
             }
            } else {
             $$1 = $$060;
            }
           } else {
            $$1 = $$060;
           }
          } else {
           $$1 = $$060;
          }
         } else {
          $$1 = $$060;
         }
        }
       } else {
        $$1 = $$060;
       }
      } else {
       $$1 = $$060;
      }
     } else {
      $$1 = $$060;
     }
    }
   } else {
    $$1 = $$060;
   }
  } while(0);
  $121 = (($$04158) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $122 = ($121>>>0)<($$idx$val$i>>>0);
  if ($122) {
   $$04158 = $121;$$060 = $$1;$12 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 35;
   break;
  }
 }
 if ((label|0) == 4) {
  $14 = HEAP32[3332]|0;
  $15 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$14 & 1]($15,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 35) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad5($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03237 = 0, $$039 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i36 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i36 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i36|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 20|0);
 $$03237 = 0;$$039 = 0;$9 = $$idx$val$i36;
 while(1) {
  $10 = ($9>>>0)>($$03237>>>0);
  if (!($10)) {
   label = 4;
   break;
  }
  $13 = HEAP32[$3>>2]|0;
  $14 = (($13) + ($$03237<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$1>>2] = $15;
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(37);
  L7: do {
   if ($17) {
    $18 = ((($15)) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_strcmp($19,35341)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = (($$03237) + 1)|0;
     $23 = (_CS_GetEntries($0,$4,$22,5)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $$1 = $$039;
     } else {
      $25 = HEAP32[$4>>2]|0;
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(41);
      if ($27) {
       $28 = (_CE_IsKnownImm($25,0)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        $$1 = $$039;
       } else {
        $30 = HEAP32[$5>>2]|0;
        $31 = HEAP16[$30>>1]|0;
        $32 = $31&255;
        $33 = ($32<<24>>24)==(40);
        if ($33) {
         $34 = ($31&65535) >>> 8;
         $35 = $34&255;
         switch ($35<<24>>24) {
         case 2: case 3: case 6:  {
          break;
         }
         default: {
          $$1 = $$039;
          break L7;
         }
         }
         $36 = HEAP32[$6>>2]|0;
         $37 = HEAP8[$36>>0]|0;
         $38 = ($37<<24>>24)==(37);
         if ($38) {
          $39 = ((($36)) + 4|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = (_strcmp($40,35520)|0);
          $42 = ($41|0)==(0);
          if ($42) {
           $43 = HEAP32[$7>>2]|0;
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)==(42);
           if ($45) {
            $46 = (_CE_IsKnownImm($43,0)|0);
            $47 = ($46|0)==(0);
            if ($47) {
             $$1 = $$039;
            } else {
             $48 = HEAP32[$8>>2]|0;
             $49 = HEAP8[$48>>0]|0;
             $50 = ($49<<24>>24)==(37);
             if ($50) {
              $51 = ((($48)) + 4|0);
              $52 = HEAP32[$51>>2]|0;
              $53 = (_strcmp($52,34420)|0);
              $54 = ($53|0)==(0);
              if ($54) {
               $55 = (_CS_RangeHasLabel($0,$22,5)|0);
               $56 = ($55|0)==(0);
               if ($56) {
                $57 = HEAP32[$1>>2]|0;
                $58 = ((($57)) + 36|0);
                $59 = HEAP32[$58>>2]|0;
                $60 = (_NewCodeEntry(62,3,34402,0,$59)|0);
                $61 = (($$03237) + 6)|0;
                _CS_InsertEntry($0,$60,$61);
                $62 = HEAP32[$1>>2]|0;
                $63 = ((($62)) + 36|0);
                $64 = HEAP32[$63>>2]|0;
                $65 = (_NewCodeEntry(63,3,34407,0,$64)|0);
                $66 = (($$03237) + 7)|0;
                _CS_InsertEntry($0,$65,$66);
                $67 = HEAP32[$5>>2]|0;
                $68 = ((($67)) + 1|0);
                $69 = HEAP8[$68>>0]|0;
                $70 = $69&255;
                $71 = ((($67)) + 4|0);
                $72 = HEAP32[$71>>2]|0;
                $73 = ((($67)) + 36|0);
                $74 = HEAP32[$73>>2]|0;
                $75 = (_NewCodeEntry(42,$70,$72,0,$74)|0);
                $76 = (($$03237) + 8)|0;
                _CS_InsertEntry($0,$75,$76);
                $77 = HEAP32[$8>>2]|0;
                $78 = ((($77)) + 36|0);
                $79 = HEAP32[$78>>2]|0;
                $80 = (_NewCodeEntry(41,2,34449,0,$79)|0);
                $81 = (($$03237) + 9)|0;
                _CS_InsertEntry($0,$80,$81);
                $82 = HEAP32[$8>>2]|0;
                $83 = ((($82)) + 36|0);
                $84 = HEAP32[$83>>2]|0;
                $85 = (_NewCodeEntry(40,10,34402,0,$84)|0);
                $86 = (($$03237) + 10)|0;
                _CS_InsertEntry($0,$85,$86);
                _CS_DelEntries($0,$$03237,6);
                $87 = (($$039) + 1)|0;
                $$1 = $87;
               } else {
                $$1 = $$039;
               }
              } else {
               $$1 = $$039;
              }
             } else {
              $$1 = $$039;
             }
            }
           } else {
            $$1 = $$039;
           }
          } else {
           $$1 = $$039;
          }
         } else {
          $$1 = $$039;
         }
        } else {
         $$1 = $$039;
        }
       }
      } else {
       $$1 = $$039;
      }
     }
    } else {
     $$1 = $$039;
    }
   } else {
    $$1 = $$039;
   }
  } while(0);
  $88 = (($$03237) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $89 = ($88>>>0)<($$idx$val$i>>>0);
  if ($89) {
   $$03237 = $88;$$039 = $$1;$9 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 21;
   break;
  }
 }
 if ((label|0) == 4) {
  $11 = HEAP32[3332]|0;
  $12 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$11 & 1]($12,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad6($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04348 = 0, $$049 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i47 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i47 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i47|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 20|0);
 $9 = ((($1)) + 24|0);
 $$04348 = 0;$$049 = 0;$10 = $$idx$val$i47;
 while(1) {
  $11 = ($10>>>0)>($$04348>>>0);
  if (!($11)) {
   label = 4;
   break;
  }
  $14 = HEAP32[$3>>2]|0;
  $15 = (($14) + ($$04348<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$1>>2] = $16;
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(37);
  do {
   if ($18) {
    $19 = ((($16)) + 4|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (_strcmp($20,35341)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = (($$04348) + 1)|0;
     $24 = (_CS_GetEntries($0,$4,$23,6)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      $$1 = $$049;
     } else {
      $26 = HEAP32[$4>>2]|0;
      $27 = HEAP8[$26>>0]|0;
      $28 = ($27<<24>>24)==(42);
      if ($28) {
       $29 = (_CE_IsConstImm($26)|0);
       $30 = ($29|0)==(0);
       if ($30) {
        $$1 = $$049;
       } else {
        $31 = HEAP32[$4>>2]|0;
        $32 = ((($31)) + 8|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = ($33>>>0)>(1);
        if ($34) {
         $35 = HEAP32[$5>>2]|0;
         $36 = HEAP8[$35>>0]|0;
         $37 = ($36<<24>>24)==(41);
         if ($37) {
          $38 = (_CE_IsKnownImm($35,0)|0);
          $39 = ($38|0)==(0);
          if ($39) {
           $$1 = $$049;
          } else {
           $40 = HEAP32[$6>>2]|0;
           $41 = HEAP16[$40>>1]|0;
           $42 = ($41<<16>>16)==(2600);
           if ($42) {
            $43 = HEAP32[$7>>2]|0;
            $44 = HEAP8[$43>>0]|0;
            $45 = ($44<<24>>24)==(37);
            if ($45) {
             $46 = ((($43)) + 4|0);
             $47 = HEAP32[$46>>2]|0;
             $48 = (_strcmp($47,35520)|0);
             $49 = ($48|0)==(0);
             if ($49) {
              $50 = HEAP32[$8>>2]|0;
              $51 = HEAP8[$50>>0]|0;
              $52 = ($51<<24>>24)==(42);
              if ($52) {
               $53 = (_CE_IsKnownImm($50,0)|0);
               $54 = ($53|0)==(0);
               if ($54) {
                $$1 = $$049;
               } else {
                $55 = HEAP32[$9>>2]|0;
                $56 = HEAP8[$55>>0]|0;
                $57 = ($56<<24>>24)==(37);
                if ($57) {
                 $58 = ((($55)) + 4|0);
                 $59 = HEAP32[$58>>2]|0;
                 $60 = (_strcmp($59,34420)|0);
                 $61 = ($60|0)==(0);
                 if ($61) {
                  $62 = (_CS_RangeHasLabel($0,$23,6)|0);
                  $63 = ($62|0)==(0);
                  if ($63) {
                   $64 = (($$04348) + 7)|0;
                   $65 = (_RegYUsed($0,$64)|0);
                   $66 = ($65|0)==(0);
                   if (!($66)) {
                    $$1 = $$049;
                    break;
                   }
                   $67 = HEAP32[$1>>2]|0;
                   $68 = ((($67)) + 36|0);
                   $69 = HEAP32[$68>>2]|0;
                   $70 = (_NewCodeEntry(62,3,34402,0,$69)|0);
                   _CS_InsertEntry($0,$70,$64);
                   $71 = HEAP32[$1>>2]|0;
                   $72 = ((($71)) + 36|0);
                   $73 = HEAP32[$72>>2]|0;
                   $74 = (_NewCodeEntry(63,3,34407,0,$73)|0);
                   $75 = (($$04348) + 8)|0;
                   _CS_InsertEntry($0,$74,$75);
                   $76 = HEAP32[$4>>2]|0;
                   $77 = ((($76)) + 8|0);
                   $78 = HEAP32[$77>>2]|0;
                   $79 = (($78) + -2)|0;
                   $80 = (_MakeHexArg($79)|0);
                   $81 = HEAP32[$4>>2]|0;
                   $82 = ((($81)) + 36|0);
                   $83 = HEAP32[$82>>2]|0;
                   $84 = (_NewCodeEntry(42,2,$80,0,$83)|0);
                   $85 = (($$04348) + 9)|0;
                   _CS_InsertEntry($0,$84,$85);
                   $86 = HEAP32[$6>>2]|0;
                   $87 = ((($86)) + 1|0);
                   $88 = HEAP8[$87>>0]|0;
                   $89 = $88&255;
                   $90 = ((($86)) + 4|0);
                   $91 = HEAP32[$90>>2]|0;
                   $92 = ((($86)) + 36|0);
                   $93 = HEAP32[$92>>2]|0;
                   $94 = (_NewCodeEntry(40,$89,$91,0,$93)|0);
                   $95 = (($$04348) + 10)|0;
                   _CS_InsertEntry($0,$94,$95);
                   $96 = HEAP32[$6>>2]|0;
                   $97 = ((($96)) + 36|0);
                   $98 = HEAP32[$97>>2]|0;
                   $99 = (_NewCodeEntry(67,0,0,0,$98)|0);
                   $100 = (($$04348) + 11)|0;
                   _CS_InsertEntry($0,$99,$100);
                   $101 = HEAP32[$8>>2]|0;
                   $102 = ((($101)) + 36|0);
                   $103 = HEAP32[$102>>2]|0;
                   $104 = (_NewCodeEntry(41,2,34449,0,$103)|0);
                   $105 = (($$04348) + 12)|0;
                   _CS_InsertEntry($0,$104,$105);
                   $106 = HEAP32[$9>>2]|0;
                   $107 = ((($106)) + 36|0);
                   $108 = HEAP32[$107>>2]|0;
                   $109 = (_NewCodeEntry(40,10,34402,0,$108)|0);
                   $110 = (($$04348) + 13)|0;
                   _CS_InsertEntry($0,$109,$110);
                   _CS_DelEntries($0,$$04348,7);
                   $111 = (($$049) + 1)|0;
                   $$1 = $111;
                  } else {
                   $$1 = $$049;
                  }
                 } else {
                  $$1 = $$049;
                 }
                } else {
                 $$1 = $$049;
                }
               }
              } else {
               $$1 = $$049;
              }
             } else {
              $$1 = $$049;
             }
            } else {
             $$1 = $$049;
            }
           } else {
            $$1 = $$049;
           }
          }
         } else {
          $$1 = $$049;
         }
        } else {
         $$1 = $$049;
        }
       }
      } else {
       $$1 = $$049;
      }
     }
    } else {
     $$1 = $$049;
    }
   } else {
    $$1 = $$049;
   }
  } while(0);
  $112 = (($$04348) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $113 = ($112>>>0)<($$idx$val$i>>>0);
  if ($113) {
   $$04348 = $112;$$049 = $$1;$10 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 24;
   break;
  }
 }
 if ((label|0) == 4) {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad7($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$08590 = 0, $$086 = 0, $$087 = 0, $$092 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i89 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i89 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i89|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 20|0);
 $9 = ((($1)) + 24|0);
 $10 = ((($1)) + 28|0);
 $11 = ((($1)) + 32|0);
 $12 = ((($1)) + 36|0);
 $$08590 = 0;$$092 = 0;$13 = $$idx$val$i89;
 while(1) {
  $14 = ($13>>>0)>($$08590>>>0);
  if (!($14)) {
   label = 4;
   break;
  }
  $17 = HEAP32[$3>>2]|0;
  $18 = (($17) + ($$08590<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$1>>2] = $19;
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)==(37);
  do {
   if ($21) {
    $22 = ((($19)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (_strcmp($23,30928)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $26 = (_strcmp($23,31124)|0);
     $27 = ($26|0)==(0);
     if (!($27)) {
      $$1 = $$092;
      break;
     }
    }
    $28 = (($$08590) + 1)|0;
    $29 = (_CS_GetEntries($0,$4,$28,9)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $$1 = $$092;
    } else {
     $31 = HEAP32[$4>>2]|0;
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(14);
     if ($33) {
      $34 = HEAP32[$5>>2]|0;
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $37 = HEAP32[$6>>2]|0;
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(67);
       if ($39) {
        $40 = HEAP32[$7>>2]|0;
        $41 = HEAP8[$40>>0]|0;
        $42 = ($41<<24>>24)==(71);
        if ($42) {
         $43 = HEAP32[$8>>2]|0;
         $44 = HEAP8[$43>>0]|0;
         $45 = ($44<<24>>24)==(0);
         if ($45) {
          $46 = HEAP32[$9>>2]|0;
          $47 = HEAP8[$46>>0]|0;
          $48 = ($47<<24>>24)==(66);
          if ($48) {
           $49 = HEAP32[$10>>2]|0;
           $50 = HEAP8[$49>>0]|0;
           $51 = ($50<<24>>24)==(73);
           if ($51) {
            $52 = HEAP32[$11>>2]|0;
            $53 = HEAP8[$52>>0]|0;
            $54 = ($53<<24>>24)==(42);
            if ($54) {
             $55 = HEAP32[$12>>2]|0;
             $56 = HEAP8[$55>>0]|0;
             $57 = ($56<<24>>24)==(37);
             if ($57) {
              $58 = ((($55)) + 4|0);
              $59 = HEAP32[$58>>2]|0;
              $60 = (_strcmp($59,35199)|0);
              $61 = ($60|0)==(0);
              if ($61) {
               $62 = (_CS_RangeHasLabel($0,$28,9)|0);
               $63 = ($62|0)==(0);
               if ($63) {
                $64 = (($$08590) + 10)|0;
                $65 = HEAP32[$1>>2]|0;
                $66 = ((($65)) + 40|0);
                $67 = HEAP32[$66>>2]|0;
                $68 = ((($67)) + 2|0);
                $69 = HEAP16[$68>>1]|0;
                $70 = ($69<<16>>16)==(0);
                $71 = ((($65)) + 36|0);
                $72 = HEAP32[$71>>2]|0;
                if ($70) {
                 $73 = (_NewCodeEntry(2,1,31305,0,$72)|0);
                 $74 = (($$08590) + 11)|0;
                 _CS_InsertEntry($0,$73,$64);
                 $75 = HEAP32[$4>>2]|0;
                 $76 = ((($75)) + 36|0);
                 $77 = HEAP32[$76>>2]|0;
                 $78 = (_NewCodeEntry(14,0,0,0,$77)|0);
                 _CS_InsertEntry($0,$78,$74);
                 $79 = (_CS_GenLabel($0,$78)|0);
                 $80 = ((($79)) + 4|0);
                 $81 = HEAP32[$80>>2]|0;
                 $82 = HEAP32[$1>>2]|0;
                 $83 = ((($82)) + 36|0);
                 $84 = HEAP32[$83>>2]|0;
                 $85 = (_NewCodeEntry(3,12,$81,$79,$84)|0);
                 $86 = (($$08590) + 12)|0;
                 _CS_InsertEntry($0,$85,$74);
                 $87 = HEAP32[$1>>2]|0;
                 $88 = ((($87)) + 36|0);
                 $89 = HEAP32[$88>>2]|0;
                 $90 = (_NewCodeEntry(28,0,0,0,$89)|0);
                 _CS_InsertEntry($0,$90,$86);
                } else {
                 $91 = (_NewCodeEntry(63,3,34681,0,$72)|0);
                 $92 = (($$08590) + 11)|0;
                 _CS_InsertEntry($0,$91,$64);
                 $93 = HEAP32[$1>>2]|0;
                 $94 = ((($93)) + 36|0);
                 $95 = HEAP32[$94>>2]|0;
                 $96 = (_NewCodeEntry(2,1,31305,0,$95)|0);
                 $97 = (($$08590) + 12)|0;
                 _CS_InsertEntry($0,$96,$92);
                 $98 = HEAP32[$1>>2]|0;
                 $99 = ((($98)) + 36|0);
                 $100 = HEAP32[$99>>2]|0;
                 $101 = (_NewCodeEntry(54,3,34681,0,$100)|0);
                 $102 = (($$08590) + 13)|0;
                 _CS_InsertEntry($0,$101,$97);
                 $103 = HEAP32[$4>>2]|0;
                 $104 = ((($103)) + 36|0);
                 $105 = HEAP32[$104>>2]|0;
                 $106 = (_NewCodeEntry(14,0,0,0,$105)|0);
                 _CS_InsertEntry($0,$106,$102);
                }
                $$086 = (($$08590) + 14)|0;
                $107 = HEAP32[$5>>2]|0;
                $108 = HEAP16[$107>>1]|0;
                $109 = $108&65535;
                $110 = $109 & 255;
                $111 = ($108&65535) >>> 8;
                $112 = $111&65535;
                $113 = ((($107)) + 4|0);
                $114 = HEAP32[$113>>2]|0;
                $115 = ((($107)) + 36|0);
                $116 = HEAP32[$115>>2]|0;
                $117 = (_NewCodeEntry($110,$112,$114,0,$116)|0);
                $118 = (($$08590) + 15)|0;
                _CS_InsertEntry($0,$117,$$086);
                $119 = HEAP32[$12>>2]|0;
                $120 = ((($119)) + 36|0);
                $121 = HEAP32[$120>>2]|0;
                $122 = (_NewCodeEntry(62,3,34402,0,$121)|0);
                $123 = (($$08590) + 16)|0;
                _CS_InsertEntry($0,$122,$118);
                $124 = HEAP32[$7>>2]|0;
                $125 = ((($124)) + 36|0);
                $126 = HEAP32[$125>>2]|0;
                if ($70) {
                 $127 = (_NewCodeEntry(71,0,0,0,$126)|0);
                 $$087 = $127;
                } else {
                 $128 = (_NewCodeEntry(40,3,34681,0,$126)|0);
                 $$087 = $128;
                }
                $129 = (($$08590) + 17)|0;
                _CS_InsertEntry($0,$$087,$123);
                $130 = HEAP32[$8>>2]|0;
                $131 = HEAP16[$130>>1]|0;
                $132 = $131&65535;
                $133 = $132 & 255;
                $134 = ($131&65535) >>> 8;
                $135 = $134&65535;
                $136 = ((($130)) + 4|0);
                $137 = HEAP32[$136>>2]|0;
                $138 = ((($130)) + 36|0);
                $139 = HEAP32[$138>>2]|0;
                $140 = (_NewCodeEntry($133,$135,$137,0,$139)|0);
                $141 = (($$08590) + 18)|0;
                _CS_InsertEntry($0,$140,$129);
                $142 = HEAP32[$12>>2]|0;
                $143 = ((($142)) + 36|0);
                $144 = HEAP32[$143>>2]|0;
                $145 = (_NewCodeEntry(62,3,34407,0,$144)|0);
                $146 = (($$08590) + 19)|0;
                _CS_InsertEntry($0,$145,$141);
                $147 = HEAP32[$11>>2]|0;
                $148 = HEAP16[$147>>1]|0;
                $149 = $148&65535;
                $150 = $149 & 255;
                $151 = ($148&65535) >>> 8;
                $152 = $151&65535;
                $153 = ((($147)) + 4|0);
                $154 = HEAP32[$153>>2]|0;
                $155 = ((($147)) + 36|0);
                $156 = HEAP32[$155>>2]|0;
                $157 = (_NewCodeEntry($150,$152,$154,0,$156)|0);
                $158 = (($$08590) + 20)|0;
                _CS_InsertEntry($0,$157,$146);
                $159 = HEAP32[$12>>2]|0;
                $160 = ((($159)) + 36|0);
                $161 = HEAP32[$160>>2]|0;
                $162 = (_NewCodeEntry(40,10,34402,0,$161)|0);
                $163 = (($$08590) + 21)|0;
                _CS_InsertEntry($0,$162,$158);
                $164 = HEAP32[$12>>2]|0;
                $165 = ((($164)) + 36|0);
                $166 = HEAP32[$165>>2]|0;
                $167 = (_NewCodeEntry(66,0,0,0,$166)|0);
                $168 = (($$08590) + 22)|0;
                _CS_InsertEntry($0,$167,$163);
                $169 = HEAP32[$12>>2]|0;
                $170 = ((($169)) + 36|0);
                $171 = HEAP32[$170>>2]|0;
                $172 = (_NewCodeEntry(24,0,0,0,$171)|0);
                $173 = (($$08590) + 23)|0;
                _CS_InsertEntry($0,$172,$168);
                $174 = HEAP32[$12>>2]|0;
                $175 = ((($174)) + 36|0);
                $176 = HEAP32[$175>>2]|0;
                $177 = (_NewCodeEntry(40,10,34402,0,$176)|0);
                _CS_InsertEntry($0,$177,$173);
                _CS_DelEntries($0,$$08590,10);
                $178 = (($$092) + 1)|0;
                $$1 = $178;
               } else {
                $$1 = $$092;
               }
              } else {
               $$1 = $$092;
              }
             } else {
              $$1 = $$092;
             }
            } else {
             $$1 = $$092;
            }
           } else {
            $$1 = $$092;
           }
          } else {
           $$1 = $$092;
          }
         } else {
          $$1 = $$092;
         }
        } else {
         $$1 = $$092;
        }
       } else {
        $$1 = $$092;
       }
      } else {
       $$1 = $$092;
      }
     } else {
      $$1 = $$092;
     }
    }
   } else {
    $$1 = $$092;
   }
  } while(0);
  $179 = (($$08590) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $180 = ($179>>>0)<($$idx$val$i>>>0);
  if ($180) {
   $$08590 = $179;$$092 = $$1;$13 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 28;
   break;
  }
 }
 if ((label|0) == 4) {
  $15 = HEAP32[3332]|0;
  $16 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$15 & 1]($16,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad11($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03237 = 0, $$039 = 0, $$1 = 0, $$idx$i = 0, $$idx$i33 = 0, $$idx$val$i = 0, $$idx$val$i34 = 0, $$idx$val$i36 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i36 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i36|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 16|0);
 $7 = ((($1)) + 12|0);
 $8 = ((($1)) + 20|0);
 $$03237 = 0;$$039 = 0;$9 = $$idx$val$i36;
 while(1) {
  $10 = ($9>>>0)>($$03237>>>0);
  if (!($10)) {
   label = 4;
   break;
  }
  $13 = HEAP32[$3>>2]|0;
  $14 = (($13) + ($$03237<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$1>>2] = $15;
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(14);
  $18 = (($$03237) + 1)|0;
  L7: do {
   if ($17) {
    $19 = (_CS_GetEntries($0,$4,$18,5)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $$1 = $$039;
    } else {
     $21 = HEAP32[$4>>2]|0;
     $22 = HEAP16[$21>>1]|0;
     $23 = $22&255;
     $24 = ($23<<24>>24)==(0);
     if ($24) {
      $25 = ($22&65535) >>> 8;
      $26 = $25&255;
      switch ($26<<24>>24) {
      case 2: case 3: case 6:  {
       break;
      }
      default: {
       $$1 = $$039;
       break L7;
      }
      }
      $27 = HEAP32[$5>>2]|0;
      $28 = HEAP8[$27>>0]|0;
      switch ($28<<24>>24) {
      case 30: case 3:  {
       break;
      }
      default: {
       $$1 = $$039;
       break L7;
      }
      }
      $29 = ((($27)) + 20|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ($30|0)==(0|0);
      if ($31) {
       $$1 = $$039;
      } else {
       $32 = ((($30)) + 12|0);
       $33 = HEAP32[$32>>2]|0;
       $34 = HEAP32[$6>>2]|0;
       $35 = ($33|0)==($34|0);
       if ($35) {
        $36 = HEAP32[$7>>2]|0;
        $37 = HEAP8[$36>>0]|0;
        $38 = ($37<<24>>24)==(28);
        if ($38) {
         $39 = HEAP8[$33>>0]|0;
         $40 = ($39<<24>>24)==(42);
         if ($40) {
          $41 = (_CE_IsKnownImm($33,0)|0);
          $42 = ($41|0)==(0);
          if ($42) {
           $$1 = $$039;
          } else {
           $43 = HEAP32[$8>>2]|0;
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)==(37);
           if ($45) {
            $46 = ((($43)) + 4|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = (_strcmp($47,34420)|0);
            $49 = ($48|0)==(0);
            if ($49) {
             $50 = (_CS_RangeHasLabel($0,$18,3)|0);
             $51 = ($50|0)==(0);
             if ($51) {
              $52 = HEAP32[$8>>2]|0;
              $$idx$i33 = ((($52)) + 24|0);
              $$idx$val$i34 = HEAP32[$$idx$i33>>2]|0;
              $53 = ($$idx$val$i34|0)==(0);
              if ($53) {
               $54 = HEAP32[$4>>2]|0;
               $55 = ((($54)) + 1|0);
               $56 = HEAP8[$55>>0]|0;
               $57 = $56&255;
               $58 = ((($54)) + 4|0);
               $59 = HEAP32[$58>>2]|0;
               $60 = HEAP32[$1>>2]|0;
               $61 = ((($60)) + 36|0);
               $62 = HEAP32[$61>>2]|0;
               $63 = (_NewCodeEntry(42,$57,$59,0,$62)|0);
               $64 = (($$03237) + 6)|0;
               _CS_InsertEntry($0,$63,$64);
               $65 = HEAP32[$1>>2]|0;
               $66 = ((($65)) + 36|0);
               $67 = HEAP32[$66>>2]|0;
               $68 = (_NewCodeEntry(62,3,34402,0,$67)|0);
               $69 = (($$03237) + 7)|0;
               _CS_InsertEntry($0,$68,$69);
               $70 = HEAP32[$1>>2]|0;
               $71 = ((($70)) + 36|0);
               $72 = HEAP32[$71>>2]|0;
               $73 = (_NewCodeEntry(63,3,34407,0,$72)|0);
               $74 = (($$03237) + 8)|0;
               _CS_InsertEntry($0,$73,$74);
               $75 = HEAP32[$1>>2]|0;
               $76 = ((($75)) + 36|0);
               $77 = HEAP32[$76>>2]|0;
               $78 = (_NewCodeEntry(41,2,34449,0,$77)|0);
               $79 = (($$03237) + 9)|0;
               _CS_InsertEntry($0,$78,$79);
               $80 = HEAP32[$1>>2]|0;
               $81 = ((($80)) + 36|0);
               $82 = HEAP32[$81>>2]|0;
               $83 = (_NewCodeEntry(40,10,34402,0,$82)|0);
               $84 = (($$03237) + 10)|0;
               _CS_InsertEntry($0,$83,$84);
               _CS_DelEntries($0,$$03237,6);
               $85 = (($$039) + 1)|0;
               $$1 = $85;
              } else {
               $$1 = $$039;
              }
             } else {
              $$1 = $$039;
             }
            } else {
             $$1 = $$039;
            }
           } else {
            $$1 = $$039;
           }
          }
         } else {
          $$1 = $$039;
         }
        } else {
         $$1 = $$039;
        }
       } else {
        $$1 = $$039;
       }
      }
     } else {
      $$1 = $$039;
     }
    }
   } else {
    $$1 = $$039;
   }
  } while(0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $86 = ($18>>>0)<($$idx$val$i>>>0);
  if ($86) {
   $$03237 = $18;$$039 = $$1;$9 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 21;
   break;
  }
 }
 if ((label|0) == 4) {
  $11 = HEAP32[3332]|0;
  $12 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$11 & 1]($12,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad12($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04952 = 0, $$054 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i51 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i51 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i51|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 20|0);
 $9 = ((($1)) + 24|0);
 $10 = ((($1)) + 32|0);
 $11 = ((($1)) + 28|0);
 $12 = ((($1)) + 36|0);
 $13 = ((($1)) + 40|0);
 $14 = ((($1)) + 44|0);
 $15 = ((($1)) + 48|0);
 $16 = ((($1)) + 52|0);
 $17 = ((($1)) + 56|0);
 $$04952 = 0;$$054 = 0;$18 = $$idx$val$i51;
 while(1) {
  $19 = ($18>>>0)>($$04952>>>0);
  if (!($19)) {
   label = 4;
   break;
  }
  $22 = HEAP32[$3>>2]|0;
  $23 = (($22) + ($$04952<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  HEAP32[$1>>2] = $24;
  $25 = HEAP16[$24>>1]|0;
  $26 = ($25<<16>>16)==(808);
  do {
   if ($26) {
    $27 = ((($24)) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (_strncmp($28,34440,8)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $31 = (_strlen($28)|0);
     $32 = ($31|0)==(0);
     if ($32) {
      $$1 = $$054;
     } else {
      $33 = (($$04952) + 1)|0;
      $34 = (_CS_GetEntries($0,$4,$33,14)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       $$1 = $$054;
      } else {
       $36 = (_CS_RangeHasLabel($0,$33,7)|0);
       $37 = ($36|0)==(0);
       if ($37) {
        $38 = (($$04952) + 9)|0;
        $39 = (_CS_RangeHasLabel($0,$38,5)|0);
        $40 = ($39|0)==(0);
        if ($40) {
         $41 = HEAP32[$4>>2]|0;
         $42 = HEAP16[$41>>1]|0;
         $43 = ($42<<16>>16)==(809);
         if ($43) {
          $44 = ((($41)) + 4|0);
          $45 = HEAP32[$44>>2]|0;
          $46 = HEAP32[$1>>2]|0;
          $47 = ((($46)) + 4|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = (_strncmp($45,$48,$31)|0);
          $50 = ($49|0)==(0);
          if ($50) {
           $51 = (($45) + ($31)|0);
           $52 = (_strcmp($51,39172)|0);
           $53 = ($52|0)==(0);
           if ($53) {
            $54 = HEAP32[$5>>2]|0;
            $55 = HEAP16[$54>>1]|0;
            $56 = ($55<<16>>16)==(830);
            if ($56) {
             $57 = ((($54)) + 4|0);
             $58 = HEAP32[$57>>2]|0;
             $59 = (_strcmp($58,18636)|0);
             $60 = ($59|0)==(0);
             if ($60) {
              $61 = HEAP32[$6>>2]|0;
              $62 = HEAP16[$61>>1]|0;
              $63 = ($62<<16>>16)==(831);
              if ($63) {
               $64 = ((($61)) + 4|0);
               $65 = HEAP32[$64>>2]|0;
               $66 = (_strcmp($65,18644)|0);
               $67 = ($66|0)==(0);
               if ($67) {
                $68 = HEAP32[$7>>2]|0;
                $69 = HEAP8[$68>>0]|0;
                $70 = ($69<<24>>24)==(14);
                if ($70) {
                 $71 = HEAP32[$8>>2]|0;
                 $72 = HEAP8[$71>>0]|0;
                 $73 = ($72<<24>>24)==(0);
                 if ($73) {
                  $74 = (_CE_IsKnownImm($71,1)|0);
                  $75 = ($74|0)==(0);
                  if ($75) {
                   $$1 = $$054;
                  } else {
                   $76 = HEAP32[$9>>2]|0;
                   $77 = HEAP8[$76>>0]|0;
                   $78 = ($77<<24>>24)==(3);
                   if (!($78)) {
                    $$1 = $$054;
                    break;
                   }
                   $79 = ((($76)) + 20|0);
                   $80 = HEAP32[$79>>2]|0;
                   $81 = ($80|0)==(0|0);
                   if ($81) {
                    $$1 = $$054;
                    break;
                   }
                   $82 = ((($80)) + 12|0);
                   $83 = HEAP32[$82>>2]|0;
                   $84 = HEAP32[$10>>2]|0;
                   $85 = ($83|0)==($84|0);
                   if (!($85)) {
                    $$1 = $$054;
                    break;
                   }
                   $86 = HEAP32[$11>>2]|0;
                   $87 = HEAP8[$86>>0]|0;
                   $88 = ($87<<24>>24)==(28);
                   if (!($88)) {
                    $$1 = $$054;
                    break;
                   }
                   $89 = HEAP16[$83>>1]|0;
                   $90 = ($89<<16>>16)==(830);
                   if (!($90)) {
                    $$1 = $$054;
                    break;
                   }
                   $91 = ((($83)) + 4|0);
                   $92 = HEAP32[$91>>2]|0;
                   $93 = HEAP32[$1>>2]|0;
                   $94 = ((($93)) + 4|0);
                   $95 = HEAP32[$94>>2]|0;
                   $96 = (_strcmp($92,$95)|0);
                   $97 = ($96|0)==(0);
                   if (!($97)) {
                    $$1 = $$054;
                    break;
                   }
                   $98 = HEAP32[$12>>2]|0;
                   $99 = HEAP16[$98>>1]|0;
                   $100 = ($99<<16>>16)==(831);
                   if (!($100)) {
                    $$1 = $$054;
                    break;
                   }
                   $101 = ((($98)) + 4|0);
                   $102 = HEAP32[$101>>2]|0;
                   $103 = HEAP32[$4>>2]|0;
                   $104 = ((($103)) + 4|0);
                   $105 = HEAP32[$104>>2]|0;
                   $106 = (_strcmp($102,$105)|0);
                   $107 = ($106|0)==(0);
                   if (!($107)) {
                    $$1 = $$054;
                    break;
                   }
                   $108 = HEAP32[$13>>2]|0;
                   $109 = HEAP16[$108>>1]|0;
                   $110 = ($109<<16>>16)==(808);
                   if (!($110)) {
                    $$1 = $$054;
                    break;
                   }
                   $111 = ((($108)) + 4|0);
                   $112 = HEAP32[$111>>2]|0;
                   $113 = (_strcmp($112,18636)|0);
                   $114 = ($113|0)==(0);
                   if (!($114)) {
                    $$1 = $$054;
                    break;
                   }
                   $115 = HEAP32[$14>>2]|0;
                   $116 = HEAP16[$115>>1]|0;
                   $117 = ($116<<16>>16)==(809);
                   if (!($117)) {
                    $$1 = $$054;
                    break;
                   }
                   $118 = ((($115)) + 4|0);
                   $119 = HEAP32[$118>>2]|0;
                   $120 = (_strcmp($119,18644)|0);
                   $121 = ($120|0)==(0);
                   if (!($121)) {
                    $$1 = $$054;
                    break;
                   }
                   $122 = HEAP32[$15>>2]|0;
                   $123 = HEAP8[$122>>0]|0;
                   $124 = ($123<<24>>24)==(42);
                   if (!($124)) {
                    $$1 = $$054;
                    break;
                   }
                   $125 = (_CE_IsConstImm($122)|0);
                   $126 = ($125|0)==(0);
                   if ($126) {
                    $$1 = $$054;
                    break;
                   }
                   $127 = HEAP32[$16>>2]|0;
                   $128 = HEAP8[$127>>0]|0;
                   $129 = ($128<<24>>24)==(37);
                   if (!($129)) {
                    $$1 = $$054;
                    break;
                   }
                   $130 = ((($127)) + 4|0);
                   $131 = HEAP32[$130>>2]|0;
                   $132 = (_strcmp($131,34420)|0);
                   $133 = ($132|0)==(0);
                   if (!($133)) {
                    $$1 = $$054;
                    break;
                   }
                   $134 = HEAP32[$17>>2]|0;
                   $135 = (_CE_UseLoadFlags($134)|0);
                   $136 = ($135|0)==(0);
                   if ($136) {
                    $$pre = (($$04952) + 14)|0;
                    $$pre$phiZ2D = $$pre;
                   } else {
                    $137 = HEAP32[$16>>2]|0;
                    $138 = ((($137)) + 36|0);
                    $139 = HEAP32[$138>>2]|0;
                    $140 = (_NewCodeEntry(67,0,0,0,$139)|0);
                    $141 = (($$04952) + 14)|0;
                    _CS_InsertEntry($0,$140,$141);
                    $$pre$phiZ2D = $141;
                   }
                   $142 = HEAP32[$17>>2]|0;
                   $143 = (_CS_GenLabel($0,$142)|0);
                   $144 = HEAP32[$15>>2]|0;
                   $145 = ((($144)) + 4|0);
                   $146 = HEAP32[$145>>2]|0;
                   $147 = ((($144)) + 36|0);
                   $148 = HEAP32[$147>>2]|0;
                   $149 = (_NewCodeEntry(42,2,$146,0,$148)|0);
                   _CS_InsertEntry($0,$149,$$pre$phiZ2D);
                   $150 = HEAP32[$16>>2]|0;
                   $151 = ((($150)) + 36|0);
                   $152 = HEAP32[$151>>2]|0;
                   $153 = (_NewCodeEntry(41,2,34449,0,$152)|0);
                   $154 = (($$04952) + 15)|0;
                   _CS_InsertEntry($0,$153,$154);
                   $155 = HEAP32[$1>>2]|0;
                   $156 = ((($155)) + 4|0);
                   $157 = HEAP32[$156>>2]|0;
                   $158 = HEAP32[$16>>2]|0;
                   $159 = ((($158)) + 36|0);
                   $160 = HEAP32[$159>>2]|0;
                   $161 = (_NewCodeEntry(40,10,$157,0,$160)|0);
                   $162 = (($$04952) + 16)|0;
                   _CS_InsertEntry($0,$161,$162);
                   $163 = HEAP32[$1>>2]|0;
                   $164 = ((($163)) + 4|0);
                   $165 = HEAP32[$164>>2]|0;
                   $166 = HEAP32[$8>>2]|0;
                   $167 = ((($166)) + 36|0);
                   $168 = HEAP32[$167>>2]|0;
                   $169 = (_NewCodeEntry(27,3,$165,0,$168)|0);
                   $170 = (($$04952) + 17)|0;
                   _CS_InsertEntry($0,$169,$170);
                   $171 = ((($143)) + 4|0);
                   $172 = HEAP32[$171>>2]|0;
                   $173 = HEAP32[$9>>2]|0;
                   $174 = ((($173)) + 36|0);
                   $175 = HEAP32[$174>>2]|0;
                   $176 = (_NewCodeEntry(8,12,$172,$143,$175)|0);
                   $177 = (($$04952) + 18)|0;
                   _CS_InsertEntry($0,$176,$177);
                   $178 = HEAP32[$4>>2]|0;
                   $179 = ((($178)) + 4|0);
                   $180 = HEAP32[$179>>2]|0;
                   $181 = HEAP32[$11>>2]|0;
                   $182 = ((($181)) + 36|0);
                   $183 = HEAP32[$182>>2]|0;
                   $184 = (_NewCodeEntry(27,3,$180,0,$183)|0);
                   $185 = (($$04952) + 19)|0;
                   _CS_InsertEntry($0,$184,$185);
                   _CS_DelEntries($0,$$04952,14);
                   $186 = (($$054) + 1)|0;
                   $$1 = $186;
                  }
                 } else {
                  $$1 = $$054;
                 }
                } else {
                 $$1 = $$054;
                }
               } else {
                $$1 = $$054;
               }
              } else {
               $$1 = $$054;
              }
             } else {
              $$1 = $$054;
             }
            } else {
             $$1 = $$054;
            }
           } else {
            $$1 = $$054;
           }
          } else {
           $$1 = $$054;
          }
         } else {
          $$1 = $$054;
         }
        } else {
         $$1 = $$054;
        }
       } else {
        $$1 = $$054;
       }
      }
     }
    } else {
     $$1 = $$054;
    }
   } else {
    $$1 = $$054;
   }
  } while(0);
  $187 = (($$04952) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $188 = ($187>>>0)<($$idx$val$i>>>0);
  if ($188) {
   $$04952 = $187;$$054 = $$1;$18 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 42;
   break;
  }
 }
 if ((label|0) == 4) {
  $20 = HEAP32[3332]|0;
  $21 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$20 & 1]($21,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 42) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad13($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02932 = 0, $$033 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i31 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i31 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i31|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $$02932 = 0;$$033 = 0;$7 = $$idx$val$i31;
 while(1) {
  $8 = ($7>>>0)>($$02932>>>0);
  if (!($8)) {
   label = 4;
   break;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($$02932<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP16[$13>>1]|0;
  $15 = ($14<<16>>16)==(808);
  if ($15) {
   $16 = (($$02932) + 1)|0;
   $17 = (_CS_GetEntries($0,$4,$16,3)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$1 = $$033;
   } else {
    $19 = (_CS_RangeHasLabel($0,$16,3)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = HEAP32[$4>>2]|0;
     $22 = HEAP16[$21>>1]|0;
     $23 = ($22<<16>>16)==(809);
     if ($23) {
      $24 = HEAP32[$1>>2]|0;
      $25 = ((($24)) + 4|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (_strlen($26)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $$1 = $$033;
      } else {
       $29 = ((($21)) + 4|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (_strncmp($26,$30,$27)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        $33 = (($30) + ($27)|0);
        $34 = (_strcmp($33,39172)|0);
        $35 = ($34|0)==(0);
        if ($35) {
         $36 = HEAP32[$5>>2]|0;
         $37 = HEAP8[$36>>0]|0;
         $38 = ($37<<24>>24)==(42);
         if ($38) {
          $39 = HEAP32[$6>>2]|0;
          $40 = HEAP8[$39>>0]|0;
          $41 = ($40<<24>>24)==(37);
          if ($41) {
           $42 = ((($39)) + 4|0);
           $43 = HEAP32[$42>>2]|0;
           $44 = (_strcmp($43,34420)|0);
           $45 = ($44|0)==(0);
           if ($45) {
            $46 = ((($39)) + 36|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = (_NewCodeEntry(41,2,34449,0,$47)|0);
            $49 = (($$02932) + 3)|0;
            _CS_InsertEntry($0,$48,$49);
            $50 = HEAP32[$1>>2]|0;
            $51 = ((($50)) + 4|0);
            $52 = HEAP32[$51>>2]|0;
            $53 = HEAP32[$6>>2]|0;
            $54 = ((($53)) + 36|0);
            $55 = HEAP32[$54>>2]|0;
            $56 = (_NewCodeEntry(40,10,$52,0,$55)|0);
            $57 = (($$02932) + 4)|0;
            _CS_InsertEntry($0,$56,$57);
            $58 = (($$02932) + 5)|0;
            _CS_DelEntry($0,$58);
            _CS_DelEntries($0,$$02932,2);
            $59 = (($$033) + 1)|0;
            $$1 = $59;
           } else {
            $$1 = $$033;
           }
          } else {
           $$1 = $$033;
          }
         } else {
          $$1 = $$033;
         }
        } else {
         $$1 = $$033;
        }
       } else {
        $$1 = $$033;
       }
      }
     } else {
      $$1 = $$033;
     }
    } else {
     $$1 = $$033;
    }
   }
  } else {
   $$1 = $$033;
  }
  $60 = (($$02932) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $61 = ($60>>>0)<($$idx$val$i>>>0);
  if ($61) {
   $$02932 = $60;$$033 = $$1;$7 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 17;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad14($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02730 = 0, $$031 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i29 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i29|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $$02730 = 0;$$031 = 0;$8 = $$idx$val$i29;
 while(1) {
  $9 = ($8>>>0)>($$02730>>>0);
  if (!($9)) {
   label = 4;
   break;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($$02730<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$1>>2] = $14;
  $15 = HEAP16[$14>>1]|0;
  $16 = ($15<<16>>16)==(808);
  if ($16) {
   $17 = (($$02730) + 1)|0;
   $18 = (_CS_GetEntries($0,$4,$17,4)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $$1 = $$031;
   } else {
    $20 = (_CS_RangeHasLabel($0,$17,4)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = HEAP32[$4>>2]|0;
     $23 = HEAP16[$22>>1]|0;
     $24 = ($23<<16>>16)==(809);
     if ($24) {
      $25 = HEAP32[$1>>2]|0;
      $26 = ((($25)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = (_strlen($27)|0);
      $29 = ($28|0)==(0);
      if ($29) {
       $$1 = $$031;
      } else {
       $30 = ((($22)) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = (_strncmp($27,$31,$28)|0);
       $33 = ($32|0)==(0);
       if ($33) {
        $34 = (($31) + ($28)|0);
        $35 = (_strcmp($34,39172)|0);
        $36 = ($35|0)==(0);
        if ($36) {
         $37 = HEAP32[$5>>2]|0;
         $38 = ((($37)) + 16|0);
         $39 = HEAP16[$38>>1]|0;
         $40 = $39 & 3;
         $41 = ($40<<16>>16)==(0);
         if ($41) {
          $42 = HEAP32[$6>>2]|0;
          $43 = HEAP8[$42>>0]|0;
          $44 = ($43<<24>>24)==(42);
          if ($44) {
           $45 = HEAP32[$7>>2]|0;
           $46 = HEAP8[$45>>0]|0;
           $47 = ($46<<24>>24)==(37);
           if ($47) {
            $48 = ((($45)) + 4|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = (_strcmp($49,34420)|0);
            $51 = ($50|0)==(0);
            if ($51) {
             $52 = ((($42)) + 36|0);
             $53 = HEAP32[$52>>2]|0;
             $54 = (_NewCodeEntry(41,2,34449,0,$53)|0);
             $55 = (($$02730) + 5)|0;
             _CS_InsertEntry($0,$54,$55);
             $56 = HEAP32[$1>>2]|0;
             $57 = ((($56)) + 4|0);
             $58 = HEAP32[$57>>2]|0;
             $59 = HEAP32[$6>>2]|0;
             $60 = ((($59)) + 36|0);
             $61 = HEAP32[$60>>2]|0;
             $62 = (_NewCodeEntry(40,10,$58,0,$61)|0);
             $63 = (($$02730) + 6)|0;
             _CS_InsertEntry($0,$62,$63);
             $64 = (($$02730) + 4)|0;
             _CS_DelEntry($0,$64);
             $65 = (($$031) + 1)|0;
             $$1 = $65;
            } else {
             $$1 = $$031;
            }
           } else {
            $$1 = $$031;
           }
          } else {
           $$1 = $$031;
          }
         } else {
          $$1 = $$031;
         }
        } else {
         $$1 = $$031;
        }
       } else {
        $$1 = $$031;
       }
      }
     } else {
      $$1 = $$031;
     }
    } else {
     $$1 = $$031;
    }
   }
  } else {
   $$1 = $$031;
  }
  $66 = (($$02730) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $67 = ($66>>>0)<($$idx$val$i>>>0);
  if ($67) {
   $$02730 = $66;$$031 = $$1;$8 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 18;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 18) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad15($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04952 = 0, $$054 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i51 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i51 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i51|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($1)) + 4|0);
 $4 = ((($1)) + 8|0);
 $5 = ((($1)) + 12|0);
 $$04952 = 0;$$054 = 0;
 while(1) {
  $6 = (_CS_GetEntries($0,$1,$$04952,3)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $$2 = $$054;
  } else {
   $8 = HEAP32[$1>>2]|0;
   $9 = HEAP16[$8>>1]|0;
   $10 = ($9<<16>>16)==(808);
   if ($10) {
    $11 = HEAP32[$3>>2]|0;
    $12 = HEAP16[$11>>1]|0;
    $13 = ($12<<16>>16)==(809);
    if ($13) {
     $14 = (($$04952) + 1)|0;
     $15 = (_CS_RangeHasLabel($0,$14,2)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $17 = HEAP32[$1>>2]|0;
      $18 = ((($17)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (_strlen($19)|0);
      $21 = ($20|0)==(0);
      if ($21) {
       $$2 = $$054;
      } else {
       $22 = HEAP32[$3>>2]|0;
       $23 = ((($22)) + 4|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (_strncmp($19,$24,$20)|0);
       $26 = ($25|0)==(0);
       if ($26) {
        $27 = (($24) + ($20)|0);
        $28 = (_strcmp($27,39172)|0);
        $29 = ($28|0)==(0);
        if ($29) {
         $30 = HEAP32[$4>>2]|0;
         $31 = HEAP8[$30>>0]|0;
         $32 = ($31<<24>>24)==(37);
         if ($32) {
          $33 = ((($30)) + 4|0);
          $34 = HEAP32[$33>>2]|0;
          $35 = (_strcmp($34,35341)|0);
          $36 = ($35|0)==(0);
          $38 = $36;
         } else {
          $38 = 0;
         }
         $37 = $38&1;
         $39 = (($$04952) + 3)|0;
         $40 = $38 ? 2 : 1;
         $41 = (_CS_GetEntries($0,$5,$39,$40)|0);
         $42 = ($41|0)==(0);
         if ($42) {
          $$2 = $$054;
         } else {
          $43 = (_CS_RangeHasLabel($0,$39,$40)|0);
          $44 = ($43|0)==(0);
          if ($44) {
           $45 = $38 ? 3 : 2;
           $46 = (($1) + ($45<<2)|0);
           $47 = HEAP32[$46>>2]|0;
           $48 = HEAP8[$47>>0]|0;
           $49 = ($48<<24>>24)==(42);
           if ($49) {
            $50 = $38 ? 4 : 3;
            $51 = (($1) + ($50<<2)|0);
            $52 = HEAP32[$51>>2]|0;
            $53 = HEAP8[$52>>0]|0;
            $54 = ($53<<24>>24)==(37);
            if ($54) {
             $55 = ((($52)) + 4|0);
             $56 = HEAP32[$55>>2]|0;
             $57 = (_strcmp($56,35199)|0);
             $58 = ($57|0)==(0);
             if ($58) {
              $59 = HEAP32[$1>>2]|0;
              $60 = ((($59)) + 4|0);
              $61 = HEAP32[$60>>2]|0;
              $62 = HEAP32[$5>>2]|0;
              $63 = ((($62)) + 36|0);
              $64 = HEAP32[$63>>2]|0;
              $65 = (_NewCodeEntry(40,10,$61,0,$64)|0);
              $66 = (($37) + ($$04952))|0;
              $67 = (($66) + 4)|0;
              _CS_InsertEntry($0,$65,$67);
              $68 = HEAP32[$5>>2]|0;
              $69 = ((($68)) + 36|0);
              $70 = HEAP32[$69>>2]|0;
              $71 = (_NewCodeEntry(66,0,0,0,$70)|0);
              $72 = (($66) + 5)|0;
              _CS_InsertEntry($0,$71,$72);
              $73 = HEAP32[$5>>2]|0;
              $74 = ((($73)) + 36|0);
              $75 = HEAP32[$74>>2]|0;
              $76 = (_NewCodeEntry(24,0,0,0,$75)|0);
              $77 = (($66) + 6)|0;
              _CS_InsertEntry($0,$76,$77);
              $78 = HEAP32[$1>>2]|0;
              $79 = ((($78)) + 4|0);
              $80 = HEAP32[$79>>2]|0;
              $81 = HEAP32[$5>>2]|0;
              $82 = ((($81)) + 36|0);
              $83 = HEAP32[$82>>2]|0;
              $84 = (_NewCodeEntry(40,10,$80,0,$83)|0);
              $85 = (($66) + 7)|0;
              _CS_InsertEntry($0,$84,$85);
              $86 = (($66) + 3)|0;
              _CS_DelEntry($0,$86);
              if (!($38)) {
               _CS_DelEntries($0,$$04952,2);
              }
              $87 = (($$054) + 1)|0;
              $$2 = $87;
             } else {
              $$2 = $$054;
             }
            } else {
             $$2 = $$054;
            }
           } else {
            $$2 = $$054;
           }
          } else {
           $$2 = $$054;
          }
         }
        } else {
         $$2 = $$054;
        }
       } else {
        $$2 = $$054;
       }
      }
     } else {
      $$2 = $$054;
     }
    } else {
     $$2 = $$054;
    }
   } else {
    $$2 = $$054;
   }
  }
  $88 = (($$04952) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $89 = ($88>>>0)<($$idx$val$i>>>0);
  if ($89) {
   $$04952 = $88;$$054 = $$2;
  } else {
   $$0$lcssa = $$2;
   break;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function _OptPtrLoad16($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03035 = 0, $$036 = 0, $$1 = 0, $$idx$i = 0, $$idx$i31 = 0, $$idx$val$i = 0, $$idx$val$i32 = 0, $$idx$val$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i34 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i34|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $$03035 = 0;$$036 = 0;$5 = $$idx$val$i34;
 while(1) {
  $6 = ($5>>>0)>($$03035>>>0);
  if (!($6)) {
   label = 4;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($$03035<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$1>>2] = $11;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(42);
  $14 = (($$03035) + 1)|0;
  if ($13) {
   $15 = (_CS_GetEntries($0,$4,$14,1)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$1 = $$036;
   } else {
    $17 = HEAP32[$4>>2]|0;
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(37);
    if ($19) {
     $20 = ((($17)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (_strcmp($21,34420)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$idx$i31 = ((($17)) + 24|0);
      $$idx$val$i32 = HEAP32[$$idx$i31>>2]|0;
      $24 = ($$idx$val$i32|0)==(0);
      if ($24) {
       $25 = ((($17)) + 36|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (_NewCodeEntry(62,3,34402,0,$26)|0);
       $28 = (($$03035) + 2)|0;
       _CS_InsertEntry($0,$27,$28);
       $29 = HEAP32[$4>>2]|0;
       $30 = ((($29)) + 36|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = (_NewCodeEntry(63,3,34407,0,$31)|0);
       $33 = (($$03035) + 3)|0;
       _CS_InsertEntry($0,$32,$33);
       $34 = HEAP32[$1>>2]|0;
       $35 = HEAP16[$34>>1]|0;
       $36 = $35&65535;
       $37 = $36 & 255;
       $38 = ($35&65535) >>> 8;
       $39 = $38&65535;
       $40 = ((($34)) + 4|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ((($34)) + 36|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = (_NewCodeEntry($37,$39,$41,0,$43)|0);
       $45 = (($$03035) + 4)|0;
       _CS_InsertEntry($0,$44,$45);
       $46 = HEAP32[$4>>2]|0;
       $47 = ((($46)) + 36|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = (_NewCodeEntry(41,2,34449,0,$48)|0);
       $50 = (($$03035) + 5)|0;
       _CS_InsertEntry($0,$49,$50);
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + 36|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (_NewCodeEntry(40,10,34402,0,$53)|0);
       $55 = (($$03035) + 6)|0;
       _CS_InsertEntry($0,$54,$55);
       _CS_DelEntries($0,$$03035,2);
       $56 = (($$036) + 1)|0;
       $$1 = $56;
      } else {
       $$1 = $$036;
      }
     } else {
      $$1 = $$036;
     }
    } else {
     $$1 = $$036;
    }
   }
  } else {
   $$1 = $$036;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $57 = ($14>>>0)<($$idx$val$i>>>0);
  if ($57) {
   $$03035 = $14;$$036 = $$1;$5 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 12;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrLoad17($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03641 = 0, $$042 = 0, $$1 = 0, $$idx$i = 0, $$idx$i37 = 0, $$idx$val$i = 0, $$idx$val$i38 = 0, $$idx$val$i40 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i40 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i40|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $$03641 = 0;$$042 = 0;$5 = $$idx$val$i40;
 while(1) {
  $6 = ($5>>>0)>($$03641>>>0);
  if (!($6)) {
   label = 4;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($$03641<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$1>>2] = $11;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(42);
  $14 = (($$03641) + 1)|0;
  if ($13) {
   $15 = (_CS_GetEntries($0,$4,$14,1)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$1 = $$042;
   } else {
    $17 = HEAP32[$4>>2]|0;
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(37);
    if ($19) {
     $20 = ((($17)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (_strcmp($21,35199)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$idx$i37 = ((($17)) + 24|0);
      $$idx$val$i38 = HEAP32[$$idx$i37>>2]|0;
      $24 = ($$idx$val$i38|0)==(0);
      if ($24) {
       $25 = HEAP32[$1>>2]|0;
       $26 = ((($25)) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (_NewCodeEntry(62,3,34402,0,$27)|0);
       $29 = (($$03641) + 2)|0;
       _CS_InsertEntry($0,$28,$29);
       $30 = HEAP32[$1>>2]|0;
       $31 = ((($30)) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (_NewCodeEntry(63,3,34407,0,$32)|0);
       $34 = (($$03641) + 3)|0;
       _CS_InsertEntry($0,$33,$34);
       $35 = HEAP32[$1>>2]|0;
       $36 = HEAP16[$35>>1]|0;
       $37 = $36&65535;
       $38 = $37 & 255;
       $39 = ($36&65535) >>> 8;
       $40 = $39&65535;
       $41 = ((($35)) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = ((($35)) + 36|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (_NewCodeEntry($38,$40,$42,0,$44)|0);
       $46 = (($$03641) + 4)|0;
       _CS_InsertEntry($0,$45,$46);
       $47 = HEAP32[$4>>2]|0;
       $48 = ((($47)) + 36|0);
       $49 = HEAP32[$48>>2]|0;
       $50 = (_NewCodeEntry(40,10,34402,0,$49)|0);
       $51 = (($$03641) + 5)|0;
       _CS_InsertEntry($0,$50,$51);
       $52 = HEAP32[$4>>2]|0;
       $53 = ((($52)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (_NewCodeEntry(66,0,0,0,$54)|0);
       $56 = (($$03641) + 6)|0;
       _CS_InsertEntry($0,$55,$56);
       $57 = HEAP32[$4>>2]|0;
       $58 = ((($57)) + 36|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (_NewCodeEntry(24,0,0,0,$59)|0);
       $61 = (($$03641) + 7)|0;
       _CS_InsertEntry($0,$60,$61);
       $62 = HEAP32[$4>>2]|0;
       $63 = ((($62)) + 36|0);
       $64 = HEAP32[$63>>2]|0;
       $65 = (_NewCodeEntry(40,10,34402,0,$64)|0);
       $66 = (($$03641) + 8)|0;
       _CS_InsertEntry($0,$65,$66);
       _CS_DelEntries($0,$$03641,2);
       $67 = (($$042) + 1)|0;
       $$1 = $67;
      } else {
       $$1 = $$042;
      }
     } else {
      $$1 = $$042;
     }
    } else {
     $$1 = $$042;
    }
   }
  } else {
   $$1 = $$042;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $68 = ($14>>>0)<($$idx$val$i>>>0);
  if ($68) {
   $$03641 = $14;$$042 = $$1;$5 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 12;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 12) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _DisableOpt($0) {
 $0 = $0|0;
 var $$05 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_strcmp($0,18654)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$05 = 0;
  while(1) {
   $3 = (2624 + ($$05<<2)|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 28|0);
   HEAP8[$5>>0] = 1;
   $6 = (($$05) + 1)|0;
   $exitcond = ($6|0)==(95);
   if ($exitcond) {
    break;
   } else {
    $$05 = $6;
   }
  }
  STACKTOP = sp;return;
 }
 $7 = (_bsearch($0,2624,95,4,5)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(18658,$vararg_buffer);
  // unreachable;
 }
 $9 = HEAP32[$7>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(18658,$vararg_buffer);
  // unreachable;
 }
 $11 = ((($9)) + 28|0);
 HEAP8[$11>>0] = 1;
 STACKTOP = sp;return;
}
function _CmpOptStep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_strcmp($0,$4)|0);
 return ($5|0);
}
function _OptStackPtrOps($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$0$ph64 = 0, $$048$ph62 = 0, $$059 = 0, $$idx$i = 0, $$idx$i50 = 0, $$idx$val$i = 0, $$idx$val$i51 = 0, $$idx$val$i58 = 0, $$idx$val$i5861 = 0, $$off$i = 0, $$off$i52 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i5861 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i5861|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $$0$ph64 = 0;$$048$ph62 = 0;
 L4: while(1) {
  $4 = (($$048$ph62) + 2)|0;
  $5 = (($$048$ph62) + 3)|0;
  $$059 = $$0$ph64;
  while(1) {
   $6 = HEAP32[$3>>2]|0;
   $7 = (($6) + ($$048$ph62<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(37);
   if (!($10)) {
    break;
   }
   $11 = ((($8)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_strncmp($12,18898,5)|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = ((($12)) + 5|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    $$off$i52 = (($16) + -49)<<24>>24;
    $18 = ($$off$i52&255)<(8);
    $19 = (($17) + -48)|0;
    if ($18) {
     $29 = $19;
    } else {
     break;
    }
   } else {
    $20 = (_strcmp($12,18904)|0);
    $21 = ($20|0)==(0);
    if (!($21)) {
     break;
    }
    $22 = ((($8)) + 40|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($23)) + 4|0);
    $25 = HEAP16[$24>>1]|0;
    $26 = ($25<<16>>16)>(0);
    $27 = $26 ? $25 : 0;
    $28 = $27 << 16 >> 16;
    $29 = $28;
   }
   $30 = ($29|0)==(0);
   if ($30) {
    break;
   }
   $31 = (_CS_GetNextEntry($0,$$048$ph62)|0);
   $32 = ($31|0)==(0|0);
   if ($32) {
    break;
   }
   $33 = ((($31)) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_strncmp($34,18898,5)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = ((($34)) + 5|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $38 << 24 >> 24;
    $$off$i = (($38) + -49)<<24>>24;
    $40 = ($$off$i&255)<(8);
    $41 = (($39) + -48)|0;
    if ($40) {
     $51 = $41;
    } else {
     break;
    }
   } else {
    $42 = (_strcmp($34,18904)|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     break;
    }
    $44 = ((($31)) + 40|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ((($45)) + 4|0);
    $47 = HEAP16[$46>>1]|0;
    $48 = ($47<<16>>16)>(0);
    $49 = $48 ? $47 : 0;
    $50 = $49 << 16 >> 16;
    $51 = $50;
   }
   $52 = ($51|0)==(0);
   if ($52) {
    break;
   }
   $53 = (($51) + ($29))|0;
   $54 = ($53>>>0)<(256);
   if (!($54)) {
    break;
   }
   $$idx$i50 = ((($31)) + 24|0);
   $$idx$val$i51 = HEAP32[$$idx$i50>>2]|0;
   $55 = ($$idx$val$i51|0)==(0);
   if (!($55)) {
    break;
   }
   $56 = ($53>>>0)<(9);
   if ($56) {
    HEAP32[$vararg_buffer>>2] = $53;
    (_xsprintf($1,20,18911,$vararg_buffer)|0);
    $57 = ((($31)) + 36|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (_NewCodeEntry(37,6,$1,0,$58)|0);
    _CS_InsertEntry($0,$59,$4);
   } else {
    $60 = (_MakeHexArg($53)|0);
    $61 = ((($31)) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (_NewCodeEntry(42,2,$60,0,$62)|0);
    _CS_InsertEntry($0,$63,$4);
    $64 = HEAP32[$61>>2]|0;
    $65 = (_NewCodeEntry(37,6,18904,0,$64)|0);
    _CS_InsertEntry($0,$65,$5);
   }
   _CS_DelEntries($0,$$048$ph62,2);
   _CS_GenRegInfo($0);
   $66 = (($$059) + 1)|0;
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $67 = ($$048$ph62>>>0)<($$idx$val$i>>>0);
   if ($67) {
    $$059 = $66;
   } else {
    $$0$lcssa = $66;
    label = 23;
    break L4;
   }
  }
  $68 = (($$048$ph62) + 1)|0;
  $$idx$val$i58 = HEAP32[$$idx$i>>2]|0;
  $69 = ($68>>>0)<($$idx$val$i58>>>0);
  if ($69) {
   $$0$ph64 = $$059;$$048$ph62 = $68;
  } else {
   $$0$lcssa = $$059;
   label = 23;
   break;
  }
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptLoad3($0) {
 $0 = $0|0;
 var $$$138 = 0, $$036$lcssa = 0, $$036$ph63 = 0, $$03655 = 0, $$037$ = 0, $$037$ph62 = 0, $$03754 = 0, $$041$ph59 = 0, $$138 = 0, $$340 = 0, $$idx$i = 0, $$idx$i44 = 0, $$idx$val$i = 0, $$idx$val$i45 = 0, $$idx$val$i53 = 0, $$idx$val$i53$pre = 0, $$idx$val$i5358 = 0, $$idx$val$i5377 = 0, $$idx$val$i5378 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i5358 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i5358|0)==(0);
 if ($1) {
  $$036$lcssa = 0;
  return ($$036$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$036$ph63 = 0;$$037$ph62 = 0;$$041$ph59 = 0;$$idx$val$i5378 = $$idx$val$i5358;
 L4: while(1) {
  $$03655 = $$036$ph63;$$03754 = $$037$ph62;$$idx$val$i5377 = $$idx$val$i5378;
  while(1) {
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($$041$ph59<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($$03754|0)==(0|0);
   if ($6) {
    $$138 = 0;
   } else {
    $$idx$i44 = ((($5)) + 24|0);
    $$idx$val$i45 = HEAP32[$$idx$i44>>2]|0;
    $7 = ($$idx$val$i45|0)!=(0);
    $$037$ = $7 ? 0 : $$03754;
    $$138 = $$037$;
   }
   $8 = ((($5)) + 12|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9&65535;
   $11 = $10 & 64;
   $12 = ($11|0)==(0);
   if ($12) {
    label = 15;
    break;
   }
   $13 = ($$138|0)==(0|0);
   if ($13) {
    label = 16;
    break;
   }
   $14 = HEAP16[$5>>1]|0;
   $15 = $14&255;
   $16 = HEAP16[$$138>>1]|0;
   $17 = $16&255;
   $18 = ($15<<24>>24)==($17<<24>>24);
   if (!($18)) {
    label = 16;
    break;
   }
   $19 = ($16&65535) >>> 8;
   $20 = $19&255;
   $21 = ($14&65535) >>> 8;
   $22 = $21&255;
   $23 = ($22<<24>>24)==($20<<24>>24);
   if (!($23)) {
    label = 16;
    break;
   }
   $24 = ((($5)) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   $27 = ((($$138)) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0|0);
   $or$cond = $26 & $29;
   if (!($or$cond)) {
    $30 = (_strcmp($25,$28)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     label = 16;
     break;
    }
   }
   $32 = (_CS_GetNextEntry($0,$$041$ph59)|0);
   $33 = ($32|0)==(0|0);
   if ($33) {
    label = 16;
    break;
   }
   $34 = ((($32)) + 12|0);
   $35 = HEAP16[$34>>1]|0;
   $36 = $35 & 2;
   $37 = ($36<<16>>16)==(0);
   if (!($37)) {
    label = 16;
    break;
   }
   $38 = (($$03655) + 1)|0;
   _CS_DelEntry($0,$$041$ph59);
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $39 = ($$041$ph59>>>0)<($$idx$val$i>>>0);
   if ($39) {
    $$03655 = $38;$$03754 = $$138;$$idx$val$i5377 = $$idx$val$i;
   } else {
    $$036$lcssa = $38;
    label = 18;
    break L4;
   }
  }
  if ((label|0) == 15) {
   label = 0;
   $40 = $10 & 4098;
   $41 = ($40|0)==(0);
   $$$138 = $41 ? 0 : $$138;
   $$340 = $$$138;$$idx$val$i53 = $$idx$val$i5377;
  }
  else if ((label|0) == 16) {
   label = 0;
   $$idx$val$i53$pre = HEAP32[$$idx$i>>2]|0;
   $$340 = $5;$$idx$val$i53 = $$idx$val$i53$pre;
  }
  $42 = (($$041$ph59) + 1)|0;
  $43 = ($42>>>0)<($$idx$val$i53>>>0);
  if ($43) {
   $$036$ph63 = $$03655;$$037$ph62 = $$340;$$041$ph59 = $42;$$idx$val$i5378 = $$idx$val$i53;
  } else {
   $$036$lcssa = $$03655;
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  return ($$036$lcssa|0);
 }
 return (0)|0;
}
function _OptLoad2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04851 = 0, $$055 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i50 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i50 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i50|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$04851 = 0;$$055 = 0;$6 = $$idx$val$i50;
 while(1) {
  $7 = ($6>>>0)>($$04851>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$04851<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(37);
  if ($14) {
   $15 = ((($12)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_strcmp($16,36890)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = (($$04851) + 1)|0;
    $20 = (_CS_GetEntries($0,$4,$19,2)|0);
    $21 = ($20|0)==(0);
    do {
     if ($21) {
      label = 16;
     } else {
      $22 = HEAP32[$4>>2]|0;
      $23 = HEAP8[$22>>0]|0;
      $24 = ($23<<24>>24)==(62);
      if ($24) {
       $25 = HEAP32[$5>>2]|0;
       $26 = HEAP8[$25>>0]|0;
       $27 = ($26<<24>>24)==(63);
       if ($27) {
        $28 = ((($22)) + 4|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = ($29|0)==(0|0);
        if (!($30)) {
         $31 = ((($25)) + 4|0);
         $32 = HEAP32[$31>>2]|0;
         $33 = ($32|0)==(0|0);
         if (!($33)) {
          $34 = (_strcmp($29,$32)|0);
          $35 = ($34|0)==(0);
          if ($35) {
           label = 16;
           break;
          }
         }
        }
        $36 = (_CS_RangeHasLabel($0,$19,2)|0);
        $37 = ($36|0)==(0);
        if ($37) {
         $38 = (($$04851) + 3)|0;
         $39 = (_RegXUsed($0,$38)|0);
         $40 = ($39|0)==(0);
         if ($40) {
          $41 = HEAP32[$1>>2]|0;
          $42 = ((($41)) + 36|0);
          $43 = HEAP32[$42>>2]|0;
          $44 = (_NewCodeEntry(40,10,36898,0,$43)|0);
          _CS_InsertEntry($0,$44,$38);
          $45 = HEAP32[$5>>2]|0;
          $46 = ((($45)) + 1|0);
          $47 = HEAP8[$46>>0]|0;
          $48 = $47&255;
          $49 = ((($45)) + 4|0);
          $50 = HEAP32[$49>>2]|0;
          $51 = ((($45)) + 36|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = (_NewCodeEntry(62,$48,$50,0,$52)|0);
          $54 = (($$04851) + 4)|0;
          _CS_InsertEntry($0,$53,$54);
          $55 = HEAP32[$1>>2]|0;
          $56 = ((($55)) + 36|0);
          $57 = HEAP32[$56>>2]|0;
          $58 = (_NewCodeEntry(24,0,0,0,$57)|0);
          $59 = (($$04851) + 5)|0;
          _CS_InsertEntry($0,$58,$59);
          $60 = HEAP32[$1>>2]|0;
          $61 = ((($60)) + 36|0);
          $62 = HEAP32[$61>>2]|0;
          $63 = (_NewCodeEntry(40,10,36898,0,$62)|0);
          $64 = (($$04851) + 6)|0;
          _CS_InsertEntry($0,$63,$64);
          $65 = HEAP32[$4>>2]|0;
          $66 = ((($65)) + 1|0);
          $67 = HEAP8[$66>>0]|0;
          $68 = $67&255;
          $69 = ((($65)) + 4|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = ((($65)) + 36|0);
          $72 = HEAP32[$71>>2]|0;
          $73 = (_NewCodeEntry(62,$68,$70,0,$72)|0);
          $74 = (($$04851) + 7)|0;
          _CS_InsertEntry($0,$73,$74);
          _CS_DelEntries($0,$$04851,3);
         } else {
          label = 16;
         }
        } else {
         label = 16;
        }
       } else {
        label = 16;
       }
      } else {
       label = 16;
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     $75 = HEAP32[$1>>2]|0;
     $76 = ((($75)) + 36|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (_NewCodeEntry(40,10,36898,0,$77)|0);
     _CS_InsertEntry($0,$78,$19);
     $79 = HEAP32[$1>>2]|0;
     $80 = ((($79)) + 36|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (_NewCodeEntry(66,0,0,0,$81)|0);
     $83 = (($$04851) + 2)|0;
     _CS_InsertEntry($0,$82,$83);
     $84 = HEAP32[$1>>2]|0;
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (_NewCodeEntry(24,0,0,0,$86)|0);
     $88 = (($$04851) + 3)|0;
     _CS_InsertEntry($0,$87,$88);
     $89 = HEAP32[$1>>2]|0;
     $90 = ((($89)) + 36|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (_NewCodeEntry(40,10,36898,0,$91)|0);
     $93 = (($$04851) + 4)|0;
     _CS_InsertEntry($0,$92,$93);
     _CS_DelEntry($0,$$04851);
    }
    $94 = (($$055) + 1)|0;
    $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
    $$1 = $94;$$idx$val$i = $$idx$val$i$pre;
   } else {
    $$1 = $$055;$$idx$val$i = $6;
   }
  } else {
   $$1 = $$055;$$idx$val$i = $6;
  }
  $95 = (($$04851) + 1)|0;
  $96 = ($95>>>0)<($$idx$val$i>>>0);
  if ($96) {
   $$04851 = $95;$$055 = $$1;$6 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 19;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 19) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptLoad1($0) {
 $0 = $0|0;
 var $$031$lcssa = 0, $$03133 = 0, $$034 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i32 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i32 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i32|0)==(0);
 if ($1) {
  $$031$lcssa = 0;
  return ($$031$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03133 = 0;$$034 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$034<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strcmp($9,36890)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($5)) + 40|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 4|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = ($15<<16>>16)<(0);
    if ($16) {
     $$1 = $$03133;
    } else {
     $17 = (($$034) + 1)|0;
     $18 = (_RegXUsed($0,$17)|0);
     $19 = ($18|0)==(0);
     if ($19) {
      $20 = HEAP32[$12>>2]|0;
      $21 = ((($20)) + 4|0);
      $22 = HEAP16[$21>>1]|0;
      $23 = $22 << 16 >> 16;
      $24 = (($23) + -1)|0;
      $25 = (_MakeHexArg($24)|0);
      $26 = ((($5)) + 36|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = (_NewCodeEntry(42,2,$25,0,$27)|0);
      _CS_InsertEntry($0,$28,$17);
      $29 = HEAP32[$26>>2]|0;
      $30 = (_NewCodeEntry(40,10,36898,0,$29)|0);
      $31 = (($$034) + 2)|0;
      _CS_InsertEntry($0,$30,$31);
      _CS_DelEntry($0,$$034);
      $32 = (($$03133) + 1)|0;
      $$1 = $32;
     } else {
      $$1 = $$03133;
     }
    }
   } else {
    $$1 = $$03133;
   }
  } else {
   $$1 = $$03133;
  }
  $33 = (($$034) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $34 = ($33>>>0)<($$idx$val$i>>>0);
  if ($34) {
   $$03133 = $$1;$$034 = $33;
  } else {
   $$031$lcssa = $$1;
   break;
  }
 }
 return ($$031$lcssa|0);
}
function _OptDecouple($0) {
 $0 = $0|0;
 var $$0 = 0, $$0119$lcssa = 0, $$0119133 = 0, $$0120132 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i131 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i131 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i131|0)==(0);
 if ($1) {
  $$0119$lcssa = 0;
  return ($$0119$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$0119133 = 0;$$0120132 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$0120132<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP16[$5>>1]|0;
  $9 = $8&255;
  $10 = ($8&65535) >>> 8;
  $11 = $10&255;
  L6: do {
   switch ($9<<24>>24) {
   case 21:  {
    $12 = HEAP16[$7>>1]|0;
    $13 = ($12<<16>>16)<(0);
    if ($13) {
     $$1 = $$0119133;
    } else {
     $14 = ((($5)) + 36|0);
     $15 = $12&65535;
     $16 = (($15) + 255)|0;
     $17 = $16 & 255;
     $18 = (_MakeHexArg($17)|0);
     $19 = HEAP32[$14>>2]|0;
     $20 = (_NewCodeEntry(40,2,$18,0,$19)|0);
     $$0 = $20;
     label = 45;
    }
    break;
   }
   case 23:  {
    $21 = ((($7)) + 2|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = ($22<<16>>16)<(0);
    if ($23) {
     $$1 = $$0119133;
    } else {
     $24 = ((($5)) + 36|0);
     $25 = $22&65535;
     $26 = (($25) + 255)|0;
     $27 = $26 & 255;
     $28 = (_MakeHexArg($27)|0);
     $29 = HEAP32[$24>>2]|0;
     $30 = (_NewCodeEntry(41,2,$28,0,$29)|0);
     $$0 = $30;
     label = 45;
    }
    break;
   }
   case 24:  {
    $31 = ((($7)) + 4|0);
    $32 = HEAP16[$31>>1]|0;
    $33 = ($32<<16>>16)<(0);
    if ($33) {
     $$1 = $$0119133;
    } else {
     $34 = ((($5)) + 36|0);
     $35 = $32&65535;
     $36 = (($35) + 255)|0;
     $37 = $36 & 255;
     $38 = (_MakeHexArg($37)|0);
     $39 = HEAP32[$34>>2]|0;
     $40 = (_NewCodeEntry(42,2,$38,0,$39)|0);
     $$0 = $40;
     label = 45;
    }
    break;
   }
   case 26:  {
    $41 = HEAP16[$7>>1]|0;
    $42 = ($41<<16>>16)<(0);
    if ($42) {
     $$1 = $$0119133;
    } else {
     $43 = ((($5)) + 36|0);
     $44 = $41&65535;
     $45 = (($44) + 1)|0;
     $46 = $45 & 255;
     $47 = (_MakeHexArg($46)|0);
     $48 = HEAP32[$43>>2]|0;
     $49 = (_NewCodeEntry(40,2,$47,0,$48)|0);
     $$0 = $49;
     label = 45;
    }
    break;
   }
   case 28:  {
    $50 = ((($7)) + 2|0);
    $51 = HEAP16[$50>>1]|0;
    $52 = ($51<<16>>16)<(0);
    if ($52) {
     $$1 = $$0119133;
    } else {
     $53 = ((($5)) + 36|0);
     $54 = $51&65535;
     $55 = (($54) + 1)|0;
     $56 = $55 & 255;
     $57 = (_MakeHexArg($56)|0);
     $58 = HEAP32[$53>>2]|0;
     $59 = (_NewCodeEntry(41,2,$57,0,$58)|0);
     $$0 = $59;
     label = 45;
    }
    break;
   }
   case 29:  {
    $60 = ((($7)) + 4|0);
    $61 = HEAP16[$60>>1]|0;
    $62 = ($61<<16>>16)<(0);
    if ($62) {
     $$1 = $$0119133;
    } else {
     $63 = ((($5)) + 36|0);
     $64 = $61&65535;
     $65 = (($64) + 1)|0;
     $66 = $65 & 255;
     $67 = (_MakeHexArg($66)|0);
     $68 = HEAP32[$63>>2]|0;
     $69 = (_NewCodeEntry(42,2,$67,0,$68)|0);
     $$0 = $69;
     label = 45;
    }
    break;
   }
   case 40:  {
    $70 = ($11<<24>>24)==(3);
    if ($70) {
     $71 = ((($5)) + 14|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72&65535;
     $74 = $73 & 65528;
     $75 = (_GetKnownReg($74,$7)|0);
     switch ($75|0) {
     case 8:  {
      $76 = ((($7)) + 14|0);
      $77 = HEAP16[$76>>1]|0;
      $78 = $77 << 16 >> 16;
      $79 = (_MakeHexArg($78)|0);
      $80 = ((($5)) + 36|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = (_NewCodeEntry(40,2,$79,0,$81)|0);
      $$0 = $82;
      label = 45;
      break L6;
      break;
     }
     case 16:  {
      $83 = ((($7)) + 10|0);
      $84 = HEAP16[$83>>1]|0;
      $85 = $84 << 16 >> 16;
      $86 = (_MakeHexArg($85)|0);
      $87 = ((($5)) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (_NewCodeEntry(40,2,$86,0,$88)|0);
      $$0 = $89;
      label = 45;
      break L6;
      break;
     }
     case 32:  {
      $90 = ((($7)) + 12|0);
      $91 = HEAP16[$90>>1]|0;
      $92 = $91 << 16 >> 16;
      $93 = (_MakeHexArg($92)|0);
      $94 = ((($5)) + 36|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (_NewCodeEntry(40,2,$93,0,$95)|0);
      $$0 = $96;
      label = 45;
      break L6;
      break;
     }
     case 256:  {
      $97 = ((($7)) + 6|0);
      $98 = HEAP16[$97>>1]|0;
      $99 = $98 << 16 >> 16;
      $100 = (_MakeHexArg($99)|0);
      $101 = ((($5)) + 36|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (_NewCodeEntry(40,2,$100,0,$102)|0);
      $$0 = $103;
      label = 45;
      break L6;
      break;
     }
     case 512:  {
      $104 = ((($7)) + 8|0);
      $105 = HEAP16[$104>>1]|0;
      $106 = $105 << 16 >> 16;
      $107 = (_MakeHexArg($106)|0);
      $108 = ((($5)) + 36|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (_NewCodeEntry(40,2,$107,0,$109)|0);
      $$0 = $110;
      label = 45;
      break L6;
      break;
     }
     default: {
      $$1 = $$0119133;
      break L6;
     }
     }
    } else {
     $$1 = $$0119133;
    }
    break;
   }
   case 41:  {
    $111 = ($11<<24>>24)==(3);
    if ($111) {
     $112 = ((($5)) + 14|0);
     $113 = HEAP16[$112>>1]|0;
     $114 = $113&65535;
     $115 = $114 & 65528;
     $116 = (_GetKnownReg($115,$7)|0);
     switch ($116|0) {
     case 8:  {
      $117 = ((($7)) + 14|0);
      $118 = HEAP16[$117>>1]|0;
      $119 = $118 << 16 >> 16;
      $120 = (_MakeHexArg($119)|0);
      $121 = ((($5)) + 36|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (_NewCodeEntry(41,2,$120,0,$122)|0);
      $$0 = $123;
      label = 45;
      break L6;
      break;
     }
     case 16:  {
      $124 = ((($7)) + 10|0);
      $125 = HEAP16[$124>>1]|0;
      $126 = $125 << 16 >> 16;
      $127 = (_MakeHexArg($126)|0);
      $128 = ((($5)) + 36|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = (_NewCodeEntry(41,2,$127,0,$129)|0);
      $$0 = $130;
      label = 45;
      break L6;
      break;
     }
     case 32:  {
      $131 = ((($7)) + 12|0);
      $132 = HEAP16[$131>>1]|0;
      $133 = $132 << 16 >> 16;
      $134 = (_MakeHexArg($133)|0);
      $135 = ((($5)) + 36|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = (_NewCodeEntry(41,2,$134,0,$136)|0);
      $$0 = $137;
      label = 45;
      break L6;
      break;
     }
     case 256:  {
      $138 = ((($7)) + 6|0);
      $139 = HEAP16[$138>>1]|0;
      $140 = $139 << 16 >> 16;
      $141 = (_MakeHexArg($140)|0);
      $142 = ((($5)) + 36|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = (_NewCodeEntry(41,2,$141,0,$143)|0);
      $$0 = $144;
      label = 45;
      break L6;
      break;
     }
     case 512:  {
      $145 = ((($7)) + 8|0);
      $146 = HEAP16[$145>>1]|0;
      $147 = $146 << 16 >> 16;
      $148 = (_MakeHexArg($147)|0);
      $149 = ((($5)) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = (_NewCodeEntry(41,2,$148,0,$150)|0);
      $$0 = $151;
      label = 45;
      break L6;
      break;
     }
     default: {
      $$1 = $$0119133;
      break L6;
     }
     }
    } else {
     $$1 = $$0119133;
    }
    break;
   }
   case 42:  {
    $152 = ($11<<24>>24)==(3);
    if ($152) {
     $153 = ((($5)) + 14|0);
     $154 = HEAP16[$153>>1]|0;
     $155 = $154&65535;
     $156 = (_GetKnownReg($155,$7)|0);
     switch ($156|0) {
     case 8:  {
      $157 = ((($7)) + 14|0);
      $158 = HEAP16[$157>>1]|0;
      $159 = $158 << 16 >> 16;
      $160 = (_MakeHexArg($159)|0);
      $161 = ((($5)) + 36|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (_NewCodeEntry(42,2,$160,0,$162)|0);
      $$0 = $163;
      label = 45;
      break L6;
      break;
     }
     case 16:  {
      $164 = ((($7)) + 10|0);
      $165 = HEAP16[$164>>1]|0;
      $166 = $165 << 16 >> 16;
      $167 = (_MakeHexArg($166)|0);
      $168 = ((($5)) + 36|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (_NewCodeEntry(42,2,$167,0,$169)|0);
      $$0 = $170;
      label = 45;
      break L6;
      break;
     }
     case 32:  {
      $171 = ((($7)) + 12|0);
      $172 = HEAP16[$171>>1]|0;
      $173 = $172 << 16 >> 16;
      $174 = (_MakeHexArg($173)|0);
      $175 = ((($5)) + 36|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = (_NewCodeEntry(42,2,$174,0,$176)|0);
      $$0 = $177;
      label = 45;
      break L6;
      break;
     }
     case 256:  {
      $178 = ((($7)) + 6|0);
      $179 = HEAP16[$178>>1]|0;
      $180 = $179 << 16 >> 16;
      $181 = (_MakeHexArg($180)|0);
      $182 = ((($5)) + 36|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = (_NewCodeEntry(42,2,$181,0,$183)|0);
      $$0 = $184;
      label = 45;
      break L6;
      break;
     }
     case 512:  {
      $185 = ((($7)) + 8|0);
      $186 = HEAP16[$185>>1]|0;
      $187 = $186 << 16 >> 16;
      $188 = (_MakeHexArg($187)|0);
      $189 = ((($5)) + 36|0);
      $190 = HEAP32[$189>>2]|0;
      $191 = (_NewCodeEntry(42,2,$188,0,$190)|0);
      $$0 = $191;
      label = 45;
      break L6;
      break;
     }
     default: {
      $$1 = $$0119133;
      break L6;
     }
     }
    } else {
     $$1 = $$0119133;
    }
    break;
   }
   case 66:  {
    $192 = HEAP16[$7>>1]|0;
    $193 = ($192<<16>>16)>(-1);
    if ($193) {
     $194 = ((($5)) + 36|0);
     $195 = $192 << 16 >> 16;
     $196 = (_MakeHexArg($195)|0);
     $197 = HEAP32[$194>>2]|0;
     $198 = (_NewCodeEntry(41,2,$196,0,$197)|0);
     $$0 = $198;
     label = 45;
    } else {
     $$1 = $$0119133;
    }
    break;
   }
   case 67:  {
    $199 = HEAP16[$7>>1]|0;
    $200 = ($199<<16>>16)>(-1);
    if ($200) {
     $201 = ((($5)) + 36|0);
     $202 = $199 << 16 >> 16;
     $203 = (_MakeHexArg($202)|0);
     $204 = HEAP32[$201>>2]|0;
     $205 = (_NewCodeEntry(42,2,$203,0,$204)|0);
     $$0 = $205;
     label = 45;
    } else {
     $$1 = $$0119133;
    }
    break;
   }
   case 71:  {
    $206 = ((($7)) + 2|0);
    $207 = HEAP16[$206>>1]|0;
    $208 = ($207<<16>>16)>(-1);
    if ($208) {
     $209 = ((($5)) + 36|0);
     $210 = $207 << 16 >> 16;
     $211 = (_MakeHexArg($210)|0);
     $212 = HEAP32[$209>>2]|0;
     $213 = (_NewCodeEntry(40,2,$211,0,$212)|0);
     $$0 = $213;
     label = 45;
    } else {
     $$1 = $$0119133;
    }
    break;
   }
   case 73:  {
    $214 = ((($7)) + 4|0);
    $215 = HEAP16[$214>>1]|0;
    $216 = ($215<<16>>16)>(-1);
    if ($216) {
     $217 = ((($5)) + 36|0);
     $218 = $215 << 16 >> 16;
     $219 = (_MakeHexArg($218)|0);
     $220 = HEAP32[$217>>2]|0;
     $221 = (_NewCodeEntry(40,2,$219,0,$220)|0);
     $$0 = $221;
     label = 45;
    } else {
     $$1 = $$0119133;
    }
    break;
   }
   default: {
    $$1 = $$0119133;
   }
   }
  } while(0);
  if ((label|0) == 45) {
   label = 0;
   $222 = ($$0|0)==(0|0);
   if ($222) {
    $$1 = $$0119133;
   } else {
    $223 = (($$0119133) + 1)|0;
    $224 = (($$0120132) + 1)|0;
    _CS_InsertEntry($0,$$0,$224);
    _CS_DelEntry($0,$$0120132);
    $$1 = $223;
   }
  }
  $225 = (($$0120132) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $226 = ($225>>>0)<($$idx$val$i>>>0);
  if ($226) {
   $$0119133 = $$1;$$0120132 = $225;
  } else {
   $$0119$lcssa = $$1;
   break;
  }
 }
 return ($$0119$lcssa|0);
}
function _EnableOpt($0) {
 $0 = $0|0;
 var $$05 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_strcmp($0,18654)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$05 = 0;
  while(1) {
   $3 = (2624 + ($$05<<2)|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ((($4)) + 28|0);
   HEAP8[$5>>0] = 0;
   $6 = (($$05) + 1)|0;
   $exitcond = ($6|0)==(95);
   if ($exitcond) {
    break;
   } else {
    $$05 = $6;
   }
  }
  STACKTOP = sp;return;
 }
 $7 = (_bsearch($0,2624,95,4,5)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(18658,$vararg_buffer);
  // unreachable;
 }
 $9 = HEAP32[$7>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(18658,$vararg_buffer);
  // unreachable;
 }
 $11 = ((($9)) + 28|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function _ListOptSteps($0) {
 $0 = $0|0;
 var $$05 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 (_fwrite(19778,4,1,$0)|0);
 $$05 = 0;
 while(1) {
  $1 = (2624 + ($$05<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($2)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  (_fprintf($0,39411,$vararg_buffer)|0);
  $5 = (($$05) + 1)|0;
  $exitcond = ($5|0)==(95);
  if ($exitcond) {
   break;
  } else {
   $$05 = $5;
  }
 }
 STACKTOP = sp;return;
}
function _RunOpt($0) {
 $0 = $0|0;
 var $$017$i = 0, $$027$i = 0, $$027$lcssa$i = 0, $$028$i = 0, $$idx$val$i = 0, $$pr = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr16 = 0;
 var $vararg_ptr17 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $1 = sp + 80|0;
 $2 = sp + 336|0;
 $3 = sp + 72|0;
 $4 = sp + 68|0;
 $5 = ((($0)) + 150|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (_getenv((19783|0))|0);
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = (_fopen($8,40730)|0);
  $11 = ($10|0)==(0|0);
  if (!($11)) {
   $12 = (_fgets($1,256,$10)|0);
   $13 = ($12|0)==(0|0);
   L8: do {
    if (!($13)) {
     while(1) {
      $14 = (_strlen($1)|0);
      $$027$i = $14;
      while(1) {
       $15 = ($$027$i|0)==(0);
       if ($15) {
        $$027$lcssa$i = 0;
        break;
       }
       $16 = (($$027$i) + -1)|0;
       $17 = (($1) + ($16)|0);
       $18 = HEAP8[$17>>0]|0;
       $19 = (_IsSpace($18)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        $$027$lcssa$i = $$027$i;
        break;
       } else {
        $$027$i = $16;
       }
      }
      $21 = (($1) + ($$027$lcssa$i)|0);
      HEAP8[$21>>0] = 0;
      $$028$i = $1;
      while(1) {
       $22 = HEAP8[$$028$i>>0]|0;
       $23 = (_IsSpace($22)|0);
       $24 = ($23|0)==(0);
       $25 = ((($$028$i)) + 1|0);
       if ($24) {
        break;
       } else {
        $$028$i = $25;
       }
      }
      $26 = HEAP8[$$028$i>>0]|0;
      switch ($26<<24>>24) {
      case 35: case 59: case 0:  {
       break;
      }
      default: {
       HEAP32[$vararg_buffer>>2] = $2;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $3;
       $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
       HEAP32[$vararg_ptr2>>2] = $4;
       $27 = (_sscanf($$028$i,19797,$vararg_buffer)|0);
       $28 = ($27|0)==(3);
       if ($28) {
        $29 = (_bsearch($2,2624,95,4,5)|0);
        $30 = ($29|0)==(0|0);
        if (!($30)) {
         $31 = HEAP32[$29>>2]|0;
         $32 = ($31|0)==(0|0);
         if (!($32)) {
          $33 = HEAP32[$3>>2]|0;
          $34 = ((($31)) + 12|0);
          HEAP32[$34>>2] = $33;
          $35 = HEAP32[$4>>2]|0;
          $36 = ((($31)) + 20|0);
          HEAP32[$36>>2] = $35;
         }
        }
       }
      }
      }
      $37 = (_fgets($1,256,$10)|0);
      $38 = ($37|0)==(0|0);
      if ($38) {
       break L8;
      }
     }
    }
   } while(0);
   (_fclose($10)|0);
  }
 }
 $39 = ((($0)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(0|0);
 $42 = HEAP32[3678]|0;
 if ($41) {
  _Print($42,1,19855,$vararg_buffer6);
 } else {
  $43 = ((($40)) + 48|0);
  HEAP32[$vararg_buffer3>>2] = $43;
  _Print($42,1,19818,$vararg_buffer3);
 }
 $44 = HEAP8[47031]|0;
 $45 = ($44<<24>>24)==(0);
 if (!($45)) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
  $46 = HEAP32[$39>>2]|0;
  $47 = ($46|0)==(0|0);
  if ($47) {
   _SB_CopyBuf($1,19898,6);
  } else {
   $48 = ((($46)) + 48|0);
   $49 = (_strlen($48)|0);
   _SB_CopyBuf($1,$48,$49);
  }
  _SB_AppendBuf($1,19905,4);
  _SB_Terminate($1);
  $$idx$val$i = HEAP32[$1>>2]|0;
  _OpenDebugOutputFile($$idx$val$i);
  _SB_Done($1);
  $$pr = HEAP8[47031]|0;
  $50 = ($$pr<<24>>24)==(0);
  if (!($50)) {
   (_WriteOutput(19910,$vararg_buffer8)|0);
   $51 = HEAP32[$39>>2]|0;
   $52 = ($51|0)==(0|0);
   $53 = ((($51)) + 48|0);
   $54 = $52 ? 19985 : $53;
   HEAP32[$vararg_buffer10>>2] = $54;
   (_WriteOutput(19994,$vararg_buffer10)|0);
   _CS_Output($0);
  }
 }
 _CS_GenRegInfo($0);
 (_RunOptFunc($0,5468,5)|0);
 (_RunOptFunc($0,4892,1)|0);
 (_RunOptFunc($0,4924,1)|0);
 (_RunOptFunc($0,4956,1)|0);
 (_RunOptFunc($0,3164,1)|0);
 (_RunOptFunc($0,4444,1)|0);
 (_RunOptFunc($0,4700,1)|0);
 (_RunOptFunc($0,4732,1)|0);
 (_RunOptFunc($0,4764,1)|0);
 (_RunOptFunc($0,4796,1)|0);
 (_RunOptFunc($0,4828,1)|0);
 (_RunOptFunc($0,4860,1)|0);
 (_RunOptFunc($0,4476,1)|0);
 (_RunOptFunc($0,4508,1)|0);
 (_RunOptFunc($0,4540,1)|0);
 (_RunOptFunc($0,4572,1)|0);
 (_RunOptFunc($0,4604,1)|0);
 (_RunOptFunc($0,4636,1)|0);
 (_RunOptFunc($0,4668,1)|0);
 (_RunOptFunc($0,3356,1)|0);
 (_RunOptFunc($0,3388,1)|0);
 (_RunOptFunc($0,3420,1)|0);
 (_RunOptFunc($0,3452,1)|0);
 (_RunOptFunc($0,3100,1)|0);
 (_RunOptFunc($0,3132,1)|0);
 (_RunOptFunc($0,3196,1)|0);
 (_RunOptFunc($0,3228,1)|0);
 (_RunOptFunc($0,3260,1)|0);
 (_RunOptFunc($0,5692,1)|0);
 (_RunOptFunc($0,5756,1)|0);
 (_RunOptFunc($0,5596,1)|0);
 (_RunOptFunc($0,5628,1)|0);
 (_RunOptFunc($0,5180,1)|0);
 (_RunOptFunc($0,5212,1)|0);
 (_RunOptFunc($0,5308,1)|0);
 (_RunOptFunc($0,5340,1)|0);
 (_RunOptFunc($0,5500,1)|0);
 (_RunOptFunc($0,5532,5)|0);
 (_RunOptFunc($0,5564,5)|0);
 (_RunOptFunc($0,3996,1)|0);
 while(1) {
  $55 = (_RunOptFunc($0,3292,1)|0);
  $56 = (_RunOptFunc($0,3324,1)|0);
  $57 = (($56) + ($55))|0;
  $58 = (_RunOptFunc($0,4348,1)|0);
  $59 = (($57) + ($58))|0;
  $60 = (_RunOptFunc($0,4380,1)|0);
  $61 = (($59) + ($60))|0;
  $62 = (_RunOptFunc($0,5436,3)|0);
  $63 = (($61) + ($62))|0;
  $64 = (_RunOptFunc($0,5180,1)|0);
  $65 = (($63) + ($64))|0;
  $66 = (_RunOptFunc($0,5276,1)|0);
  $67 = (($65) + ($66))|0;
  $68 = (_RunOptFunc($0,3836,1)|0);
  $69 = (($67) + ($68))|0;
  $70 = (_RunOptFunc($0,5692,1)|0);
  $71 = (($69) + ($70))|0;
  $72 = (_RunOptFunc($0,5724,1)|0);
  $73 = (($71) + ($72))|0;
  $74 = (_RunOptFunc($0,5756,1)|0);
  $75 = (($73) + ($74))|0;
  $76 = (_RunOptFunc($0,3228,1)|0);
  $77 = (($75) + ($76))|0;
  $78 = (_RunOptFunc($0,3260,1)|0);
  $79 = (($77) + ($78))|0;
  $80 = (_RunOptFunc($0,4124,1)|0);
  $81 = (($79) + ($80))|0;
  $82 = (_RunOptFunc($0,3964,1)|0);
  $83 = (($81) + ($82))|0;
  $84 = (_RunOptFunc($0,5084,1)|0);
  $85 = (($83) + ($84))|0;
  $86 = (_RunOptFunc($0,3932,1)|0);
  $87 = (($85) + ($86))|0;
  $88 = (_RunOptFunc($0,3484,1)|0);
  $89 = (($87) + ($88))|0;
  $90 = (_RunOptFunc($0,4156,1)|0);
  $91 = (($89) + ($90))|0;
  $92 = (_RunOptFunc($0,4188,1)|0);
  $93 = (($91) + ($92))|0;
  $94 = (_RunOptFunc($0,3868,1)|0);
  $95 = (($93) + ($94))|0;
  $96 = (_RunOptFunc($0,3900,1)|0);
  $97 = (($95) + ($96))|0;
  $98 = (_RunOptFunc($0,5116,1)|0);
  $99 = (($97) + ($98))|0;
  $100 = (_RunOptFunc($0,3548,1)|0);
  $101 = (($99) + ($100))|0;
  $102 = (_RunOptFunc($0,3580,1)|0);
  $103 = (($101) + ($102))|0;
  $104 = (_RunOptFunc($0,3772,1)|0);
  $105 = (($103) + ($104))|0;
  $106 = (_RunOptFunc($0,3612,1)|0);
  $107 = (($105) + ($106))|0;
  $108 = (_RunOptFunc($0,3644,1)|0);
  $109 = (($107) + ($108))|0;
  $110 = (_RunOptFunc($0,3676,1)|0);
  $111 = (($109) + ($110))|0;
  $112 = (_RunOptFunc($0,3708,1)|0);
  $113 = (($111) + ($112))|0;
  $114 = (_RunOptFunc($0,3740,1)|0);
  $115 = (($113) + ($114))|0;
  $116 = (_RunOptFunc($0,3804,1)|0);
  $117 = (($115) + ($116))|0;
  $118 = (_RunOptFunc($0,5788,1)|0);
  $119 = (($117) + ($118))|0;
  $120 = (_RunOptFunc($0,4252,1)|0);
  $121 = (($119) + ($120))|0;
  $122 = (_RunOptFunc($0,4220,1)|0);
  $123 = (($121) + ($122))|0;
  $124 = (_RunOptFunc($0,5980,1)|0);
  $125 = (($123) + ($124))|0;
  $126 = (_RunOptFunc($0,6012,1)|0);
  $127 = (($125) + ($126))|0;
  $128 = (_RunOptFunc($0,4028,1)|0);
  $129 = (($127) + ($128))|0;
  $130 = (_RunOptFunc($0,5660,1)|0);
  $131 = (($129) + ($130))|0;
  $132 = (_RunOptFunc($0,5852,1)|0);
  $133 = (($131) + ($132))|0;
  $134 = (_RunOptFunc($0,5916,1)|0);
  $135 = (($133) + ($134))|0;
  $136 = (_RunOptFunc($0,5948,1)|0);
  $137 = (($135) + ($136))|0;
  $138 = (_RunOptFunc($0,5500,1)|0);
  $139 = (($137) + ($138))|0;
  $140 = (_RunOptFunc($0,5628,1)|0);
  $141 = (($139) + ($140))|0;
  $142 = (_RunOptFunc($0,5052,1)|0);
  $143 = (($141) + ($142))|0;
  $144 = (_RunOptFunc($0,4412,1)|0);
  $145 = (0 - ($144))|0;
  $146 = ($143|0)==($145|0);
  if ($146) {
   break;
  }
 }
 (_RunOptFunc($0,5244,1)|0);
 (_RunOptFunc($0,4988,1)|0);
 (_RunOptFunc($0,5020,1)|0);
 (_RunOptFunc($0,5980,1)|0);
 (_RunOptFunc($0,5820,1)|0);
 (_RunOptFunc($0,5884,1)|0);
 (_RunOptFunc($0,4284,1)|0);
 (_RunOptFunc($0,4316,1)|0);
 (_RunOptFunc($0,4028,1)|0);
 $147 = HEAP32[3628]|0;
 $148 = (14556 + ($147<<2)|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = $149 & 8;
 $151 = ($150|0)==(0);
 if (!($151)) {
  $152 = (_RunOptFunc($0,3004,1)|0);
  $153 = (_RunOptFunc($0,3036,1)|0);
  $154 = (($153) + ($152))|0;
  $155 = (_RunOptFunc($0,3068,1)|0);
  $156 = (0 - ($155))|0;
  $157 = ($154|0)==($156|0);
  if (!($157)) {
   (_RunOptFunc($0,5980,1)|0);
  }
 }
 $158 = HEAP32[3628]|0;
 $159 = (14556 + ($158<<2)|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = $160 & 8;
 $162 = ($161|0)==(0);
 if ($162) {
  (_RunOptFunc($0,4060,1)|0);
  (_RunOptFunc($0,5980,1)|0);
  (_RunOptFunc($0,4092,1)|0);
 }
 $163 = (_RunOptFunc($0,5372,1)|0);
 $164 = ($163|0)==(0);
 if (!($164)) {
  (_RunOptFunc($0,5980,1)|0);
  (_RunOptFunc($0,6012,1)|0);
  (_RunOptFunc($0,4156,5)|0);
  (_RunOptFunc($0,5628,1)|0);
 }
 $165 = (_RunOptFunc($0,5404,1)|0);
 $166 = ($165|0)==(0);
 if (!($166)) {
  (_RunOptFunc($0,5980,1)|0);
  (_RunOptFunc($0,4156,5)|0);
  (_RunOptFunc($0,5628,1)|0);
  (_RunOptFunc($0,5852,1)|0);
  (_RunOptFunc($0,5916,1)|0);
 }
 (_RunOptFunc($0,3516,3)|0);
 $167 = (_RunOptFunc($0,5148,1)|0);
 $168 = ($167|0)==(0);
 if (!($168)) {
  (_RunOptFunc($0,3932,1)|0);
 }
 _CS_FreeRegInfo($0);
 $169 = HEAP8[47031]|0;
 $170 = ($169<<24>>24)==(0);
 if (!($170)) {
  _CloseOutputFile();
 }
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $171 = (_fopen($8,30054)|0);
 $172 = ($171|0)==(0|0);
 if ($172) {
  STACKTOP = sp;return;
 }
 (_fwrite(20027,127,1,$171)|0);
 $$017$i = 0;
 while(1) {
  $173 = (2624 + ($$017$i<<2)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ((($174)) + 12|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ((($174)) + 16|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = ((($174)) + 20|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = ((($174)) + 24|0);
  $184 = HEAP32[$183>>2]|0;
  HEAP32[$vararg_buffer13>>2] = $176;
  $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
  HEAP32[$vararg_ptr16>>2] = $178;
  $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
  HEAP32[$vararg_ptr17>>2] = $180;
  $vararg_ptr18 = ((($vararg_buffer13)) + 12|0);
  HEAP32[$vararg_ptr18>>2] = $182;
  $vararg_ptr19 = ((($vararg_buffer13)) + 16|0);
  HEAP32[$vararg_ptr19>>2] = $184;
  (_fprintf($171,20155,$vararg_buffer13)|0);
  $185 = (($$017$i) + 1)|0;
  $exitcond$i = ($185|0)==(95);
  if ($exitcond$i) {
   break;
  } else {
   $$017$i = $185;
  }
 }
 (_fclose($171)|0);
 STACKTOP = sp;return;
}
function _RunOptFunc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$025 = 0, $$026 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 28|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if (!($5)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 152|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ((($1)) + 12|0);
 $12 = ((($1)) + 16|0);
 $13 = ((($1)) + 20|0);
 $14 = ((($1)) + 24|0);
 $15 = ((($1)) + 4|0);
 $16 = ((($0)) + 4|0);
 $$025 = 0;$$026 = $2;
 while(1) {
  $17 = HEAP32[$1>>2]|0;
  $18 = (FUNCTION_TABLE_ii[$17 & 127]($0)|0);
  $19 = (($18) + ($$025))|0;
  $20 = HEAP32[$11>>2]|0;
  $21 = (($20) + 1)|0;
  HEAP32[$11>>2] = $21;
  $22 = HEAP32[$12>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$12>>2] = $23;
  $24 = HEAP32[$13>>2]|0;
  $25 = (($24) + ($18))|0;
  HEAP32[$13>>2] = $25;
  $26 = HEAP32[$14>>2]|0;
  $27 = (($26) + ($18))|0;
  HEAP32[$14>>2] = $27;
  $28 = ($18|0)==(0);
  if ($28) {
   $$0 = $19;
   label = 13;
   break;
  }
  $29 = HEAP8[47051]|0;
  $30 = ($29<<24>>24)==(0);
  if (!($30)) {
   $31 = HEAP32[$15>>2]|0;
   HEAP32[$vararg_buffer>>2] = $31;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $18;
   (_printf(20186,$vararg_buffer)|0);
  }
  $32 = HEAP32[$15>>2]|0;
  $33 = HEAP8[47031]|0;
  $34 = ($33<<24>>24)==(0);
  if (!($34)) {
   (_WriteOutput(19910,$vararg_buffer2)|0);
   $35 = ($32|0)==(0|0);
   if ($35) {
    $36 = HEAP32[$16>>2]|0;
    $37 = ($36|0)==(0|0);
    $38 = ((($36)) + 48|0);
    $39 = $37 ? 19985 : $38;
    HEAP32[$vararg_buffer4>>2] = $39;
    (_WriteOutput(19994,$vararg_buffer4)|0);
   } else {
    HEAP32[$vararg_buffer7>>2] = $32;
    (_WriteOutput(20210,$vararg_buffer7)|0);
   }
   _CS_Output($0);
  }
  _CS_GenRegInfo($0);
  $40 = (($$026) + -1)|0;
  $41 = ($40|0)==(0);
  if ($41) {
   $$0 = $19;
   label = 13;
   break;
  } else {
   $$025 = $19;$$026 = $40;
  }
 }
 if ((label|0) == 13) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _NewTextSeg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_xmalloc(16)|0);
 HEAP32[$1>>2] = $0;
 $2 = ((($1)) + 4|0);
 (_InitCollection($2)|0);
 return ($1|0);
}
function _TS_AddVLine($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $3 = sp;
 (_xvsprintf($3,256,$1,$2)|0);
 $4 = ((($0)) + 4|0);
 $5 = (_xstrdup($3)|0);
 $6 = HEAP32[$4>>2]|0;
 _CollInsert($4,$5,$6);
 STACKTOP = sp;return;
}
function _TS_AddLine($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $2 = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 (_xvsprintf($2,256,$1,$3)|0);
 $4 = ((($0)) + 4|0);
 $5 = (_xstrdup($2)|0);
 $6 = HEAP32[$4>>2]|0;
 _CollInsert($4,$5,$6);
 STACKTOP = sp;return;
}
function _TS_Output($0) {
 $0 = $0|0;
 var $$0910 = 0, $$idx = 0, $$idx$val = 0, $$pre = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$idx = ((($0)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $1 = ($$idx$val|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ((($0)) + 12|0);
 $$0910 = 0;
 while(1) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + ($$0910<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $7;
  (_WriteOutput(39411,$vararg_buffer)|0);
  $8 = (($$0910) + 1)|0;
  $9 = ($8>>>0)<($$idx$val>>>0);
  if (!($9)) {
   break;
  }
  $$pre = HEAP32[$$idx>>2]|0;
  $10 = ($$pre>>>0)>($8>>>0);
  if ($10) {
   $$0910 = $8;
  } else {
   label = 3;
   break;
  }
 }
 if ((label|0) == 3) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,40922,40950,155);
  // unreachable;
 }
 (_WriteOutput(34038,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$019$i = 0, $$021$i = 0, $$032 = 0, $$057 = 0, $$1 = 0, $$1$i = 0, $$13355 = 0, $$2$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx20$val$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $storemerge56 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 32|0;
 $3 = sp + 24|0;
 $4 = sp + 20|0;
 $5 = sp + 28|0;
 HEAP32[$3>>2] = $0;
 HEAP32[$4>>2] = $1;
 _InitCmdLine($3,$4,34461);
 _InitSegNames();
 _InitIncludePaths();
 HEAP32[$5>>2] = 1;
 $6 = HEAP32[11514]|0;
 $7 = ($6>>>0)>(1);
 if (!($7)) {
  _AbEnd(20297,$vararg_buffer1);
  // unreachable;
 }
 $8 = HEAP32[3649]|0;
 $$057 = 0;$storemerge56 = 1;
 L4: while(1) {
  $9 = HEAP32[11513]|0;
  $10 = (($9) + ($storemerge56<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(45);
  L6: do {
   if ($13) {
    $14 = ((($11)) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    do {
     switch ($16|0) {
     case 63: case 104:  {
      label = 7;
      break L4;
      break;
     }
     case 86:  {
      label = 39;
      break L4;
      break;
     }
     case 45:  {
      _LongOption($5,6044,33);
      $$1 = $$057;
      break L6;
      break;
     }
     case 100:  {
      $17 = HEAP8[47051]|0;
      $18 = (($17) + 1)<<24>>24;
      HEAP8[47051] = $18;
      $$1 = $$057;
      break L6;
      break;
     }
     case 103:  {
      HEAP8[47029] = 1;
      $$1 = $$057;
      break L6;
      break;
     }
     case 106:  {
      _IS_Set(8480,1);
      $$1 = $$057;
      break L6;
      break;
     }
     case 111:  {
      $19 = (_GetArg($5,2)|0);
      _SetOutputName($19);
      $$1 = $$057;
      break L6;
      break;
     }
     case 114:  {
      _IS_Set(8372,1);
      $$1 = $$057;
      break L6;
      break;
     }
     case 116:  {
      $20 = (_GetArg($5,2)|0);
      _OptTarget($11,$20);
      $$1 = $$057;
      break L6;
      break;
     }
     case 117:  {
      $$idx$val$i$i = HEAP32[(45968)>>2]|0;
      $21 = ($$idx$val$i$i|0)==(0);
      if (!($21)) {
       label = 14;
       break L4;
      }
      $22 = (_strlen(0)|0);
      _SB_CopyBuf(45964,0,$22);
      _SB_Terminate(45964);
      $$1 = $$057;
      break L6;
      break;
     }
     case 118:  {
      $23 = HEAP8[47050]|0;
      $24 = (($23) + 1)<<24>>24;
      HEAP8[47050] = $24;
      $$1 = $$057;
      break L6;
      break;
     }
     case 67:  {
      $25 = ((($11)) + 2|0);
      $$032 = $25;
      while(1) {
       $26 = HEAP8[$$032>>0]|0;
       switch ($26<<24>>24) {
       case 0:  {
        $$1 = $$057;
        break L6;
        break;
       }
       case 108:  {
        break;
       }
       default: {
        label = 20;
        break L4;
       }
       }
       $27 = ((($$032)) + 1|0);
       _IS_Set(8444,1);
       $$032 = $27;
      }
      break;
     }
     case 68:  {
      $28 = (_GetArg($5,2)|0);
      $29 = HEAP8[$28>>0]|0;
      $30 = ($29<<24>>24)==(95);
      if ($30) {
       $$0$i = $28;
      } else {
       $31 = (_IsAlpha($29)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        label = 23;
        break L4;
       } else {
        $$0$i = $28;
       }
      }
      L26: while(1) {
       $33 = HEAP8[$$0$i>>0]|0;
       $34 = (_IsAlNum($33)|0);
       $35 = ($34|0)==(0);
       if ($35) {
        $36 = HEAP8[$$0$i>>0]|0;
        switch ($36<<24>>24) {
        case 61:  {
         label = 29;
         break L26;
         break;
        }
        case 0:  {
         label = 28;
         break L26;
         break;
        }
        case 95:  {
         break;
        }
        default: {
         label = 27;
         break L4;
        }
        }
       }
       $37 = ((($$0$i)) + 1|0);
       $$0$i = $37;
      }
      if ((label|0) == 28) {
       label = 0;
       _DefineNumericMacro($28,1);
       $$1 = $$057;
       break L6;
      }
      else if ((label|0) == 29) {
       label = 0;
       $38 = (_strlen($28)|0);
       $39 = (($38) + 1)|0;
       $40 = (_xmalloc($39)|0);
       _memcpy(($40|0),($28|0),($39|0))|0;
       $41 = $$0$i;
       $42 = $28;
       $43 = (($41) - ($42))|0;
       $44 = (($40) + ($43)|0);
       $45 = ((($44)) + 1|0);
       HEAP8[$44>>0] = 0;
       _DefineTextMacro($40,$45);
       _xfree($40);
       $$1 = $$057;
       break L6;
      }
      break;
     }
     case 69:  {
      HEAP8[47030] = 1;
      $$1 = $$057;
      break L6;
      break;
     }
     case 73:  {
      $46 = (_GetArg($5,2)|0);
      $47 = HEAP32[11471]|0;
      _AddSearchPath($47,$46);
      $48 = HEAP32[11472]|0;
      _AddSearchPath($48,$46);
      $$1 = $$057;
      break L6;
      break;
     }
     case 79:  {
      _IS_Set(8552,1);
      $49 = ((($11)) + 2|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = ($50<<24>>24)==(0);
      if ($51) {
       $$1 = $$057;
       break L6;
      } else {
       $$13355 = $49;$54 = $50;
      }
      while(1) {
       $52 = ((($$13355)) + 1|0);
       $53 = $54 << 24 >> 24;
       switch ($53|0) {
       case 105:  {
        _IS_Set(8588,200);
        break;
       }
       case 114:  {
        _IS_Set(8372,1);
        break;
       }
       case 115:  {
        _IS_Set(8336,1);
        break;
       }
       default: {
       }
       }
       $55 = HEAP8[$52>>0]|0;
       $56 = ($55<<24>>24)==(0);
       if ($56) {
        $$1 = $$057;
        break L6;
       } else {
        $$13355 = $52;$54 = $55;
       }
      }
      break;
     }
     case 84:  {
      HEAP8[47027] = 1;
      $$1 = $$057;
      break L6;
      break;
     }
     case 87:  {
      $57 = (_GetArg($5,2)|0);
      ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
      $58 = ($57|0)==(0|0);
      L46: do {
       if (!($58)) {
        $$021$i = $57;
        while(1) {
         $59 = HEAP8[$$021$i>>0]|0;
         switch ($59<<24>>24) {
         case 45:  {
          $60 = ((($$021$i)) + 1|0);
          $$019$i = 0;$$1$i = $60;
          break;
         }
         case 43:  {
          $61 = ((($$021$i)) + 1|0);
          $$019$i = 1;$$1$i = $61;
          break;
         }
         default: {
          $$019$i = 1;$$1$i = $$021$i;
         }
         }
         $62 = (_strchr($$1$i,44)|0);
         $63 = ($62|0)==(0|0);
         if ($63) {
          $68 = (_strlen($$1$i)|0);
          _SB_CopyBuf($2,$$1$i,$68);
          $$2$i = 0;
         } else {
          $64 = $62;
          $65 = $$1$i;
          $66 = (($64) - ($65))|0;
          _SB_CopyBuf($2,$$1$i,$66);
          $67 = ((($62)) + 1|0);
          $$2$i = $67;
         }
         _SB_Terminate($2);
         $$idx20$val$i = HEAP32[$2>>2]|0;
         $69 = (_FindWarning($$idx20$val$i)|0);
         $70 = ($69|0)==(0|0);
         if ($70) {
          label = 48;
          break L4;
         }
         _IS_Set($69,$$019$i);
         $71 = ($$2$i|0)==(0|0);
         if ($71) {
          break L46;
         } else {
          $$021$i = $$2$i;
         }
        }
       }
      } while(0);
      _SB_Done($2);
      $$1 = $$057;
      break L6;
      break;
     }
     default: {
      label = 51;
      break L4;
     }
     }
    } while(0);
   } else {
    $72 = ($$057|0)==(0|0);
    if ($72) {
     $$1 = $11;
    } else {
     (_fwrite(20266,30,1,$8)|0);
     $$1 = $$057;
    }
   }
  } while(0);
  $73 = HEAP32[$5>>2]|0;
  $74 = (($73) + 1)|0;
  HEAP32[$5>>2] = $74;
  $75 = HEAP32[11514]|0;
  $76 = ($74>>>0)<($75>>>0);
  if ($76) {
   $$057 = $$1;$storemerge56 = $74;
  } else {
   label = 55;
   break;
  }
 }
 if ((label|0) == 7) {
  _OptHelp($11,0);
  // unreachable;
 }
 else if ((label|0) == 14) {
  HEAP32[$vararg_buffer>>2] = $11;
  _AbEnd(20237,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 20) {
  _UnknownOption($11);
  // unreachable;
 }
 else if ((label|0) == 23) {
  _InvDef($28);
  // unreachable;
 }
 else if ((label|0) == 27) {
  _InvDef($28);
  // unreachable;
 }
 else if ((label|0) == 39) {
  _OptVersion($11,0);
  // unreachable;
 }
 else if ((label|0) == 48) {
  $$idx$val$i = HEAP32[$2>>2]|0;
  _InvArg($11,$$idx$val$i);
  // unreachable;
 }
 else if ((label|0) == 51) {
  _UnknownOption($11);
  // unreachable;
 }
 else if ((label|0) == 55) {
  $77 = ($$1|0)==(0|0);
  if ($77) {
   _AbEnd(20297,$vararg_buffer1);
   // unreachable;
  }
  _FinishIncludePaths();
  _MakeDefaultOutputName($$1);
  $78 = HEAP32[3628]|0;
  $79 = ($78|0)==(-1);
  do {
   if ($79) {
    $80 = HEAP32[11512]|0;
    $81 = ($80|0)==(-1);
    if ($81) {
     HEAP32[3628] = 1;
     break;
    } else {
     $82 = (_GetTargetProperties($80)|0);
     $83 = ((($82)) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     HEAP32[3628] = $84;
     break;
    }
   }
  } while(0);
  $85 = HEAP32[3627]|0;
  $86 = ($85|0)==(-1);
  if ($86) {
   _SetMemoryModel(0);
  }
  $87 = (_IS_Get(8668)|0);
  $88 = ($87|0)==(-1);
  if ($88) {
   _IS_Set(8668,2);
  }
  _Compile($$1);
  $89 = HEAP8[47030]|0;
  $90 = ($89<<24>>24)==(0);
  if (!($90)) {
   $97 = HEAP32[11510]|0;
   $98 = ($97|0)!=(0);
   $99 = $98&1;
   STACKTOP = sp;return ($99|0);
  }
  $91 = HEAP32[11510]|0;
  $92 = ($91|0)!=(0);
  $93 = HEAP8[47051]|0;
  $94 = ($93<<24>>24)==(0);
  $or$cond = $92 & $94;
  if ($or$cond) {
   $97 = HEAP32[11510]|0;
   $98 = ($97|0)!=(0);
   $99 = $98&1;
   STACKTOP = sp;return ($99|0);
  }
  _FinishCompile();
  _OpenOutputFile();
  _WriteAsmOutput();
  $95 = HEAP32[3678]|0;
  $96 = HEAP32[11250]|0;
  HEAP32[$vararg_buffer3>>2] = $96;
  _Print($95,1,20312,$vararg_buffer3);
  _CloseOutputFile();
  _CreateDependencies();
  $97 = HEAP32[11510]|0;
  $98 = ($97|0)!=(0);
  $99 = $98&1;
  STACKTOP = sp;return ($99|0);
 }
 return (0)|0;
}
function _OptHelp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11515]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_printf(20718,$vararg_buffer)|0);
 _exit(0);
 // unreachable;
}
function _OptTarget($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (_FindTarget($1)|0);
 HEAP32[11512] = $2;
 do {
  switch ($2|0) {
  case 0:  {
   break;
  }
  case 1:  {
   _AbEnd(20342,$vararg_buffer);
   // unreachable;
   break;
  }
  case 3:  {
   _DefineNumericMacro(20391,1);
   break;
  }
  case 2:  {
   _DefineNumericMacro(20405,1);
   break;
  }
  case 4:  {
   _DefineNumericMacro(20405,1);
   _DefineNumericMacro(20415,1);
   break;
  }
  case 6:  {
   _DefineNumericMacro(20427,1);
   _DefineNumericMacro(20435,1);
   break;
  }
  case 7:  {
   _DefineNumericMacro(20427,1);
   _DefineNumericMacro(20443,1);
   break;
  }
  case 5:  {
   _DefineNumericMacro(20427,1);
   _DefineNumericMacro(20451,1);
   break;
  }
  case 8:  {
   _DefineNumericMacro(20427,1);
   _DefineNumericMacro(20461,1);
   break;
  }
  case 9:  {
   _DefineNumericMacro(20427,1);
   _DefineNumericMacro(20435,1);
   _DefineNumericMacro(20470,1);
   break;
  }
  case 10:  {
   _DefineNumericMacro(20427,1);
   _DefineNumericMacro(20480,1);
   break;
  }
  case 11:  {
   _DefineNumericMacro(20427,1);
   _DefineNumericMacro(20491,1);
   break;
  }
  case 13:  {
   _DefineNumericMacro(20427,1);
   _DefineNumericMacro(20502,1);
   break;
  }
  case 14:  {
   _DefineNumericMacro(20510,1);
   break;
  }
  case 15:  {
   _DefineNumericMacro(20518,1);
   break;
  }
  case 16:  {
   _DefineNumericMacro(20518,1);
   _DefineNumericMacro(20529,1);
   break;
  }
  case 27:  {
   _DefineNumericMacro(20543,1);
   break;
  }
  case 17:  {
   _DefineNumericMacro(20554,1);
   _DefineNumericMacro(20563,1);
   break;
  }
  case 18:  {
   _DefineNumericMacro(20554,1);
   _DefineNumericMacro(20576,1);
   break;
  }
  case 19:  {
   _DefineNumericMacro(20591,1);
   break;
  }
  case 20:  {
   _DefineNumericMacro(20601,1);
   break;
  }
  case 21:  {
   _DefineNumericMacro(20611,1);
   break;
  }
  case 22:  {
   _DefineNumericMacro(20619,1);
   break;
  }
  case 23:  {
   _DefineNumericMacro(20635,1);
   break;
  }
  case 24:  {
   _DefineNumericMacro(20644,1);
   break;
  }
  case 25:  {
   _DefineNumericMacro(20656,1);
   break;
  }
  case 12:  {
   _DefineNumericMacro(20669,1);
   break;
  }
  case 26:  {
   _DefineNumericMacro(20680,1);
   break;
  }
  default: {
   HEAP32[$vararg_buffer1>>2] = $2;
   _AbEnd(20688,$vararg_buffer1);
   // unreachable;
  }
  }
 } while(0);
 _TgtTranslateInit();
 STACKTOP = sp;return;
}
function _OptVersion($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[3649]|0;
 $3 = HEAP32[11515]|0;
 $4 = (_GetVersionAsString()|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 (_fprintf($2,20334,$vararg_buffer)|0);
 _exit(0);
 // unreachable;
}
function _OptAddSource($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[47027] = 1;
 return;
}
function _OptAllCDecl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[47028] = 1;
 return;
}
function _OptBssName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_ValidSegName($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $1;
  _AbEnd(23475,$vararg_buffer);
  // unreachable;
 } else {
  _SetSegName(3,$1);
  STACKTOP = sp;return;
 }
}
function _OptCheckStack($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _IS_Set(8516,1);
 return;
}
function _OptCodeName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_ValidSegName($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $1;
  _AbEnd(23475,$vararg_buffer);
  // unreachable;
 } else {
  _SetSegName(0,$1);
  STACKTOP = sp;return;
 }
}
function _OptCodeSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$off = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = sp + 16|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (_sscanf($1,23616,$vararg_buffer)|0);
 $5 = ($4|0)!=(1);
 $6 = HEAP32[$2>>2]|0;
 $$off = (($6) + -10)|0;
 $7 = ($$off>>>0)>(990);
 $8 = $5 | $7;
 if ($8) {
  HEAP32[$vararg_buffer2>>2] = $0;
  _AbEnd(23621,$vararg_buffer2);
  // unreachable;
 } else {
  _IS_Set(8588,$6);
  STACKTOP = sp;return;
 }
}
function _OptCPU($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_FindCPU($1)|0);
 HEAP32[3628] = $2;
 switch ($2|0) {
 case 1: case 2: case 3: case 4: case 5: case 7:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  _AbEnd(40804,$vararg_buffer);
  // unreachable;
 }
 }
}
function _OptCreateDep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val$i = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $$idx$val$i = HEAP32[(45968)>>2]|0;
 $2 = ($$idx$val$i|0)==(0);
 if ($2) {
  $3 = (_strlen($1)|0);
  _SB_CopyBuf(45964,$1,$3);
  _SB_Terminate(45964);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(20237,$vararg_buffer);
  // unreachable;
 }
}
function _OptCreateFullDep($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val$i = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $$idx$val$i = HEAP32[(45984)>>2]|0;
 $2 = ($$idx$val$i|0)==(0);
 if ($2) {
  $3 = (_strlen($1)|0);
  _SB_CopyBuf(45980,$1,$3);
  _SB_Terminate(45980);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(20237,$vararg_buffer);
  // unreachable;
 }
}
function _OptDataName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_ValidSegName($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $1;
  _AbEnd(23475,$vararg_buffer);
  // unreachable;
 } else {
  _SetSegName(2,$1);
  STACKTOP = sp;return;
 }
}
function _OptDebug($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[47051]|0;
 $3 = (($2) + 1)<<24>>24;
 HEAP8[47051] = $3;
 return;
}
function _OptDebugInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[47029] = 1;
 return;
}
function _OptDebugOpt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$lcssa = 0, $$017 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = (_fopen($1,40730)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $7 = (___errno_location()|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_strerror($8)|0);
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  _AbEnd(23595,$vararg_buffer);
  // unreachable;
 }
 $5 = (_fgets($2,128,$3)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  (_fclose($3)|0);
  STACKTOP = sp;return;
 }
 while(1) {
  $10 = (_strlen($2)|0);
  $$0 = $10;
  while(1) {
   $11 = ($$0|0)==(0);
   if ($11) {
    $$0$lcssa = 0;
    break;
   }
   $12 = (($$0) + -1)|0;
   $13 = (($2) + ($12)|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = (_iscntrl($15)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $$0$lcssa = $$0;
    break;
   } else {
    $$0 = $12;
   }
  }
  $18 = (($2) + ($$0$lcssa)|0);
  HEAP8[$18>>0] = 0;
  $$017 = $2;
  while(1) {
   $19 = HEAP8[$$017>>0]|0;
   $20 = (_IsBlank($19)|0);
   $21 = ($20|0)==(0);
   $22 = ((($$017)) + 1|0);
   if ($21) {
    break;
   } else {
    $$017 = $22;
   }
  }
  $23 = HEAP8[$$017>>0]|0;
  $24 = $23 << 24 >> 24;
  switch ($24|0) {
  case 59: case 35: case 0:  {
   break;
  }
  case 45:  {
   _DisableOpt($22);
   break;
  }
  case 43:  {
   $$1 = $22;
   label = 13;
   break;
  }
  default: {
   $$1 = $$017;
   label = 13;
  }
  }
  if ((label|0) == 13) {
   label = 0;
   _EnableOpt($$1);
  }
  $25 = (_fgets($2,128,$3)|0);
  $26 = ($25|0)==(0|0);
  if ($26) {
   break;
  }
 }
 (_fclose($3)|0);
 STACKTOP = sp;return;
}
function _OptDebugOptOutput($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[47031] = 1;
 return;
}
function _OptDepTarget($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val$i = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $$idx$val$i = HEAP32[(46000)>>2]|0;
 $2 = ($$idx$val$i|0)==(0);
 if ($2) {
  $3 = (_strlen($1)|0);
  _SB_CopyBuf(45996,$1,$3);
  _SB_Terminate(45996);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(20237,$vararg_buffer);
  // unreachable;
 }
}
function _OptDisableOpt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _DisableOpt($1);
 return;
}
function _OptEnableOpt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _EnableOpt($1);
 return;
}
function _OptIncludeDir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[11471]|0;
 _AddSearchPath($2,$1);
 $3 = HEAP32[11472]|0;
 _AddSearchPath($3,$1);
 return;
}
function _OptListOptSteps($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[3678]|0;
 _ListOptSteps($2);
 _exit(0);
 // unreachable;
}
function _OptListWarnings($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[3678]|0;
 _ListWarnings($2);
 _exit(0);
 // unreachable;
}
function _OptLocalStrings($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _IS_Set(8300,1);
 return;
}
function _OptMemoryModel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[3627]|0;
 $3 = ($2|0)==(-1);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(20237,$vararg_buffer);
  // unreachable;
 }
 $4 = (_FindMemoryModel($1)|0);
 switch ($4|0) {
 case -1:  {
  HEAP32[$vararg_buffer1>>2] = $1;
  _AbEnd(23541,$vararg_buffer1);
  // unreachable;
  break;
 }
 case 2:  {
  HEAP32[$vararg_buffer4>>2] = $1;
  _AbEnd(23566,$vararg_buffer4);
  // unreachable;
  break;
 }
 default: {
  _SetMemoryModel($4);
  STACKTOP = sp;return;
 }
 }
}
function _OptRegisterSpace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 8260;
 $2 = (_sscanf($1,23504,$vararg_buffer)|0);
 $3 = ($2|0)!=(1);
 $4 = HEAP32[2065]|0;
 $5 = ($4>>>0)>(256);
 $or$cond = $3 | $5;
 if ($or$cond) {
  HEAP32[$vararg_buffer1>>2] = $0;
  _AbEnd(23507,$vararg_buffer1);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _OptRegisterVars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _IS_Set(8372,1);
 return;
}
function _OptRodataName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_ValidSegName($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $1;
  _AbEnd(23475,$vararg_buffer);
  // unreachable;
 } else {
  _SetSegName(1,$1);
  STACKTOP = sp;return;
 }
}
function _OptSignedChars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _IS_Set(8480,1);
 return;
}
function _OptStandard($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (_FindStandard($1)|0);
 $3 = ($2|0)==(-1);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  _AbEnd(40804,$vararg_buffer);
  // unreachable;
 }
 $4 = (_IS_Get(8668)|0);
 $5 = ($4|0)==(-1);
 if ($5) {
  _IS_Set(8668,$2);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer2>>2] = $0;
  _AbEnd(23444,$vararg_buffer2);
  // unreachable;
 }
}
function _OptStaticLocals($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _IS_Set(8444,1);
 return;
}
function _OptVerbose($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[47050]|0;
 $3 = (($2) + 1)<<24>>24;
 HEAP8[47050] = $3;
 return;
}
function _OptWritableStrings($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _IS_Set(8264,1);
 return;
}
function _GetLexicalLevel() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11253]|0;
 return ($0|0);
}
function _EnterGlobalLevel() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11253]|0;
 $1 = (($0) + 1)|0;
 HEAP32[11253] = $1;
 $2 = ($0|0)==(0);
 if ($2) {
  $5 = (_xmalloc(864)|0);
  $6 = ((($5)) + 16|0);
  ;HEAP32[$5>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;
  HEAP32[$6>>2] = 211;
  $7 = ((($5)) + 20|0);
  _memset(($7|0),0,844)|0;
  HEAP32[11254] = $5;
  HEAP32[11255] = $5;
  $8 = (_xmalloc(864)|0);
  $9 = ((($8)) + 16|0);
  ;HEAP32[$8>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;HEAP32[$8+12>>2]=0|0;
  HEAP32[$9>>2] = 211;
  $10 = ((($8)) + 20|0);
  _memset(($10|0),0,844)|0;
  HEAP32[11256] = $8;
  HEAP32[11257] = $8;
  return;
 } else {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,23648,23683,219);
  // unreachable;
 }
}
function _LeaveGlobalLevel() {
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11253]|0;
 $1 = (($0) + -1)|0;
 HEAP32[11253] = $1;
 $2 = ($0|0)==(1);
 if (!($2)) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,23697,23683,234);
  // unreachable;
 }
 $5 = HEAP32[11255]|0;
 _CheckSymTable($5);
 $6 = HEAP8[47051]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  HEAP32[11254] = 0;
  HEAP32[11256] = 0;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[11255]|0;
 $9 = HEAP32[3678]|0;
 _PrintSymTable($8,$9,23732,$vararg_buffer);
 $10 = HEAP32[11257]|0;
 _PrintSymTable($10,$9,23752,$vararg_buffer1);
 HEAP32[11254] = 0;
 HEAP32[11256] = 0;
 STACKTOP = sp;return;
}
function _CheckSymTable($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$idx23$val = 0, $$034 = 0, $$035 = 0, $$lobit$i = 0, $$lobit$i27 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $notrhs = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 4|0);
 $$034 = HEAP32[$1>>2]|0;
 $2 = ($$034|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $$035 = $$034;
 }
 while(1) {
  $3 = ((($$035)) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 16389;
  $6 = ($5|0)==(16389);
  do {
   if (!($6)) {
    $7 = $4 & 5;
    $notrhs = ($7|0)!=(0);
    $8 = $4 & 12296;
    $9 = ($8|0)==(4096);
    $10 = $9 & $notrhs;
    do {
     if ($10) {
      $11 = (_SymGetAttr($$035,1)|0);
      $12 = ($11|0)==(0|0);
      if ($12) {
       $13 = $4 & 128;
       $14 = ($13|0)==(0);
       if ($14) {
        $18 = (_IS_Get(13208)|0);
        $19 = ($18|0)==(0);
        if ($19) {
         break;
        }
        $20 = ((($$035)) + 48|0);
        HEAP32[$vararg_buffer1>>2] = $20;
        _Warning(23811,$vararg_buffer1);
        break;
       } else {
        $15 = (_IS_Get(13172)|0);
        $16 = ($15|0)==(0);
        if ($16) {
         break;
        }
        $17 = ((($$035)) + 48|0);
        HEAP32[$vararg_buffer>>2] = $17;
        _Warning(23782,$vararg_buffer);
        break;
       }
      }
     }
    } while(0);
    $21 = $4 & 64;
    $22 = ($21|0)==(0);
    if (!($22)) {
     $$0$idx23$val = HEAP32[$3>>2]|0;
     $$lobit$i27 = $$0$idx23$val & 4096;
     $23 = ($$lobit$i27|0)==(0);
     if ($23) {
      $24 = ((($$035)) + 48|0);
      HEAP32[$vararg_buffer4>>2] = $24;
      _Error(23842,$vararg_buffer4);
      break;
     }
     $$lobit$i = $$0$idx23$val & 8192;
     $25 = ($$lobit$i|0)==(0);
     if ($25) {
      $26 = (_IS_Get(13136)|0);
      $27 = ($26|0)==(0);
      if (!($27)) {
       $28 = ((($$035)) + 48|0);
       HEAP32[$vararg_buffer7>>2] = $28;
       _Warning(23811,$vararg_buffer7);
      }
     }
    }
   }
  } while(0);
  $29 = ((($$035)) + 8|0);
  $$0 = HEAP32[$29>>2]|0;
  $30 = ($$0|0)==(0|0);
  if ($30) {
   break;
  } else {
   $$035 = $$0;
  }
 }
 STACKTOP = sp;return;
}
function _PrintSymTable($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $$01618 = 0, $$017 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 (_fputc(10,$1)|0);
 $4 = (_vfprintf($1,$2,$3)|0);
 (_fputc(10,$1)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$01618 = $4;
  while(1) {
   $6 = (($$01618) + -1)|0;
   (_fputc(61,$1)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   } else {
    $$01618 = $6;
   }
  }
 }
 (_fputc(10,$1)|0);
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  (_fwrite(23769,8,1,$1)|0);
  (_fwrite(23778,3,1,$1)|0);
  STACKTOP = sp;return;
 } else {
  $$017 = $9;
  while(1) {
   _DumpSymEntry($1,$$017);
   $11 = ((($$017)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    break;
   } else {
    $$017 = $12;
   }
  }
  (_fwrite(23778,3,1,$1)|0);
  STACKTOP = sp;return;
 }
}
function _EnterFunctionLevel() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[11253]|0;
 $1 = (($0) + 1)|0;
 HEAP32[11253] = $1;
 $2 = (_xmalloc(136)|0);
 $3 = ((($2)) + 16|0);
 $4 = ((($2)) + 4|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 HEAP32[$3>>2] = 29;
 $5 = ((($2)) + 20|0);
 dest=$5; stop=dest+116|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $6 = HEAP32[11254]|0;
 HEAP32[$2>>2] = $6;
 HEAP32[11254] = $2;
 $7 = (_xmalloc(136)|0);
 $8 = ((($7)) + 16|0);
 $9 = ((($7)) + 4|0);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 HEAP32[$8>>2] = 29;
 $10 = ((($7)) + 20|0);
 dest=$10; stop=dest+116|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $11 = HEAP32[11256]|0;
 HEAP32[$7>>2] = $11;
 HEAP32[11256] = $7;
 $12 = (_xmalloc(48)|0);
 $13 = ((($12)) + 16|0);
 $14 = ((($12)) + 4|0);
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;
 HEAP32[$13>>2] = 7;
 $15 = ((($12)) + 20|0);
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;HEAP32[$15+16>>2]=0|0;HEAP32[$15+20>>2]=0|0;HEAP32[$15+24>>2]=0|0;
 $16 = HEAP32[11258]|0;
 HEAP32[$12>>2] = $16;
 HEAP32[11258] = $12;
 return;
}
function _RememberFunctionLevel($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11253]|0;
 $2 = (($1) + -1)|0;
 HEAP32[11253] = $2;
 $3 = HEAP32[11254]|0;
 $4 = ((($0)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[11256]|0;
 $6 = ((($0)) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 HEAP32[11254] = $8;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 HEAP32[11256] = $10;
 $11 = HEAP32[11258]|0;
 $12 = HEAP32[$11>>2]|0;
 HEAP32[11258] = $12;
 return;
}
function _ReenterFunctionLevel($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11253]|0;
 $2 = (($1) + 1)|0;
 HEAP32[11253] = $2;
 $3 = HEAP32[11254]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$5>>2] = $3;
 $6 = $5;
 HEAP32[11254] = $6;
 $7 = HEAP32[11256]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $7;
 $10 = $9;
 HEAP32[11256] = $10;
 $11 = (_xmalloc(48)|0);
 $12 = ((($11)) + 16|0);
 ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
 HEAP32[$12>>2] = 7;
 $13 = ((($11)) + 20|0);
 ;HEAP32[$13>>2]=0|0;HEAP32[$13+4>>2]=0|0;HEAP32[$13+8>>2]=0|0;HEAP32[$13+12>>2]=0|0;HEAP32[$13+16>>2]=0|0;HEAP32[$13+20>>2]=0|0;HEAP32[$13+24>>2]=0|0;
 HEAP32[11258] = $11;
 return;
}
function _LeaveFunctionLevel() {
 var $$09$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11253]|0;
 $1 = (($0) + -1)|0;
 HEAP32[11253] = $1;
 $2 = HEAP32[11254]|0;
 _CheckSymTable($2);
 $3 = HEAP32[11258]|0;
 _CheckSymTable($3);
 $4 = HEAP32[11258]|0;
 $5 = ((($4)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($4)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if (!($10)) {
   $$09$i = $9;
   while(1) {
    $11 = ((($$09$i)) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    _FreeSymEntry($$09$i);
    $13 = ($12|0)==(0|0);
    if ($13) {
     break;
    } else {
     $$09$i = $12;
    }
   }
  }
  _xfree($4);
 }
 $14 = HEAP32[11254]|0;
 $15 = HEAP32[$14>>2]|0;
 HEAP32[11254] = $15;
 $16 = HEAP32[11256]|0;
 $17 = HEAP32[$16>>2]|0;
 HEAP32[11256] = $17;
 HEAP32[11258] = 0;
 return;
}
function _EnterBlockLevel() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = HEAP32[11253]|0;
 $1 = (($0) + 1)|0;
 HEAP32[11253] = $1;
 $2 = (_xmalloc(72)|0);
 $3 = ((($2)) + 16|0);
 $4 = ((($2)) + 4|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
 HEAP32[$3>>2] = 13;
 $5 = ((($2)) + 20|0);
 dest=$5; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $6 = HEAP32[11254]|0;
 HEAP32[$2>>2] = $6;
 HEAP32[11254] = $2;
 $7 = (_xmalloc(72)|0);
 $8 = ((($7)) + 16|0);
 $9 = ((($7)) + 4|0);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
 HEAP32[$8>>2] = 13;
 $10 = ((($7)) + 20|0);
 dest=$10; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $11 = HEAP32[11256]|0;
 HEAP32[$7>>2] = $11;
 HEAP32[11256] = $7;
 return;
}
function _LeaveBlockLevel() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11253]|0;
 $1 = (($0) + -1)|0;
 HEAP32[11253] = $1;
 $2 = HEAP32[11254]|0;
 _CheckSymTable($2);
 $3 = HEAP32[11254]|0;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[11254] = $4;
 $5 = HEAP32[11256]|0;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[11256] = $6;
 return;
}
function _EnterStructLevel() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_xmalloc(72)|0);
 $1 = ((($0)) + 16|0);
 $2 = ((($0)) + 4|0);
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
 HEAP32[$1>>2] = 13;
 $3 = ((($0)) + 20|0);
 dest=$3; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = HEAP32[11254]|0;
 HEAP32[$0>>2] = $4;
 HEAP32[11254] = $0;
 return;
}
function _LeaveStructLevel() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11254]|0;
 $1 = HEAP32[$0>>2]|0;
 HEAP32[11254] = $1;
 return;
}
function _FindSym($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$010$i$i = 0, $$01317$i = 0, $$09$i$i = 0, $$2$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11254]|0;
 $2 = (_HashStr($0)|0);
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$2$i = 0;
  return ($$2$i|0);
 } else {
  $$01317$i = $1;
 }
 L3: while(1) {
  $4 = ((($$01317$i)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($2>>>0) % ($5>>>0))&-1;
  $7 = (((($$01317$i)) + 20|0) + ($6<<2)|0);
  $$09$i$i = HEAP32[$7>>2]|0;
  $8 = ($$09$i$i|0)==(0|0);
  if (!($8)) {
   $$010$i$i = $$09$i$i;
   while(1) {
    $9 = ((($$010$i$i)) + 48|0);
    $10 = (_strcmp($9,$0)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$2$i = $$010$i$i;
     label = 6;
     break L3;
    }
    $$0$i$i = HEAP32[$$010$i$i>>2]|0;
    $12 = ($$0$i$i|0)==(0|0);
    if ($12) {
     break;
    } else {
     $$010$i$i = $$0$i$i;
    }
   }
  }
  $13 = HEAP32[$$01317$i>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$2$i = 0;
   label = 6;
   break;
  } else {
   $$01317$i = $13;
  }
 }
 if ((label|0) == 6) {
  return ($$2$i|0);
 }
 return (0)|0;
}
function _FindGlobalSym($0) {
 $0 = $0|0;
 var $$0$i = 0, $$010$i = 0, $$08$i = 0, $$09$i = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11255]|0;
 $2 = (_HashStr($0)|0);
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2>>>0) % ($4>>>0))&-1;
 $6 = (((($1)) + 20|0) + ($5<<2)|0);
 $$09$i = HEAP32[$6>>2]|0;
 $7 = ($$09$i|0)==(0|0);
 if ($7) {
  $$08$i = 0;
  return ($$08$i|0);
 } else {
  $$010$i = $$09$i;
 }
 while(1) {
  $8 = ((($$010$i)) + 48|0);
  $9 = (_strcmp($8,$0)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $$08$i = $$010$i;
   label = 4;
   break;
  }
  $$0$i = HEAP32[$$010$i>>2]|0;
  $11 = ($$0$i|0)==(0|0);
  if ($11) {
   $$08$i = 0;
   label = 4;
   break;
  } else {
   $$010$i = $$0$i;
  }
 }
 if ((label|0) == 4) {
  return ($$08$i|0);
 }
 return (0)|0;
}
function _FindLocalSym($0) {
 $0 = $0|0;
 var $$0$i = 0, $$010$i = 0, $$08$i = 0, $$09$i = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11254]|0;
 $2 = (_HashStr($0)|0);
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2>>>0) % ($4>>>0))&-1;
 $6 = (((($1)) + 20|0) + ($5<<2)|0);
 $$09$i = HEAP32[$6>>2]|0;
 $7 = ($$09$i|0)==(0|0);
 if ($7) {
  $$08$i = 0;
  return ($$08$i|0);
 } else {
  $$010$i = $$09$i;
 }
 while(1) {
  $8 = ((($$010$i)) + 48|0);
  $9 = (_strcmp($8,$0)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $$08$i = $$010$i;
   label = 4;
   break;
  }
  $$0$i = HEAP32[$$010$i>>2]|0;
  $11 = ($$0$i|0)==(0|0);
  if ($11) {
   $$08$i = 0;
   label = 4;
   break;
  } else {
   $$010$i = $$0$i;
  }
 }
 if ((label|0) == 4) {
  return ($$08$i|0);
 }
 return (0)|0;
}
function _FindTagSym($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$010$i$i = 0, $$01317$i = 0, $$09$i$i = 0, $$2$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11256]|0;
 $2 = (_HashStr($0)|0);
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$2$i = 0;
  return ($$2$i|0);
 } else {
  $$01317$i = $1;
 }
 L3: while(1) {
  $4 = ((($$01317$i)) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($2>>>0) % ($5>>>0))&-1;
  $7 = (((($$01317$i)) + 20|0) + ($6<<2)|0);
  $$09$i$i = HEAP32[$7>>2]|0;
  $8 = ($$09$i$i|0)==(0|0);
  if (!($8)) {
   $$010$i$i = $$09$i$i;
   while(1) {
    $9 = ((($$010$i$i)) + 48|0);
    $10 = (_strcmp($9,$0)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$2$i = $$010$i$i;
     label = 6;
     break L3;
    }
    $$0$i$i = HEAP32[$$010$i$i>>2]|0;
    $12 = ($$0$i$i|0)==(0|0);
    if ($12) {
     break;
    } else {
     $$010$i$i = $$0$i$i;
    }
   }
  }
  $13 = HEAP32[$$01317$i>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   $$2$i = 0;
   label = 6;
   break;
  } else {
   $$01317$i = $13;
  }
 }
 if ((label|0) == 6) {
  return ($$2$i|0);
 }
 return (0)|0;
}
function _FindStructField($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$idx$val = 0, $$0$i = 0, $$010$i = 0, $$09$i = 0, $$1 = 0, $$idx$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $2 = $$idx$val & 15;
 $3 = ($2|0)==(13);
 $4 = ((($0)) + 8|0);
 $$ = $3 ? $4 : $0;
 $$$idx$val = HEAP32[$$>>2]|0;
 $5 = $$$idx$val & 112;
 $6 = ($5|0)==(64);
 if (!($6)) {
  $$1 = 0;
  return ($$1|0);
 }
 $7 = (_GetSymEntry($$)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,23864,23683,500);
  // unreachable;
 }
 $11 = ((($7)) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $$1 = 0;
  return ($$1|0);
 }
 $14 = (_HashStr($1)|0);
 $15 = ((($12)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14>>>0) % ($16>>>0))&-1;
 $18 = (((($12)) + 20|0) + ($17<<2)|0);
 $$09$i = HEAP32[$18>>2]|0;
 $19 = ($$09$i|0)==(0|0);
 if ($19) {
  $$1 = 0;
  return ($$1|0);
 } else {
  $$010$i = $$09$i;
 }
 while(1) {
  $20 = ((($$010$i)) + 48|0);
  $21 = (_strcmp($20,$1)|0);
  $22 = ($21|0)==(0);
  if ($22) {
   $$1 = $$010$i;
   label = 8;
   break;
  }
  $$0$i = HEAP32[$$010$i>>2]|0;
  $23 = ($$0$i|0)==(0|0);
  if ($23) {
   $$1 = 0;
   label = 8;
   break;
  } else {
   $$010$i = $$0$i;
  }
 }
 if ((label|0) == 8) {
  return ($$1|0);
 }
 return (0)|0;
}
function _AddStructSym($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$010$i = 0, $$09$i = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$off = (($1) + -16385)|0;
 $4 = ($$off>>>0)<(2);
 if (!($4)) {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,23876,23683,555);
  // unreachable;
 }
 $7 = HEAP32[11256]|0;
 $8 = (_HashStr($0)|0);
 $9 = ((($7)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8>>>0) % ($10>>>0))&-1;
 $12 = (((($7)) + 20|0) + ($11<<2)|0);
 $$09$i = HEAP32[$12>>2]|0;
 $13 = ($$09$i|0)==(0|0);
 L4: do {
  if (!($13)) {
   $$010$i = $$09$i;
   while(1) {
    $14 = ((($$010$i)) + 48|0);
    $15 = (_strcmp($14,$0)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     break;
    }
    $$0$i = HEAP32[$$010$i>>2]|0;
    $17 = ($$0$i|0)==(0|0);
    if ($17) {
     break L4;
    } else {
     $$010$i = $$0$i;
    }
   }
   $18 = ((($$010$i)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & 16399;
   $21 = ($20|0)==($1|0);
   if (!($21)) {
    HEAP32[$vararg_buffer>>2] = $0;
    _Error(28884,$vararg_buffer);
    $$0 = $$010$i;
    STACKTOP = sp;return ($$0|0);
   }
   $22 = ($2|0)==(0);
   if ($22) {
    $$0 = $$010$i;
    STACKTOP = sp;return ($$0|0);
   }
   $23 = ((($$010$i)) + 40|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = ((($$010$i)) + 36|0);
    HEAP32[$26>>2] = $3;
    HEAP32[$23>>2] = $2;
    $$0 = $$010$i;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$vararg_buffer1>>2] = $0;
    _Error(23914,$vararg_buffer1);
    $$0 = $$010$i;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $27 = (_NewSymEntry($0,$1)|0);
 $28 = ((($27)) + 36|0);
 HEAP32[$28>>2] = $3;
 $29 = ((($27)) + 40|0);
 HEAP32[$29>>2] = $2;
 $30 = HEAP32[11256]|0;
 $31 = ((($27)) + 48|0);
 $32 = (_HashStr($31)|0);
 $33 = ((($30)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32>>>0) % ($34>>>0))&-1;
 $36 = ((($30)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 $39 = $37;
 if (!($38)) {
  $40 = ((($37)) + 8|0);
  HEAP32[$40>>2] = $27;
 }
 $41 = ((($27)) + 4|0);
 HEAP32[$41>>2] = $39;
 HEAP32[$36>>2] = $27;
 $42 = ((($30)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if ($44) {
  HEAP32[$42>>2] = $27;
 }
 $45 = ((($30)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[$45>>2] = $47;
 $48 = (((($30)) + 20|0) + ($35<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[$27>>2] = $49;
 HEAP32[$48>>2] = $27;
 $50 = ((($27)) + 16|0);
 HEAP32[$50>>2] = $30;
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _AddBitField($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$010$i = 0, $$09$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $4 = HEAP32[11254]|0;
 $5 = (_HashStr($0)|0);
 $6 = ((($4)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5>>>0) % ($7>>>0))&-1;
 $9 = (((($4)) + 20|0) + ($8<<2)|0);
 $$09$i = HEAP32[$9>>2]|0;
 $10 = ($$09$i|0)==(0|0);
 L1: do {
  if (!($10)) {
   $$010$i = $$09$i;
   while(1) {
    $11 = ((($$010$i)) + 48|0);
    $12 = (_strcmp($11,$0)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     break;
    }
    $$0$i = HEAP32[$$010$i>>2]|0;
    $14 = ($$0$i|0)==(0|0);
    if ($14) {
     break L1;
    } else {
     $$010$i = $$0$i;
    }
   }
   HEAP32[$vararg_buffer>>2] = $0;
   _Error(23914,$vararg_buffer);
   $$0 = $$010$i;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $15 = (_NewSymEntry($0,16388)|0);
 $16 = ((($15)) + 24|0);
 HEAP32[$16>>2] = 10956;
 $17 = ((($15)) + 36|0);
 HEAP32[$17>>2] = $1;
 $18 = ((($15)) + 40|0);
 HEAP32[$18>>2] = $2;
 $19 = ((($15)) + 44|0);
 HEAP32[$19>>2] = $3;
 $20 = HEAP32[11254]|0;
 $21 = ((($15)) + 48|0);
 $22 = (_HashStr($21)|0);
 $23 = ((($20)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22>>>0) % ($24>>>0))&-1;
 $26 = ((($20)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 $29 = $27;
 if (!($28)) {
  $30 = ((($27)) + 8|0);
  HEAP32[$30>>2] = $15;
 }
 $31 = ((($15)) + 4|0);
 HEAP32[$31>>2] = $29;
 HEAP32[$26>>2] = $15;
 $32 = ((($20)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0|0);
 if ($34) {
  HEAP32[$32>>2] = $15;
 }
 $35 = ((($20)) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$35>>2] = $37;
 $38 = (((($20)) + 20|0) + ($25<<2)|0);
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$15>>2] = $39;
 HEAP32[$38>>2] = $15;
 $40 = ((($15)) + 16|0);
 HEAP32[$40>>2] = $20;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _AddConstSym($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$010$i = 0, $$09$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = $2 & 48;
 $5 = ($4|0)==(48);
 $6 = HEAP32[11255]|0;
 $7 = HEAP32[11254]|0;
 $8 = $5 ? $6 : $7;
 $9 = (_HashStr($0)|0);
 $10 = ((($8)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9>>>0) % ($11>>>0))&-1;
 $13 = (((($8)) + 20|0) + ($12<<2)|0);
 $$09$i = HEAP32[$13>>2]|0;
 $14 = ($$09$i|0)==(0|0);
 L1: do {
  if (!($14)) {
   $$010$i = $$09$i;
   while(1) {
    $15 = ((($$010$i)) + 48|0);
    $16 = (_strcmp($15,$0)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     break;
    }
    $$0$i = HEAP32[$$010$i>>2]|0;
    $18 = ($$0$i|0)==(0|0);
    if ($18) {
     break L1;
    } else {
     $$010$i = $$0$i;
    }
   }
   $19 = ((($$010$i)) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $20 & 32;
   $22 = ($21|0)==(0);
   if ($22) {
    HEAP32[$vararg_buffer>>2] = $0;
    _Error(28884,$vararg_buffer);
    $$0 = $$010$i;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$vararg_buffer1>>2] = $0;
    _Error(23914,$vararg_buffer1);
    $$0 = $$010$i;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $23 = (_NewSymEntry($0,$2)|0);
 $24 = (_TypeDup($1)|0);
 $25 = ((($23)) + 24|0);
 HEAP32[$25>>2] = $24;
 $26 = ((($23)) + 36|0);
 HEAP32[$26>>2] = $3;
 $27 = ((($23)) + 48|0);
 $28 = (_HashStr($27)|0);
 $29 = HEAP32[$10>>2]|0;
 $30 = (($28>>>0) % ($29>>>0))&-1;
 $31 = ((($8)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 $34 = $32;
 if (!($33)) {
  $35 = ((($32)) + 8|0);
  HEAP32[$35>>2] = $23;
 }
 $36 = ((($23)) + 4|0);
 HEAP32[$36>>2] = $34;
 HEAP32[$31>>2] = $23;
 $37 = ((($8)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  HEAP32[$37>>2] = $23;
 }
 $40 = ((($8)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = (((($8)) + 20|0) + ($30<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$23>>2] = $44;
 HEAP32[$43>>2] = $23;
 $45 = ((($23)) + 16|0);
 HEAP32[$45>>2] = $8;
 $$0 = $23;
 STACKTOP = sp;return ($$0|0);
}
function _AddLabelSym($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$010$i = 0, $$09$i = 0, $$idx = 0, $$idx$val = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11258]|0;
 $3 = (_HashStr($0)|0);
 $4 = ((($2)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3>>>0) % ($5>>>0))&-1;
 $7 = (((($2)) + 20|0) + ($6<<2)|0);
 $$09$i = HEAP32[$7>>2]|0;
 $8 = ($$09$i|0)==(0|0);
 L1: do {
  if (!($8)) {
   $$010$i = $$09$i;
   while(1) {
    $9 = ((($$010$i)) + 48|0);
    $10 = (_strcmp($9,$0)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     break;
    }
    $$0$i = HEAP32[$$010$i>>2]|0;
    $12 = ($$0$i|0)==(0|0);
    if ($12) {
     break L1;
    } else {
     $$010$i = $$0$i;
    }
   }
   $$idx = ((($$010$i)) + 20|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $13 = $1 & 4096;
   $14 = $13 & $$idx$val;
   $15 = ($14|0)==(0);
   if ($15) {
    $17 = $$idx$val;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    _Error(23943,$vararg_buffer);
    $$pre = HEAP32[$$idx>>2]|0;
    $17 = $$pre;
   }
   $16 = $17 | $1;
   HEAP32[$$idx>>2] = $16;
   $$0 = $$010$i;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = $1 | 64;
 $19 = (_NewSymEntry($0,$18)|0);
 $20 = (_GetLocalLabel()|0);
 $21 = ((($19)) + 36|0);
 HEAP32[$21>>2] = $20;
 $22 = (_LocalLabelName($20)|0);
 $23 = (_xstrdup($22)|0);
 $24 = ((($19)) + 32|0);
 HEAP32[$24>>2] = $23;
 $25 = HEAP32[11258]|0;
 $26 = ((($19)) + 48|0);
 $27 = (_HashStr($26)|0);
 $28 = ((($25)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27>>>0) % ($29>>>0))&-1;
 $31 = ((($25)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 $34 = $32;
 if (!($33)) {
  $35 = ((($32)) + 8|0);
  HEAP32[$35>>2] = $19;
 }
 $36 = ((($19)) + 4|0);
 HEAP32[$36>>2] = $34;
 HEAP32[$31>>2] = $19;
 $37 = ((($25)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  HEAP32[$37>>2] = $19;
 }
 $40 = ((($25)) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 HEAP32[$40>>2] = $42;
 $43 = (((($25)) + 20|0) + ($30<<2)|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$19>>2] = $44;
 HEAP32[$43>>2] = $19;
 $45 = ((($19)) + 16|0);
 HEAP32[$45>>2] = $25;
 $$0 = $19;
 STACKTOP = sp;return ($$0|0);
}
function _AddLocalSym($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$010$i = 0, $$09$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = HEAP32[11254]|0;
 $5 = (_HashStr($0)|0);
 $6 = ((($4)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5>>>0) % ($7>>>0))&-1;
 $9 = (((($4)) + 20|0) + ($8<<2)|0);
 $$09$i = HEAP32[$9>>2]|0;
 $10 = ($$09$i|0)==(0|0);
 L1: do {
  if (!($10)) {
   $$010$i = $$09$i;
   while(1) {
    $11 = ((($$010$i)) + 48|0);
    $12 = (_strcmp($11,$0)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     break;
    }
    $$0$i = HEAP32[$$010$i>>2]|0;
    $14 = ($$0$i|0)==(0|0);
    if ($14) {
     break L1;
    } else {
     $$010$i = $$0$i;
    }
   }
   HEAP32[$vararg_buffer>>2] = $0;
   _Error(23914,$vararg_buffer);
   $$0 = $$010$i;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $15 = (_NewSymEntry($0,$2)|0);
 $16 = (_TypeDup($1)|0);
 $17 = ((($15)) + 24|0);
 HEAP32[$17>>2] = $16;
 $18 = $2 & 1;
 $19 = ($18|0)==(0);
 do {
  if ($19) {
   $21 = $2 & 2;
   $22 = ($21|0)==(0);
   if (!($22)) {
    $23 = ((($15)) + 36|0);
    HEAP32[$23>>2] = $3;
    $24 = HEAP32[11252]|0;
    $25 = ((($15)) + 40|0);
    HEAP32[$25>>2] = $24;
    break;
   }
   $26 = $2 & 8;
   $27 = ($26|0)==(0);
   if (!($27)) {
    $28 = ((($15)) + 36|0);
    HEAP32[$28>>2] = $3;
    _SymSetAsmName($15);
    break;
   }
   $29 = $2 & 4;
   $30 = ($29|0)==(0);
   if (!($30)) {
    $31 = ((($15)) + 36|0);
    HEAP32[$31>>2] = $3;
    $32 = (_LocalLabelName($3)|0);
    $33 = (_xstrdup($32)|0);
    $34 = ((($15)) + 32|0);
    HEAP32[$34>>2] = $33;
    break;
   }
   $35 = $2 & 16387;
   $36 = ($35|0)==(16387);
   if ($36) {
    $37 = ((($15)) + 36|0);
    HEAP32[$37>>2] = $3;
    break;
   } else {
    HEAP32[$vararg_buffer1>>2] = $2;
    _Internal(23980,$vararg_buffer1);
    // unreachable;
   }
  } else {
   $20 = ((($15)) + 36|0);
   HEAP32[$20>>2] = $3;
  }
 } while(0);
 $38 = HEAP32[11254]|0;
 $39 = ((($15)) + 48|0);
 $40 = (_HashStr($39)|0);
 $41 = ((($38)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($40>>>0) % ($42>>>0))&-1;
 $44 = ((($38)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 $47 = $45;
 if (!($46)) {
  $48 = ((($45)) + 8|0);
  HEAP32[$48>>2] = $15;
 }
 $49 = ((($15)) + 4|0);
 HEAP32[$49>>2] = $47;
 HEAP32[$44>>2] = $15;
 $50 = ((($38)) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  HEAP32[$50>>2] = $15;
 }
 $53 = ((($38)) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[$53>>2] = $55;
 $56 = (((($38)) + 20|0) + ($43<<2)|0);
 $57 = HEAP32[$56>>2]|0;
 HEAP32[$15>>2] = $57;
 HEAP32[$56>>2] = $15;
 $58 = ((($15)) + 16|0);
 HEAP32[$58>>2] = $38;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _AddGlobalSym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$010$i = 0, $$076 = 0, $$09$i = 0, $$idx$val = 0, $$idx83$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond80 = 0, $or$cond82 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$idx$val = HEAP32[$1>>2]|0;
 $3 = $$idx$val & 15;
 $4 = ($3|0)==(14);
 $5 = HEAP32[11255]|0;
 $6 = HEAP32[11254]|0;
 $7 = $4 ? $5 : $6;
 $8 = (_HashStr($0)|0);
 $9 = ((($7)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8>>>0) % ($10>>>0))&-1;
 $12 = (((($7)) + 20|0) + ($11<<2)|0);
 $$09$i = HEAP32[$12>>2]|0;
 $13 = ($$09$i|0)==(0|0);
 L1: do {
  if (!($13)) {
   $$010$i = $$09$i;
   while(1) {
    $14 = ((($$010$i)) + 48|0);
    $15 = (_strcmp($14,$0)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     break;
    }
    $$0$i = HEAP32[$$010$i>>2]|0;
    $17 = ($$0$i|0)==(0|0);
    if ($17) {
     break L1;
    } else {
     $$010$i = $$0$i;
    }
   }
   $18 = ((($$010$i)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $19 & 16384;
   $21 = ($20|0)==(0);
   if (!($21)) {
    HEAP32[$vararg_buffer>>2] = $0;
    _Error(23914,$vararg_buffer);
    STACKTOP = sp;return ($$010$i|0);
   }
   $22 = ((($$010$i)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($3|0)==(12);
   do {
    if ($24) {
     $$idx83$val = HEAP32[$23>>2]|0;
     $25 = $$idx83$val & 15;
     $26 = ($25|0)==(12);
     if ($26) {
      $27 = (_GetElementCount($1)|0);
      $28 = (_GetElementCount($23)|0);
      $notlhs = ($27|0)==(-1);
      $notrhs = ($28|0)==(-1);
      $or$cond$not = $notlhs | $notrhs;
      $29 = ($27|0)==($28|0);
      $or$cond80 = $29 | $or$cond$not;
      if ($or$cond80) {
       $30 = ((($1)) + 8|0);
       $31 = ((($23)) + 8|0);
       $32 = (_TypeCmp($30,$31)|0);
       $33 = ($32>>>0)<(4);
       if (!($33)) {
        if (!($notrhs)) {
         break;
        }
        _SetElementCount($23,$27);
        break;
       }
      }
      HEAP32[$vararg_buffer1>>2] = $0;
      _Error(24015,$vararg_buffer1);
      STACKTOP = sp;return ($$010$i|0);
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
   } while(0);
   if ((label|0) == 13) {
    $34 = (_TypeCmp($23,$1)|0);
    $35 = ($34>>>0)<(4);
    if ($35) {
     HEAP32[$vararg_buffer4>>2] = $0;
     _Error(24015,$vararg_buffer4);
     STACKTOP = sp;return ($$010$i|0);
    }
    if ($4) {
     $36 = (_GetFuncDesc($1)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $37 & 1;
     $39 = ($38|0)==(0);
     if ($39) {
      $40 = ((($$010$i)) + 36|0);
      HEAP32[$40>>2] = $36;
      _SetFuncDesc($23,$36);
     }
    }
   }
   $41 = $2 & 8;
   $42 = ($41|0)==(0);
   if ($42) {
    $43 = HEAP32[$18>>2]|0;
    $44 = $43 & 8;
    $45 = ($44|0)==(0);
    if (!($45)) {
     HEAP32[$vararg_buffer7>>2] = $0;
     _Warning(24042,$vararg_buffer7);
    }
   }
   $46 = $2 & 4104;
   $47 = ($46|0)==(8);
   $or$cond82 = $47 | $4;
   $48 = $2 & -9;
   $$076 = $or$cond82 ? $48 : $2;
   $49 = $$076 & 8;
   $50 = ($49|0)==(0);
   if (!($50)) {
    $51 = HEAP32[$18>>2]|0;
    $52 = $51 & 8;
    $53 = ($52|0)==(0);
    if ($53) {
     HEAP32[$vararg_buffer10>>2] = $0;
     _Warning(24101,$vararg_buffer10);
    }
   }
   $54 = HEAP32[$18>>2]|0;
   $55 = $54 | $$076;
   HEAP32[$18>>2] = $55;
   STACKTOP = sp;return ($$010$i|0);
  }
 } while(0);
 $56 = (_NewSymEntry($0,$2)|0);
 $57 = (_TypeDup($1)|0);
 $58 = ((($56)) + 24|0);
 HEAP32[$58>>2] = $57;
 if ($4) {
  $59 = (_GetFuncDesc($57)|0);
  $60 = ((($56)) + 36|0);
  HEAP32[$60>>2] = $59;
  $61 = ((($56)) + 40|0);
  HEAP32[$61>>2] = 0;
 }
 _SymSetAsmName($56);
 $62 = ((($56)) + 48|0);
 $63 = (_HashStr($62)|0);
 $64 = HEAP32[$9>>2]|0;
 $65 = (($63>>>0) % ($64>>>0))&-1;
 $66 = ((($7)) + 8|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)==(0|0);
 $69 = $67;
 if (!($68)) {
  $70 = ((($67)) + 8|0);
  HEAP32[$70>>2] = $56;
 }
 $71 = ((($56)) + 4|0);
 HEAP32[$71>>2] = $69;
 HEAP32[$66>>2] = $56;
 $72 = ((($7)) + 4|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if (!($74)) {
  $75 = ((($7)) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$75>>2] = $77;
  $78 = (((($7)) + 20|0) + ($65<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  HEAP32[$56>>2] = $79;
  HEAP32[$78>>2] = $56;
  $80 = ((($56)) + 16|0);
  HEAP32[$80>>2] = $7;
  STACKTOP = sp;return ($56|0);
 }
 HEAP32[$72>>2] = $56;
 $75 = ((($7)) + 12|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = (($76) + 1)|0;
 HEAP32[$75>>2] = $77;
 $78 = (((($7)) + 20|0) + ($65<<2)|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[$56>>2] = $79;
 HEAP32[$78>>2] = $56;
 $80 = ((($56)) + 16|0);
 HEAP32[$80>>2] = $7;
 STACKTOP = sp;return ($56|0);
}
function _GetSymTab() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11254]|0;
 return ($0|0);
}
function _GetGlobalSymTab() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11255]|0;
 return ($0|0);
}
function _SymIsLocal($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[11254]|0;
 $4 = ($2|0)==($3|0);
 $5 = HEAP32[11256]|0;
 $6 = ($2|0)==($5|0);
 $7 = $4 | $6;
 $8 = $7&1;
 return ($8|0);
}
function _MakeZPSym($0) {
 $0 = $0|0;
 var $$0$i = 0, $$010$i = 0, $$09$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[11254]|0;
 $2 = (_HashStr($0)|0);
 $3 = ((($1)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2>>>0) % ($4>>>0))&-1;
 $6 = (((($1)) + 20|0) + ($5<<2)|0);
 $$09$i = HEAP32[$6>>2]|0;
 $7 = ($$09$i|0)==(0|0);
 L1: do {
  if (!($7)) {
   $$010$i = $$09$i;
   while(1) {
    $8 = ((($$010$i)) + 48|0);
    $9 = (_strcmp($8,$0)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     break;
    }
    $$0$i = HEAP32[$$010$i>>2]|0;
    $11 = ($$0$i|0)==(0|0);
    if ($11) {
     break L1;
    } else {
     $$010$i = $$0$i;
    }
   }
   $12 = ((($$010$i)) + 20|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 | 32768;
   HEAP32[$12>>2] = $14;
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $0;
 _Error(37443,$vararg_buffer);
 STACKTOP = sp;return;
}
function _EmitExternals() {
 var $$0 = 0, $$018 = 0, $$019 = 0, $$lobit$i15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11254]|0;
 $1 = ((($0)) + 4|0);
 $$018 = HEAP32[$1>>2]|0;
 $2 = ($$018|0)==(0|0);
 if ($2) {
  return;
 } else {
  $$019 = $$018;
 }
 while(1) {
  $3 = ((($$019)) + 20|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 8;
  $6 = ($5|0)==(0);
  do {
   if (!($6)) {
    $7 = $4 & 12288;
    $8 = ($7|0)==(8192);
    if ($8) {
     $9 = ((($$019)) + 48|0);
     $10 = $4 & 32768;
     _g_defimport($9,$10);
     break;
    }
    $$lobit$i15 = $4 & 4096;
    $11 = ($$lobit$i15|0)==(0);
    if (!($11)) {
     $12 = $4 & 32768;
     $13 = ((($$019)) + 48|0);
     _g_defexport($13,$12);
    }
   }
  } while(0);
  $14 = ((($$019)) + 8|0);
  $$0 = HEAP32[$14>>2]|0;
  $15 = ($$0|0)==(0|0);
  if ($15) {
   break;
  } else {
   $$019 = $$0;
  }
 }
 return;
}
function _EmitDebugInfo() {
 var $$ = 0, $$0 = 0, $$024 = 0, $$025 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[47029]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[11253]|0;
 $3 = ($2|0)==(1);
 $$ = $3 ? 24156 : 24167;
 $4 = HEAP32[11254]|0;
 $5 = ((($4)) + 4|0);
 $$024 = HEAP32[$5>>2]|0;
 $6 = ($$024|0)==(0|0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  $$025 = $$024;
 }
 while(1) {
  $7 = ((($$025)) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 16416;
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    $11 = $8 & 1;
    $12 = ($11|0)==(0);
    if (!($12)) {
     $13 = ((($$025)) + 48|0);
     $14 = ((($$025)) + 36|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$vararg_buffer>>2] = $$;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $13;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $15;
     _AddTextLine(24177,$vararg_buffer);
     break;
    }
    $16 = $8 & 2;
    $17 = ($16|0)==(0);
    if (!($17)) {
     $18 = ((($$025)) + 48|0);
     $19 = ((($$025)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     HEAP32[$vararg_buffer3>>2] = $$;
     $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $18;
     $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
     HEAP32[$vararg_ptr7>>2] = $20;
     _AddTextLine(24202,$vararg_buffer3);
     break;
    }
    $21 = $8 & 12288;
    $22 = ($21|0)==(8192);
    if ($22) {
     $23 = ((($$025)) + 32|0);
     $24 = $8 & 8;
     $25 = ((($$025)) + 48|0);
     $26 = ($24|0)!=(0);
     $27 = $26 ? 34634 : 34641;
     $28 = HEAP32[$23>>2]|0;
     HEAP32[$vararg_buffer8>>2] = $$;
     $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
     HEAP32[$vararg_ptr11>>2] = $25;
     $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
     HEAP32[$vararg_ptr12>>2] = $27;
     $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
     HEAP32[$vararg_ptr13>>2] = $28;
     _AddTextLine(24242,$vararg_buffer8);
    }
   }
  } while(0);
  $29 = ((($$025)) + 8|0);
  $$0 = HEAP32[$29>>2]|0;
  $30 = ($$0|0)==(0|0);
  if ($30) {
   break;
  } else {
   $$025 = $$0;
  }
 }
 STACKTOP = sp;return;
}
function _g_preamble() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer36 = sp + 136|0;
 $vararg_buffer34 = sp + 128|0;
 $vararg_buffer32 = sp + 120|0;
 $vararg_buffer29 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _AddTextLine(24267,$vararg_buffer);
 $0 = (_GetVersionAsString()|0);
 HEAP32[$vararg_buffer1>>2] = $0;
 _AddTextLine(24269,$vararg_buffer1);
 _AddTextLine(24267,$vararg_buffer3);
 $1 = (_GetVersionAsString()|0);
 HEAP32[$vararg_buffer5>>2] = $1;
 _AddTextLine(24299,$vararg_buffer5);
 $2 = HEAP32[3628]|0;
 switch ($2|0) {
 case 1:  {
  _AddTextLine(24328,$vararg_buffer8);
  break;
 }
 case 2:  {
  _AddTextLine(24345,$vararg_buffer10);
  break;
 }
 case 3:  {
  _AddTextLine(24363,$vararg_buffer12);
  break;
 }
 case 4:  {
  _AddTextLine(24382,$vararg_buffer14);
  break;
 }
 case 5:  {
  _AddTextLine(24400,$vararg_buffer16);
  break;
 }
 case 7:  {
  _AddTextLine(24418,$vararg_buffer18);
  break;
 }
 default: {
  HEAP32[$vararg_buffer20>>2] = $2;
  _Internal(24438,$vararg_buffer20);
  // unreachable;
 }
 }
 _AddTextLine(24454,$vararg_buffer23);
 _AddTextLine(24466,$vararg_buffer25);
 _AddTextLine(24482,$vararg_buffer27);
 $3 = HEAP8[47029]|0;
 $4 = ($3<<24>>24)!=(0);
 $5 = $4 ? 24493 : 24496;
 HEAP32[$vararg_buffer29>>2] = $5;
 _AddTextLine(24500,$vararg_buffer29);
 _AddTextLine(24515,$vararg_buffer32);
 _AddTextLine(24553,$vararg_buffer34);
 _AddTextLine(24611,$vararg_buffer36);
 STACKTOP = sp;return;
}
function _g_fileinfo($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = HEAP8[47029]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[11210]|0;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 _TS_AddLine($6,24632,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_userodata() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _UseDataSeg(1);
 return;
}
function _g_usedata() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _UseDataSeg(2);
 return;
}
function _g_usebss() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _UseDataSeg(3);
 return;
}
function _g_segname($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$in = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 switch ($0|0) {
 case 1:  {
  $1 = HEAP32[11209]|0;
  $2 = ((($1)) + 12|0);
  $$0$in = $2;
  break;
 }
 case 2:  {
  $3 = HEAP32[11209]|0;
  $4 = ((($3)) + 8|0);
  $$0$in = $4;
  break;
 }
 case 3:  {
  $5 = HEAP32[11209]|0;
  $6 = ((($5)) + 16|0);
  $$0$in = $6;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $$0 = HEAP32[$$0$in>>2]|0;
 $7 = ($$0|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (_GetSegName($0)|0);
 HEAP32[$vararg_buffer>>2] = $8;
 _DS_AddLine($$0,24660,$vararg_buffer);
 STACKTOP = sp;return;
}
function _sizeofarg($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $1 = $0 >>> 9;
  $2 = $1 & 1;
  $3 = (2 - ($2))|0;
  $$0 = $3;
  break;
 }
 case 1:  {
  $$0 = 2;
  break;
 }
 case 0:  {
  $$0 = 4;
  break;
 }
 case 4:  {
  $$0 = 4;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 return ($$0|0);
}
function _typeerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0 & 7;
 $2 = ($1|0)==(4);
 if ($2) {
  _Fatal(24674,$vararg_buffer);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer1>>2] = $0;
  $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr3>>2] = $1;
  _Internal(24719,$vararg_buffer1);
  // unreachable;
 }
}
function _pop($0) {
 $0 = $0|0;
 var $$0$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $trunc$i = $0&255;
 $trunc$i$clear = $trunc$i & 7;
 switch ($trunc$i$clear<<24>>24) {
 case 3:  {
  $1 = $0 >>> 9;
  $2 = $1 & 1;
  $3 = (2 - ($2))|0;
  $$0$i = $3;
  break;
 }
 case 1:  {
  $$0$i = 2;
  break;
 }
 case 0:  {
  $$0$i = 4;
  break;
 }
 case 4:  {
  $$0$i = 4;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $4 = HEAP32[11252]|0;
 $5 = (($4) + ($$0$i))|0;
 HEAP32[11252] = $5;
 return ($5|0);
}
function _g_defcodelabel($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11209]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_LocalLabelName($0)|0);
 (_CS_AddLabel($3,$4)|0);
 return;
}
function _g_defdatalabel($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_LocalLabelName($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 _AddDataLine(27725,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_aliasdatalabel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx$val = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 $4 = (_LocalLabelName($0)|0);
 $5 = (_strlen($4)|0);
 _SB_AppendBuf($3,$4,$5);
 _SB_Terminate($3);
 $$idx$val = HEAP32[$3>>2]|0;
 $6 = (_LocalLabelName($1)|0);
 HEAP32[$vararg_buffer>>2] = $$idx$val;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 _AddDataLine(24761,$vararg_buffer);
 _SB_Done($3);
 STACKTOP = sp;return;
}
function _g_defgloblabel($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 _AddDataLine(24774,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_defexport($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[$vararg_buffer1>>2] = $0;
  _AddTextLine(24794,$vararg_buffer1);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $0;
  _AddTextLine(24779,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _g_defimport($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0);
 if ($2) {
  HEAP32[$vararg_buffer1>>2] = $0;
  _AddTextLine(24823,$vararg_buffer1);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer>>2] = $0;
  _AddTextLine(24808,$vararg_buffer);
  STACKTOP = sp;return;
 }
}
function _g_importstartup() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _AddTextLine(24837,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_importmainargs() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _AddTextLine(24863,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_enter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = $0 & 256;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[11259] = -1;
  _AddCodeLine(24890,$vararg_buffer);
  STACKTOP = sp;return;
 } else {
  HEAP32[11259] = $1;
  STACKTOP = sp;return;
 }
}
function _g_leave() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11252]|0;
 $1 = (0 - ($0))|0;
 $2 = HEAP32[11259]|0;
 $3 = ($2|0)>(-1);
 do {
  if ($3) {
   $4 = (($2) - ($0))|0;
   _g_drop($4);
  } else {
   $5 = ($0|0)==(0);
   if ($5) {
    _AddCodeLine(24900,$vararg_buffer5);
    break;
   }
   $6 = ($1>>>0)>(255);
   if ($6) {
    _g_drop($1);
    _AddCodeLine(24900,$vararg_buffer);
    break;
   } else {
    HEAP32[$vararg_buffer1>>2] = $1;
    _AddCodeLine(24910,$vararg_buffer1);
    _AddCodeLine(24921,$vararg_buffer3);
    break;
   }
  }
 } while(0);
 _AddCodeLine(24932,$vararg_buffer7);
 STACKTOP = sp;return;
}
function _g_drop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ($0>>>0)>(255);
 if ($1) {
  _AddCodeLine(24936,$vararg_buffer);
  $2 = $0 & 255;
  HEAP32[$vararg_buffer1>>2] = $2;
  _AddCodeLine(24940,$vararg_buffer1);
  _AddCodeLine(24951,$vararg_buffer3);
  _AddCodeLine(24955,$vararg_buffer5);
  _AddCodeLine(24962,$vararg_buffer7);
  $3 = $0 >>> 8;
  $4 = $3 & 255;
  HEAP32[$vararg_buffer9>>2] = $4;
  _AddCodeLine(24940,$vararg_buffer9);
  _AddCodeLine(24969,$vararg_buffer12);
  _AddCodeLine(24978,$vararg_buffer14);
  _AddCodeLine(24987,$vararg_buffer16);
  STACKTOP = sp;return;
 }
 $5 = ($0>>>0)>(8);
 if ($5) {
  HEAP32[$vararg_buffer18>>2] = $0;
  _AddCodeLine(24910,$vararg_buffer18);
  _AddCodeLine(24991,$vararg_buffer21);
  STACKTOP = sp;return;
 }
 $6 = ($0|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer23>>2] = $0;
 _AddCodeLine(25002,$vararg_buffer23);
 STACKTOP = sp;return;
}
function _g_swap_regvars($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[11252]|0;
 $4 = (($0) - ($3))|0;
 $5 = ($4>>>0)>(255);
 if ($5) {
  _Error(25014,$vararg_buffer);
 }
 $6 = $4 & 255;
 HEAP32[$vararg_buffer1>>2] = $6;
 _AddCodeLine(24910,$vararg_buffer1);
 $7 = ($2|0)==(1);
 if ($7) {
  $8 = (_IS_Get(8588)|0);
  $9 = ($8|0)<(165);
  if ($9) {
   $10 = $1 & 255;
   HEAP32[$vararg_buffer3>>2] = $10;
   _AddCodeLine(25039,$vararg_buffer3);
   _AddCodeLine(25050,$vararg_buffer6);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(25063,$vararg_buffer8);
   HEAP32[$vararg_buffer10>>2] = $1;
   _AddCodeLine(25074,$vararg_buffer10);
   HEAP32[$vararg_buffer13>>2] = $1;
   _AddCodeLine(25089,$vararg_buffer13);
   _AddCodeLine(25104,$vararg_buffer16);
   _AddCodeLine(25108,$vararg_buffer18);
   STACKTOP = sp;return;
  }
 } else {
  $11 = ($2|0)==(2);
  $12 = $1 & 255;
  HEAP32[$vararg_buffer20>>2] = $12;
  _AddCodeLine(25039,$vararg_buffer20);
  if ($11) {
   _AddCodeLine(25119,$vararg_buffer23);
   STACKTOP = sp;return;
  } else {
   $13 = $2 & 255;
   HEAP32[$vararg_buffer25>>2] = $13;
   _AddCodeLine(24940,$vararg_buffer25);
   _AddCodeLine(25132,$vararg_buffer28);
   STACKTOP = sp;return;
  }
 }
}
function _g_save_regvars($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 switch ($1|0) {
 case 1:  {
  HEAP32[$vararg_buffer>>2] = $0;
  _AddCodeLine(25144,$vararg_buffer);
  _AddCodeLine(25159,$vararg_buffer1);
  $13 = HEAP32[11252]|0;
  $14 = (($13) - ($1))|0;
  HEAP32[11252] = $14;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  HEAP32[$vararg_buffer3>>2] = $0;
  _AddCodeLine(25144,$vararg_buffer3);
  $2 = (($0) + 1)|0;
  HEAP32[$vararg_buffer6>>2] = $2;
  _AddCodeLine(25074,$vararg_buffer6);
  _AddCodeLine(25169,$vararg_buffer9);
  $13 = HEAP32[11252]|0;
  $14 = (($13) - ($1))|0;
  HEAP32[11252] = $14;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $3 = (_GetLocalLabel()|0);
  _g_space($1);
  $4 = (($1) + 255)|0;
  $5 = $4 & 255;
  HEAP32[$vararg_buffer11>>2] = $5;
  _AddCodeLine(24910,$vararg_buffer11);
  $6 = $1 & 255;
  HEAP32[$vararg_buffer14>>2] = $6;
  _AddCodeLine(25039,$vararg_buffer14);
  $7 = HEAP32[11209]|0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_LocalLabelName($3)|0);
  (_CS_AddLabel($9,$10)|0);
  $11 = (($0) + -1)|0;
  HEAP32[$vararg_buffer17>>2] = $11;
  _AddCodeLine(25180,$vararg_buffer17);
  _AddCodeLine(25108,$vararg_buffer20);
  _AddCodeLine(25197,$vararg_buffer22);
  _AddCodeLine(25201,$vararg_buffer24);
  $12 = (_LocalLabelName($3)|0);
  HEAP32[$vararg_buffer26>>2] = $12;
  _AddCodeLine(25205,$vararg_buffer26);
  $13 = HEAP32[11252]|0;
  $14 = (($13) - ($1))|0;
  HEAP32[11252] = $14;
  STACKTOP = sp;return;
 }
 }
}
function _g_space($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ($0|0)<(0);
 if ($1) {
  $2 = (0 - ($0))|0;
  _g_drop($2);
  STACKTOP = sp;return;
 }
 $3 = ($0|0)>(255);
 if ($3) {
  _AddCodeLine(24936,$vararg_buffer);
  _AddCodeLine(25212,$vararg_buffer1);
  _AddCodeLine(25219,$vararg_buffer3);
  $4 = $0 & 255;
  HEAP32[$vararg_buffer5>>2] = $4;
  _AddCodeLine(25223,$vararg_buffer5);
  _AddCodeLine(24962,$vararg_buffer7);
  _AddCodeLine(25234,$vararg_buffer9);
  $5 = $0 >>> 8;
  $6 = $5 & 255;
  HEAP32[$vararg_buffer11>>2] = $6;
  _AddCodeLine(25223,$vararg_buffer11);
  _AddCodeLine(24978,$vararg_buffer14);
  _AddCodeLine(24987,$vararg_buffer16);
  STACKTOP = sp;return;
 }
 $7 = ($0|0)>(8);
 if ($7) {
  HEAP32[$vararg_buffer18>>2] = $0;
  _AddCodeLine(24910,$vararg_buffer18);
  _AddCodeLine(25243,$vararg_buffer21);
  STACKTOP = sp;return;
 }
 $8 = ($0|0)==(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer23>>2] = $0;
 _AddCodeLine(25254,$vararg_buffer23);
 STACKTOP = sp;return;
}
function _g_restore_regvars($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $vararg_buffer81 = sp + 264|0;
 $vararg_buffer78 = sp + 256|0;
 $vararg_buffer76 = sp + 248|0;
 $vararg_buffer74 = sp + 240|0;
 $vararg_buffer71 = sp + 232|0;
 $vararg_buffer69 = sp + 224|0;
 $vararg_buffer66 = sp + 216|0;
 $vararg_buffer63 = sp + 208|0;
 $vararg_buffer61 = sp + 200|0;
 $vararg_buffer58 = sp + 192|0;
 $vararg_buffer55 = sp + 184|0;
 $vararg_buffer53 = sp + 176|0;
 $vararg_buffer50 = sp + 168|0;
 $vararg_buffer48 = sp + 160|0;
 $vararg_buffer45 = sp + 152|0;
 $vararg_buffer42 = sp + 144|0;
 $vararg_buffer40 = sp + 136|0;
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer35 = sp + 120|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[11252]|0;
 $4 = (($0) - ($3))|0;
 $5 = ($4>>>0)>(255);
 if ($5) {
  _Error(25014,$vararg_buffer);
 }
 switch ($2|0) {
 case 1:  {
  HEAP32[$vararg_buffer1>>2] = $4;
  _AddCodeLine(24910,$vararg_buffer1);
  _AddCodeLine(25063,$vararg_buffer3);
  HEAP32[$vararg_buffer5>>2] = $1;
  _AddCodeLine(25089,$vararg_buffer5);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  HEAP32[$vararg_buffer8>>2] = $4;
  _AddCodeLine(24910,$vararg_buffer8);
  _AddCodeLine(25063,$vararg_buffer11);
  HEAP32[$vararg_buffer13>>2] = $1;
  _AddCodeLine(25089,$vararg_buffer13);
  _AddCodeLine(25266,$vararg_buffer16);
  _AddCodeLine(25063,$vararg_buffer18);
  $6 = (($1) + 1)|0;
  HEAP32[$vararg_buffer20>>2] = $6;
  _AddCodeLine(25089,$vararg_buffer20);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $7 = (_IS_Get(8588)|0);
  $8 = ($7|0)>(132);
  if ($8) {
   HEAP32[$vararg_buffer23>>2] = $4;
   _AddCodeLine(24910,$vararg_buffer23);
   _AddCodeLine(25063,$vararg_buffer26);
   HEAP32[$vararg_buffer28>>2] = $1;
   _AddCodeLine(25089,$vararg_buffer28);
   _AddCodeLine(25266,$vararg_buffer31);
   _AddCodeLine(25063,$vararg_buffer33);
   $9 = (($1) + 1)|0;
   HEAP32[$vararg_buffer35>>2] = $9;
   _AddCodeLine(25089,$vararg_buffer35);
   _AddCodeLine(25266,$vararg_buffer38);
   _AddCodeLine(25063,$vararg_buffer40);
   $10 = (($1) + 2)|0;
   HEAP32[$vararg_buffer42>>2] = $10;
   _AddCodeLine(25089,$vararg_buffer42);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
 }
 }
 $11 = ($4|0)>($1|0);
 $12 = (_GetLocalLabel()|0);
 if ($11) {
  _AddCodeLine(25298,$vararg_buffer61);
  $20 = (($2) + 255)|0;
  $21 = (($20) + ($4))|0;
  $22 = $21 & 255;
  HEAP32[$vararg_buffer63>>2] = $22;
  _AddCodeLine(24910,$vararg_buffer63);
  $23 = $20 & 255;
  HEAP32[$vararg_buffer66>>2] = $23;
  _AddCodeLine(25039,$vararg_buffer66);
  $24 = HEAP32[11209]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_LocalLabelName($12)|0);
  (_CS_AddLabel($26,$27)|0);
  _AddCodeLine(25063,$vararg_buffer69);
  HEAP32[$vararg_buffer71>>2] = $1;
  _AddCodeLine(25307,$vararg_buffer71);
  _AddCodeLine(25197,$vararg_buffer74);
  _AddCodeLine(25201,$vararg_buffer76);
  $28 = (_LocalLabelName($12)|0);
  HEAP32[$vararg_buffer78>>2] = $28;
  _AddCodeLine(25324,$vararg_buffer78);
  _AddCodeLine(25331,$vararg_buffer81);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer45>>2] = $4;
  _AddCodeLine(24910,$vararg_buffer45);
  $13 = HEAP32[11209]|0;
  $14 = ((($13)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (_LocalLabelName($12)|0);
  (_CS_AddLabel($15,$16)|0);
  _AddCodeLine(25063,$vararg_buffer48);
  $17 = (($1) - ($4))|0;
  HEAP32[$vararg_buffer50>>2] = $17;
  _AddCodeLine(25270,$vararg_buffer50);
  _AddCodeLine(25266,$vararg_buffer53);
  $18 = (($4) + ($2))|0;
  HEAP32[$vararg_buffer55>>2] = $18;
  _AddCodeLine(25287,$vararg_buffer55);
  $19 = (_LocalLabelName($12)|0);
  HEAP32[$vararg_buffer58>>2] = $19;
  _AddCodeLine(25205,$vararg_buffer58);
  STACKTOP = sp;return;
 }
}
function _g_getimmed($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $$2 = 0, $$3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond46 = 0, $trunc = 0;
 var $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer34 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0 & 32;
 $4 = ($3|0)==(0);
 if ($4) {
  _GetLabelName($0,$1,$2);
  HEAP32[$vararg_buffer31>>2] = 46640;
  _AddCodeLine(25413,$vararg_buffer31);
  HEAP32[$vararg_buffer34>>2] = 46640;
  _AddCodeLine(25424,$vararg_buffer34);
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $5 = $0 & 512;
  $6 = ($5|0)==(0);
  if (!($6)) {
   $7 = $1 & 255;
   HEAP32[$vararg_buffer>>2] = $7;
   _AddCodeLine(24940,$vararg_buffer);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $11 = $1 >>> 8;
  $12 = $1 >>> 16;
  $13 = $1 >>> 24;
  $14 = $11 & 255;
  HEAP32[$vararg_buffer7>>2] = $14;
  _AddCodeLine(25039,$vararg_buffer7);
  $15 = $12 & 255;
  $16 = ($14|0)==($15|0);
  if ($16) {
   _AddCodeLine(25340,$vararg_buffer10);
   $$0 = 6;
  } else {
   $$0 = 2;
  }
  $17 = ($14|0)==($13|0);
  if ($17) {
   $18 = $$0 | 8;
   _AddCodeLine(25349,$vararg_buffer12);
   $$1 = $18;
  } else {
   $$1 = $$0;
  }
  $19 = $$1 & 4;
  $20 = ($19|0)!=(0);
  $21 = $1 & 255;
  $22 = ($21|0)==($15|0);
  $or$cond = $22 | $20;
  if ($or$cond) {
   $$2 = $$1;
  } else {
   $23 = $$1 | 4;
   HEAP32[$vararg_buffer14>>2] = $15;
   _AddCodeLine(24940,$vararg_buffer14);
   _AddCodeLine(25360,$vararg_buffer17);
   $$2 = $23;
  }
  $24 = $$2 & 8;
  $25 = ($24|0)!=(0);
  $26 = ($21|0)==($13|0);
  $or$cond46 = $26 | $25;
  if ($or$cond46) {
   $$3 = $$2;
  } else {
   $27 = $$2 | 8;
   HEAP32[$vararg_buffer19>>2] = $13;
   _AddCodeLine(24940,$vararg_buffer19);
   _AddCodeLine(25369,$vararg_buffer22);
   $$3 = $27;
  }
  HEAP32[$vararg_buffer24>>2] = $21;
  _AddCodeLine(24940,$vararg_buffer24);
  $28 = $$3 & 4;
  $29 = ($28|0)==(0);
  do {
   if ($29) {
    if ($22) {
     _AddCodeLine(25360,$vararg_buffer27);
     break;
    } else {
     $30 = HEAP32[3332]|0;
     $31 = HEAP32[3331]|0;
     FUNCTION_TABLE_viiii[$30 & 1]($31,25380,25389,703);
     // unreachable;
    }
   }
  } while(0);
  $32 = $$3 & 8;
  $33 = ($32|0)==(0);
  if (!($33)) {
   STACKTOP = sp;return;
  }
  if (!($26)) {
   $34 = HEAP32[3332]|0;
   $35 = HEAP32[3331]|0;
   FUNCTION_TABLE_viiii[$34 & 1]($35,25404,25389,707);
   // unreachable;
  }
  _AddCodeLine(25369,$vararg_buffer29);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $8 = $1 >>> 8;
 $9 = $8 & 255;
 HEAP32[$vararg_buffer1>>2] = $9;
 _AddCodeLine(25039,$vararg_buffer1);
 $10 = $1 & 255;
 HEAP32[$vararg_buffer4>>2] = $10;
 _AddCodeLine(24940,$vararg_buffer4);
 STACKTOP = sp;return;
}
function _GetLabelName($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split212D = 0, $switch$split242D = 0, $switch$split2D = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0 & 61440;
 $trunc = $3&65535;
 $switch$split2D = ($trunc<<16>>16)<(4096);
 L1: do {
  if ($switch$split2D) {
   $switch$split212D = ($trunc<<16>>16)<(0);
   if ($switch$split212D) {
    switch ($trunc<<16>>16) {
    case -32768:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $10 = (($2) + ($1))|0;
    $11 = $10 & 65535;
    HEAP32[$vararg_buffer15>>2] = $11;
    (_xsprintf(46640,256,32816,$vararg_buffer15)|0);
    STACKTOP = sp;return;
   }
   switch ($trunc<<16>>16) {
   case 0:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $4 = ($2|0)==(0);
   $5 = (_LocalLabelName($1)|0);
   if ($4) {
    HEAP32[$vararg_buffer2>>2] = $5;
    (_xsprintf(46640,256,32813,$vararg_buffer2)|0);
    STACKTOP = sp;return;
   } else {
    HEAP32[$vararg_buffer>>2] = $5;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $2;
    (_xsprintf(46640,256,32806,$vararg_buffer)|0);
    STACKTOP = sp;return;
   }
  } else {
   $switch$split242D = ($trunc<<16>>16)<(8192);
   if (!($switch$split242D)) {
    switch ($trunc<<16>>16) {
    case 8192:  {
     break;
    }
    default: {
     break L1;
    }
    }
    $8 = (($2) + ($1))|0;
    $9 = $8 & 65535;
    HEAP32[$vararg_buffer12>>2] = $9;
    (_xsprintf(46640,256,34414,$vararg_buffer12)|0);
    STACKTOP = sp;return;
   }
   switch ($trunc<<16>>16) {
   case 4096:  {
    break;
   }
   default: {
    break L1;
   }
   }
   $6 = ($2|0)==(0);
   $7 = $1;
   if ($6) {
    HEAP32[$vararg_buffer9>>2] = $7;
    (_xsprintf(46640,256,25443,$vararg_buffer9)|0);
    STACKTOP = sp;return;
   } else {
    HEAP32[$vararg_buffer5>>2] = $7;
    $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr8>>2] = $2;
    (_xsprintf(46640,256,25435,$vararg_buffer5)|0);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 HEAP32[$vararg_buffer18>>2] = $0;
 _Internal(25447,$vararg_buffer18);
 // unreachable;
}
function _g_getstatic($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer42 = sp + 128|0;
 $vararg_buffer39 = sp + 120|0;
 $vararg_buffer37 = sp + 112|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _GetLabelName($0,$1,$2);
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $3 = $0 & 640;
  $4 = ($3|0)==(0);
  if (!($4)) {
   HEAP32[$vararg_buffer>>2] = 46640;
   _AddCodeLine(25475,$vararg_buffer);
   STACKTOP = sp;return;
  }
  _AddCodeLine(25482,$vararg_buffer1);
  HEAP32[$vararg_buffer3>>2] = 46640;
  _AddCodeLine(25475,$vararg_buffer3);
  $5 = $0 & 8;
  $6 = ($5|0)==(0);
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $7 = (_GetLocalLabel()|0);
  $8 = (_LocalLabelName($7)|0);
  HEAP32[$vararg_buffer6>>2] = $8;
  _AddCodeLine(25324,$vararg_buffer6);
  _AddCodeLine(25201,$vararg_buffer9);
  $9 = HEAP32[11209]|0;
  $10 = ((($9)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_LocalLabelName($7)|0);
  (_CS_AddLabel($11,$12)|0);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  HEAP32[$vararg_buffer11>>2] = 46640;
  _AddCodeLine(25475,$vararg_buffer11);
  $13 = $0 & 128;
  $14 = ($13|0)==(0);
  if ($14) {
   HEAP32[$vararg_buffer17>>2] = 46640;
   _AddCodeLine(25500,$vararg_buffer17);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer14>>2] = 46640;
   _AddCodeLine(25491,$vararg_buffer14);
   STACKTOP = sp;return;
  }
  break;
 }
 case 0:  {
  $15 = $0 & 128;
  $16 = ($15|0)==(0);
  HEAP32[$vararg_buffer20>>2] = 46640;
  _AddCodeLine(25509,$vararg_buffer20);
  if ($16) {
   _AddCodeLine(25369,$vararg_buffer32);
   HEAP32[$vararg_buffer34>>2] = 46640;
   _AddCodeLine(25536,$vararg_buffer34);
   _AddCodeLine(25360,$vararg_buffer37);
   HEAP32[$vararg_buffer39>>2] = 46640;
   _AddCodeLine(25500,$vararg_buffer39);
   HEAP32[$vararg_buffer42>>2] = 46640;
   _AddCodeLine(25475,$vararg_buffer42);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer23>>2] = 46640;
   _AddCodeLine(25518,$vararg_buffer23);
   HEAP32[$vararg_buffer26>>2] = 46640;
   _AddCodeLine(25491,$vararg_buffer26);
   HEAP32[$vararg_buffer29>>2] = 46640;
   _AddCodeLine(25527,$vararg_buffer29);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_getlocal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $vararg_buffer36 = sp + 136|0;
 $vararg_buffer34 = sp + 128|0;
 $vararg_buffer32 = sp + 120|0;
 $vararg_buffer29 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11252]|0;
 $3 = (($1) - ($2))|0;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $4 = ($3>>>0)>(255);
  if ($4) {
   _Error(25014,$vararg_buffer);
  }
  $5 = $0 & 640;
  $6 = ($5|0)==(0);
  HEAP32[$vararg_buffer1>>2] = $3;
  _AddCodeLine(24910,$vararg_buffer1);
  if (!($6)) {
   _AddCodeLine(25063,$vararg_buffer3);
   STACKTOP = sp;return;
  }
  _AddCodeLine(25482,$vararg_buffer5);
  _AddCodeLine(25063,$vararg_buffer7);
  $7 = $0 & 8;
  $8 = ($7|0)==(0);
  if (!($8)) {
   STACKTOP = sp;return;
  }
  $9 = (_GetLocalLabel()|0);
  $10 = (_LocalLabelName($9)|0);
  HEAP32[$vararg_buffer9>>2] = $10;
  _AddCodeLine(25324,$vararg_buffer9);
  _AddCodeLine(25201,$vararg_buffer12);
  $11 = HEAP32[11209]|0;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_LocalLabelName($9)|0);
  (_CS_AddLabel($13,$14)|0);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $15 = (($3) + 1)|0;
  $16 = ($15>>>0)>(255);
  if ($16) {
   _Error(25014,$vararg_buffer14);
  }
  $17 = $15 & 255;
  HEAP32[$vararg_buffer16>>2] = $17;
  _AddCodeLine(24910,$vararg_buffer16);
  $18 = $0 & 128;
  $19 = ($18|0)==(0);
  if ($19) {
   _AddCodeLine(25556,$vararg_buffer25);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(25063,$vararg_buffer19);
   _AddCodeLine(25197,$vararg_buffer21);
   _AddCodeLine(25545,$vararg_buffer23);
   STACKTOP = sp;return;
  }
  break;
 }
 case 0:  {
  $20 = (($3) + 3)|0;
  $21 = ($20>>>0)>(255);
  if ($21) {
   _Error(25014,$vararg_buffer27);
  }
  $22 = $20 & 255;
  HEAP32[$vararg_buffer29>>2] = $22;
  _AddCodeLine(24910,$vararg_buffer29);
  _AddCodeLine(25568,$vararg_buffer32);
  $23 = $0 & 128;
  $24 = ($23|0)==(0);
  if ($24) {
   STACKTOP = sp;return;
  }
  $25 = $0 & 8;
  $26 = ($25|0)==(0);
  if ($26) {
   _AddCodeLine(25593,$vararg_buffer36);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(25581,$vararg_buffer34);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_test($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $1 = $0 & 512;
  $2 = ($1|0)==(0);
  if (!($2)) {
   _AddCodeLine(25604,$vararg_buffer);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $3 = $0 & 8;
  $4 = ($3|0)==(0);
  if ($4) {
   _AddCodeLine(25593,$vararg_buffer7);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(25581,$vararg_buffer5);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 _AddCodeLine(25298,$vararg_buffer1);
 _AddCodeLine(25608,$vararg_buffer3);
 STACKTOP = sp;return;
}
function _g_getind($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0$i$i = 0, $$011$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$clear32 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer30 = sp + 112|0;
 $vararg_buffer28 = sp + 104|0;
 $vararg_buffer26 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $1 & -256;
 $3 = $1 & 255;
 $trunc$i$i = $0&255;
 $trunc$i$i$clear = $trunc$i$i & 7;
 switch ($trunc$i$i$clear<<24>>24) {
 case 3:  {
  $4 = $0 >>> 9;
  $5 = $4 & 1;
  $6 = (2 - ($5))|0;
  $$0$i$i = $6;
  break;
 }
 case 1:  {
  $$0$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i = 4;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $7 = (256 - ($$0$i$i))|0;
 $8 = ($3>>>0)>($7>>>0);
 $$$i = $8 ? $1 : $2;
 $9 = ($$$i|0)==(0);
 if ($9) {
  $$011$i = $1;
 } else {
  $10 = (($1) - ($$$i))|0;
  _g_inc(33,$$$i);
  $$011$i = $10;
 }
 $trunc$i$i$clear32 = $trunc$i$i & 7;
 switch ($trunc$i$i$clear32<<24>>24) {
 case 3:  {
  HEAP32[$vararg_buffer>>2] = $$011$i;
  _AddCodeLine(24910,$vararg_buffer);
  $11 = $0 & 8;
  $12 = ($11|0)==(0);
  if ($12) {
   _AddCodeLine(25629,$vararg_buffer3);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(25617,$vararg_buffer1);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  $13 = $0 & 128;
  $14 = ($13|0)==(0);
  if ($14) {
   $15 = (($$011$i) + 1)|0;
   HEAP32[$vararg_buffer18>>2] = $15;
   _AddCodeLine(24910,$vararg_buffer18);
   _AddCodeLine(25686,$vararg_buffer21);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer5>>2] = $$011$i;
   _AddCodeLine(24910,$vararg_buffer5);
   _AddCodeLine(25640,$vararg_buffer8);
   _AddCodeLine(25649,$vararg_buffer10);
   _AddCodeLine(25660,$vararg_buffer12);
   _AddCodeLine(25266,$vararg_buffer14);
   _AddCodeLine(25673,$vararg_buffer16);
   STACKTOP = sp;return;
  }
  break;
 }
 case 0:  {
  $16 = (($$011$i) + 3)|0;
  HEAP32[$vararg_buffer23>>2] = $16;
  _AddCodeLine(24910,$vararg_buffer23);
  _AddCodeLine(25698,$vararg_buffer26);
  $17 = $0 & 128;
  $18 = ($17|0)==(0);
  if ($18) {
   STACKTOP = sp;return;
  }
  $19 = $0 & 8;
  $20 = ($19|0)==(0);
  if ($20) {
   _AddCodeLine(25593,$vararg_buffer30);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(25581,$vararg_buffer28);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_inc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$037 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0;
 var $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $vararg_buffer68 = sp + 240|0;
 $vararg_buffer65 = sp + 232|0;
 $vararg_buffer63 = sp + 224|0;
 $vararg_buffer61 = sp + 216|0;
 $vararg_buffer58 = sp + 208|0;
 $vararg_buffer56 = sp + 200|0;
 $vararg_buffer54 = sp + 192|0;
 $vararg_buffer52 = sp + 184|0;
 $vararg_buffer50 = sp + 176|0;
 $vararg_buffer48 = sp + 168|0;
 $vararg_buffer45 = sp + 160|0;
 $vararg_buffer43 = sp + 152|0;
 $vararg_buffer41 = sp + 144|0;
 $vararg_buffer38 = sp + 136|0;
 $vararg_buffer36 = sp + 128|0;
 $vararg_buffer34 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer30 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $3 = $0 & 512;
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP32[3628]|0;
   $6 = (14556 + ($5<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 8;
   $9 = ($8|0)!=(0);
   $10 = ($1>>>0)<(3);
   $or$cond = $10 & $9;
   if ($or$cond) {
    $$037 = $1;
    while(1) {
     $11 = (($$037) + -1)|0;
     _AddCodeLine(25711,$vararg_buffer);
     $12 = ($11|0)==(0);
     if ($12) {
      break;
     } else {
      $$037 = $11;
     }
    }
    STACKTOP = sp;return;
   } else {
    _AddCodeLine(24951,$vararg_buffer1);
    $13 = $1 & 255;
    HEAP32[$vararg_buffer3>>2] = $13;
    _AddCodeLine(25715,$vararg_buffer3);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $48 = ($1>>>0)<(256);
  if ($48) {
   $49 = $1 & 255;
   HEAP32[$vararg_buffer65>>2] = $49;
   _AddCodeLine(24910,$vararg_buffer65);
   _AddCodeLine(25761,$vararg_buffer68);
   STACKTOP = sp;return;
  } else {
   $50 = $0 | 32;
   _g_add($50,$1);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  $51 = $0 & -33;
  _typeerror($51);
  // unreachable;
 }
 }
 $14 = HEAP32[3628]|0;
 $15 = (14556 + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 8;
 $18 = ($17|0)!=(0);
 $19 = ($1|0)==(1);
 $or$cond3 = $19 & $18;
 if ($or$cond3) {
  $20 = (_GetLocalLabel()|0);
  _AddCodeLine(25711,$vararg_buffer5);
  $21 = (_LocalLabelName($20)|0);
  HEAP32[$vararg_buffer7>>2] = $21;
  _AddCodeLine(25205,$vararg_buffer7);
  _AddCodeLine(25726,$vararg_buffer10);
  $22 = HEAP32[11209]|0;
  $23 = ((($22)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_LocalLabelName($20)|0);
  (_CS_AddLabel($24,$25)|0);
  STACKTOP = sp;return;
 }
 $26 = (_IS_Get(8588)|0);
 $27 = ($26|0)<(200);
 if ($27) {
  $28 = ($1>>>0)<(9);
  if ($28) {
   HEAP32[$vararg_buffer12>>2] = $1;
   _AddCodeLine(25730,$vararg_buffer12);
   STACKTOP = sp;return;
  }
  $29 = ($1>>>0)<(256);
  if ($29) {
   $30 = $1 & 255;
   HEAP32[$vararg_buffer15>>2] = $30;
   _AddCodeLine(24910,$vararg_buffer15);
   _AddCodeLine(25743,$vararg_buffer18);
   STACKTOP = sp;return;
  } else {
   $31 = $0 | 32;
   _g_add($31,$1);
   STACKTOP = sp;return;
  }
 }
 $32 = ($1>>>0)<(769);
 $33 = $1 & 255;
 $34 = ($33|0)!=(0);
 if (!($32)) {
  if ($34) {
   _AddCodeLine(24951,$vararg_buffer36);
   HEAP32[$vararg_buffer38>>2] = $33;
   _AddCodeLine(25715,$vararg_buffer38);
   _AddCodeLine(24936,$vararg_buffer41);
   _AddCodeLine(25104,$vararg_buffer43);
   $44 = $1 >>> 8;
   $45 = $44 & 255;
   HEAP32[$vararg_buffer45>>2] = $45;
   _AddCodeLine(25715,$vararg_buffer45);
   _AddCodeLine(25604,$vararg_buffer48);
   _AddCodeLine(24987,$vararg_buffer50);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(24936,$vararg_buffer52);
   _AddCodeLine(25104,$vararg_buffer54);
   _AddCodeLine(24951,$vararg_buffer56);
   $46 = $1 >>> 8;
   $47 = $46 & 255;
   HEAP32[$vararg_buffer58>>2] = $47;
   _AddCodeLine(25715,$vararg_buffer58);
   _AddCodeLine(25604,$vararg_buffer61);
   _AddCodeLine(24987,$vararg_buffer63);
   STACKTOP = sp;return;
  }
 }
 if ($34) {
  $35 = (_GetLocalLabel()|0);
  _AddCodeLine(24951,$vararg_buffer20);
  HEAP32[$vararg_buffer22>>2] = $33;
  _AddCodeLine(25715,$vararg_buffer22);
  $36 = (_LocalLabelName($35)|0);
  HEAP32[$vararg_buffer25>>2] = $36;
  _AddCodeLine(25754,$vararg_buffer25);
  _AddCodeLine(25726,$vararg_buffer28);
  $37 = HEAP32[11209]|0;
  $38 = ((($37)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (_LocalLabelName($35)|0);
  (_CS_AddLabel($39,$40)|0);
 }
 $41 = ($1>>>0)>(255);
 if (!($41)) {
  STACKTOP = sp;return;
 }
 _AddCodeLine(25726,$vararg_buffer30);
 $42 = ($1>>>0)>(511);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 _AddCodeLine(25726,$vararg_buffer32);
 $43 = ($1>>>0)>(767);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 _AddCodeLine(25726,$vararg_buffer34);
 STACKTOP = sp;return;
}
function _g_add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = $0;
 } else {
  $4 = $0 & -545;
  $5 = $0 & -513;
  _g_push($4,0);
  $$0 = $5;
 }
 $6 = $$0 & 8;
 $7 = ($6|0)==(0);
 $$$i = $7 ? 6464 : (6468);
 $8 = $$0 & 7;
 $9 = ($8|0)==(0);
 $10 = ((($$$i)) + 8|0);
 $$1$i = $9 ? $10 : $$$i;
 $11 = $$0 & 32;
 $12 = ($11|0)==(0);
 if (!($12)) {
  _g_getimmed($$0,$1,0);
 }
 $13 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer>>2] = $13;
 _AddCodeLine(25773,$vararg_buffer);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $14 = $$0 >>> 9;
  $15 = $14 & 1;
  $16 = (2 - ($15))|0;
  $$0$i$i$i = $16;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $17 = HEAP32[11252]|0;
 $18 = (($17) + ($$0$i$i$i))|0;
 HEAP32[11252] = $18;
 STACKTOP = sp;return;
}
function _g_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$clear = 0, $$pre$clear11 = 0, $$pre$clear12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 $$pre = $0&255;
 L1: do {
  if ($3) {
   $$pre$clear11 = $$pre & 7;
   switch ($$pre$clear11<<24>>24) {
   case 0:  {
    label = 11;
    break L1;
    break;
   }
   case 3:  {
    label = 8;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   if ((label|0) == 8) {
    $7 = $0 & 512;
    $8 = ($7|0)==(0);
    if (!($8)) {
     _AddCodeLine(25159,$vararg_buffer5);
     label = 14;
     break;
    }
   }
   _AddCodeLine(25169,$vararg_buffer7);
   label = 13;
  } else {
   $$pre$clear = $$pre & 7;
   switch ($$pre$clear<<24>>24) {
   case 0:  {
    _g_getimmed($0,$1,0);
    label = 11;
    break L1;
    break;
   }
   case 3:  {
    label = 3;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 3) {
    $4 = $0 & 512;
    $5 = ($4|0)==(0);
    if (!($5)) {
     $6 = $1 & 255;
     HEAP32[$vararg_buffer>>2] = $6;
     _AddCodeLine(24940,$vararg_buffer);
     _AddCodeLine(25159,$vararg_buffer1);
     label = 14;
     break;
    }
   }
   _g_getimmed($0,$1,0);
   _AddCodeLine(25169,$vararg_buffer3);
   label = 13;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   _AddCodeLine(25780,$vararg_buffer9);
   label = 15;
  }
  else if ((label|0) == 13) {
   $$pre$clear12 = $$pre & 7;
   switch ($$pre$clear12<<24>>24) {
   case 3:  {
    label = 14;
    break L16;
    break;
   }
   case 1:  {
    $$0$i$i = 2;
    break L16;
    break;
   }
   case 0:  {
    label = 15;
    break L16;
    break;
   }
   case 4:  {
    $$0$i$i = 4;
    break L16;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  $9 = $0 >>> 9;
  $10 = $9 & 1;
  $11 = (2 - ($10))|0;
  $$0$i$i = $11;
 }
 else if ((label|0) == 15) {
  $$0$i$i = 4;
 }
 $12 = HEAP32[11252]|0;
 $13 = (($12) - ($$0$i$i))|0;
 HEAP32[11252] = $13;
 STACKTOP = sp;return;
}
function _g_leasp($0) {
 $0 = $0|0;
 var $$016 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0;
 var $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer58 = sp + 208|0;
 $vararg_buffer56 = sp + 200|0;
 $vararg_buffer53 = sp + 192|0;
 $vararg_buffer51 = sp + 184|0;
 $vararg_buffer49 = sp + 176|0;
 $vararg_buffer46 = sp + 168|0;
 $vararg_buffer44 = sp + 160|0;
 $vararg_buffer42 = sp + 152|0;
 $vararg_buffer40 = sp + 144|0;
 $vararg_buffer37 = sp + 136|0;
 $vararg_buffer34 = sp + 128|0;
 $vararg_buffer32 = sp + 120|0;
 $vararg_buffer29 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[11252]|0;
 $2 = (($0) - ($1))|0;
 $3 = $2 >>> 8;
 $4 = $3&255;
 $5 = $2 & 255;
 $6 = ($5|0)==(0);
 $7 = $3 & 255;
 if ($6) {
  $8 = ($7>>>0)<(4);
  if (!($8)) {
   _AddCodeLine(25234,$vararg_buffer5);
   _AddCodeLine(24951,$vararg_buffer7);
   HEAP32[$vararg_buffer9>>2] = $7;
   _AddCodeLine(25715,$vararg_buffer9);
   _AddCodeLine(25604,$vararg_buffer11);
   _AddCodeLine(25212,$vararg_buffer13);
   STACKTOP = sp;return;
  }
  _AddCodeLine(25212,$vararg_buffer);
  _AddCodeLine(25792,$vararg_buffer1);
  $9 = ($4<<24>>24)==(0);
  if ($9) {
   STACKTOP = sp;return;
  } else {
   $$016 = $4;
  }
  while(1) {
   $10 = (($$016) + -1)<<24>>24;
   _AddCodeLine(25726,$vararg_buffer3);
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    break;
   } else {
    $$016 = $10;
   }
  }
  STACKTOP = sp;return;
 }
 $12 = ($7|0)==(0);
 $13 = (_IS_Get(8588)|0);
 if ($12) {
  $14 = ($13|0)<(200);
  if ($14) {
   HEAP32[$vararg_buffer15>>2] = $5;
   _AddCodeLine(24940,$vararg_buffer15);
   _AddCodeLine(25801,$vararg_buffer18);
   STACKTOP = sp;return;
  } else {
   $15 = (_GetLocalLabel()|0);
   _AddCodeLine(25212,$vararg_buffer20);
   _AddCodeLine(25792,$vararg_buffer22);
   _AddCodeLine(24951,$vararg_buffer24);
   HEAP32[$vararg_buffer26>>2] = $5;
   _AddCodeLine(25715,$vararg_buffer26);
   $16 = (_LocalLabelName($15)|0);
   HEAP32[$vararg_buffer29>>2] = $16;
   _AddCodeLine(25754,$vararg_buffer29);
   _AddCodeLine(25726,$vararg_buffer32);
   $17 = HEAP32[11209]|0;
   $18 = ((($17)) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_LocalLabelName($15)|0);
   (_CS_AddLabel($19,$20)|0);
   STACKTOP = sp;return;
  }
 } else {
  $21 = ($13|0)<(170);
  if ($21) {
   HEAP32[$vararg_buffer34>>2] = $5;
   _AddCodeLine(24940,$vararg_buffer34);
   HEAP32[$vararg_buffer37>>2] = $7;
   _AddCodeLine(25039,$vararg_buffer37);
   _AddCodeLine(25813,$vararg_buffer40);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(25212,$vararg_buffer42);
   _AddCodeLine(24951,$vararg_buffer44);
   HEAP32[$vararg_buffer46>>2] = $5;
   _AddCodeLine(25715,$vararg_buffer46);
   _AddCodeLine(24936,$vararg_buffer49);
   _AddCodeLine(25234,$vararg_buffer51);
   HEAP32[$vararg_buffer53>>2] = $7;
   _AddCodeLine(25715,$vararg_buffer53);
   _AddCodeLine(25604,$vararg_buffer56);
   _AddCodeLine(24987,$vararg_buffer58);
   STACKTOP = sp;return;
  }
 }
}
function _g_leavariadic($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[11252]|0;
 $2 = (($0) - ($1))|0;
 $3 = ($1|0)<(1);
 if (!($3)) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,25825,25389,973);
  // unreachable;
 }
 $6 = (0 - ($1))|0;
 $7 = ($6>>>0)>(255);
 if ($7) {
  _Error(25014,$vararg_buffer);
 }
 HEAP32[$vararg_buffer1>>2] = $6;
 _AddCodeLine(24910,$vararg_buffer1);
 _AddCodeLine(25063,$vararg_buffer3);
 $8 = (_IS_Get(8588)|0);
 $9 = ($8|0)>(250);
 if ($9) {
  $10 = (_GetLocalLabel()|0);
  _AddCodeLine(25792,$vararg_buffer5);
  _AddCodeLine(24951,$vararg_buffer7);
  _AddCodeLine(24955,$vararg_buffer9);
  $11 = (_LocalLabelName($10)|0);
  HEAP32[$vararg_buffer11>>2] = $11;
  _AddCodeLine(25754,$vararg_buffer11);
  _AddCodeLine(25726,$vararg_buffer14);
  $12 = HEAP32[11209]|0;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_LocalLabelName($10)|0);
  (_CS_AddLabel($14,$15)|0);
 } else {
  _AddCodeLine(25482,$vararg_buffer16);
  _AddCodeLine(25813,$vararg_buffer18);
 }
 $16 = ($2|0)>(0);
 if ($16) {
  _g_inc(33,$2);
  STACKTOP = sp;return;
 }
 $17 = ($2|0)<(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (0 - ($2))|0;
 _g_dec(33,$18);
 STACKTOP = sp;return;
}
function _g_dec($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0;
 var $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0;
 var $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer59 = sp + 208|0;
 $vararg_buffer56 = sp + 200|0;
 $vararg_buffer54 = sp + 192|0;
 $vararg_buffer52 = sp + 184|0;
 $vararg_buffer49 = sp + 176|0;
 $vararg_buffer47 = sp + 168|0;
 $vararg_buffer45 = sp + 160|0;
 $vararg_buffer43 = sp + 152|0;
 $vararg_buffer41 = sp + 144|0;
 $vararg_buffer39 = sp + 136|0;
 $vararg_buffer36 = sp + 128|0;
 $vararg_buffer34 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer25 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $3 = $0 & 512;
  $4 = ($3|0)==(0);
  if (!($4)) {
   $5 = HEAP32[3628]|0;
   $6 = (14556 + ($5<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 8;
   $9 = ($8|0)!=(0);
   $10 = ($1>>>0)<(3);
   $or$cond = $10 & $9;
   if ($or$cond) {
    $$028 = $1;
    while(1) {
     $11 = (($$028) + -1)|0;
     _AddCodeLine(25839,$vararg_buffer);
     $12 = ($11|0)==(0);
     if ($12) {
      break;
     } else {
      $$028 = $11;
     }
    }
    STACKTOP = sp;return;
   } else {
    _AddCodeLine(25219,$vararg_buffer1);
    $13 = $1 & 255;
    HEAP32[$vararg_buffer3>>2] = $13;
    _AddCodeLine(25223,$vararg_buffer3);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $35 = ($1>>>0)<(256);
  if ($35) {
   $36 = $1 & 255;
   HEAP32[$vararg_buffer56>>2] = $36;
   _AddCodeLine(24910,$vararg_buffer56);
   _AddCodeLine(25873,$vararg_buffer59);
   STACKTOP = sp;return;
  } else {
   $37 = $0 | 32;
   _g_sub($37,$1);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  $38 = $0 & -33;
  _typeerror($38);
  // unreachable;
 }
 }
 $14 = (_IS_Get(8588)|0);
 $15 = ($14|0)<(200);
 if ($15) {
  $16 = ($1>>>0)<(9);
  if ($16) {
   HEAP32[$vararg_buffer5>>2] = $1;
   _AddCodeLine(25843,$vararg_buffer5);
   STACKTOP = sp;return;
  }
  $17 = ($1>>>0)<(256);
  if ($17) {
   $18 = $1 & 255;
   HEAP32[$vararg_buffer8>>2] = $18;
   _AddCodeLine(24910,$vararg_buffer8);
   _AddCodeLine(25855,$vararg_buffer11);
   STACKTOP = sp;return;
  } else {
   $19 = $0 | 32;
   _g_sub($19,$1);
   STACKTOP = sp;return;
  }
 }
 $20 = ($1>>>0)<(768);
 $21 = $1 & 255;
 $22 = ($21|0)!=(0);
 if (!($20)) {
  if ($22) {
   _AddCodeLine(25219,$vararg_buffer27);
   HEAP32[$vararg_buffer29>>2] = $21;
   _AddCodeLine(25223,$vararg_buffer29);
   _AddCodeLine(24936,$vararg_buffer32);
   _AddCodeLine(25104,$vararg_buffer34);
   $31 = $1 >>> 8;
   $32 = $31 & 255;
   HEAP32[$vararg_buffer36>>2] = $32;
   _AddCodeLine(25223,$vararg_buffer36);
   _AddCodeLine(25604,$vararg_buffer39);
   _AddCodeLine(24987,$vararg_buffer41);
   STACKTOP = sp;return;
  } else {
   _AddCodeLine(24936,$vararg_buffer43);
   _AddCodeLine(25104,$vararg_buffer45);
   _AddCodeLine(25219,$vararg_buffer47);
   $33 = $1 >>> 8;
   $34 = $33 & 255;
   HEAP32[$vararg_buffer49>>2] = $34;
   _AddCodeLine(25223,$vararg_buffer49);
   _AddCodeLine(25604,$vararg_buffer52);
   _AddCodeLine(24987,$vararg_buffer54);
   STACKTOP = sp;return;
  }
 }
 if ($22) {
  $23 = (_GetLocalLabel()|0);
  _AddCodeLine(25219,$vararg_buffer13);
  HEAP32[$vararg_buffer15>>2] = $21;
  _AddCodeLine(25223,$vararg_buffer15);
  $24 = (_LocalLabelName($23)|0);
  HEAP32[$vararg_buffer18>>2] = $24;
  _AddCodeLine(25866,$vararg_buffer18);
  _AddCodeLine(25201,$vararg_buffer21);
  $25 = HEAP32[11209]|0;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_LocalLabelName($23)|0);
  (_CS_AddLabel($27,$28)|0);
 }
 $29 = ($1>>>0)>(255);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 _AddCodeLine(25201,$vararg_buffer23);
 $30 = ($1>>>0)>(511);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 _AddCodeLine(25201,$vararg_buffer25);
 STACKTOP = sp;return;
}
function _g_sub($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = $0;
 } else {
  $4 = $0 & -545;
  $5 = $0 & -513;
  _g_push($4,0);
  $$0 = $5;
 }
 $6 = $$0 & 8;
 $7 = ($6|0)==(0);
 $$$i = $7 ? 6512 : (6516);
 $8 = $$0 & 7;
 $9 = ($8|0)==(0);
 $10 = ((($$$i)) + 8|0);
 $$1$i = $9 ? $10 : $$$i;
 $11 = $$0 & 32;
 $12 = ($11|0)==(0);
 if (!($12)) {
  _g_getimmed($$0,$1,0);
 }
 $13 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer>>2] = $13;
 _AddCodeLine(25773,$vararg_buffer);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $14 = $$0 >>> 9;
  $15 = $14 & 1;
  $16 = (2 - ($15))|0;
  $$0$i$i$i = $16;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $17 = HEAP32[11252]|0;
 $18 = (($17) + ($$0$i$i$i))|0;
 HEAP32[11252] = $18;
 STACKTOP = sp;return;
}
function _g_putstatic($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _GetLabelName($0,$1,$2);
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  HEAP32[$vararg_buffer>>2] = 46640;
  _AddCodeLine(25885,$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  HEAP32[$vararg_buffer1>>2] = 46640;
  _AddCodeLine(25885,$vararg_buffer1);
  HEAP32[$vararg_buffer4>>2] = 46640;
  _AddCodeLine(25892,$vararg_buffer4);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  HEAP32[$vararg_buffer7>>2] = 46640;
  _AddCodeLine(25885,$vararg_buffer7);
  HEAP32[$vararg_buffer10>>2] = 46640;
  _AddCodeLine(25892,$vararg_buffer10);
  _AddCodeLine(25901,$vararg_buffer13);
  HEAP32[$vararg_buffer15>>2] = 46640;
  _AddCodeLine(25910,$vararg_buffer15);
  _AddCodeLine(25919,$vararg_buffer18);
  HEAP32[$vararg_buffer20>>2] = 46640;
  _AddCodeLine(25930,$vararg_buffer20);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_putlocal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0;
 var $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer45 = sp + 160|0;
 $vararg_buffer42 = sp + 152|0;
 $vararg_buffer40 = sp + 144|0;
 $vararg_buffer38 = sp + 136|0;
 $vararg_buffer36 = sp + 128|0;
 $vararg_buffer34 = sp + 120|0;
 $vararg_buffer32 = sp + 112|0;
 $vararg_buffer29 = sp + 104|0;
 $vararg_buffer27 = sp + 96|0;
 $vararg_buffer24 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[11252]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>(255);
 if ($5) {
  _Error(25014,$vararg_buffer);
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $6 = $0 & 32;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = $2 & 255;
   HEAP32[$vararg_buffer1>>2] = $8;
   _AddCodeLine(24940,$vararg_buffer1);
  }
  HEAP32[$vararg_buffer3>>2] = $4;
  _AddCodeLine(24910,$vararg_buffer3);
  _AddCodeLine(25108,$vararg_buffer6);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $9 = $0 & 32;
  $10 = ($9|0)==(0);
  if ($10) {
   HEAP32[$vararg_buffer29>>2] = $4;
   _AddCodeLine(24910,$vararg_buffer29);
   $18 = $0 & 16;
   $19 = ($18|0)==(0);
   if (!($19)) {
    $20 = (_IS_Get(8588)|0);
    $21 = ($20|0)<(160);
    if (!($21)) {
     _AddCodeLine(25108,$vararg_buffer34);
     _AddCodeLine(25266,$vararg_buffer36);
     _AddCodeLine(25104,$vararg_buffer38);
     _AddCodeLine(25108,$vararg_buffer40);
     STACKTOP = sp;return;
    }
   }
   _AddCodeLine(25943,$vararg_buffer32);
   STACKTOP = sp;return;
  }
  $11 = (($4) + 1)|0;
  HEAP32[$vararg_buffer8>>2] = $11;
  _AddCodeLine(24910,$vararg_buffer8);
  $12 = $2 >>> 8;
  $13 = $12 & 255;
  HEAP32[$vararg_buffer11>>2] = $13;
  _AddCodeLine(24940,$vararg_buffer11);
  _AddCodeLine(25108,$vararg_buffer14);
  $14 = $0 & 16;
  $15 = ($14|0)==(0);
  if ($15) {
   _AddCodeLine(25604,$vararg_buffer16);
  }
  $16 = $2 & 255;
  $17 = ($16|0)==($11|0);
  if ($17) {
   _AddCodeLine(25939,$vararg_buffer18);
   _AddCodeLine(25197,$vararg_buffer20);
  } else {
   _AddCodeLine(25197,$vararg_buffer22);
   HEAP32[$vararg_buffer24>>2] = $16;
   _AddCodeLine(24940,$vararg_buffer24);
  }
  _AddCodeLine(25108,$vararg_buffer27);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $22 = $0 & 32;
  $23 = ($22|0)==(0);
  if (!($23)) {
   _g_getimmed($0,$2,0);
  }
  HEAP32[$vararg_buffer42>>2] = $4;
  _AddCodeLine(24910,$vararg_buffer42);
  _AddCodeLine(25955,$vararg_buffer45);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_putind($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i$clear46 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $vararg_buffer44 = sp + 168|0;
 $vararg_buffer42 = sp + 160|0;
 $vararg_buffer40 = sp + 152|0;
 $vararg_buffer37 = sp + 144|0;
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer33 = sp + 128|0;
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $1 & 255;
 $trunc$i = $0&255;
 $trunc$i$clear = $trunc$i & 7;
 switch ($trunc$i$clear<<24>>24) {
 case 3:  {
  $$0$i = 1;
  break;
 }
 case 1:  {
  $$0$i = 2;
  break;
 }
 case 0:  {
  $$0$i = 4;
  break;
 }
 case 4:  {
  $$0$i = 4;
  break;
 }
 default: {
  $3 = $0 | 512;
  _typeerror($3);
  // unreachable;
 }
 }
 $4 = (256 - ($$0$i))|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  _AddCodeLine(25968,$vararg_buffer);
  _AddCodeLine(24951,$vararg_buffer1);
  _AddCodeLine(24936,$vararg_buffer3);
  HEAP32[$vararg_buffer5>>2] = $2;
  _AddCodeLine(24940,$vararg_buffer5);
  _AddCodeLine(25977,$vararg_buffer7);
  _AddCodeLine(25108,$vararg_buffer9);
  _AddCodeLine(25266,$vararg_buffer11);
  $6 = $1 >>> 8;
  $7 = $6 & 255;
  HEAP32[$vararg_buffer13>>2] = $7;
  _AddCodeLine(24940,$vararg_buffer13);
  _AddCodeLine(25977,$vararg_buffer16);
  _AddCodeLine(25108,$vararg_buffer18);
  _AddCodeLine(24987,$vararg_buffer20);
  $$0 = 0;
 } else {
  $8 = $1 & 65280;
  $9 = ($8|0)==(0);
  if ($9) {
   $$0 = $1;
  } else {
   _AddCodeLine(25988,$vararg_buffer22);
   _AddCodeLine(24951,$vararg_buffer24);
   _AddCodeLine(24936,$vararg_buffer26);
   $10 = $1 >>> 8;
   $11 = $10 & 255;
   HEAP32[$vararg_buffer28>>2] = $11;
   _AddCodeLine(24940,$vararg_buffer28);
   _AddCodeLine(25977,$vararg_buffer31);
   _AddCodeLine(25108,$vararg_buffer33);
   _AddCodeLine(24987,$vararg_buffer35);
   $$0 = $2;
  }
 }
 HEAP32[$vararg_buffer37>>2] = $$0;
 _AddCodeLine(24910,$vararg_buffer37);
 $trunc$i$clear46 = $trunc$i & 7;
 switch ($trunc$i$clear46<<24>>24) {
 case 3:  {
  _AddCodeLine(25997,$vararg_buffer40);
  $12 = HEAP32[11252]|0;
  $13 = (($12) + 2)|0;
  HEAP32[11252] = $13;
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _AddCodeLine(26010,$vararg_buffer42);
  $12 = HEAP32[11252]|0;
  $13 = (($12) + 2)|0;
  HEAP32[11252] = $13;
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  _AddCodeLine(26024,$vararg_buffer44);
  $12 = HEAP32[11252]|0;
  $13 = (($12) + 2)|0;
  HEAP32[11252] = $13;
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_tosint($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 0:  {
  _AddCodeLine(26064,$vararg_buffer);
  $1 = HEAP32[11252]|0;
  $2 = (($1) + 2)|0;
  HEAP32[11252] = $2;
  STACKTOP = sp;return;
  break;
 }
 case 1: case 3:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_regint($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $1 = $0 & 512;
  $2 = ($1|0)==(0);
  if ($2) {
   STACKTOP = sp;return;
  }
  _AddCodeLine(25482,$vararg_buffer);
  $3 = $0 & 8;
  $4 = ($3|0)==(0);
  if (!($4)) {
   STACKTOP = sp;return;
  }
  $5 = (_GetLocalLabel()|0);
  _AddCodeLine(26075,$vararg_buffer1);
  $6 = (_LocalLabelName($5)|0);
  HEAP32[$vararg_buffer3>>2] = $6;
  _AddCodeLine(25754,$vararg_buffer3);
  _AddCodeLine(25201,$vararg_buffer5);
  $7 = HEAP32[11209]|0;
  $8 = ((($7)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_LocalLabelName($5)|0);
  (_CS_AddLabel($9,$10)|0);
  STACKTOP = sp;return;
  break;
 }
 case 0: case 1:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_reglong($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 L1: do {
  switch ($trunc$clear<<24>>24) {
  case 3:  {
   $1 = $0 & 512;
   $2 = ($1|0)==(0);
   if (!($2)) {
    $3 = $0 & 8;
    $4 = ($3|0)==(0);
    $5 = (_IS_Get(8588)|0);
    if ($4) {
     $7 = ($5|0)>(365);
     if ($7) {
      _AddCodeLine(25482,$vararg_buffer7);
      $8 = (_GetLocalLabel()|0);
      _AddCodeLine(26075,$vararg_buffer9);
      $9 = (_LocalLabelName($8)|0);
      HEAP32[$vararg_buffer11>>2] = $9;
      _AddCodeLine(25754,$vararg_buffer11);
      _AddCodeLine(25201,$vararg_buffer13);
      $10 = HEAP32[11209]|0;
      $11 = ((($10)) + 4|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (_LocalLabelName($8)|0);
      (_CS_AddLabel($12,$13)|0);
      _AddCodeLine(25340,$vararg_buffer15);
      _AddCodeLine(25349,$vararg_buffer17);
      break L1;
     } else {
      _AddCodeLine(26095,$vararg_buffer19);
      break L1;
     }
    } else {
     $6 = ($5|0)>(199);
     if ($6) {
      _AddCodeLine(25482,$vararg_buffer);
      _AddCodeLine(25340,$vararg_buffer1);
      _AddCodeLine(25349,$vararg_buffer3);
      break L1;
     } else {
      _AddCodeLine(26084,$vararg_buffer5);
      break L1;
     }
    }
   }
   break;
  }
  case 1:  {
   break;
  }
  case 0:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   _typeerror($0);
   // unreachable;
  }
  }
 } while(0);
 $14 = $0 & 8;
 $15 = ($14|0)==(0);
 if ($15) {
  _AddCodeLine(26137,$vararg_buffer29);
  STACKTOP = sp;return;
 }
 $16 = (_IS_Get(8588)|0);
 $17 = ($16|0)>(199);
 if ($17) {
  _AddCodeLine(25968,$vararg_buffer21);
  _AddCodeLine(26105,$vararg_buffer23);
  _AddCodeLine(26114,$vararg_buffer25);
  STACKTOP = sp;return;
 } else {
  _AddCodeLine(26125,$vararg_buffer27);
  STACKTOP = sp;return;
 }
}
function _g_typeadjust($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond5 = 0, $trunc$i = 0, $trunc$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 7;
 $3 = $1 & 7;
 $4 = ($3|0)!=(0);
 $5 = $1 & 32;
 $6 = $5 | $2;
 $7 = ($6|0)==(0);
 $8 = $4 & $7;
 if ($8) {
  _g_reglong($1);
  $9 = $1 & -8;
  $$032 = 0;$$033 = $2;$$034 = $9;$$035 = $0;
 } else {
  $10 = ($2|0)==(0);
  if ($10) {
   $$032 = $3;$$033 = 0;$$034 = $1;$$035 = $0;
  } else {
   $11 = $0 & 32;
   $12 = $3 | $11;
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = $0 & 2048;
    $15 = ($14|0)==(0);
    L6: do {
     if ($15) {
      $trunc$i = $0&255;
      $trunc$i$clear = $trunc$i & 7;
      switch ($trunc$i$clear<<24>>24) {
      case 0:  {
       break L6;
       break;
      }
      case 1: case 3:  {
       break;
      }
      default: {
       _typeerror($0);
       // unreachable;
      }
      }
      $16 = $0 & 8;
      $17 = ($16|0)==(0);
      if ($17) {
       _AddCodeLine(26052,$vararg_buffer1);
      } else {
       _AddCodeLine(26039,$vararg_buffer);
      }
      $18 = HEAP32[11252]|0;
      $19 = (($18) + -2)|0;
      HEAP32[11252] = $19;
     } else {
      _g_reglong($0);
     }
    } while(0);
    $20 = $0 & -8;
    $$032 = $3;$$033 = 0;$$034 = $1;$$035 = $20;
   } else {
    $$032 = $3;$$033 = $2;$$034 = $1;$$035 = $0;
   }
  }
 }
 $21 = $$035 & 32;
 $22 = $21 & $$034;
 $23 = $$034 | $$035;
 $24 = $23 & 8;
 $25 = $22 | $24;
 $26 = ($$032|0)==(0);
 $27 = ($$033|0)==(0);
 $or$cond5 = $27 | $26;
 $28 = $or$cond5&1;
 $29 = $25 | $28;
 $$0 = $29 ^ 1;
 STACKTOP = sp;return ($$0|0);
}
function _g_typecast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $1 & 32;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $trunc = $0&255;
   $trunc$clear = $trunc & 7;
   switch ($trunc$clear<<24>>24) {
   case 0:  {
    _g_reglong($1);
    break L1;
    break;
   }
   case 1:  {
    _g_regint($1);
    break L1;
    break;
   }
   case 3:  {
    _AddCodeLine(25482,$vararg_buffer);
    $4 = $0 & 8;
    $5 = ($4|0)==(0);
    if (!($5)) {
     break L1;
    }
    $6 = (_GetLocalLabel()|0);
    _AddCodeLine(26075,$vararg_buffer1);
    $7 = (_LocalLabelName($6)|0);
    HEAP32[$vararg_buffer3>>2] = $7;
    _AddCodeLine(25754,$vararg_buffer3);
    _AddCodeLine(25201,$vararg_buffer5);
    $8 = HEAP32[11209]|0;
    $9 = ((($8)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_LocalLabelName($6)|0);
    (_CS_AddLabel($10,$11)|0);
    break L1;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
  }
 } while(0);
 $12 = $2 | $0;
 STACKTOP = sp;return ($12|0);
}
function _g_scale($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$038 = 0, $$139 = 0, $$off = 0, $$off34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc35 = 0, $trunc35$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer29 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0);
 if ($2) {
  _Internal(26148,$vararg_buffer);
  // unreachable;
 }
 $3 = ($1|0)>(0);
 if ($3) {
  $4 = (_PowerOf2($1)|0);
  $$off34 = (($4) + -1)|0;
  $5 = ($$off34>>>0)<(4);
  if (!($5)) {
   $14 = ($1|0)==(1);
   if ($14) {
    STACKTOP = sp;return;
   }
   $15 = $0 | 32;
   _g_mul($15,$1);
   STACKTOP = sp;return;
  }
  $trunc35 = $0&255;
  $trunc35$clear = $trunc35 & 7;
  switch ($trunc35$clear<<24>>24) {
  case 3:  {
   $6 = $0 & 512;
   $7 = ($6|0)==(0);
   if (!($7)) {
    $$038 = $4;
    while(1) {
     $8 = (($$038) + -1)|0;
     _AddCodeLine(26170,$vararg_buffer1);
     $9 = ($8|0)==(0);
     if ($9) {
      break;
     } else {
      $$038 = $8;
     }
    }
    STACKTOP = sp;return;
   }
   break;
  }
  case 1:  {
   break;
  }
  case 0:  {
   $12 = $0 & 8;
   $13 = ($12|0)==(0);
   if ($13) {
    HEAP32[$vararg_buffer11>>2] = $4;
    _AddCodeLine(26213,$vararg_buffer11);
    STACKTOP = sp;return;
   } else {
    HEAP32[$vararg_buffer8>>2] = $4;
    _AddCodeLine(26200,$vararg_buffer8);
    STACKTOP = sp;return;
   }
   break;
  }
  default: {
   _typeerror($0);
   // unreachable;
  }
  }
  $10 = $0 & 8;
  $11 = ($10|0)==(0);
  if ($11) {
   HEAP32[$vararg_buffer5>>2] = $4;
   _AddCodeLine(26188,$vararg_buffer5);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer3>>2] = $4;
   _AddCodeLine(26176,$vararg_buffer3);
   STACKTOP = sp;return;
  }
 }
 $16 = (0 - ($1))|0;
 $17 = (_PowerOf2($16)|0);
 $$off = (($17) + -1)|0;
 $18 = ($$off>>>0)<(4);
 if (!($18)) {
  $30 = ($16|0)==(1);
  if ($30) {
   STACKTOP = sp;return;
  }
  $31 = $0 | 32;
  _g_div($31,$16);
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $19 = $0 & 512;
  $20 = ($19|0)==(0);
  if (!($20)) {
   $21 = $0 & 8;
   $22 = ($21|0)==(0);
   if (!($22)) {
    $$139 = $17;
    while(1) {
     $23 = (($$139) + -1)|0;
     _AddCodeLine(26226,$vararg_buffer14);
     $24 = ($23|0)==(0);
     if ($24) {
      break;
     } else {
      $$139 = $23;
     }
    }
    STACKTOP = sp;return;
   }
   $25 = ($17|0)<(3);
   if ($25) {
    _AddCodeLine(26075,$vararg_buffer16);
    _AddCodeLine(26232,$vararg_buffer18);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $28 = $0 & 8;
  $29 = ($28|0)==(0);
  if ($29) {
   HEAP32[$vararg_buffer29>>2] = $17;
   _AddCodeLine(26275,$vararg_buffer29);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer26>>2] = $17;
   _AddCodeLine(26262,$vararg_buffer26);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $26 = $0 & 8;
 $27 = ($26|0)==(0);
 if ($27) {
  HEAP32[$vararg_buffer23>>2] = $17;
  _AddCodeLine(26250,$vararg_buffer23);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer20>>2] = $17;
  _AddCodeLine(26238,$vararg_buffer20);
  STACKTOP = sp;return;
 }
}
function _g_mul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0;
 var $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer51 = sp + 208|0;
 $vararg_buffer49 = sp + 200|0;
 $vararg_buffer47 = sp + 192|0;
 $vararg_buffer45 = sp + 184|0;
 $vararg_buffer43 = sp + 176|0;
 $vararg_buffer41 = sp + 168|0;
 $vararg_buffer39 = sp + 160|0;
 $vararg_buffer37 = sp + 152|0;
 $vararg_buffer35 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = (_PowerOf2($1)|0);
   $5 = ($4|0)>(-1);
   if ($5) {
    _g_asl($0,$4);
    STACKTOP = sp;return;
   }
   $trunc = $0&255;
   $trunc$clear = $trunc & 7;
   switch ($trunc$clear<<24>>24) {
   case 3:  {
    label = 5;
    break;
   }
   case 1:  {
    label = 11;
    break;
   }
   case 0:  {
    label = 19;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   L9: do {
    if ((label|0) == 5) {
     $6 = $0 & 512;
     $7 = ($6|0)==(0);
     if ($7) {
      label = 11;
     } else {
      switch ($1|0) {
      case 7:  {
       label = 15;
       break L9;
       break;
      }
      case 9:  {
       label = 16;
       break L9;
       break;
      }
      case 3:  {
       _AddCodeLine(26466,$vararg_buffer);
       _AddCodeLine(26170,$vararg_buffer1);
       _AddCodeLine(24951,$vararg_buffer3);
       _AddCodeLine(26475,$vararg_buffer5);
       STACKTOP = sp;return;
       break;
      }
      case 5:  {
       _AddCodeLine(26466,$vararg_buffer7);
       _AddCodeLine(26170,$vararg_buffer9);
       _AddCodeLine(26170,$vararg_buffer11);
       _AddCodeLine(24951,$vararg_buffer13);
       _AddCodeLine(26475,$vararg_buffer15);
       STACKTOP = sp;return;
       break;
      }
      case 6:  {
       _AddCodeLine(26466,$vararg_buffer17);
       _AddCodeLine(26170,$vararg_buffer19);
       _AddCodeLine(24951,$vararg_buffer21);
       _AddCodeLine(26475,$vararg_buffer23);
       _AddCodeLine(26170,$vararg_buffer25);
       STACKTOP = sp;return;
       break;
      }
      case 10:  {
       _AddCodeLine(26466,$vararg_buffer27);
       _AddCodeLine(26170,$vararg_buffer29);
       _AddCodeLine(26170,$vararg_buffer31);
       _AddCodeLine(24951,$vararg_buffer33);
       _AddCodeLine(26475,$vararg_buffer35);
       _AddCodeLine(26170,$vararg_buffer37);
       STACKTOP = sp;return;
       break;
      }
      default: {
       label = 19;
       break L9;
      }
      }
     }
    }
   } while(0);
   L21: do {
    if ((label|0) == 11) {
     switch ($1|0) {
     case 7:  {
      label = 15;
      break L21;
      break;
     }
     case 9:  {
      label = 16;
      break L21;
      break;
     }
     case 3:  {
      _AddCodeLine(26484,$vararg_buffer39);
      STACKTOP = sp;return;
      break;
     }
     case 5:  {
      _AddCodeLine(26495,$vararg_buffer41);
      STACKTOP = sp;return;
      break;
     }
     case 6:  {
      _AddCodeLine(26506,$vararg_buffer43);
      STACKTOP = sp;return;
      break;
     }
     case 10:  {
      _AddCodeLine(26539,$vararg_buffer49);
      STACKTOP = sp;return;
      break;
     }
     default: {
      label = 19;
      break L21;
     }
     }
    }
   } while(0);
   if ((label|0) == 15) {
    _AddCodeLine(26517,$vararg_buffer45);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 16) {
    _AddCodeLine(26528,$vararg_buffer47);
    STACKTOP = sp;return;
   }
   else if ((label|0) == 19) {
    $8 = $0 & -513;
    $9 = $0 & -545;
    _g_push($9,0);
    $$0 = $8;
    break;
   }
  }
 } while(0);
 $10 = $$0 & 8;
 $11 = ($10|0)==(0);
 $$$i = $11 ? 6656 : (6660);
 $12 = $$0 & 7;
 $13 = ($12|0)==(0);
 $14 = ((($$$i)) + 8|0);
 $$1$i = $13 ? $14 : $$$i;
 $15 = $$0 & 32;
 $16 = ($15|0)==(0);
 if (!($16)) {
  _g_getimmed($$0,$1,0);
 }
 $17 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer51>>2] = $17;
 _AddCodeLine(25773,$vararg_buffer51);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $18 = $$0 >>> 9;
  $19 = $18 & 1;
  $20 = (2 - ($19))|0;
  $$0$i$i$i = $20;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $21 = HEAP32[11252]|0;
 $22 = (($21) + ($$0$i$i$i))|0;
 HEAP32[11252] = $22;
 STACKTOP = sp;return;
}
function _g_div($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = (_PowerOf2($1)|0);
   $5 = ($4|0)>(-1);
   if (!($5)) {
    $6 = $0 & -513;
    $7 = $0 & -545;
    _g_push($7,0);
    $$0 = $6;
    break;
   }
   _g_asr($0,$4);
   STACKTOP = sp;return;
  }
 } while(0);
 $8 = $$0 & 8;
 $9 = ($8|0)==(0);
 $$$i = $9 ? 6560 : (6564);
 $10 = $$0 & 7;
 $11 = ($10|0)==(0);
 $12 = ((($$$i)) + 8|0);
 $$1$i = $11 ? $12 : $$$i;
 $13 = $$0 & 32;
 $14 = ($13|0)==(0);
 if (!($14)) {
  _g_getimmed($$0,$1,0);
 }
 $15 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer>>2] = $15;
 _AddCodeLine(25773,$vararg_buffer);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $16 = $$0 >>> 9;
  $17 = $16 & 1;
  $18 = (2 - ($17))|0;
  $$0$i$i$i = $18;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $19 = HEAP32[11252]|0;
 $20 = (($19) + ($$0$i$i$i))|0;
 HEAP32[11252] = $20;
 STACKTOP = sp;return;
}
function _g_asr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0$i$i$i = 0, $$048 = 0, $$1 = 0, $$1$i = 0, $$4 = 0, $$5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0;
 var $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer82 = 0, $vararg_buffer9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $vararg_buffer82 = sp + 304|0;
 $vararg_buffer79 = sp + 296|0;
 $vararg_buffer76 = sp + 288|0;
 $vararg_buffer74 = sp + 280|0;
 $vararg_buffer72 = sp + 272|0;
 $vararg_buffer70 = sp + 264|0;
 $vararg_buffer68 = sp + 256|0;
 $vararg_buffer66 = sp + 248|0;
 $vararg_buffer63 = sp + 240|0;
 $vararg_buffer61 = sp + 232|0;
 $vararg_buffer59 = sp + 224|0;
 $vararg_buffer57 = sp + 216|0;
 $vararg_buffer55 = sp + 208|0;
 $vararg_buffer53 = sp + 200|0;
 $vararg_buffer51 = sp + 192|0;
 $vararg_buffer49 = sp + 184|0;
 $vararg_buffer47 = sp + 176|0;
 $vararg_buffer45 = sp + 168|0;
 $vararg_buffer43 = sp + 160|0;
 $vararg_buffer40 = sp + 152|0;
 $vararg_buffer38 = sp + 144|0;
 $vararg_buffer36 = sp + 136|0;
 $vararg_buffer34 = sp + 128|0;
 $vararg_buffer32 = sp + 120|0;
 $vararg_buffer30 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 if ($3) {
  $60 = $0 & 8;
  $61 = ($60|0)==(0);
  $$$i = $61 ? 6608 : (6612);
  $62 = $0 & 7;
  $63 = ($62|0)==(0);
  $64 = ((($$$i)) + 8|0);
  $$1$i = $63 ? $64 : $$$i;
  $65 = HEAP32[$$1$i>>2]|0;
  HEAP32[$vararg_buffer82>>2] = $65;
  _AddCodeLine(25773,$vararg_buffer82);
  $trunc$i$i$i = $0&255;
  $trunc$i$i$i$clear = $trunc$i$i$i & 7;
  switch ($trunc$i$i$i$clear<<24>>24) {
  case 3:  {
   $66 = $0 >>> 9;
   $67 = $66 & 1;
   $68 = (2 - ($67))|0;
   $$0$i$i$i = $68;
   break;
  }
  case 1:  {
   $$0$i$i$i = 2;
   break;
  }
  case 0:  {
   $$0$i$i$i = 4;
   break;
  }
  case 4:  {
   $$0$i$i$i = 4;
   break;
  }
  default: {
   _typeerror($0);
   // unreachable;
  }
  }
  $69 = HEAP32[11252]|0;
  $70 = (($69) + ($$0$i$i$i))|0;
  HEAP32[11252] = $70;
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 1: case 3:  {
  $4 = $1 & 15;
  $5 = ($4>>>0)>(7);
  if ($5) {
   $6 = $0 & 8;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = (_GetLocalLabel()|0);
    _AddCodeLine(26288,$vararg_buffer3);
    _AddCodeLine(25104,$vararg_buffer5);
    _AddCodeLine(25482,$vararg_buffer7);
    $9 = (_LocalLabelName($8)|0);
    HEAP32[$vararg_buffer9>>2] = $9;
    _AddCodeLine(25754,$vararg_buffer9);
    _AddCodeLine(25201,$vararg_buffer11);
    $10 = HEAP32[11209]|0;
    $11 = ((($10)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (_LocalLabelName($8)|0);
    (_CS_AddLabel($12,$13)|0);
   } else {
    _AddCodeLine(25104,$vararg_buffer);
    _AddCodeLine(25482,$vararg_buffer1);
   }
   $14 = (($4) + -8)|0;
   $$048 = $14;
  } else {
   $$048 = $4;
  }
  $15 = ($$048>>>0)>(3);
  if ($15) {
   $16 = $0 & 8;
   $17 = ($16|0)==(0);
   if ($17) {
    _AddCodeLine(26308,$vararg_buffer15);
   } else {
    _AddCodeLine(26297,$vararg_buffer13);
   }
   $18 = (($$048) + -4)|0;
   $$1 = $18;
  } else {
   $$1 = $$048;
  }
  $19 = ($$1|0)==(0);
  if ($19) {
   STACKTOP = sp;return;
  }
  $20 = $0 & 8;
  $21 = ($20|0)==(0);
  if ($21) {
   HEAP32[$vararg_buffer20>>2] = $$1;
   _AddCodeLine(26332,$vararg_buffer20);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer17>>2] = $$1;
   _AddCodeLine(26319,$vararg_buffer17);
   STACKTOP = sp;return;
  }
  break;
 }
 case 0:  {
  $22 = $1 & 31;
  $23 = ($22>>>0)>(23);
  do {
   if ($23) {
    _AddCodeLine(25482,$vararg_buffer23);
    _AddCodeLine(26345,$vararg_buffer25);
    $24 = $0 & 8;
    $25 = ($24|0)==(0);
    if ($25) {
     $26 = (_GetLocalLabel()|0);
     $27 = (_LocalLabelName($26)|0);
     HEAP32[$vararg_buffer27>>2] = $27;
     _AddCodeLine(25324,$vararg_buffer27);
     _AddCodeLine(25201,$vararg_buffer30);
     $28 = HEAP32[11209]|0;
     $29 = ((($28)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (_LocalLabelName($26)|0);
     (_CS_AddLabel($30,$31)|0);
    }
    _AddCodeLine(25340,$vararg_buffer32);
    _AddCodeLine(25349,$vararg_buffer34);
    $32 = (($22) + -24)|0;
    $$4 = $32;
   } else {
    $33 = ($22>>>0)>(15);
    if ($33) {
     _AddCodeLine(25968,$vararg_buffer36);
     _AddCodeLine(26356,$vararg_buffer38);
     $34 = $0 & 8;
     $35 = ($34|0)==(0);
     if ($35) {
      $36 = (_GetLocalLabel()|0);
      $37 = (_LocalLabelName($36)|0);
      HEAP32[$vararg_buffer40>>2] = $37;
      _AddCodeLine(25324,$vararg_buffer40);
      _AddCodeLine(25197,$vararg_buffer43);
      $38 = HEAP32[11209]|0;
      $39 = ((($38)) + 4|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (_LocalLabelName($36)|0);
      (_CS_AddLabel($40,$41)|0);
     }
     _AddCodeLine(26367,$vararg_buffer45);
     _AddCodeLine(26114,$vararg_buffer47);
     _AddCodeLine(26105,$vararg_buffer49);
     $42 = (($22) + -16)|0;
     $$4 = $42;
     break;
    }
    $43 = ($22>>>0)>(7);
    if ($43) {
     _AddCodeLine(25104,$vararg_buffer51);
     _AddCodeLine(26376,$vararg_buffer53);
     _AddCodeLine(25919,$vararg_buffer55);
     _AddCodeLine(26105,$vararg_buffer57);
     $44 = $0 & 8;
     $45 = ($44|0)==(0);
     if ($45) {
      $46 = (_GetLocalLabel()|0);
      _AddCodeLine(26385,$vararg_buffer59);
      _AddCodeLine(25968,$vararg_buffer61);
      $47 = (_LocalLabelName($46)|0);
      HEAP32[$vararg_buffer63>>2] = $47;
      _AddCodeLine(25754,$vararg_buffer63);
      _AddCodeLine(25197,$vararg_buffer66);
      $48 = HEAP32[11209]|0;
      $49 = ((($48)) + 4|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = (_LocalLabelName($46)|0);
      (_CS_AddLabel($50,$51)|0);
     } else {
      _AddCodeLine(25968,$vararg_buffer68);
     }
     _AddCodeLine(26114,$vararg_buffer70);
     $52 = (($22) + -8)|0;
     $$4 = $52;
    } else {
     $$4 = $22;
    }
   }
  } while(0);
  $53 = ($$4>>>0)>(3);
  if ($53) {
   $54 = $0 & 8;
   $55 = ($54|0)==(0);
   if ($55) {
    _AddCodeLine(26406,$vararg_buffer74);
   } else {
    _AddCodeLine(26394,$vararg_buffer72);
   }
   $56 = (($$4) + -4)|0;
   $$5 = $56;
  } else {
   $$5 = $$4;
  }
  $57 = ($$5|0)==(0);
  if ($57) {
   STACKTOP = sp;return;
  }
  $58 = $0 & 8;
  $59 = ($58|0)==(0);
  if ($59) {
   HEAP32[$vararg_buffer79>>2] = $$5;
   _AddCodeLine(26432,$vararg_buffer79);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer76>>2] = $$5;
   _AddCodeLine(26418,$vararg_buffer76);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_asl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1 = 0, $$1$i = 0, $$4 = 0, $$532 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $vararg_buffer48 = sp + 184|0;
 $vararg_buffer45 = sp + 176|0;
 $vararg_buffer42 = sp + 168|0;
 $vararg_buffer40 = sp + 160|0;
 $vararg_buffer38 = sp + 152|0;
 $vararg_buffer36 = sp + 144|0;
 $vararg_buffer34 = sp + 136|0;
 $vararg_buffer32 = sp + 128|0;
 $vararg_buffer30 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 if ($3) {
  $28 = $0 & 8;
  $29 = ($28|0)==(0);
  $$$i = $29 ? 6704 : (6708);
  $30 = $0 & 7;
  $31 = ($30|0)==(0);
  $32 = ((($$$i)) + 8|0);
  $$1$i = $31 ? $32 : $$$i;
  $33 = HEAP32[$$1$i>>2]|0;
  HEAP32[$vararg_buffer48>>2] = $33;
  _AddCodeLine(25773,$vararg_buffer48);
  $trunc$i$i$i = $0&255;
  $trunc$i$i$i$clear = $trunc$i$i$i & 7;
  switch ($trunc$i$i$i$clear<<24>>24) {
  case 3:  {
   $34 = $0 >>> 9;
   $35 = $34 & 1;
   $36 = (2 - ($35))|0;
   $$0$i$i$i = $36;
   break;
  }
  case 1:  {
   $$0$i$i$i = 2;
   break;
  }
  case 0:  {
   $$0$i$i$i = 4;
   break;
  }
  case 4:  {
   $$0$i$i$i = 4;
   break;
  }
  default: {
   _typeerror($0);
   // unreachable;
  }
  }
  $37 = HEAP32[11252]|0;
  $38 = (($37) + ($$0$i$i$i))|0;
  HEAP32[11252] = $38;
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 1: case 3:  {
  $4 = $1 & 15;
  $5 = ($4>>>0)>(7);
  if ($5) {
   $6 = (($4) + -8)|0;
   _AddCodeLine(25604,$vararg_buffer);
   _AddCodeLine(26551,$vararg_buffer1);
   $$0 = $6;
  } else {
   $$0 = $4;
  }
  $7 = ($$0>>>0)>(3);
  if ($7) {
   $8 = $0 & 8;
   $9 = ($8|0)==(0);
   if ($9) {
    _AddCodeLine(26571,$vararg_buffer5);
   } else {
    _AddCodeLine(26560,$vararg_buffer3);
   }
   $10 = (($$0) + -4)|0;
   $$1 = $10;
  } else {
   $$1 = $$0;
  }
  $11 = ($$1|0)==(0);
  if ($11) {
   STACKTOP = sp;return;
  }
  $12 = $0 & 8;
  $13 = ($12|0)==(0);
  if ($13) {
   HEAP32[$vararg_buffer9>>2] = $$1;
   _AddCodeLine(26595,$vararg_buffer9);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer7>>2] = $$1;
   _AddCodeLine(26582,$vararg_buffer7);
   STACKTOP = sp;return;
  }
  break;
 }
 case 0:  {
  $14 = $1 & 31;
  $15 = ($14>>>0)>(23);
  do {
   if ($15) {
    $16 = (($14) + -24)|0;
    _AddCodeLine(25369,$vararg_buffer12);
    _AddCodeLine(26551,$vararg_buffer14);
    _AddCodeLine(25604,$vararg_buffer16);
    _AddCodeLine(25360,$vararg_buffer18);
    $$4 = $16;
   } else {
    $17 = ($14>>>0)>(15);
    if ($17) {
     $18 = (($14) + -16)|0;
     _AddCodeLine(25349,$vararg_buffer20);
     _AddCodeLine(25360,$vararg_buffer22);
     _AddCodeLine(26551,$vararg_buffer24);
     _AddCodeLine(25604,$vararg_buffer26);
     $$4 = $18;
     break;
    }
    $19 = ($14>>>0)>(7);
    if ($19) {
     _AddCodeLine(25901,$vararg_buffer28);
     _AddCodeLine(26114,$vararg_buffer30);
     _AddCodeLine(25340,$vararg_buffer32);
     _AddCodeLine(25604,$vararg_buffer34);
     _AddCodeLine(26551,$vararg_buffer36);
     $20 = (($14) + -8)|0;
     $$4 = $20;
    } else {
     $$4 = $14;
    }
   }
  } while(0);
  $21 = ($$4>>>0)>(4);
  if ($21) {
   $22 = $0 & 8;
   $23 = ($22|0)==(0);
   if ($23) {
    _AddCodeLine(26620,$vararg_buffer40);
   } else {
    _AddCodeLine(26608,$vararg_buffer38);
   }
   $24 = (($$4) + -4)|0;
   $$532 = $24;
  } else {
   $25 = ($$4|0)==(0);
   if ($25) {
    STACKTOP = sp;return;
   } else {
    $$532 = $$4;
   }
  }
  $26 = $0 & 8;
  $27 = ($26|0)==(0);
  if ($27) {
   HEAP32[$vararg_buffer45>>2] = $$532;
   _AddCodeLine(26646,$vararg_buffer45);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer42>>2] = $$532;
   _AddCodeLine(26632,$vararg_buffer42);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_addlocal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer29 = sp + 112|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11252]|0;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)>(255);
 if ($4) {
  _Error(25014,$vararg_buffer);
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $5 = (_GetLocalLabel()|0);
  $6 = $3 & 255;
  HEAP32[$vararg_buffer1>>2] = $6;
  _AddCodeLine(24910,$vararg_buffer1);
  _AddCodeLine(24951,$vararg_buffer3);
  _AddCodeLine(25977,$vararg_buffer5);
  $7 = (_LocalLabelName($5)|0);
  HEAP32[$vararg_buffer7>>2] = $7;
  _AddCodeLine(25754,$vararg_buffer7);
  _AddCodeLine(25726,$vararg_buffer10);
  $8 = HEAP32[11209]|0;
  $9 = ((($8)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_LocalLabelName($5)|0);
  (_CS_AddLabel($10,$11)|0);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $12 = $3 & 255;
  HEAP32[$vararg_buffer12>>2] = $12;
  _AddCodeLine(24910,$vararg_buffer12);
  _AddCodeLine(24951,$vararg_buffer15);
  _AddCodeLine(25977,$vararg_buffer17);
  _AddCodeLine(24936,$vararg_buffer19);
  _AddCodeLine(25104,$vararg_buffer21);
  _AddCodeLine(25266,$vararg_buffer23);
  _AddCodeLine(25977,$vararg_buffer25);
  _AddCodeLine(25604,$vararg_buffer27);
  _AddCodeLine(24987,$vararg_buffer29);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  _g_push($0,0);
  _g_getlocal($0,$3);
  _g_add($0,0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_addstatic($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _GetLabelName($0,$1,$2);
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $3 = (_GetLocalLabel()|0);
  _AddCodeLine(24951,$vararg_buffer);
  HEAP32[$vararg_buffer1>>2] = 46640;
  _AddCodeLine(26680,$vararg_buffer1);
  $4 = (_LocalLabelName($3)|0);
  HEAP32[$vararg_buffer3>>2] = $4;
  _AddCodeLine(25754,$vararg_buffer3);
  _AddCodeLine(25726,$vararg_buffer6);
  $5 = HEAP32[11209]|0;
  $6 = ((($5)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_LocalLabelName($3)|0);
  (_CS_AddLabel($7,$8)|0);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _AddCodeLine(24951,$vararg_buffer8);
  HEAP32[$vararg_buffer10>>2] = 46640;
  _AddCodeLine(26680,$vararg_buffer10);
  _AddCodeLine(26687,$vararg_buffer13);
  _AddCodeLine(25104,$vararg_buffer15);
  HEAP32[$vararg_buffer17>>2] = 46640;
  _AddCodeLine(26691,$vararg_buffer17);
  _AddCodeLine(25604,$vararg_buffer20);
  _AddCodeLine(25939,$vararg_buffer22);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  _g_push($0,0);
  _g_getstatic($0,$1,$2);
  _g_add($0,0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_addeqstatic($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer105 = 0, $vararg_buffer108 = 0, $vararg_buffer11 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer118 = 0, $vararg_buffer120 = 0, $vararg_buffer123 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer6 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer79 = 0, $vararg_buffer81 = 0;
 var $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer89 = 0, $vararg_buffer9 = 0, $vararg_buffer92 = 0, $vararg_buffer95 = 0, $vararg_buffer97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $vararg_buffer123 = sp + 368|0;
 $vararg_buffer120 = sp + 360|0;
 $vararg_buffer118 = sp + 352|0;
 $vararg_buffer115 = sp + 344|0;
 $vararg_buffer113 = sp + 336|0;
 $vararg_buffer110 = sp + 328|0;
 $vararg_buffer108 = sp + 320|0;
 $vararg_buffer105 = sp + 312|0;
 $vararg_buffer103 = sp + 304|0;
 $vararg_buffer100 = sp + 296|0;
 $vararg_buffer97 = sp + 288|0;
 $vararg_buffer95 = sp + 280|0;
 $vararg_buffer92 = sp + 272|0;
 $vararg_buffer89 = sp + 264|0;
 $vararg_buffer87 = sp + 256|0;
 $vararg_buffer84 = sp + 248|0;
 $vararg_buffer81 = sp + 240|0;
 $vararg_buffer79 = sp + 232|0;
 $vararg_buffer76 = sp + 224|0;
 $vararg_buffer74 = sp + 216|0;
 $vararg_buffer71 = sp + 208|0;
 $vararg_buffer68 = sp + 200|0;
 $vararg_buffer65 = sp + 192|0;
 $vararg_buffer62 = sp + 184|0;
 $vararg_buffer59 = sp + 176|0;
 $vararg_buffer56 = sp + 168|0;
 $vararg_buffer53 = sp + 160|0;
 $vararg_buffer50 = sp + 152|0;
 $vararg_buffer48 = sp + 144|0;
 $vararg_buffer45 = sp + 136|0;
 $vararg_buffer42 = sp + 128|0;
 $vararg_buffer39 = sp + 120|0;
 $vararg_buffer36 = sp + 112|0;
 $vararg_buffer33 = sp + 104|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer28 = sp + 88|0;
 $vararg_buffer25 = sp + 80|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _GetLabelName($0,$1,$2);
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $4 = $0 & 512;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _AddCodeLine(25482,$vararg_buffer);
   $6 = $0 & 32;
   $7 = ($6|0)==(0);
   do {
    if ($7) {
     _AddCodeLine(24951,$vararg_buffer17);
     HEAP32[$vararg_buffer19>>2] = 46640;
     _AddCodeLine(26680,$vararg_buffer19);
     HEAP32[$vararg_buffer22>>2] = 46640;
     _AddCodeLine(25885,$vararg_buffer22);
    } else {
     $8 = ($3|0)==(1);
     if ($8) {
      HEAP32[$vararg_buffer1>>2] = 46640;
      _AddCodeLine(26700,$vararg_buffer1);
      HEAP32[$vararg_buffer3>>2] = 46640;
      _AddCodeLine(25475,$vararg_buffer3);
      break;
     } else {
      $9 = $3 & 255;
      HEAP32[$vararg_buffer6>>2] = $9;
      _AddCodeLine(24940,$vararg_buffer6);
      _AddCodeLine(24951,$vararg_buffer9);
      HEAP32[$vararg_buffer11>>2] = 46640;
      _AddCodeLine(26680,$vararg_buffer11);
      HEAP32[$vararg_buffer14>>2] = 46640;
      _AddCodeLine(25885,$vararg_buffer14);
      break;
     }
    }
   } while(0);
   $10 = $0 & 8;
   $11 = ($10|0)==(0);
   if (!($11)) {
    STACKTOP = sp;return;
   }
   $12 = (_GetLocalLabel()|0);
   $13 = (_LocalLabelName($12)|0);
   HEAP32[$vararg_buffer25>>2] = $13;
   _AddCodeLine(25324,$vararg_buffer25);
   _AddCodeLine(25201,$vararg_buffer28);
   $14 = HEAP32[11209]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_LocalLabelName($12)|0);
   (_CS_AddLabel($16,$17)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $37 = $0 & 32;
  $38 = ($37|0)==(0);
  if ($38) {
   HEAP32[$vararg_buffer115>>2] = 46640;
   _AddCodeLine(26725,$vararg_buffer115);
   _AddCodeLine(26736,$vararg_buffer118);
   HEAP32[$vararg_buffer120>>2] = 46640;
   _AddCodeLine(26745,$vararg_buffer120);
   _AddCodeLine(26780,$vararg_buffer123);
   STACKTOP = sp;return;
  }
  $39 = ($3>>>0)<(256);
  if (!($39)) {
   _g_getstatic($0,$1,$2);
   _g_inc($0,$3);
   _g_putstatic($0,$1,$2);
   STACKTOP = sp;return;
  }
  HEAP32[$vararg_buffer100>>2] = 46640;
  _AddCodeLine(26725,$vararg_buffer100);
  _AddCodeLine(26736,$vararg_buffer103);
  HEAP32[$vararg_buffer105>>2] = 46640;
  _AddCodeLine(26745,$vararg_buffer105);
  $40 = ($3|0)==(1);
  if ($40) {
   _AddCodeLine(26756,$vararg_buffer108);
   STACKTOP = sp;return;
  } else {
   $41 = $3 & 255;
   HEAP32[$vararg_buffer110>>2] = $41;
   _AddCodeLine(24940,$vararg_buffer110);
   _AddCodeLine(26768,$vararg_buffer113);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $18 = $0 & 32;
 $19 = ($18|0)==(0);
 if ($19) {
  _AddCodeLine(24951,$vararg_buffer79);
  HEAP32[$vararg_buffer81>>2] = 46640;
  _AddCodeLine(26680,$vararg_buffer81);
  HEAP32[$vararg_buffer84>>2] = 46640;
  _AddCodeLine(25885,$vararg_buffer84);
  _AddCodeLine(25104,$vararg_buffer87);
  HEAP32[$vararg_buffer89>>2] = 46640;
  _AddCodeLine(26691,$vararg_buffer89);
  HEAP32[$vararg_buffer92>>2] = 46640;
  _AddCodeLine(26716,$vararg_buffer92);
  _AddCodeLine(25604,$vararg_buffer95);
  HEAP32[$vararg_buffer97>>2] = 46640;
  _AddCodeLine(25475,$vararg_buffer97);
  STACKTOP = sp;return;
 }
 $20 = ($3|0)==(1);
 if ($20) {
  $21 = (_GetLocalLabel()|0);
  HEAP32[$vararg_buffer30>>2] = 46640;
  _AddCodeLine(26700,$vararg_buffer30);
  $22 = (_LocalLabelName($21)|0);
  HEAP32[$vararg_buffer33>>2] = $22;
  _AddCodeLine(25205,$vararg_buffer33);
  HEAP32[$vararg_buffer36>>2] = 46640;
  _AddCodeLine(26707,$vararg_buffer36);
  $23 = HEAP32[11209]|0;
  $24 = ((($23)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_LocalLabelName($21)|0);
  (_CS_AddLabel($25,$26)|0);
  HEAP32[$vararg_buffer39>>2] = 46640;
  _AddCodeLine(25475,$vararg_buffer39);
  HEAP32[$vararg_buffer42>>2] = 46640;
  _AddCodeLine(25500,$vararg_buffer42);
  STACKTOP = sp;return;
 }
 $27 = $3 & 255;
 HEAP32[$vararg_buffer45>>2] = $27;
 _AddCodeLine(24940,$vararg_buffer45);
 _AddCodeLine(24951,$vararg_buffer48);
 HEAP32[$vararg_buffer50>>2] = 46640;
 _AddCodeLine(26680,$vararg_buffer50);
 HEAP32[$vararg_buffer53>>2] = 46640;
 _AddCodeLine(25885,$vararg_buffer53);
 $28 = ($3>>>0)<(256);
 if ($28) {
  $29 = (_GetLocalLabel()|0);
  $30 = (_LocalLabelName($29)|0);
  HEAP32[$vararg_buffer56>>2] = $30;
  _AddCodeLine(25754,$vararg_buffer56);
  HEAP32[$vararg_buffer59>>2] = 46640;
  _AddCodeLine(26707,$vararg_buffer59);
  $31 = HEAP32[11209]|0;
  $32 = ((($31)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_LocalLabelName($29)|0);
  (_CS_AddLabel($33,$34)|0);
  HEAP32[$vararg_buffer62>>2] = 46640;
  _AddCodeLine(25500,$vararg_buffer62);
  STACKTOP = sp;return;
 } else {
  $35 = $3 >>> 8;
  $36 = $35 & 255;
  HEAP32[$vararg_buffer65>>2] = $36;
  _AddCodeLine(24940,$vararg_buffer65);
  HEAP32[$vararg_buffer68>>2] = 46640;
  _AddCodeLine(26691,$vararg_buffer68);
  HEAP32[$vararg_buffer71>>2] = 46640;
  _AddCodeLine(26716,$vararg_buffer71);
  _AddCodeLine(25604,$vararg_buffer74);
  HEAP32[$vararg_buffer76>>2] = 46640;
  _AddCodeLine(25475,$vararg_buffer76);
  STACKTOP = sp;return;
 }
}
function _g_addeqlocal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $vararg_buffer57 = sp + 208|0;
 $vararg_buffer54 = sp + 200|0;
 $vararg_buffer52 = sp + 192|0;
 $vararg_buffer50 = sp + 184|0;
 $vararg_buffer48 = sp + 176|0;
 $vararg_buffer46 = sp + 168|0;
 $vararg_buffer44 = sp + 160|0;
 $vararg_buffer42 = sp + 152|0;
 $vararg_buffer40 = sp + 144|0;
 $vararg_buffer37 = sp + 136|0;
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer31 = sp + 112|0;
 $vararg_buffer28 = sp + 104|0;
 $vararg_buffer26 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[11252]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>(255);
 if ($5) {
  _Error(25014,$vararg_buffer);
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $6 = $0 & 512;
  $7 = ($6|0)==(0);
  if (!($7)) {
   HEAP32[$vararg_buffer1>>2] = $4;
   _AddCodeLine(24910,$vararg_buffer1);
   _AddCodeLine(25482,$vararg_buffer3);
   $8 = $0 & 32;
   $9 = ($8|0)==(0);
   _AddCodeLine(24951,$vararg_buffer5);
   if ($9) {
    _AddCodeLine(25977,$vararg_buffer14);
    _AddCodeLine(25108,$vararg_buffer16);
   } else {
    $10 = $2 & 255;
    HEAP32[$vararg_buffer7>>2] = $10;
    _AddCodeLine(24940,$vararg_buffer7);
    _AddCodeLine(25977,$vararg_buffer10);
    _AddCodeLine(25108,$vararg_buffer12);
   }
   $11 = $0 & 8;
   $12 = ($11|0)==(0);
   if (!($12)) {
    STACKTOP = sp;return;
   }
   $13 = (_GetLocalLabel()|0);
   $14 = (_LocalLabelName($13)|0);
   HEAP32[$vararg_buffer18>>2] = $14;
   _AddCodeLine(25324,$vararg_buffer18);
   _AddCodeLine(25201,$vararg_buffer21);
   $15 = HEAP32[11209]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_LocalLabelName($13)|0);
   (_CS_AddLabel($17,$18)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $26 = $0 & 32;
  $27 = ($26|0)==(0);
  if (!($27)) {
   _g_getimmed($0,$2,0);
  }
  HEAP32[$vararg_buffer54>>2] = $4;
  _AddCodeLine(24910,$vararg_buffer54);
  _AddCodeLine(26804,$vararg_buffer57);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 HEAP32[$vararg_buffer23>>2] = $4;
 _AddCodeLine(24910,$vararg_buffer23);
 $19 = $0 & 32;
 $20 = ($19|0)==(0);
 if ($20) {
  _AddCodeLine(26791,$vararg_buffer52);
  STACKTOP = sp;return;
 }
 $21 = (_IS_Get(8588)|0);
 $22 = ($21|0)>(399);
 if ($22) {
  _AddCodeLine(24951,$vararg_buffer26);
  $23 = $2 & 255;
  HEAP32[$vararg_buffer28>>2] = $23;
  _AddCodeLine(24940,$vararg_buffer28);
  _AddCodeLine(25977,$vararg_buffer31);
  _AddCodeLine(25108,$vararg_buffer33);
  _AddCodeLine(25266,$vararg_buffer35);
  $24 = $2 >>> 8;
  $25 = $24 & 255;
  HEAP32[$vararg_buffer37>>2] = $25;
  _AddCodeLine(24940,$vararg_buffer37);
  _AddCodeLine(25977,$vararg_buffer40);
  _AddCodeLine(25108,$vararg_buffer42);
  _AddCodeLine(25604,$vararg_buffer44);
  _AddCodeLine(25197,$vararg_buffer46);
  _AddCodeLine(25063,$vararg_buffer48);
  STACKTOP = sp;return;
 } else {
  _g_getimmed($0,$2,0);
  _AddCodeLine(26791,$vararg_buffer50);
  STACKTOP = sp;return;
 }
}
function _g_addeqind($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0$i$i = 0, $$011$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$clear18 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $1 & -256;
 $4 = $1 & 255;
 $trunc$i$i = $0&255;
 $trunc$i$i$clear = $trunc$i$i & 7;
 switch ($trunc$i$i$clear<<24>>24) {
 case 3:  {
  $5 = $0 >>> 9;
  $6 = $5 & 1;
  $7 = (2 - ($6))|0;
  $$0$i$i = $7;
  break;
 }
 case 1:  {
  $$0$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i = 4;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $8 = (256 - ($$0$i$i))|0;
 $9 = ($4>>>0)>($8>>>0);
 $$$i = $9 ? $1 : $3;
 $10 = ($$$i|0)==(0);
 if ($10) {
  $$011$i = $1;
 } else {
  $11 = (($1) - ($$$i))|0;
  _g_inc(33,$$$i);
  $$011$i = $11;
 }
 $trunc$i$i$clear18 = $trunc$i$i & 7;
 switch ($trunc$i$i$clear18<<24>>24) {
 case 3:  {
  _AddCodeLine(25640,$vararg_buffer);
  _AddCodeLine(25649,$vararg_buffer1);
  HEAP32[$vararg_buffer3>>2] = $$011$i;
  _AddCodeLine(24910,$vararg_buffer3);
  _AddCodeLine(25482,$vararg_buffer5);
  $12 = $2 & 255;
  HEAP32[$vararg_buffer7>>2] = $12;
  _AddCodeLine(24940,$vararg_buffer7);
  _AddCodeLine(24951,$vararg_buffer10);
  _AddCodeLine(26818,$vararg_buffer12);
  _AddCodeLine(26831,$vararg_buffer14);
  STACKTOP = sp;return;
  break;
 }
 case 0: case 1:  {
  _AddCodeLine(25169,$vararg_buffer16);
  $13 = HEAP32[11252]|0;
  $14 = (($13) + -2)|0;
  HEAP32[11252] = $14;
  _g_getind($0,$$011$i);
  _g_inc($0,$2);
  _g_putind($0,$$011$i);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_subeqstatic($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer102 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer109 = 0, $vararg_buffer11 = 0, $vararg_buffer112 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer61 = 0;
 var $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer88 = 0, $vararg_buffer9 = 0, $vararg_buffer91 = 0, $vararg_buffer94 = 0, $vararg_buffer96 = 0, $vararg_buffer99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $vararg_buffer112 = sp + 344|0;
 $vararg_buffer109 = sp + 336|0;
 $vararg_buffer107 = sp + 328|0;
 $vararg_buffer104 = sp + 320|0;
 $vararg_buffer102 = sp + 312|0;
 $vararg_buffer99 = sp + 304|0;
 $vararg_buffer96 = sp + 296|0;
 $vararg_buffer94 = sp + 288|0;
 $vararg_buffer91 = sp + 280|0;
 $vararg_buffer88 = sp + 272|0;
 $vararg_buffer86 = sp + 264|0;
 $vararg_buffer83 = sp + 256|0;
 $vararg_buffer80 = sp + 248|0;
 $vararg_buffer78 = sp + 240|0;
 $vararg_buffer76 = sp + 232|0;
 $vararg_buffer73 = sp + 224|0;
 $vararg_buffer70 = sp + 216|0;
 $vararg_buffer68 = sp + 208|0;
 $vararg_buffer66 = sp + 200|0;
 $vararg_buffer63 = sp + 192|0;
 $vararg_buffer61 = sp + 184|0;
 $vararg_buffer58 = sp + 176|0;
 $vararg_buffer55 = sp + 168|0;
 $vararg_buffer52 = sp + 160|0;
 $vararg_buffer49 = sp + 152|0;
 $vararg_buffer46 = sp + 144|0;
 $vararg_buffer43 = sp + 136|0;
 $vararg_buffer40 = sp + 128|0;
 $vararg_buffer37 = sp + 120|0;
 $vararg_buffer35 = sp + 112|0;
 $vararg_buffer32 = sp + 104|0;
 $vararg_buffer30 = sp + 96|0;
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _GetLabelName($0,$1,$2);
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $4 = $0 & 512;
  $5 = ($4|0)==(0);
  if (!($5)) {
   _AddCodeLine(25482,$vararg_buffer);
   $6 = $0 & 32;
   $7 = ($6|0)==(0);
   do {
    if ($7) {
     _AddCodeLine(26851,$vararg_buffer17);
     _AddCodeLine(25219,$vararg_buffer19);
     HEAP32[$vararg_buffer21>>2] = 46640;
     _AddCodeLine(26680,$vararg_buffer21);
     HEAP32[$vararg_buffer24>>2] = 46640;
     _AddCodeLine(25885,$vararg_buffer24);
    } else {
     $8 = ($3|0)==(1);
     if ($8) {
      HEAP32[$vararg_buffer1>>2] = 46640;
      _AddCodeLine(26844,$vararg_buffer1);
      HEAP32[$vararg_buffer3>>2] = 46640;
      _AddCodeLine(25475,$vararg_buffer3);
      break;
     } else {
      HEAP32[$vararg_buffer6>>2] = 46640;
      _AddCodeLine(25475,$vararg_buffer6);
      _AddCodeLine(25219,$vararg_buffer9);
      $9 = $3 & 255;
      HEAP32[$vararg_buffer11>>2] = $9;
      _AddCodeLine(25223,$vararg_buffer11);
      HEAP32[$vararg_buffer14>>2] = 46640;
      _AddCodeLine(25885,$vararg_buffer14);
      break;
     }
    }
   } while(0);
   $10 = $0 & 8;
   $11 = ($10|0)==(0);
   if (!($11)) {
    STACKTOP = sp;return;
   }
   $12 = (_GetLocalLabel()|0);
   $13 = (_LocalLabelName($12)|0);
   HEAP32[$vararg_buffer27>>2] = $13;
   _AddCodeLine(25324,$vararg_buffer27);
   _AddCodeLine(25201,$vararg_buffer30);
   $14 = HEAP32[11209]|0;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_LocalLabelName($12)|0);
   (_CS_AddLabel($16,$17)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $30 = $0 & 32;
  $31 = ($30|0)==(0);
  if ($31) {
   HEAP32[$vararg_buffer104>>2] = 46640;
   _AddCodeLine(26725,$vararg_buffer104);
   _AddCodeLine(26736,$vararg_buffer107);
   HEAP32[$vararg_buffer109>>2] = 46640;
   _AddCodeLine(26745,$vararg_buffer109);
   _AddCodeLine(26890,$vararg_buffer112);
   STACKTOP = sp;return;
  }
  $32 = ($3>>>0)<(256);
  if ($32) {
   HEAP32[$vararg_buffer91>>2] = 46640;
   _AddCodeLine(26725,$vararg_buffer91);
   _AddCodeLine(26736,$vararg_buffer94);
   HEAP32[$vararg_buffer96>>2] = 46640;
   _AddCodeLine(26745,$vararg_buffer96);
   $33 = $3 & 255;
   HEAP32[$vararg_buffer99>>2] = $33;
   _AddCodeLine(24940,$vararg_buffer99);
   _AddCodeLine(26878,$vararg_buffer102);
   STACKTOP = sp;return;
  } else {
   _g_getstatic($0,$1,$2);
   _g_dec($0,$3);
   _g_putstatic($0,$1,$2);
   STACKTOP = sp;return;
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $18 = $0 & 32;
 $19 = ($18|0)==(0);
 if ($19) {
  _AddCodeLine(26851,$vararg_buffer66);
  _AddCodeLine(25219,$vararg_buffer68);
  HEAP32[$vararg_buffer70>>2] = 46640;
  _AddCodeLine(26680,$vararg_buffer70);
  HEAP32[$vararg_buffer73>>2] = 46640;
  _AddCodeLine(25885,$vararg_buffer73);
  _AddCodeLine(25104,$vararg_buffer76);
  _AddCodeLine(26851,$vararg_buffer78);
  HEAP32[$vararg_buffer80>>2] = 46640;
  _AddCodeLine(26691,$vararg_buffer80);
  HEAP32[$vararg_buffer83>>2] = 46640;
  _AddCodeLine(26716,$vararg_buffer83);
  _AddCodeLine(25604,$vararg_buffer86);
  HEAP32[$vararg_buffer88>>2] = 46640;
  _AddCodeLine(25475,$vararg_buffer88);
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer32>>2] = 46640;
 _AddCodeLine(25475,$vararg_buffer32);
 _AddCodeLine(25219,$vararg_buffer35);
 $20 = $3 & 255;
 HEAP32[$vararg_buffer37>>2] = $20;
 _AddCodeLine(25223,$vararg_buffer37);
 HEAP32[$vararg_buffer40>>2] = 46640;
 _AddCodeLine(25885,$vararg_buffer40);
 $21 = ($3>>>0)<(256);
 if ($21) {
  $22 = (_GetLocalLabel()|0);
  $23 = (_LocalLabelName($22)|0);
  HEAP32[$vararg_buffer43>>2] = $23;
  _AddCodeLine(25866,$vararg_buffer43);
  HEAP32[$vararg_buffer46>>2] = 46640;
  _AddCodeLine(26860,$vararg_buffer46);
  $24 = HEAP32[11209]|0;
  $25 = ((($24)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_LocalLabelName($22)|0);
  (_CS_AddLabel($26,$27)|0);
  HEAP32[$vararg_buffer49>>2] = 46640;
  _AddCodeLine(25500,$vararg_buffer49);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer52>>2] = 46640;
  _AddCodeLine(26869,$vararg_buffer52);
  $28 = $3 >>> 8;
  $29 = $28 & 255;
  HEAP32[$vararg_buffer55>>2] = $29;
  _AddCodeLine(25223,$vararg_buffer55);
  HEAP32[$vararg_buffer58>>2] = 46640;
  _AddCodeLine(26716,$vararg_buffer58);
  _AddCodeLine(25604,$vararg_buffer61);
  HEAP32[$vararg_buffer63>>2] = 46640;
  _AddCodeLine(25475,$vararg_buffer63);
  STACKTOP = sp;return;
 }
}
function _g_subeqlocal($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer30 = sp + 112|0;
 $vararg_buffer28 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = HEAP32[11252]|0;
 $4 = (($1) - ($3))|0;
 $5 = ($4>>>0)>(255);
 if ($5) {
  _Error(25014,$vararg_buffer);
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $6 = $0 & 512;
  $7 = ($6|0)==(0);
  if (!($7)) {
   HEAP32[$vararg_buffer1>>2] = $4;
   _AddCodeLine(24910,$vararg_buffer1);
   _AddCodeLine(25482,$vararg_buffer3);
   $8 = $0 & 32;
   $9 = ($8|0)==(0);
   if ($9) {
    _AddCodeLine(26851,$vararg_buffer12);
    _AddCodeLine(25219,$vararg_buffer14);
    _AddCodeLine(25977,$vararg_buffer16);
   } else {
    _AddCodeLine(25063,$vararg_buffer5);
    _AddCodeLine(25219,$vararg_buffer7);
    $10 = $2 & 255;
    HEAP32[$vararg_buffer9>>2] = $10;
    _AddCodeLine(25223,$vararg_buffer9);
   }
   _AddCodeLine(25108,$vararg_buffer18);
   $11 = $0 & 8;
   $12 = ($11|0)==(0);
   if (!($12)) {
    STACKTOP = sp;return;
   }
   $13 = (_GetLocalLabel()|0);
   $14 = (_LocalLabelName($13)|0);
   HEAP32[$vararg_buffer20>>2] = $14;
   _AddCodeLine(25324,$vararg_buffer20);
   _AddCodeLine(25201,$vararg_buffer23);
   $15 = HEAP32[11209]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_LocalLabelName($13)|0);
   (_CS_AddLabel($17,$18)|0);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $21 = $0 & 32;
  $22 = ($21|0)==(0);
  if (!($22)) {
   _g_getimmed($0,$2,0);
  }
  HEAP32[$vararg_buffer30>>2] = $4;
  _AddCodeLine(24910,$vararg_buffer30);
  _AddCodeLine(26914,$vararg_buffer33);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $19 = $0 & 32;
 $20 = ($19|0)==(0);
 if (!($20)) {
  _g_getimmed($0,$2,0);
 }
 HEAP32[$vararg_buffer25>>2] = $4;
 _AddCodeLine(24910,$vararg_buffer25);
 _AddCodeLine(26901,$vararg_buffer28);
 STACKTOP = sp;return;
}
function _g_subeqind($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0$i$i = 0, $$011$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i$clear18 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $1 & -256;
 $4 = $1 & 255;
 $trunc$i$i = $0&255;
 $trunc$i$i$clear = $trunc$i$i & 7;
 switch ($trunc$i$i$clear<<24>>24) {
 case 3:  {
  $5 = $0 >>> 9;
  $6 = $5 & 1;
  $7 = (2 - ($6))|0;
  $$0$i$i = $7;
  break;
 }
 case 1:  {
  $$0$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i = 4;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $8 = (256 - ($$0$i$i))|0;
 $9 = ($4>>>0)>($8>>>0);
 $$$i = $9 ? $1 : $3;
 $10 = ($$$i|0)==(0);
 if ($10) {
  $$011$i = $1;
 } else {
  $11 = (($1) - ($$$i))|0;
  _g_inc(33,$$$i);
  $$011$i = $11;
 }
 $trunc$i$i$clear18 = $trunc$i$i & 7;
 switch ($trunc$i$i$clear18<<24>>24) {
 case 3:  {
  _AddCodeLine(25640,$vararg_buffer);
  _AddCodeLine(25649,$vararg_buffer1);
  HEAP32[$vararg_buffer3>>2] = $$011$i;
  _AddCodeLine(24910,$vararg_buffer3);
  _AddCodeLine(25482,$vararg_buffer5);
  _AddCodeLine(25660,$vararg_buffer7);
  _AddCodeLine(25219,$vararg_buffer9);
  $12 = $2 & 255;
  HEAP32[$vararg_buffer11>>2] = $12;
  _AddCodeLine(25223,$vararg_buffer11);
  _AddCodeLine(26831,$vararg_buffer14);
  STACKTOP = sp;return;
  break;
 }
 case 0: case 1:  {
  _AddCodeLine(25169,$vararg_buffer16);
  $13 = HEAP32[11252]|0;
  $14 = (($13) + -2)|0;
  HEAP32[11252] = $14;
  _g_getind($0,$$011$i);
  _g_dec($0,$2);
  _g_putind($0,$$011$i);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_addaddr_local($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11252]|0;
 $3 = (($1) - ($2))|0;
 $4 = ($3|0)==(0);
 if ($4) {
  _AddCodeLine(24951,$vararg_buffer);
 } else {
  $5 = (_GetLocalLabel()|0);
  $6 = ($3>>>0)>(255);
  if ($6) {
   _Error(25014,$vararg_buffer1);
  }
  _AddCodeLine(24951,$vararg_buffer3);
  $7 = $3 & 255;
  HEAP32[$vararg_buffer5>>2] = $7;
  _AddCodeLine(25715,$vararg_buffer5);
  $8 = (_LocalLabelName($5)|0);
  HEAP32[$vararg_buffer7>>2] = $8;
  _AddCodeLine(25754,$vararg_buffer7);
  _AddCodeLine(25726,$vararg_buffer10);
  _AddCodeLine(24951,$vararg_buffer12);
  $9 = ($5|0)==(0);
  if (!($9)) {
   $10 = HEAP32[11209]|0;
   $11 = ((($10)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_LocalLabelName($5)|0);
   (_CS_AddLabel($12,$13)|0);
  }
 }
 _AddCodeLine(24955,$vararg_buffer14);
 _AddCodeLine(26687,$vararg_buffer16);
 _AddCodeLine(25104,$vararg_buffer18);
 _AddCodeLine(24969,$vararg_buffer20);
 _AddCodeLine(25604,$vararg_buffer22);
 _AddCodeLine(25939,$vararg_buffer24);
 STACKTOP = sp;return;
}
function _g_addaddr_static($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _GetLabelName($0,$1,$2);
 _AddCodeLine(24951,$vararg_buffer);
 HEAP32[$vararg_buffer1>>2] = 46640;
 _AddCodeLine(26928,$vararg_buffer1);
 _AddCodeLine(26687,$vararg_buffer3);
 _AddCodeLine(25104,$vararg_buffer5);
 HEAP32[$vararg_buffer7>>2] = 46640;
 _AddCodeLine(26939,$vararg_buffer7);
 _AddCodeLine(25604,$vararg_buffer10);
 _AddCodeLine(25939,$vararg_buffer12);
 STACKTOP = sp;return;
}
function _g_save($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $1 = $0 & 512;
  $2 = ($1|0)==(0);
  if (!($2)) {
   _AddCodeLine(24936,$vararg_buffer);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  _AddCodeLine(26976,$vararg_buffer5);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 _AddCodeLine(26950,$vararg_buffer1);
 _AddCodeLine(26962,$vararg_buffer3);
 STACKTOP = sp;return;
}
function _g_restore($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $1 = $0 & 512;
  $2 = ($1|0)==(0);
  if (!($2)) {
   _AddCodeLine(24987,$vararg_buffer);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  _AddCodeLine(27014,$vararg_buffer5);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 _AddCodeLine(26988,$vararg_buffer1);
 _AddCodeLine(27000,$vararg_buffer3);
 STACKTOP = sp;return;
}
function _g_swap($0) {
 $0 = $0|0;
 var $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 1: case 3:  {
  _AddCodeLine(27048,$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  _AddCodeLine(27060,$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_call($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0 & 256;
 $4 = ($3|0)==(0);
 if ($4) {
  HEAP32[$vararg_buffer>>2] = $2;
  _AddCodeLine(24910,$vararg_buffer);
 }
 HEAP32[$vararg_buffer1>>2] = $1;
 _AddCodeLine(27073,$vararg_buffer1);
 $5 = HEAP32[11252]|0;
 $6 = (($5) + ($2))|0;
 HEAP32[11252] = $6;
 STACKTOP = sp;return;
}
function _g_callind($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0 & 16384;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $0 & 256;
  $6 = ($5|0)==(0);
  if ($6) {
   HEAP32[$vararg_buffer>>2] = $1;
   _AddCodeLine(24910,$vararg_buffer);
  }
  _AddCodeLine(27081,$vararg_buffer1);
  $10 = HEAP32[11252]|0;
  $11 = (($10) + ($1))|0;
  HEAP32[11252] = $11;
  STACKTOP = sp;return;
 } else {
  $7 = HEAP32[11252]|0;
  $8 = (($2) - ($7))|0;
  $9 = ($8>>>0)>(255);
  if ($9) {
   _Error(25014,$vararg_buffer3);
  }
  _AddCodeLine(24936,$vararg_buffer5);
  HEAP32[$vararg_buffer7>>2] = $8;
  _AddCodeLine(24910,$vararg_buffer7);
  _AddCodeLine(25063,$vararg_buffer10);
  _AddCodeLine(27092,$vararg_buffer12);
  _AddCodeLine(25266,$vararg_buffer14);
  _AddCodeLine(25063,$vararg_buffer16);
  _AddCodeLine(27105,$vararg_buffer18);
  _AddCodeLine(24987,$vararg_buffer20);
  _AddCodeLine(27118,$vararg_buffer22);
  $10 = HEAP32[11252]|0;
  $11 = (($10) + ($1))|0;
  HEAP32[11252] = $11;
  STACKTOP = sp;return;
 }
}
function _g_jump($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_LocalLabelName($0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 _AddCodeLine(27129,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_truejump($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_LocalLabelName($1)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 _AddCodeLine(27136,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_falsejump($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_LocalLabelName($1)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 _AddCodeLine(27143,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_cstackcheck() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _AddCodeLine(27150,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_stackcheck() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _AddCodeLine(27162,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_mod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = $0;
 } else {
  $4 = $0 & 8;
  $5 = ($4|0)!=(0);
  $6 = ($1|0)!=(-1);
  $or$cond = $5 & $6;
  if ($or$cond) {
   $7 = (_PowerOf2($1)|0);
   $8 = ($7|0)>(-1);
   if ($8) {
    $9 = (($1) + -1)|0;
    _g_and($0,$9);
    STACKTOP = sp;return;
   }
  }
  $10 = $0 & -513;
  $11 = $0 & -545;
  _g_push($11,0);
  $$0 = $10;
 }
 $12 = $$0 & 8;
 $13 = ($12|0)==(0);
 $$$i = $13 ? 6752 : (6756);
 $14 = $$0 & 7;
 $15 = ($14|0)==(0);
 $16 = ((($$$i)) + 8|0);
 $$1$i = $15 ? $16 : $$$i;
 $17 = $$0 & 32;
 $18 = ($17|0)==(0);
 if (!($18)) {
  _g_getimmed($$0,$1,0);
 }
 $19 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer>>2] = $19;
 _AddCodeLine(25773,$vararg_buffer);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $20 = $$0 >>> 9;
  $21 = $20 & 1;
  $22 = (2 - ($21))|0;
  $$0$i$i$i = $22;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $23 = HEAP32[11252]|0;
 $24 = (($23) + ($$0$i$i$i))|0;
 HEAP32[11252] = $24;
 STACKTOP = sp;return;
}
function _g_and($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $trunc28 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer53 = sp + 192|0;
 $vararg_buffer51 = sp + 184|0;
 $vararg_buffer49 = sp + 176|0;
 $vararg_buffer47 = sp + 168|0;
 $vararg_buffer44 = sp + 160|0;
 $vararg_buffer42 = sp + 152|0;
 $vararg_buffer40 = sp + 144|0;
 $vararg_buffer38 = sp + 136|0;
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer31 = sp + 112|0;
 $vararg_buffer28 = sp + 104|0;
 $vararg_buffer26 = sp + 96|0;
 $vararg_buffer24 = sp + 88|0;
 $vararg_buffer22 = sp + 80|0;
 $vararg_buffer20 = sp + 72|0;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = $0;
  } else {
   $trunc = $0&255;
   $trunc$clear = $trunc & 7;
   switch ($trunc$clear<<24>>24) {
   case 3:  {
    $4 = $0 & 512;
    $5 = ($4|0)==(0);
    if (!($5)) {
     $trunc28 = $1&255;
     switch ($trunc28<<24>>24) {
     case 0:  {
      _AddCodeLine(26551,$vararg_buffer);
      STACKTOP = sp;return;
      break;
     }
     case -1:  {
      STACKTOP = sp;return;
      break;
     }
     default: {
      $6 = $1 & 255;
      HEAP32[$vararg_buffer1>>2] = $6;
      _AddCodeLine(27173,$vararg_buffer1);
      STACKTOP = sp;return;
     }
     }
    }
    break;
   }
   case 1:  {
    break;
   }
   case 0:  {
    $21 = ($1>>>0)<(256);
    if ($21) {
     _AddCodeLine(25482,$vararg_buffer38);
     _AddCodeLine(25349,$vararg_buffer40);
     _AddCodeLine(25340,$vararg_buffer42);
     $22 = $1 & 255;
     $23 = ($22|0)==(255);
     if ($23) {
      STACKTOP = sp;return;
     }
     HEAP32[$vararg_buffer44>>2] = $22;
     _AddCodeLine(27173,$vararg_buffer44);
     STACKTOP = sp;return;
    } else {
     $24 = ($1|0)==(65280);
     if (!($24)) {
      $25 = $0 & -513;
      $26 = $0 & -545;
      _g_push($26,0);
      $$0 = $25;
      break L1;
     }
     _AddCodeLine(26551,$vararg_buffer47);
     _AddCodeLine(25369,$vararg_buffer49);
     _AddCodeLine(25360,$vararg_buffer51);
     STACKTOP = sp;return;
    }
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   $7 = $1 & 65535;
   $8 = ($7|0)==(65535);
   if ($8) {
    STACKTOP = sp;return;
   }
   $9 = ($1>>>0)<(256);
   if ($9) {
    _AddCodeLine(25482,$vararg_buffer3);
    switch ($1|0) {
    case 0:  {
     _AddCodeLine(26551,$vararg_buffer5);
     STACKTOP = sp;return;
     break;
    }
    case 255:  {
     STACKTOP = sp;return;
     break;
    }
    default: {
     $10 = $1 & 255;
     HEAP32[$vararg_buffer7>>2] = $10;
     _AddCodeLine(27173,$vararg_buffer7);
     STACKTOP = sp;return;
    }
    }
   }
   $11 = ($7|0)==(65280);
   if ($11) {
    _AddCodeLine(26551,$vararg_buffer10);
    STACKTOP = sp;return;
   }
   $12 = $1 & 65280;
   $13 = ($12|0)==(65280);
   $14 = $1 & 255;
   if ($13) {
    HEAP32[$vararg_buffer12>>2] = $14;
    _AddCodeLine(27173,$vararg_buffer12);
    STACKTOP = sp;return;
   }
   $15 = ($14|0)==(0);
   if ($15) {
    _AddCodeLine(25104,$vararg_buffer15);
    $16 = $1 >>> 8;
    $17 = $16 & 255;
    HEAP32[$vararg_buffer17>>2] = $17;
    _AddCodeLine(27173,$vararg_buffer17);
    _AddCodeLine(25604,$vararg_buffer20);
    _AddCodeLine(26551,$vararg_buffer22);
    STACKTOP = sp;return;
   }
   _AddCodeLine(26687,$vararg_buffer24);
   _AddCodeLine(25104,$vararg_buffer26);
   $18 = $1 >>> 8;
   $19 = $18 & 255;
   HEAP32[$vararg_buffer28>>2] = $19;
   _AddCodeLine(27173,$vararg_buffer28);
   _AddCodeLine(25604,$vararg_buffer31);
   _AddCodeLine(25939,$vararg_buffer33);
   $20 = ($14|0)==(255);
   if ($20) {
    STACKTOP = sp;return;
   }
   HEAP32[$vararg_buffer35>>2] = $14;
   _AddCodeLine(27173,$vararg_buffer35);
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = $$0 & 8;
 $28 = ($27|0)==(0);
 $$$i = $28 ? 6800 : (6804);
 $29 = $$0 & 7;
 $30 = ($29|0)==(0);
 $31 = ((($$$i)) + 8|0);
 $$1$i = $30 ? $31 : $$$i;
 $32 = $$0 & 32;
 $33 = ($32|0)==(0);
 if (!($33)) {
  _g_getimmed($$0,$1,0);
 }
 $34 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer53>>2] = $34;
 _AddCodeLine(25773,$vararg_buffer53);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $35 = $$0 >>> 9;
  $36 = $35 & 1;
  $37 = (2 - ($36))|0;
  $$0$i$i$i = $37;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $38 = HEAP32[11252]|0;
 $39 = (($38) + ($$0$i$i$i))|0;
 HEAP32[11252] = $39;
 STACKTOP = sp;return;
}
function _g_or($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0;
 var $trunc$i$i$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer19 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = $0;
  } else {
   $trunc = $0&255;
   $trunc$clear = $trunc & 7;
   switch ($trunc$clear<<24>>24) {
   case 3:  {
    $4 = $0 & 512;
    $5 = ($4|0)==(0);
    if (!($5)) {
     $6 = $1 & 255;
     $7 = ($6|0)==(0);
     if ($7) {
      STACKTOP = sp;return;
     }
     HEAP32[$vararg_buffer>>2] = $6;
     _AddCodeLine(27184,$vararg_buffer);
     STACKTOP = sp;return;
    }
    break;
   }
   case 1:  {
    break;
   }
   case 0:  {
    $17 = ($1>>>0)<(256);
    if (!($17)) {
     $20 = $0 & -513;
     $21 = $0 & -545;
     _g_push($21,0);
     $$0 = $20;
     break L1;
    }
    $18 = $1 & 255;
    $19 = ($18|0)==(0);
    if ($19) {
     STACKTOP = sp;return;
    }
    HEAP32[$vararg_buffer23>>2] = $18;
    _AddCodeLine(27184,$vararg_buffer23);
    STACKTOP = sp;return;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   $8 = ($1>>>0)<(256);
   if ($8) {
    $9 = $1 & 255;
    $10 = ($9|0)==(0);
    if ($10) {
     STACKTOP = sp;return;
    }
    HEAP32[$vararg_buffer1>>2] = $9;
    _AddCodeLine(27184,$vararg_buffer1);
    STACKTOP = sp;return;
   }
   $11 = $1 & 65280;
   $12 = ($11|0)==(65280);
   $13 = $1 & 255;
   if (!($12)) {
    HEAP32[$vararg_buffer9>>2] = $13;
    _AddCodeLine(27184,$vararg_buffer9);
    _AddCodeLine(24936,$vararg_buffer12);
    _AddCodeLine(25104,$vararg_buffer14);
    $15 = $1 >>> 8;
    $16 = $15 & 255;
    HEAP32[$vararg_buffer16>>2] = $16;
    _AddCodeLine(27184,$vararg_buffer16);
    _AddCodeLine(25604,$vararg_buffer19);
    _AddCodeLine(24987,$vararg_buffer21);
    STACKTOP = sp;return;
   }
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer4>>2] = $13;
    _AddCodeLine(27184,$vararg_buffer4);
   }
   _AddCodeLine(27195,$vararg_buffer7);
   STACKTOP = sp;return;
  }
 } while(0);
 $22 = $$0 & 8;
 $23 = ($22|0)==(0);
 $$$i = $23 ? 6848 : (6852);
 $24 = $$0 & 7;
 $25 = ($24|0)==(0);
 $26 = ((($$$i)) + 8|0);
 $$1$i = $25 ? $26 : $$$i;
 $27 = $$0 & 32;
 $28 = ($27|0)==(0);
 if (!($28)) {
  _g_getimmed($$0,$1,0);
 }
 $29 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer26>>2] = $29;
 _AddCodeLine(25773,$vararg_buffer26);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $30 = $$0 >>> 9;
  $31 = $30 & 1;
  $32 = (2 - ($31))|0;
  $$0$i$i$i = $32;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $33 = HEAP32[11252]|0;
 $34 = (($33) + ($$0$i$i$i))|0;
 HEAP32[11252] = $34;
 STACKTOP = sp;return;
}
function _g_xor($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = $0;
  } else {
   $trunc = $0&255;
   $trunc$clear = $trunc & 7;
   switch ($trunc$clear<<24>>24) {
   case 3:  {
    $4 = $0 & 512;
    $5 = ($4|0)==(0);
    if (!($5)) {
     $6 = $1 & 255;
     $7 = ($6|0)==(0);
     if ($7) {
      STACKTOP = sp;return;
     }
     HEAP32[$vararg_buffer>>2] = $6;
     _AddCodeLine(27204,$vararg_buffer);
     STACKTOP = sp;return;
    }
    break;
   }
   case 1:  {
    break;
   }
   case 0:  {
    $14 = ($1>>>0)<(256);
    if (!($14)) {
     $17 = $0 & -513;
     $18 = $0 & -545;
     _g_push($18,0);
     $$0 = $17;
     break L1;
    }
    $15 = ($1|0)==(0);
    if ($15) {
     STACKTOP = sp;return;
    }
    $16 = $1 & 255;
    HEAP32[$vararg_buffer18>>2] = $16;
    _AddCodeLine(27204,$vararg_buffer18);
    STACKTOP = sp;return;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   $8 = ($1>>>0)<(256);
   $9 = $1 & 255;
   if ($8) {
    $10 = ($1|0)==(0);
    if ($10) {
     STACKTOP = sp;return;
    }
    HEAP32[$vararg_buffer1>>2] = $9;
    _AddCodeLine(27204,$vararg_buffer1);
    STACKTOP = sp;return;
   } else {
    $11 = ($9|0)==(0);
    if (!($11)) {
     HEAP32[$vararg_buffer4>>2] = $9;
     _AddCodeLine(27204,$vararg_buffer4);
    }
    _AddCodeLine(24936,$vararg_buffer7);
    _AddCodeLine(25104,$vararg_buffer9);
    $12 = $1 >>> 8;
    $13 = $12 & 255;
    HEAP32[$vararg_buffer11>>2] = $13;
    _AddCodeLine(27204,$vararg_buffer11);
    _AddCodeLine(25604,$vararg_buffer14);
    _AddCodeLine(24987,$vararg_buffer16);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $19 = $$0 & 8;
 $20 = ($19|0)==(0);
 $$$i = $20 ? 6896 : (6900);
 $21 = $$0 & 7;
 $22 = ($21|0)==(0);
 $23 = ((($$$i)) + 8|0);
 $$1$i = $22 ? $23 : $$$i;
 $24 = $$0 & 32;
 $25 = ($24|0)==(0);
 if (!($25)) {
  _g_getimmed($$0,$1,0);
 }
 $26 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer21>>2] = $26;
 _AddCodeLine(25773,$vararg_buffer21);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $27 = $$0 >>> 9;
  $28 = $27 & 1;
  $29 = (2 - ($28))|0;
  $$0$i$i$i = $29;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $30 = HEAP32[11252]|0;
 $31 = (($30) + ($$0$i$i$i))|0;
 HEAP32[11252] = $31;
 STACKTOP = sp;return;
}
function _g_neg($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $1 = $0 & 512;
  $2 = ($1|0)==(0);
  if (!($2)) {
   _AddCodeLine(26851,$vararg_buffer);
   _AddCodeLine(24951,$vararg_buffer1);
   _AddCodeLine(27215,$vararg_buffer3);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  _AddCodeLine(27234,$vararg_buffer7);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 _AddCodeLine(27224,$vararg_buffer5);
 STACKTOP = sp;return;
}
function _g_bneg($0) {
 $0 = $0|0;
 var $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  _AddCodeLine(27245,$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  _AddCodeLine(27255,$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  _AddCodeLine(27266,$vararg_buffer3);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_com($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $1 = $0 & 512;
  $2 = ($1|0)==(0);
  if (!($2)) {
   _AddCodeLine(26851,$vararg_buffer);
   STACKTOP = sp;return;
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  _AddCodeLine(27290,$vararg_buffer3);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 _AddCodeLine(27278,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _g_eq($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = $0;
  } else {
   $trunc = $0&255;
   $trunc$clear = $trunc & 7;
   switch ($trunc$clear<<24>>24) {
   case 3:  {
    $4 = $0 & 512;
    $5 = ($4|0)==(0);
    if (!($5)) {
     $6 = $1 & 255;
     HEAP32[$vararg_buffer>>2] = $6;
     _AddCodeLine(27026,$vararg_buffer);
     _AddCodeLine(27303,$vararg_buffer1);
     STACKTOP = sp;return;
    }
    break;
   }
   case 1:  {
    break;
   }
   case 0:  {
    $16 = $0 & -513;
    $17 = $0 & -545;
    _g_push($17,0);
    $$0 = $16;
    break L1;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   $7 = (_GetLocalLabel()|0);
   $8 = $1 >>> 8;
   $9 = $8 & 255;
   HEAP32[$vararg_buffer3>>2] = $9;
   _AddCodeLine(27037,$vararg_buffer3);
   $10 = (_LocalLabelName($7)|0);
   HEAP32[$vararg_buffer6>>2] = $10;
   _AddCodeLine(25205,$vararg_buffer6);
   $11 = $1 & 255;
   HEAP32[$vararg_buffer9>>2] = $11;
   _AddCodeLine(27026,$vararg_buffer9);
   $12 = HEAP32[11209]|0;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_LocalLabelName($7)|0);
   (_CS_AddLabel($14,$15)|0);
   _AddCodeLine(27303,$vararg_buffer12);
   STACKTOP = sp;return;
  }
 } while(0);
 $18 = $$0 & 8;
 $19 = ($18|0)==(0);
 $$$i = $19 ? 6944 : (6948);
 $20 = $$0 & 7;
 $21 = ($20|0)==(0);
 $22 = ((($$$i)) + 8|0);
 $$1$i = $21 ? $22 : $$$i;
 $23 = $$0 & 32;
 $24 = ($23|0)==(0);
 if (!($24)) {
  _g_getimmed($$0,$1,0);
 }
 $25 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer14>>2] = $25;
 _AddCodeLine(25773,$vararg_buffer14);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $26 = $$0 >>> 9;
  $27 = $26 & 1;
  $28 = (2 - ($27))|0;
  $$0$i$i$i = $28;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $29 = HEAP32[11252]|0;
 $30 = (($29) + ($$0$i$i$i))|0;
 HEAP32[11252] = $30;
 STACKTOP = sp;return;
}
function _g_ne($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = $0;
  } else {
   $trunc = $0&255;
   $trunc$clear = $trunc & 7;
   switch ($trunc$clear<<24>>24) {
   case 3:  {
    $4 = $0 & 512;
    $5 = ($4|0)==(0);
    if (!($5)) {
     $6 = $1 & 255;
     HEAP32[$vararg_buffer>>2] = $6;
     _AddCodeLine(27026,$vararg_buffer);
     _AddCodeLine(27323,$vararg_buffer1);
     STACKTOP = sp;return;
    }
    break;
   }
   case 1:  {
    break;
   }
   case 0:  {
    $16 = $0 & -513;
    $17 = $0 & -545;
    _g_push($17,0);
    $$0 = $16;
    break L1;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   $7 = (_GetLocalLabel()|0);
   $8 = $1 >>> 8;
   $9 = $8 & 255;
   HEAP32[$vararg_buffer3>>2] = $9;
   _AddCodeLine(27037,$vararg_buffer3);
   $10 = (_LocalLabelName($7)|0);
   HEAP32[$vararg_buffer6>>2] = $10;
   _AddCodeLine(25205,$vararg_buffer6);
   $11 = $1 & 255;
   HEAP32[$vararg_buffer9>>2] = $11;
   _AddCodeLine(27026,$vararg_buffer9);
   $12 = HEAP32[11209]|0;
   $13 = ((($12)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (_LocalLabelName($7)|0);
   (_CS_AddLabel($14,$15)|0);
   _AddCodeLine(27323,$vararg_buffer12);
   STACKTOP = sp;return;
  }
 } while(0);
 $18 = $$0 & 8;
 $19 = ($18|0)==(0);
 $$$i = $19 ? 6992 : (6996);
 $20 = $$0 & 7;
 $21 = ($20|0)==(0);
 $22 = ((($$$i)) + 8|0);
 $$1$i = $21 ? $22 : $$$i;
 $23 = $$0 & 32;
 $24 = ($23|0)==(0);
 if (!($24)) {
  _g_getimmed($$0,$1,0);
 }
 $25 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer14>>2] = $25;
 _AddCodeLine(25773,$vararg_buffer14);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $26 = $$0 >>> 9;
  $27 = $26 & 1;
  $28 = (2 - ($27))|0;
  $$0$i$i$i = $28;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $29 = HEAP32[11252]|0;
 $30 = (($29) + ($$0$i$i$i))|0;
 HEAP32[11252] = $30;
 STACKTOP = sp;return;
}
function _g_lt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $trunc35 = 0, $trunc35$clear = 0, $trunc35$clear106 = 0, $trunc36 = 0, $trunc36$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer101 = 0, $vararg_buffer103 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer60 = 0, $vararg_buffer62 = 0;
 var $vararg_buffer64 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer78 = 0, $vararg_buffer80 = 0, $vararg_buffer82 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_buffer90 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $vararg_buffer103 = sp + 368|0;
 $vararg_buffer101 = sp + 360|0;
 $vararg_buffer99 = sp + 352|0;
 $vararg_buffer97 = sp + 344|0;
 $vararg_buffer95 = sp + 336|0;
 $vararg_buffer93 = sp + 328|0;
 $vararg_buffer90 = sp + 320|0;
 $vararg_buffer87 = sp + 312|0;
 $vararg_buffer85 = sp + 304|0;
 $vararg_buffer82 = sp + 296|0;
 $vararg_buffer80 = sp + 288|0;
 $vararg_buffer78 = sp + 280|0;
 $vararg_buffer76 = sp + 272|0;
 $vararg_buffer74 = sp + 264|0;
 $vararg_buffer72 = sp + 256|0;
 $vararg_buffer69 = sp + 248|0;
 $vararg_buffer66 = sp + 240|0;
 $vararg_buffer64 = sp + 232|0;
 $vararg_buffer62 = sp + 224|0;
 $vararg_buffer60 = sp + 216|0;
 $vararg_buffer58 = sp + 208|0;
 $vararg_buffer56 = sp + 200|0;
 $vararg_buffer54 = sp + 192|0;
 $vararg_buffer52 = sp + 184|0;
 $vararg_buffer50 = sp + 176|0;
 $vararg_buffer48 = sp + 168|0;
 $vararg_buffer46 = sp + 160|0;
 $vararg_buffer44 = sp + 152|0;
 $vararg_buffer42 = sp + 144|0;
 $vararg_buffer40 = sp + 136|0;
 $vararg_buffer38 = sp + 128|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer33 = sp + 112|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = $0 & 8;
   $5 = ($4|0)==(0);
   $6 = ($1|0)==(0);
   if (!($5)) {
    if ($6) {
     _Warning(27343,$vararg_buffer);
     _AddCodeLine(27367,$vararg_buffer1);
     STACKTOP = sp;return;
    }
    $trunc36 = $0&255;
    $trunc36$clear = $trunc36 & 7;
    switch ($trunc36$clear<<24>>24) {
    case 3:  {
     $7 = $0 & 512;
     $8 = ($7|0)==(0);
     if (!($8)) {
      $9 = $1 & 255;
      HEAP32[$vararg_buffer3>>2] = $9;
      _AddCodeLine(27026,$vararg_buffer3);
      _AddCodeLine(27379,$vararg_buffer5);
      STACKTOP = sp;return;
     }
     break;
    }
    case 1:  {
     break;
    }
    case 0:  {
     $20 = $1 & 255;
     HEAP32[$vararg_buffer18>>2] = $20;
     _AddCodeLine(27026,$vararg_buffer18);
     _AddCodeLine(25104,$vararg_buffer21);
     $21 = $1 >>> 8;
     $22 = $21 & 255;
     HEAP32[$vararg_buffer23>>2] = $22;
     _AddCodeLine(25223,$vararg_buffer23);
     _AddCodeLine(26367,$vararg_buffer26);
     $23 = $1 >>> 16;
     $24 = $23 & 255;
     HEAP32[$vararg_buffer28>>2] = $24;
     _AddCodeLine(25223,$vararg_buffer28);
     _AddCodeLine(26345,$vararg_buffer31);
     $25 = $1 >>> 24;
     HEAP32[$vararg_buffer33>>2] = $25;
     _AddCodeLine(25223,$vararg_buffer33);
     _AddCodeLine(27379,$vararg_buffer36);
     STACKTOP = sp;return;
     break;
    }
    default: {
     _typeerror($0);
     // unreachable;
    }
    }
    $10 = $1 >>> 8;
    $11 = $10 & 255;
    HEAP32[$vararg_buffer7>>2] = $11;
    _AddCodeLine(27037,$vararg_buffer7);
    $12 = $1 & 255;
    $13 = ($12|0)==(0);
    if (!($13)) {
     $14 = (_GetLocalLabel()|0);
     $15 = (_LocalLabelName($14)|0);
     HEAP32[$vararg_buffer10>>2] = $15;
     _AddCodeLine(25205,$vararg_buffer10);
     HEAP32[$vararg_buffer13>>2] = $12;
     _AddCodeLine(27026,$vararg_buffer13);
     $16 = HEAP32[11209]|0;
     $17 = ((($16)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (_LocalLabelName($14)|0);
     (_CS_AddLabel($18,$19)|0);
    }
    _AddCodeLine(27379,$vararg_buffer16);
    STACKTOP = sp;return;
   }
   $trunc35 = $0&255;
   if (!($6)) {
    $trunc35$clear106 = $trunc35 & 7;
    switch ($trunc35$clear106<<24>>24) {
    case 3:  {
     $28 = $0 & 512;
     $29 = ($28|0)==(0);
     if (!($29)) {
      $30 = (_GetLocalLabel()|0);
      _AddCodeLine(25219,$vararg_buffer64);
      $31 = $1 & 255;
      HEAP32[$vararg_buffer66>>2] = $31;
      _AddCodeLine(25223,$vararg_buffer66);
      $32 = (_LocalLabelName($30)|0);
      HEAP32[$vararg_buffer69>>2] = $32;
      _AddCodeLine(27397,$vararg_buffer69);
      _AddCodeLine(27404,$vararg_buffer72);
      $33 = HEAP32[11209]|0;
      $34 = ((($33)) + 4|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (_LocalLabelName($30)|0);
      (_CS_AddLabel($35,$36)|0);
      _AddCodeLine(26170,$vararg_buffer74);
      _AddCodeLine(26551,$vararg_buffer76);
      _AddCodeLine(25482,$vararg_buffer78);
      _AddCodeLine(27391,$vararg_buffer80);
      STACKTOP = sp;return;
     }
     break;
    }
    case 1:  {
     break;
    }
    case 0:  {
     $46 = $0 & -513;
     $47 = $0 & -545;
     _g_push($47,0);
     $$0 = $46;
     break L1;
     break;
    }
    default: {
     _typeerror($0);
     // unreachable;
    }
    }
    $37 = (_GetLocalLabel()|0);
    $38 = $1 & 255;
    HEAP32[$vararg_buffer82>>2] = $38;
    _AddCodeLine(27026,$vararg_buffer82);
    _AddCodeLine(25104,$vararg_buffer85);
    $39 = $1 >>> 8;
    $40 = $39 & 255;
    HEAP32[$vararg_buffer87>>2] = $40;
    _AddCodeLine(25223,$vararg_buffer87);
    $41 = (_LocalLabelName($37)|0);
    HEAP32[$vararg_buffer90>>2] = $41;
    _AddCodeLine(27397,$vararg_buffer90);
    _AddCodeLine(27404,$vararg_buffer93);
    $42 = HEAP32[11209]|0;
    $43 = ((($42)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_LocalLabelName($37)|0);
    (_CS_AddLabel($44,$45)|0);
    _AddCodeLine(26170,$vararg_buffer95);
    _AddCodeLine(26551,$vararg_buffer97);
    _AddCodeLine(25482,$vararg_buffer99);
    _AddCodeLine(27391,$vararg_buffer101);
    STACKTOP = sp;return;
   }
   $trunc35$clear = $trunc35 & 7;
   switch ($trunc35$clear<<24>>24) {
   case 3:  {
    $26 = $0 & 512;
    $27 = ($26|0)==(0);
    if (!($27)) {
     _AddCodeLine(26170,$vararg_buffer38);
     _AddCodeLine(26551,$vararg_buffer40);
     _AddCodeLine(25482,$vararg_buffer42);
     _AddCodeLine(27391,$vararg_buffer44);
     STACKTOP = sp;return;
    }
    break;
   }
   case 1:  {
    break;
   }
   case 0:  {
    _AddCodeLine(26345,$vararg_buffer54);
    _AddCodeLine(26170,$vararg_buffer56);
    _AddCodeLine(26551,$vararg_buffer58);
    _AddCodeLine(25482,$vararg_buffer60);
    _AddCodeLine(27391,$vararg_buffer62);
    STACKTOP = sp;return;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   _AddCodeLine(26288,$vararg_buffer46);
   _AddCodeLine(26551,$vararg_buffer48);
   _AddCodeLine(25482,$vararg_buffer50);
   _AddCodeLine(27391,$vararg_buffer52);
   STACKTOP = sp;return;
  }
 } while(0);
 $48 = $$0 & 8;
 $49 = ($48|0)==(0);
 $$$i = $49 ? 7040 : (7044);
 $50 = $$0 & 7;
 $51 = ($50|0)==(0);
 $52 = ((($$$i)) + 8|0);
 $$1$i = $51 ? $52 : $$$i;
 $53 = $$0 & 32;
 $54 = ($53|0)==(0);
 if (!($54)) {
  _g_getimmed($$0,$1,0);
 }
 $55 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer103>>2] = $55;
 _AddCodeLine(25773,$vararg_buffer103);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $56 = $$0 >>> 9;
  $57 = $56 & 1;
  $58 = (2 - ($57))|0;
  $$0$i$i$i = $58;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $59 = HEAP32[11252]|0;
 $60 = (($59) + ($$0$i$i$i))|0;
 HEAP32[11252] = $60;
 STACKTOP = sp;return;
}
function _g_le($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 if ($3) {
  $24 = $0 & 8;
  $25 = ($24|0)==(0);
  $$$i = $25 ? 7088 : (7092);
  $26 = $0 & 7;
  $27 = ($26|0)==(0);
  $28 = ((($$$i)) + 8|0);
  $$1$i = $27 ? $28 : $$$i;
  $29 = HEAP32[$$1$i>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $29;
  _AddCodeLine(25773,$vararg_buffer23);
  $trunc$i$i$i = $0&255;
  $trunc$i$i$i$clear = $trunc$i$i$i & 7;
  switch ($trunc$i$i$i$clear<<24>>24) {
  case 3:  {
   $30 = $0 >>> 9;
   $31 = $30 & 1;
   $32 = (2 - ($31))|0;
   $$0$i$i$i = $32;
   break;
  }
  case 1:  {
   $$0$i$i$i = 2;
   break;
  }
  case 0:  {
   $$0$i$i$i = 4;
   break;
  }
  case 4:  {
   $$0$i$i$i = 4;
   break;
  }
  default: {
   _typeerror($0);
   // unreachable;
  }
  }
  $33 = HEAP32[11252]|0;
  $34 = (($33) + ($$0$i$i$i))|0;
  HEAP32[11252] = $34;
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $4 = $0 & 512;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = $0 & 8;
   $7 = ($6|0)==(0);
   if ($7) {
    $10 = ($1|0)<(127);
    if ($10) {
     $11 = (($1) + 1)|0;
     _g_lt($0,$11);
     STACKTOP = sp;return;
    } else {
     _Warning(27432,$vararg_buffer3);
     _AddCodeLine(27457,$vararg_buffer5);
     STACKTOP = sp;return;
    }
   } else {
    $8 = ($1>>>0)<(255);
    if ($8) {
     $9 = (($1) + 1)|0;
     _g_lt($0,$9);
     STACKTOP = sp;return;
    } else {
     _Warning(27432,$vararg_buffer);
     _AddCodeLine(27457,$vararg_buffer1);
     STACKTOP = sp;return;
    }
   }
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $18 = $0 & 8;
  $19 = ($18|0)==(0);
  if ($19) {
   $22 = ($1|0)==(2147483647);
   if ($22) {
    _Warning(27432,$vararg_buffer19);
    _AddCodeLine(27457,$vararg_buffer21);
    STACKTOP = sp;return;
   } else {
    $23 = (($1) + 1)|0;
    _g_lt($0,$23);
    STACKTOP = sp;return;
   }
  } else {
   $20 = ($1|0)==(-1);
   if ($20) {
    _Warning(27432,$vararg_buffer15);
    _AddCodeLine(27457,$vararg_buffer17);
    STACKTOP = sp;return;
   } else {
    $21 = (($1) + 1)|0;
    _g_lt($0,$21);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $12 = $0 & 8;
 $13 = ($12|0)==(0);
 if ($13) {
  $16 = ($1|0)<(32767);
  if ($16) {
   $17 = (($1) + 1)|0;
   _g_lt($0,$17);
   STACKTOP = sp;return;
  } else {
   _Warning(27432,$vararg_buffer11);
   _AddCodeLine(27457,$vararg_buffer13);
   STACKTOP = sp;return;
  }
 } else {
  $14 = ($1>>>0)<(65535);
  if ($14) {
   $15 = (($1) + 1)|0;
   _g_lt($0,$15);
   STACKTOP = sp;return;
  } else {
   _Warning(27432,$vararg_buffer7);
   _AddCodeLine(27457,$vararg_buffer9);
   STACKTOP = sp;return;
  }
 }
}
function _g_gt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i$i$i = 0;
 var $trunc$i$i$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 if ($3) {
  $25 = $0 & 8;
  $26 = ($25|0)==(0);
  $$$i = $26 ? 7136 : (7140);
  $27 = $0 & 7;
  $28 = ($27|0)==(0);
  $29 = ((($$$i)) + 8|0);
  $$1$i = $28 ? $29 : $$$i;
  $30 = HEAP32[$$1$i>>2]|0;
  HEAP32[$vararg_buffer23>>2] = $30;
  _AddCodeLine(25773,$vararg_buffer23);
  $trunc$i$i$i = $0&255;
  $trunc$i$i$i$clear = $trunc$i$i$i & 7;
  switch ($trunc$i$i$i$clear<<24>>24) {
  case 3:  {
   $31 = $0 >>> 9;
   $32 = $31 & 1;
   $33 = (2 - ($32))|0;
   $$0$i$i$i = $33;
   break;
  }
  case 1:  {
   $$0$i$i$i = 2;
   break;
  }
  case 0:  {
   $$0$i$i$i = 4;
   break;
  }
  case 4:  {
   $$0$i$i$i = 4;
   break;
  }
  default: {
   _typeerror($0);
   // unreachable;
  }
  }
  $34 = HEAP32[11252]|0;
  $35 = (($34) + ($$0$i$i$i))|0;
  HEAP32[11252] = $35;
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $4 = $0 & 512;
  $5 = ($4|0)==(0);
  if (!($5)) {
   $6 = $0 & 8;
   $7 = ($6|0)==(0);
   if ($7) {
    $11 = ($1|0)<(127);
    if ($11) {
     $12 = (($1) + 1)|0;
     _g_ge($0,$12);
     STACKTOP = sp;return;
    } else {
     _Warning(27343,$vararg_buffer3);
     _AddCodeLine(27367,$vararg_buffer5);
     STACKTOP = sp;return;
    }
   }
   $8 = ($1|0)==(0);
   if ($8) {
    _g_ne($0,0);
    STACKTOP = sp;return;
   }
   $9 = ($1>>>0)<(255);
   if ($9) {
    $10 = (($1) + 1)|0;
    _g_ge($0,$10);
    STACKTOP = sp;return;
   } else {
    _Warning(27343,$vararg_buffer);
    _AddCodeLine(27367,$vararg_buffer1);
    STACKTOP = sp;return;
   }
  }
  break;
 }
 case 1:  {
  break;
 }
 case 0:  {
  $20 = $0 & 8;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ($1|0)==(2147483647);
   if ($23) {
    _Warning(27343,$vararg_buffer19);
    _AddCodeLine(27367,$vararg_buffer21);
    STACKTOP = sp;return;
   } else {
    $24 = (($1) + 1)|0;
    _g_ge($0,$24);
    STACKTOP = sp;return;
   }
  }
  switch ($1|0) {
  case 0:  {
   _g_ne($0,0);
   STACKTOP = sp;return;
   break;
  }
  case -1:  {
   _Warning(27343,$vararg_buffer15);
   _AddCodeLine(27367,$vararg_buffer17);
   STACKTOP = sp;return;
   break;
  }
  default: {
   $22 = (($1) + 1)|0;
   _g_ge($0,$22);
   STACKTOP = sp;return;
  }
  }
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
 $13 = $0 & 8;
 $14 = ($13|0)==(0);
 if ($14) {
  $18 = ($1|0)<(32767);
  if ($18) {
   $19 = (($1) + 1)|0;
   _g_ge($0,$19);
   STACKTOP = sp;return;
  } else {
   _Warning(27343,$vararg_buffer11);
   _AddCodeLine(27367,$vararg_buffer13);
   STACKTOP = sp;return;
  }
 }
 $15 = ($1|0)==(0);
 if ($15) {
  _g_ne($0,0);
  STACKTOP = sp;return;
 }
 $16 = ($1>>>0)<(65535);
 if ($16) {
  $17 = (($1) + 1)|0;
  _g_ge($0,$17);
  STACKTOP = sp;return;
 } else {
  _Warning(27343,$vararg_buffer7);
  _AddCodeLine(27367,$vararg_buffer9);
  STACKTOP = sp;return;
 }
}
function _g_ge($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0 = 0, $$0$i$i$i = 0, $$1$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$i$i$i = 0, $trunc$i$i$i$clear = 0, $trunc30 = 0, $trunc30$clear = 0;
 var $trunc30$clear103 = 0, $trunc31 = 0, $trunc31$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer100 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0;
 var $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer73 = 0, $vararg_buffer75 = 0, $vararg_buffer77 = 0, $vararg_buffer79 = 0;
 var $vararg_buffer82 = 0, $vararg_buffer84 = 0, $vararg_buffer87 = 0, $vararg_buffer9 = 0, $vararg_buffer90 = 0, $vararg_buffer92 = 0, $vararg_buffer94 = 0, $vararg_buffer96 = 0, $vararg_buffer98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0;
 $vararg_buffer100 = sp + 360|0;
 $vararg_buffer98 = sp + 352|0;
 $vararg_buffer96 = sp + 344|0;
 $vararg_buffer94 = sp + 336|0;
 $vararg_buffer92 = sp + 328|0;
 $vararg_buffer90 = sp + 320|0;
 $vararg_buffer87 = sp + 312|0;
 $vararg_buffer84 = sp + 304|0;
 $vararg_buffer82 = sp + 296|0;
 $vararg_buffer79 = sp + 288|0;
 $vararg_buffer77 = sp + 280|0;
 $vararg_buffer75 = sp + 272|0;
 $vararg_buffer73 = sp + 264|0;
 $vararg_buffer71 = sp + 256|0;
 $vararg_buffer69 = sp + 248|0;
 $vararg_buffer66 = sp + 240|0;
 $vararg_buffer63 = sp + 232|0;
 $vararg_buffer61 = sp + 224|0;
 $vararg_buffer59 = sp + 216|0;
 $vararg_buffer57 = sp + 208|0;
 $vararg_buffer55 = sp + 200|0;
 $vararg_buffer53 = sp + 192|0;
 $vararg_buffer51 = sp + 184|0;
 $vararg_buffer49 = sp + 176|0;
 $vararg_buffer47 = sp + 168|0;
 $vararg_buffer45 = sp + 160|0;
 $vararg_buffer43 = sp + 152|0;
 $vararg_buffer40 = sp + 144|0;
 $vararg_buffer38 = sp + 136|0;
 $vararg_buffer35 = sp + 128|0;
 $vararg_buffer33 = sp + 120|0;
 $vararg_buffer30 = sp + 112|0;
 $vararg_buffer28 = sp + 104|0;
 $vararg_buffer25 = sp + 96|0;
 $vararg_buffer23 = sp + 88|0;
 $vararg_buffer21 = sp + 80|0;
 $vararg_buffer19 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = $0 & 32;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = $0;
  } else {
   $4 = $0 & 8;
   $5 = ($4|0)==(0);
   $6 = ($1|0)==(0);
   if (!($5)) {
    if ($6) {
     _Warning(27432,$vararg_buffer);
     _AddCodeLine(27457,$vararg_buffer1);
     STACKTOP = sp;return;
    }
    $trunc31 = $0&255;
    $trunc31$clear = $trunc31 & 7;
    switch ($trunc31$clear<<24>>24) {
    case 3:  {
     $7 = $0 & 512;
     $8 = ($7|0)==(0);
     if (!($8)) {
      $9 = $1 & 255;
      HEAP32[$vararg_buffer3>>2] = $9;
      _AddCodeLine(27026,$vararg_buffer3);
      _AddCodeLine(26551,$vararg_buffer5);
      _AddCodeLine(25482,$vararg_buffer7);
      _AddCodeLine(27391,$vararg_buffer9);
      STACKTOP = sp;return;
     }
     break;
    }
    case 1:  {
     break;
    }
    case 0:  {
     $13 = $1 & 255;
     HEAP32[$vararg_buffer25>>2] = $13;
     _AddCodeLine(27026,$vararg_buffer25);
     _AddCodeLine(25104,$vararg_buffer28);
     $14 = $1 >>> 8;
     $15 = $14 & 255;
     HEAP32[$vararg_buffer30>>2] = $15;
     _AddCodeLine(25223,$vararg_buffer30);
     _AddCodeLine(26367,$vararg_buffer33);
     $16 = $1 >>> 16;
     $17 = $16 & 255;
     HEAP32[$vararg_buffer35>>2] = $17;
     _AddCodeLine(25223,$vararg_buffer35);
     _AddCodeLine(26345,$vararg_buffer38);
     $18 = $1 >>> 24;
     HEAP32[$vararg_buffer40>>2] = $18;
     _AddCodeLine(25223,$vararg_buffer40);
     _AddCodeLine(26551,$vararg_buffer43);
     _AddCodeLine(25482,$vararg_buffer45);
     _AddCodeLine(27391,$vararg_buffer47);
     STACKTOP = sp;return;
     break;
    }
    default: {
     _typeerror($0);
     // unreachable;
    }
    }
    $10 = $1 & 255;
    HEAP32[$vararg_buffer11>>2] = $10;
    _AddCodeLine(27026,$vararg_buffer11);
    _AddCodeLine(25104,$vararg_buffer14);
    $11 = $1 >>> 8;
    $12 = $11 & 255;
    HEAP32[$vararg_buffer16>>2] = $12;
    _AddCodeLine(25223,$vararg_buffer16);
    _AddCodeLine(26551,$vararg_buffer19);
    _AddCodeLine(25482,$vararg_buffer21);
    _AddCodeLine(27391,$vararg_buffer23);
    STACKTOP = sp;return;
   }
   $trunc30 = $0&255;
   if (!($6)) {
    $trunc30$clear103 = $trunc30 & 7;
    switch ($trunc30$clear103<<24>>24) {
    case 3:  {
     $21 = $0 & 512;
     $22 = ($21|0)==(0);
     if (!($22)) {
      $23 = (_GetLocalLabel()|0);
      _AddCodeLine(25219,$vararg_buffer61);
      $24 = $1 & 255;
      HEAP32[$vararg_buffer63>>2] = $24;
      _AddCodeLine(25223,$vararg_buffer63);
      $25 = (_LocalLabelName($23)|0);
      HEAP32[$vararg_buffer66>>2] = $25;
      _AddCodeLine(27518,$vararg_buffer66);
      _AddCodeLine(27404,$vararg_buffer69);
      $26 = HEAP32[11209]|0;
      $27 = ((($26)) + 4|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = (_LocalLabelName($23)|0);
      (_CS_AddLabel($28,$29)|0);
      _AddCodeLine(26170,$vararg_buffer71);
      _AddCodeLine(26551,$vararg_buffer73);
      _AddCodeLine(25482,$vararg_buffer75);
      _AddCodeLine(27391,$vararg_buffer77);
      STACKTOP = sp;return;
     }
     break;
    }
    case 1:  {
     break;
    }
    case 0:  {
     $39 = $0 & -513;
     $40 = $0 & -545;
     _g_push($40,0);
     $$0 = $39;
     break L1;
     break;
    }
    default: {
     _typeerror($0);
     // unreachable;
    }
    }
    $30 = (_GetLocalLabel()|0);
    $31 = $1 & 255;
    HEAP32[$vararg_buffer79>>2] = $31;
    _AddCodeLine(27026,$vararg_buffer79);
    _AddCodeLine(25104,$vararg_buffer82);
    $32 = $1 >>> 8;
    $33 = $32 & 255;
    HEAP32[$vararg_buffer84>>2] = $33;
    _AddCodeLine(25223,$vararg_buffer84);
    $34 = (_LocalLabelName($30)|0);
    HEAP32[$vararg_buffer87>>2] = $34;
    _AddCodeLine(27518,$vararg_buffer87);
    _AddCodeLine(27404,$vararg_buffer90);
    $35 = HEAP32[11209]|0;
    $36 = ((($35)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (_LocalLabelName($30)|0);
    (_CS_AddLabel($37,$38)|0);
    _AddCodeLine(26170,$vararg_buffer92);
    _AddCodeLine(26551,$vararg_buffer94);
    _AddCodeLine(25482,$vararg_buffer96);
    _AddCodeLine(27391,$vararg_buffer98);
    STACKTOP = sp;return;
   }
   $trunc30$clear = $trunc30 & 7;
   switch ($trunc30$clear<<24>>24) {
   case 3:  {
    $19 = $0 & 512;
    $20 = ($19|0)==(0);
    if (!($20)) {
     _AddCodeLine(25604,$vararg_buffer49);
     _AddCodeLine(27507,$vararg_buffer51);
     STACKTOP = sp;return;
    }
    break;
   }
   case 1:  {
    break;
   }
   case 0:  {
    _AddCodeLine(26345,$vararg_buffer57);
    _AddCodeLine(27507,$vararg_buffer59);
    STACKTOP = sp;return;
    break;
   }
   default: {
    _typeerror($0);
    // unreachable;
   }
   }
   _AddCodeLine(25104,$vararg_buffer53);
   _AddCodeLine(27507,$vararg_buffer55);
   STACKTOP = sp;return;
  }
 } while(0);
 $41 = $$0 & 8;
 $42 = ($41|0)==(0);
 $$$i = $42 ? 7184 : (7188);
 $43 = $$0 & 7;
 $44 = ($43|0)==(0);
 $45 = ((($$$i)) + 8|0);
 $$1$i = $44 ? $45 : $$$i;
 $46 = $$0 & 32;
 $47 = ($46|0)==(0);
 if (!($47)) {
  _g_getimmed($$0,$1,0);
 }
 $48 = HEAP32[$$1$i>>2]|0;
 HEAP32[$vararg_buffer100>>2] = $48;
 _AddCodeLine(25773,$vararg_buffer100);
 $trunc$i$i$i = $$0&255;
 $trunc$i$i$i$clear = $trunc$i$i$i & 7;
 switch ($trunc$i$i$i$clear<<24>>24) {
 case 3:  {
  $49 = $$0 >>> 9;
  $50 = $49 & 1;
  $51 = (2 - ($50))|0;
  $$0$i$i$i = $51;
  break;
 }
 case 1:  {
  $$0$i$i$i = 2;
  break;
 }
 case 0:  {
  $$0$i$i$i = 4;
  break;
 }
 case 4:  {
  $$0$i$i$i = 4;
  break;
 }
 default: {
  _typeerror($$0);
  // unreachable;
 }
 }
 $52 = HEAP32[11252]|0;
 $53 = (($52) + ($$0$i$i$i))|0;
 HEAP32[11252] = $53;
 STACKTOP = sp;return;
}
function _g_res($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 _AddDataLine(27544,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_defdata($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $trunc = 0, $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = $0 & 32;
 $4 = ($3|0)==(0);
 if ($4) {
  _GetLabelName($0,$1,$2);
  HEAP32[$vararg_buffer7>>2] = 46640;
  _AddDataLine(27600,$vararg_buffer7);
  STACKTOP = sp;return;
 }
 $trunc = $0&255;
 $trunc$clear = $trunc & 7;
 switch ($trunc$clear<<24>>24) {
 case 3:  {
  $5 = $1 & 255;
  HEAP32[$vararg_buffer>>2] = $5;
  _AddDataLine(27557,$vararg_buffer);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $6 = $1 & 65535;
  HEAP32[$vararg_buffer1>>2] = $6;
  _AddDataLine(27571,$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  HEAP32[$vararg_buffer4>>2] = $1;
  _AddDataLine(27585,$vararg_buffer4);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _typeerror($0);
  // unreachable;
 }
 }
}
function _g_defbytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$01819 = 0, $$020 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer4 = sp + 144|0;
 $vararg_buffer1 = sp + 136|0;
 $vararg_buffer = sp + 128|0;
 $2 = sp;
 $3 = ($1|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($2)) + 7|0);
 $$01819 = $1;$$020 = $0;
 while(1) {
  $5 = ($$01819>>>0)>(16);
  $$ = $5 ? 16 : $$01819;
  $6 = (($$01819) - ($$))|0;
  $7 = $2;
  $8 = $7;
  HEAP32[$8>>2] = 2036477449;
  $9 = (($7) + 4)|0;
  $10 = $9;
  HEAP32[$10>>2] = 615796;
  $11 = ((($$020)) + 1|0);
  $12 = HEAP8[$$020>>0]|0;
  $13 = $12&255;
  HEAP32[$vararg_buffer>>2] = $13;
  $14 = (_sprintf($4,36910,$vararg_buffer)|0);
  $15 = (($$) + -1)|0;
  $16 = ($15|0)==(0);
  if ($16) {
   $$lcssa = $11;
  } else {
   $17 = (($4) + ($14)|0);
   $19 = $17;$21 = $11;$27 = $15;
   while(1) {
    $18 = ((($19)) + 1|0);
    HEAP8[$19>>0] = 44;
    $20 = ((($21)) + 1|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    HEAP32[$vararg_buffer1>>2] = $23;
    $24 = (_sprintf($18,36910,$vararg_buffer1)|0);
    $25 = (($18) + ($24)|0);
    $26 = (($27) + -1)|0;
    $28 = ($26|0)==(0);
    if ($28) {
     $$lcssa = $20;
     break;
    } else {
     $19 = $25;$21 = $20;$27 = $26;
    }
   }
  }
  HEAP32[$vararg_buffer4>>2] = $2;
  _AddDataLine(32813,$vararg_buffer4);
  $29 = ($6|0)==(0);
  if ($29) {
   break;
  } else {
   $$01819 = $6;$$020 = $$lcssa;
  }
 }
 STACKTOP = sp;return;
}
function _g_zerobytes($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 HEAP32[$vararg_buffer>>2] = $0;
 _AddDataLine(27544,$vararg_buffer);
 STACKTOP = sp;return;
}
function _g_initregister($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = (_GetLocalLabel()|0);
 $4 = (($2) + 255)|0;
 $5 = $4 & 255;
 HEAP32[$vararg_buffer>>2] = $5;
 _AddCodeLine(25039,$vararg_buffer);
 $6 = HEAP32[11209]|0;
 $7 = ((($6)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_LocalLabelName($3)|0);
 (_CS_AddLabel($8,$9)|0);
 $10 = (_LocalLabelName($0)|0);
 HEAP32[$vararg_buffer1>>2] = $10;
 (_xsprintf(46640,256,32813,$vararg_buffer1)|0);
 HEAP32[$vararg_buffer4>>2] = 46640;
 _AddCodeLine(27610,$vararg_buffer4);
 $11 = $1 & 65535;
 HEAP32[$vararg_buffer7>>2] = $11;
 (_xsprintf(46640,256,32816,$vararg_buffer7)|0);
 HEAP32[$vararg_buffer10>>2] = 46640;
 _AddCodeLine(27619,$vararg_buffer10);
 _AddCodeLine(25201,$vararg_buffer13);
 $12 = (_LocalLabelName($3)|0);
 HEAP32[$vararg_buffer15>>2] = $12;
 _AddCodeLine(25324,$vararg_buffer15);
 STACKTOP = sp;return;
}
function _g_initauto($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer26 = sp + 88|0;
 $vararg_buffer24 = sp + 80|0;
 $vararg_buffer21 = sp + 72|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer16 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (_GetLocalLabel()|0);
 $3 = ($1>>>0)>(255);
 if ($3) {
  _Error(25014,$vararg_buffer14);
  $12 = ($1|0)==(256);
  if (!($12)) {
   STACKTOP = sp;return;
  }
 } else {
  $4 = ($1>>>0)<(129);
  if ($4) {
   $5 = (($1) + -1)|0;
   HEAP32[$vararg_buffer>>2] = $5;
   _AddCodeLine(24910,$vararg_buffer);
   $6 = HEAP32[11209]|0;
   $7 = ((($6)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (_LocalLabelName($2)|0);
   (_CS_AddLabel($8,$9)|0);
   $10 = (_LocalLabelName($0)|0);
   HEAP32[$vararg_buffer1>>2] = $10;
   (_xsprintf(46640,256,32813,$vararg_buffer1)|0);
   HEAP32[$vararg_buffer4>>2] = 46640;
   _AddCodeLine(27628,$vararg_buffer4);
   _AddCodeLine(25108,$vararg_buffer7);
   _AddCodeLine(25197,$vararg_buffer9);
   $11 = (_LocalLabelName($2)|0);
   HEAP32[$vararg_buffer11>>2] = $11;
   _AddCodeLine(25324,$vararg_buffer11);
   STACKTOP = sp;return;
  }
 }
 _AddCodeLine(25968,$vararg_buffer16);
 $13 = HEAP32[11209]|0;
 $14 = ((($13)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_LocalLabelName($2)|0);
 (_CS_AddLabel($15,$16)|0);
 $17 = (_LocalLabelName($0)|0);
 HEAP32[$vararg_buffer18>>2] = $17;
 (_xsprintf(46640,256,32813,$vararg_buffer18)|0);
 HEAP32[$vararg_buffer21>>2] = 46640;
 _AddCodeLine(27628,$vararg_buffer21);
 _AddCodeLine(25108,$vararg_buffer24);
 _AddCodeLine(25266,$vararg_buffer26);
 _AddCmpCodeIfSizeNot256(25287,$1);
 $18 = (_LocalLabelName($2)|0);
 HEAP32[$vararg_buffer28>>2] = $18;
 _AddCodeLine(25205,$vararg_buffer28);
 STACKTOP = sp;return;
}
function _g_initstatic($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0;
 var $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer65 = 0, $vararg_buffer68 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer68 = sp + 200|0;
 $vararg_buffer65 = sp + 192|0;
 $vararg_buffer62 = sp + 184|0;
 $vararg_buffer59 = sp + 176|0;
 $vararg_buffer57 = sp + 168|0;
 $vararg_buffer54 = sp + 160|0;
 $vararg_buffer51 = sp + 152|0;
 $vararg_buffer48 = sp + 144|0;
 $vararg_buffer46 = sp + 136|0;
 $vararg_buffer43 = sp + 128|0;
 $vararg_buffer40 = sp + 120|0;
 $vararg_buffer37 = sp + 112|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer32 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer26 = sp + 80|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ($2>>>0)<(129);
 if ($3) {
  $4 = (_GetLocalLabel()|0);
  $5 = (($2) + -1)|0;
  HEAP32[$vararg_buffer>>2] = $5;
  _AddCodeLine(24910,$vararg_buffer);
  $6 = HEAP32[11209]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_LocalLabelName($4)|0);
  (_CS_AddLabel($8,$9)|0);
  $10 = (_LocalLabelName($0)|0);
  HEAP32[$vararg_buffer1>>2] = $10;
  (_xsprintf(46640,256,32813,$vararg_buffer1)|0);
  HEAP32[$vararg_buffer4>>2] = 46640;
  _AddCodeLine(27628,$vararg_buffer4);
  $11 = (_LocalLabelName($1)|0);
  HEAP32[$vararg_buffer7>>2] = $11;
  (_xsprintf(46640,256,32813,$vararg_buffer7)|0);
  HEAP32[$vararg_buffer10>>2] = 46640;
  _AddCodeLine(27637,$vararg_buffer10);
  _AddCodeLine(25197,$vararg_buffer13);
  $12 = (_LocalLabelName($4)|0);
  HEAP32[$vararg_buffer15>>2] = $12;
  _AddCodeLine(25324,$vararg_buffer15);
  STACKTOP = sp;return;
 }
 $13 = ($2>>>0)<(257);
 if ($13) {
  $14 = (_GetLocalLabel()|0);
  _AddCodeLine(25968,$vararg_buffer18);
  $15 = HEAP32[11209]|0;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_LocalLabelName($14)|0);
  (_CS_AddLabel($17,$18)|0);
  $19 = (_LocalLabelName($0)|0);
  HEAP32[$vararg_buffer20>>2] = $19;
  (_xsprintf(46640,256,32813,$vararg_buffer20)|0);
  HEAP32[$vararg_buffer23>>2] = 46640;
  _AddCodeLine(27628,$vararg_buffer23);
  $20 = (_LocalLabelName($1)|0);
  HEAP32[$vararg_buffer26>>2] = $20;
  (_xsprintf(46640,256,32813,$vararg_buffer26)|0);
  HEAP32[$vararg_buffer29>>2] = 46640;
  _AddCodeLine(27637,$vararg_buffer29);
  _AddCodeLine(25266,$vararg_buffer32);
  _AddCmpCodeIfSizeNot256(25287,$2);
  $21 = (_LocalLabelName($14)|0);
  HEAP32[$vararg_buffer34>>2] = $21;
  _AddCodeLine(25205,$vararg_buffer34);
  STACKTOP = sp;return;
 } else {
  $22 = (_LocalLabelName($1)|0);
  HEAP32[$vararg_buffer37>>2] = $22;
  (_xsprintf(46640,256,32813,$vararg_buffer37)|0);
  HEAP32[$vararg_buffer40>>2] = 46640;
  _AddCodeLine(25413,$vararg_buffer40);
  HEAP32[$vararg_buffer43>>2] = 46640;
  _AddCodeLine(25424,$vararg_buffer43);
  _AddCodeLine(25169,$vararg_buffer46);
  $23 = (_LocalLabelName($0)|0);
  HEAP32[$vararg_buffer48>>2] = $23;
  (_xsprintf(46640,256,32813,$vararg_buffer48)|0);
  HEAP32[$vararg_buffer51>>2] = 46640;
  _AddCodeLine(25413,$vararg_buffer51);
  HEAP32[$vararg_buffer54>>2] = 46640;
  _AddCodeLine(25424,$vararg_buffer54);
  _AddCodeLine(25169,$vararg_buffer57);
  $24 = $2 >>> 8;
  $25 = $24 & 255;
  HEAP32[$vararg_buffer59>>2] = $25;
  _AddCodeLine(25039,$vararg_buffer59);
  $26 = $2 & 255;
  HEAP32[$vararg_buffer62>>2] = $26;
  _AddCodeLine(24940,$vararg_buffer62);
  HEAP32[$vararg_buffer65>>2] = 27646;
  (_xsprintf(46640,256,25443,$vararg_buffer65)|0);
  HEAP32[$vararg_buffer68>>2] = 46640;
  _AddCodeLine(25773,$vararg_buffer68);
  STACKTOP = sp;return;
 }
}
function _g_switch($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$02834 = 0, $$02834$us = 0, $$035 = 0, $$2 = 0, $$idx$val = 0, $$idx29$val = 0, $$idx29$val$us = 0, $$idx29$val33 = 0, $$idx30 = 0, $$idx30$val = 0, $$idx30$val$us = 0, $$idx31$val = 0, $$idx31$val$us = 0, $$idx32$us = 0, $$idx32$val$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer20 = sp + 64|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 switch ($2|0) {
 case 1:  {
  $$027 = 27026;
  break;
 }
 case 2:  {
  $$027 = 27037;
  break;
 }
 case 3:  {
  _AddCodeLine(25901,$vararg_buffer);
  $$027 = 25287;
  break;
 }
 case 4:  {
  _AddCodeLine(25919,$vararg_buffer1);
  $$027 = 25287;
  break;
 }
 default: {
  HEAP32[$vararg_buffer3>>2] = $2;
  _Internal(27653,$vararg_buffer3);
  // unreachable;
 }
 }
 $$idx29$val33 = HEAP32[$0>>2]|0;
 $3 = ($$idx29$val33|0)==(0);
 if ($3) {
  $29 = (_LocalLabelName($1)|0);
  HEAP32[$vararg_buffer20>>2] = $29;
  _AddCodeLine(27129,$vararg_buffer20);
  STACKTOP = sp;return;
 }
 $$idx30 = ((($0)) + 8|0);
 $4 = ($2|0)==(1);
 $5 = (($2) + -1)|0;
 if ($4) {
  $$02834$us = 0;
  while(1) {
   $$idx30$val$us = HEAP32[$$idx30>>2]|0;
   $6 = (($$idx30$val$us) + ($$02834$us<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $$idx31$val$us = HEAP8[$7>>0]|0;
   $8 = $$idx31$val$us&255;
   HEAP32[$vararg_buffer5>>2] = $8;
   _AddCodeLine($$027,$vararg_buffer5);
   $$idx32$us = ((($7)) + 4|0);
   $$idx32$val$us = HEAP32[$$idx32$us>>2]|0;
   $9 = (_LocalLabelName($$idx32$val$us)|0);
   HEAP32[$vararg_buffer8>>2] = $9;
   _AddCodeLine(27143,$vararg_buffer8);
   $10 = (($$02834$us) + 1)|0;
   $$idx29$val$us = HEAP32[$0>>2]|0;
   $11 = ($10>>>0)<($$idx29$val$us>>>0);
   if ($11) {
    $$02834$us = $10;
   } else {
    break;
   }
  }
  $29 = (_LocalLabelName($1)|0);
  HEAP32[$vararg_buffer20>>2] = $29;
  _AddCodeLine(27129,$vararg_buffer20);
  STACKTOP = sp;return;
 } else {
  $$02834 = 0;$$035 = 0;
 }
 while(1) {
  $$idx30$val = HEAP32[$$idx30>>2]|0;
  $12 = (($$idx30$val) + ($$02834<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($$035|0)==(0);
  if (!($14)) {
   $15 = HEAP32[11209]|0;
   $16 = ((($15)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (_LocalLabelName($$035)|0);
   (_CS_AddLabel($17,$18)|0);
  }
  $$idx31$val = HEAP8[$13>>0]|0;
  $19 = $$idx31$val&255;
  HEAP32[$vararg_buffer11>>2] = $19;
  _AddCodeLine($$027,$vararg_buffer11);
  $$idx$val = HEAP32[$0>>2]|0;
  $20 = (($$idx$val) + -1)|0;
  $21 = ($$02834|0)==($20|0);
  if ($21) {
   $22 = (_LocalLabelName($1)|0);
   HEAP32[$vararg_buffer14>>2] = $22;
   _AddCodeLine(27136,$vararg_buffer14);
   $$2 = 0;
  } else {
   $23 = (_GetLocalLabel()|0);
   $24 = (_LocalLabelName($23)|0);
   HEAP32[$vararg_buffer17>>2] = $24;
   _AddCodeLine(27136,$vararg_buffer17);
   $$2 = $23;
  }
  $25 = ((($13)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  _g_switch($26,$1,$5);
  $27 = (($$02834) + 1)|0;
  $$idx29$val = HEAP32[$0>>2]|0;
  $28 = ($27>>>0)<($$idx29$val>>>0);
  if ($28) {
   $$02834 = $27;$$035 = $$2;
  } else {
   break;
  }
 }
 $29 = (_LocalLabelName($1)|0);
 HEAP32[$vararg_buffer20>>2] = $29;
 _AddCodeLine(27129,$vararg_buffer20);
 STACKTOP = sp;return;
}
function _g_asmcode($0) {
 $0 = $0|0;
 var $$idx$val = 0, $$idx2 = 0, $$idx2$val = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $$idx2 = ((($0)) + 4|0);
 $$idx2$val = HEAP32[$$idx2>>2]|0;
 $$idx$val = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $$idx2$val;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$idx$val;
 _AddCodeLine(27683,$vararg_buffer);
 STACKTOP = sp;return;
}
function _NewCodeLabel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_xmalloc(28)|0);
 HEAP32[$2>>2] = 0;
 $3 = (_xstrdup($0)|0);
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($2)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($2)) + 16|0);
 (_InitCollection($7)|0);
 return ($2|0);
}
function _FreeCodeLabel($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _xfree($2);
 $3 = ((($0)) + 16|0);
 _DoneCollection($3);
 _xfree($0);
 return;
}
function _CL_AddRef($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 20|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _CE_SetArg($1,$4);
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 _CollInsert($5,$1,$6);
 return;
}
function _CL_MoveRefs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$i = 0, $$idx$val$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 16|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i|0)==(0);
 if ($2) {
  HEAP32[$$idx$i>>2] = 0;
  return;
 }
 $3 = ((($0)) + 24|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 16|0);
 $6 = (($$idx$val$i) + -1)|0;
 $11 = $6;
 while(1) {
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($11<<2)|0);
  $12 = HEAP32[$10>>2]|0;
  $13 = ((($12)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==($0|0);
  if (!($15)) {
   label = 5;
   break;
  }
  HEAP32[$13>>2] = $1;
  $18 = HEAP32[$4>>2]|0;
  _CE_SetArg($12,$18);
  $19 = HEAP32[$5>>2]|0;
  _CollInsert($5,$12,$19);
  $20 = ($11|0)==(0);
  if ($20) {
   label = 8;
   break;
  }
  $$pre = HEAP32[$$idx$i>>2]|0;
  $21 = (($11) + -1)|0;
  $22 = ($$pre>>>0)>($21>>>0);
  if ($22) {
   $11 = $21;
  } else {
   label = 3;
   break;
  }
 }
 if ((label|0) == 3) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 5) {
  $16 = HEAP32[3332]|0;
  $17 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$16 & 1]($17,27688,27710,115);
  // unreachable;
 }
 else if ((label|0) == 8) {
  HEAP32[$$idx$i>>2] = 0;
  return;
 }
}
function _CL_Output($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_WriteOutput(27725,$vararg_buffer)|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = (_strlen($3)|0);
 $5 = ($4>>>0)>(6);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 (_WriteOutput(34038,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _ParseType($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0;
 $1 = sp + 320|0;
 $2 = sp;
 HEAP32[$1>>2] = 0;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($1)) + 244|0);
 HEAP32[$4>>2] = 0;
 _ParseTypeSpec($1,-1,0);
 _ParseDecl($1,$2,1);
 $5 = ((($2)) + 4|0);
 (_TypeCopy($0,$5)|0);
 STACKTOP = sp;return ($0|0);
}
function _ParseTypeSpec($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$048$i = 0, $$$1$i = 0, $$$2$i = 0, $$$i = 0, $$0$i = 0, $$0$ph$i = 0, $$018$i = 0, $$019$i$i = 0, $$019$i$i81 = 0, $$019$i$lcssa = 0, $$019$i98 = 0, $$01920$i$i = 0, $$01920$i$i80 = 0, $$01921$i$i = 0, $$01921$i$i82 = 0, $$048$i$lcssa = 0, $$048$i101 = 0, $$049$i100 = 0, $$054$i$lcssa = 0, $$054$i99 = 0;
 var $$1$i = 0, $$1$i74 = 0, $$1$i77 = 0, $$150$i = 0, $$155$i = 0, $$2$i = 0, $$256$i = 0, $$3$i = 0, $$352$i = 0, $$4$i = 0, $$453$i = 0, $$458$i = 0, $$idx = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i79 = 0, $$idx60$val$i = 0, $$pre = 0, $$pre108 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0;
 $vararg_buffer19 = sp + 320|0;
 $vararg_buffer17 = sp + 312|0;
 $vararg_buffer15 = sp + 304|0;
 $vararg_buffer12 = sp + 296|0;
 $vararg_buffer10 = sp + 288|0;
 $vararg_buffer8 = sp + 280|0;
 $vararg_buffer6 = sp + 272|0;
 $vararg_buffer3 = sp + 264|0;
 $vararg_buffer1 = sp + 256|0;
 $vararg_buffer = sp + 248|0;
 $3 = sp;
 $4 = sp + 328|0;
 $5 = sp + 713|0;
 $6 = sp + 648|0;
 $7 = ((($0)) + 244|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & -3;
 HEAP32[$7>>2] = $9;
 $10 = (_OptionalQualifiers(6144)|0);
 $11 = $10 | $2;
 $12 = HEAP32[11156]|0;
 L1: do {
  switch ($12|0) {
  case 24:  {
   _NextToken();
   $13 = ((($0)) + 4|0);
   HEAP32[$13>>2] = 9;
   $14 = ((($0)) + 12|0);
   HEAP32[$14>>2] = 0;
   break;
  }
  case 14:  {
   _NextToken();
   $15 = (_GetDefaultChar()|0);
   $16 = ((($0)) + 4|0);
   HEAP32[$16>>2] = $15;
   $17 = ((($0)) + 12|0);
   HEAP32[$17>>2] = 0;
   break;
  }
  case 18:  {
   _NextToken();
   $18 = HEAP32[11156]|0;
   switch ($18|0) {
   case 19:  {
    _NextToken();
    $19 = HEAP32[11156]|0;
    $20 = ($19|0)==(15);
    if ($20) {
     _NextToken();
    }
    $21 = ((($0)) + 4|0);
    HEAP32[$21>>2] = 1172;
    $22 = ((($0)) + 12|0);
    HEAP32[$22>>2] = 0;
    break L1;
    break;
   }
   case 20:  {
    _NextToken();
    $$pre108 = HEAP32[11156]|0;
    $23 = $$pre108;
    break;
   }
   default: {
    $23 = $18;
   }
   }
   $24 = ($23|0)==(15);
   if ($24) {
    _NextToken();
   }
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 1300;
   $26 = ((($0)) + 12|0);
   HEAP32[$26>>2] = 0;
   break;
  }
  case 21:  {
   _NextToken();
   $27 = HEAP32[11156]|0;
   switch ($27|0) {
   case 19:  {
    _NextToken();
    $28 = HEAP32[11156]|0;
    $29 = ($28|0)==(15);
    if ($29) {
     _NextToken();
    }
    $30 = ((($0)) + 4|0);
    HEAP32[$30>>2] = 658;
    $31 = ((($0)) + 12|0);
    HEAP32[$31>>2] = 0;
    break L1;
    break;
   }
   case 20:  {
    _NextToken();
    $$pre = HEAP32[11156]|0;
    $32 = $$pre;
    break;
   }
   default: {
    $32 = $27;
   }
   }
   $33 = ($32|0)==(15);
   if ($33) {
    _NextToken();
   }
   $34 = ((($0)) + 4|0);
   HEAP32[$34>>2] = 786;
   $35 = ((($0)) + 12|0);
   HEAP32[$35>>2] = 0;
   break;
  }
  case 15:  {
   _NextToken();
   $36 = ((($0)) + 4|0);
   HEAP32[$36>>2] = 275;
   $37 = ((($0)) + 12|0);
   HEAP32[$37>>2] = 0;
   break;
  }
  case 20:  {
   _NextToken();
   $38 = HEAP32[11156]|0;
   switch ($38|0) {
   case 14:  {
    _NextToken();
    $39 = ((($0)) + 4|0);
    HEAP32[$39>>2] = 273;
    $40 = ((($0)) + 12|0);
    HEAP32[$40>>2] = 0;
    break L1;
    break;
   }
   case 21:  {
    _NextToken();
    $41 = HEAP32[11156]|0;
    $42 = ($41|0)==(15);
    if ($42) {
     _NextToken();
    }
    $43 = ((($0)) + 4|0);
    HEAP32[$43>>2] = 786;
    $44 = ((($0)) + 12|0);
    HEAP32[$44>>2] = 0;
    break L1;
    break;
   }
   case 18:  {
    _NextToken();
    $45 = HEAP32[11156]|0;
    $46 = ($45|0)==(15);
    if ($46) {
     _NextToken();
    }
    $47 = ((($0)) + 4|0);
    HEAP32[$47>>2] = 1300;
    $48 = ((($0)) + 12|0);
    HEAP32[$48>>2] = 0;
    break L1;
    break;
   }
   case 15:  {
    _NextToken();
    break;
   }
   default: {
   }
   }
   $49 = ((($0)) + 4|0);
   HEAP32[$49>>2] = 275;
   $50 = ((($0)) + 12|0);
   HEAP32[$50>>2] = 0;
   break;
  }
  case 19:  {
   _NextToken();
   $51 = HEAP32[11156]|0;
   switch ($51|0) {
   case 14:  {
    _NextToken();
    $52 = ((($0)) + 4|0);
    HEAP32[$52>>2] = 145;
    $53 = ((($0)) + 12|0);
    HEAP32[$53>>2] = 0;
    break L1;
    break;
   }
   case 21:  {
    _NextToken();
    $54 = HEAP32[11156]|0;
    $55 = ($54|0)==(15);
    if ($55) {
     _NextToken();
    }
    $56 = ((($0)) + 4|0);
    HEAP32[$56>>2] = 658;
    $57 = ((($0)) + 12|0);
    HEAP32[$57>>2] = 0;
    break L1;
    break;
   }
   case 18:  {
    _NextToken();
    $58 = HEAP32[11156]|0;
    $59 = ($58|0)==(15);
    if ($59) {
     _NextToken();
    }
    $60 = ((($0)) + 4|0);
    HEAP32[$60>>2] = 1172;
    $61 = ((($0)) + 12|0);
    HEAP32[$61>>2] = 0;
    break L1;
    break;
   }
   case 15:  {
    _NextToken();
    break;
   }
   default: {
   }
   }
   $62 = ((($0)) + 4|0);
   HEAP32[$62>>2] = 147;
   $63 = ((($0)) + 12|0);
   HEAP32[$63>>2] = 0;
   break;
  }
  case 17:  {
   _NextToken();
   $64 = ((($0)) + 4|0);
   HEAP32[$64>>2] = 39;
   $65 = ((($0)) + 12|0);
   HEAP32[$65>>2] = 0;
   break;
  }
  case 16:  {
   _NextToken();
   $66 = ((($0)) + 4|0);
   HEAP32[$66>>2] = 40;
   $67 = ((($0)) + 12|0);
   HEAP32[$67>>2] = 0;
   break;
  }
  case 23:  {
   _NextToken();
   $68 = HEAP32[11156]|0;
   $69 = ($68|0)==(40);
   if ($69) {
    (_strcpy($6,(44644))|0);
    _NextToken();
   } else {
    (_AnonName($6,30697)|0);
   }
   $70 = HEAP32[$7>>2]|0;
   $71 = $70 | 4;
   HEAP32[$7>>2] = $71;
   $72 = HEAP32[11156]|0;
   $73 = ($72|0)==(46);
   do {
    if ($73) {
     (_AddStructSym($6,16386,0,0)|0);
     _NextToken();
     _EnterStructLevel();
     $81 = HEAP32[11156]|0;
     $82 = ($81|0)==(55);
     L62: do {
      if ($82) {
       $$019$i$lcssa = 0;
      } else {
       $83 = ((($3)) + 4|0);
       $84 = ((($3)) + 244|0);
       $85 = ((($4)) + 244|0);
       $86 = ((($4)) + 4|0);
       $$019$i98 = 0;
       L64: while(1) {
        HEAP32[$3>>2] = 0;
        HEAP32[$83>>2] = 0;
        HEAP32[$84>>2] = 0;
        _ParseTypeSpec($3,-1,0);
        $$1$i74 = $$019$i98;
        while(1) {
         _ParseDecl($3,$4,2);
         $87 = (_ParseFieldWidth($4)|0);
         $88 = ($87|0)==(0);
         L68: do {
          if ($88) {
           $$3$i = $$1$i74;
          } else {
           $89 = HEAP8[$85>>0]|0;
           $90 = ($89<<24>>24)==(0);
           if (!($90)) {
            $113 = (_CheckedSizeOf($86)|0);
            $114 = ($113>>>0)>($$1$i74>>>0);
            $$$1$i = $114 ? $113 : $$1$i74;
            $115 = ($87|0)>(0);
            if ($115) {
             (_AddBitField($85,0,0,$87)|0);
             $$3$i = $$$1$i;
             break;
            } else {
             (_AddLocalSym($85,$86,16387,0)|0);
             $$3$i = $$$1$i;
             break;
            }
           }
           $91 = (_IS_Get(8668)|0);
           $92 = ($91|0)>(1);
           if ($92) {
            $$idx$val$i = HEAP32[$86>>2]|0;
            $93 = $$idx$val$i & 112;
            $94 = ($93|0)==(64);
            if ($94) {
             $95 = (_GetSymEntry($86)|0);
             $96 = ((($95)) + 36|0);
             $97 = HEAP32[$96>>2]|0;
             $98 = ($97|0)==(0|0);
             if ($98) {
              $$3$i = $$1$i74;
              break;
             }
             $99 = ((($97)) + 4|0);
             $$01920$i$i = HEAP32[$99>>2]|0;
             $100 = ($$01920$i$i|0)==(0|0);
             if ($100) {
              $$3$i = $$1$i74;
              break;
             } else {
              $$01921$i$i = $$01920$i$i;
             }
             while(1) {
              $103 = ((($$01921$i$i)) + 48|0);
              $104 = ((($$01921$i$i)) + 24|0);
              $105 = HEAP32[$104>>2]|0;
              $106 = ((($$01921$i$i)) + 36|0);
              $107 = HEAP32[$106>>2]|0;
              (_AddLocalSym($103,$105,16387,$107)|0);
              $108 = ((($$01921$i$i)) + 28|0);
              $109 = HEAP32[$108>>2]|0;
              $110 = ($109|0)==(0|0);
              if (!($110)) {
               break L64;
              }
              $101 = ((($$01921$i$i)) + 8|0);
              $$019$i$i = HEAP32[$101>>2]|0;
              $102 = ($$019$i$i|0)==(0|0);
              if ($102) {
               $$3$i = $$1$i74;
               break L68;
              } else {
               $$01921$i$i = $$019$i$i;
              }
             }
            }
           }
           _Warning(28939,$vararg_buffer1);
           $$3$i = $$1$i74;
          }
         } while(0);
         $116 = HEAP32[11156]|0;
         $117 = ($116|0)==(52);
         if (!($117)) {
          break;
         }
         _NextToken();
         $$1$i74 = $$3$i;
        }
        (_ConsumeSemi()|0);
        $118 = HEAP32[11156]|0;
        $119 = ($118|0)==(55);
        if ($119) {
         $$019$i$lcssa = $$3$i;
         break L62;
        } else {
         $$019$i98 = $$3$i;
        }
       }
       $111 = HEAP32[3332]|0;
       $112 = HEAP32[3331]|0;
       FUNCTION_TABLE_viiii[$111 & 1]($112,28922,27771,594);
       // unreachable;
      }
     } while(0);
     _NextToken();
     $120 = (_GetSymTab()|0);
     _LeaveStructLevel();
     $121 = (_AddStructSym($6,16386,$$019$i$lcssa,$120)|0);
     $$018$i = $121;
    } else {
     $74 = (_FindTagSym($6)|0);
     $75 = ($74|0)==(0|0);
     if ($75) {
      $76 = (_AddStructSym($6,16386,0,0)|0);
      $$018$i = $76;
      break;
     }
     $77 = ((($74)) + 20|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = $78 & 16399;
     $80 = ($79|0)==(16386);
     if ($80) {
      $$018$i = $74;
     } else {
      HEAP32[$vararg_buffer>>2] = $6;
      _Error(28884,$vararg_buffer);
      $$018$i = $74;
     }
    }
   } while(0);
   $122 = ((($0)) + 4|0);
   HEAP32[$122>>2] = 75;
   _SetSymEntry($122,$$018$i);
   $123 = ((($0)) + 12|0);
   HEAP32[$123>>2] = 0;
   break;
  }
  case 22:  {
   _NextToken();
   $124 = HEAP32[11156]|0;
   $125 = ($124|0)==(40);
   if ($125) {
    (_strcpy($6,(44644))|0);
    _NextToken();
   } else {
    (_AnonName($6,30675)|0);
   }
   $126 = HEAP32[$7>>2]|0;
   $127 = $126 | 4;
   HEAP32[$7>>2] = $127;
   $128 = HEAP32[11156]|0;
   $129 = ($128|0)==(46);
   do {
    if ($129) {
     (_AddStructSym($6,16385,0,0)|0);
     _NextToken();
     _EnterStructLevel();
     $137 = HEAP32[11156]|0;
     $138 = ($137|0)==(55);
     L102: do {
      if ($138) {
       $$048$i$lcssa = 0;$$054$i$lcssa = 0;
      } else {
       $139 = ((($3)) + 4|0);
       $140 = ((($3)) + 244|0);
       $141 = ((($4)) + 4|0);
       $142 = ((($4)) + 244|0);
       $$048$i101 = 0;$$049$i100 = 0;$$054$i99 = 0;
       L104: while(1) {
        HEAP32[$3>>2] = 0;
        HEAP32[$139>>2] = 0;
        HEAP32[$140>>2] = 0;
        _ParseTypeSpec($3,-1,0);
        $$1$i77 = $$048$i101;$$150$i = $$049$i100;$$155$i = $$054$i99;
        while(1) {
         $143 = ($$150$i|0)==(0);
         if (!($143)) {
          _Error(28977,$vararg_buffer6);
         }
         _ParseDecl($3,$4,2);
         $144 = (_ParseFieldWidth($4)|0);
         $145 = ($$155$i|0)>(0);
         if ($145) {
          $146 = ($144|0)<(1);
          $147 = (($144) + ($$155$i))|0;
          $148 = ($147|0)>(16);
          $or$cond$i = $146 | $148;
          if ($or$cond$i) {
           $149 = (($$1$i77) + 2)|0;
           $150 = (16 - ($$155$i))|0;
           (_AnonName($5,29018)|0);
           (_AddBitField($5,$$1$i77,$$155$i,$150)|0);
           $$2$i = $149;$$256$i = 0;
          } else {
           $$2$i = $$1$i77;$$256$i = $$155$i;
          }
         } else {
          $$2$i = $$1$i77;$$256$i = $$155$i;
         }
         $151 = ($144|0)==(0);
         L115: do {
          if ($151) {
           $$4$i = $$2$i;$$453$i = 0;$$458$i = $$256$i;
          } else {
           $$idx$val$i79 = HEAP32[$141>>2]|0;
           $152 = $$idx$val$i79 & 15;
           $153 = ($152|0)==(12);
           if ($153) {
            $154 = (_GetElementCount($141)|0);
            $155 = ($154|0)==(-1);
            if ($155) {
             $156 = ($$2$i|0)==(0);
             if ($156) {
              _Error(29028,$vararg_buffer8);
             }
             _SetElementCount($141,0);
             $$352$i = 1;
            } else {
             $$352$i = 0;
            }
           } else {
            $$352$i = 0;
           }
           $157 = HEAP8[$142>>0]|0;
           $158 = ($157<<24>>24)==(0);
           do {
            if ($158) {
             $159 = ($144|0)<(0);
             if (!($159)) {
              (_AnonName($142,29018)|0);
              break;
             }
             $160 = (_IS_Get(8668)|0);
             $161 = ($160|0)>(1);
             if ($161) {
              $$idx60$val$i = HEAP32[$141>>2]|0;
              $162 = $$idx60$val$i & 112;
              $163 = ($162|0)==(64);
              if ($163) {
               $164 = (_GetSymEntry($141)|0);
               $165 = ((($164)) + 36|0);
               $166 = ((($164)) + 40|0);
               $167 = HEAP32[$166>>2]|0;
               $168 = HEAP32[$165>>2]|0;
               $169 = ($168|0)==(0|0);
               do {
                if (!($169)) {
                 $170 = ((($168)) + 4|0);
                 $$01920$i$i80 = HEAP32[$170>>2]|0;
                 $171 = ($$01920$i$i80|0)==(0|0);
                 if ($171) {
                  break;
                 } else {
                  $$01921$i$i82 = $$01920$i$i80;
                 }
                 while(1) {
                  $174 = ((($$01921$i$i82)) + 48|0);
                  $175 = ((($$01921$i$i82)) + 24|0);
                  $176 = HEAP32[$175>>2]|0;
                  $177 = ((($$01921$i$i82)) + 36|0);
                  $178 = HEAP32[$177>>2]|0;
                  $179 = (($178) + ($$2$i))|0;
                  (_AddLocalSym($174,$176,16387,$179)|0);
                  $180 = ((($$01921$i$i82)) + 28|0);
                  $181 = HEAP32[$180>>2]|0;
                  $182 = ($181|0)==(0|0);
                  if (!($182)) {
                   label = 102;
                   break L104;
                  }
                  $172 = ((($$01921$i$i82)) + 8|0);
                  $$019$i$i81 = HEAP32[$172>>2]|0;
                  $173 = ($$019$i$i81|0)==(0|0);
                  if ($173) {
                   break;
                  } else {
                   $$01921$i$i82 = $$019$i$i81;
                  }
                 }
                }
               } while(0);
               $185 = (($167) + ($$2$i))|0;
               $$4$i = $185;$$453$i = $$352$i;$$458$i = $$256$i;
               break L115;
              }
             }
             _Warning(28939,$vararg_buffer10);
             $$4$i = $$2$i;$$453$i = $$352$i;$$458$i = $$256$i;
             break L115;
            } else {
             $186 = ($144|0)>(0);
             if (!($186)) {
              (_AddLocalSym($142,$141,16387,$$2$i)|0);
              $196 = ($$352$i|0)==(0);
              if (!($196)) {
               $$4$i = $$2$i;$$453$i = 1;$$458$i = $$256$i;
               break L115;
              }
              $197 = (_CheckedSizeOf($141)|0);
              $198 = (($197) + ($$2$i))|0;
              $$4$i = $198;$$453$i = 0;$$458$i = $$256$i;
              break L115;
             }
            }
           } while(0);
           $187 = $$256$i >>> 3;
           $188 = (($$2$i) + ($187))|0;
           $189 = $$256$i & 7;
           (_AddBitField($142,$188,$189,$144)|0);
           $190 = (($$256$i) + ($144))|0;
           $191 = ($190|0)<(17);
           if (!($191)) {
            label = 108;
            break L104;
           }
           $194 = ($190|0)==(16);
           $195 = (($$2$i) + 2)|0;
           $$$i = $194 ? 0 : $190;
           $$$2$i = $194 ? $195 : $$2$i;
           $$4$i = $$$2$i;$$453$i = $$352$i;$$458$i = $$$i;
          }
         } while(0);
         $199 = HEAP32[11156]|0;
         $200 = ($199|0)==(52);
         if (!($200)) {
          break;
         }
         _NextToken();
         $$1$i77 = $$4$i;$$150$i = $$453$i;$$155$i = $$458$i;
        }
        (_ConsumeSemi()|0);
        $201 = HEAP32[11156]|0;
        $202 = ($201|0)==(55);
        if ($202) {
         $$048$i$lcssa = $$4$i;$$054$i$lcssa = $$458$i;
         break L102;
        } else {
         $$048$i101 = $$4$i;$$049$i100 = $$453$i;$$054$i99 = $$458$i;
        }
       }
       if ((label|0) == 102) {
        $183 = HEAP32[3332]|0;
        $184 = HEAP32[3331]|0;
        FUNCTION_TABLE_viiii[$183 & 1]($184,28922,27771,594);
        // unreachable;
       }
       else if ((label|0) == 108) {
        $192 = HEAP32[3332]|0;
        $193 = HEAP32[3331]|0;
        FUNCTION_TABLE_viiii[$192 & 1]($193,29079,27771,838);
        // unreachable;
       }
      }
     } while(0);
     $203 = ($$054$i$lcssa|0)>(0);
     $204 = (($$054$i$lcssa) + 7)|0;
     $205 = $204 >>> 3;
     $206 = $203 ? $205 : 0;
     $$$048$i = (($206) + ($$048$i$lcssa))|0;
     _NextToken();
     $207 = (_GetSymTab()|0);
     _LeaveStructLevel();
     $208 = (_AddStructSym($6,16385,$$$048$i,$207)|0);
     $$0$i = $208;
    } else {
     $130 = (_FindTagSym($6)|0);
     $131 = ($130|0)==(0|0);
     if ($131) {
      $132 = (_AddStructSym($6,16385,0,0)|0);
      $$0$i = $132;
      break;
     }
     $133 = ((($130)) + 20|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & 16399;
     $136 = ($135|0)==(16385);
     if ($136) {
      $$0$i = $130;
     } else {
      HEAP32[$vararg_buffer3>>2] = $6;
      _Error(28884,$vararg_buffer3);
      $$0$i = $130;
     }
    }
   } while(0);
   $209 = ((($0)) + 4|0);
   HEAP32[$209>>2] = 74;
   _SetSymEntry($209,$$0$i);
   $210 = ((($0)) + 12|0);
   HEAP32[$210>>2] = 0;
   break;
  }
  case 13:  {
   _NextToken();
   $211 = HEAP32[11156]|0;
   switch ($211|0) {
   case 46:  {
    break;
   }
   case 40:  {
    $212 = (_FindTagSym((44644))|0);
    $213 = ($212|0)==(0|0);
    if (!($213)) {
     $214 = (_SymIsLocal($212)|0);
     $215 = ($214|0)==(0);
     if (!($215)) {
      $216 = ((($212)) + 20|0);
      $217 = HEAP32[$216>>2]|0;
      $218 = $217 & 48;
      $219 = ($218|0)==(0);
      if ($219) {
       $220 = ((($212)) + 48|0);
       HEAP32[$vararg_buffer12>>2] = $220;
       _Error(28884,$vararg_buffer12);
      }
     }
    }
    _NextToken();
    break;
   }
   default: {
    _Error(37770,$vararg_buffer15);
   }
   }
   $221 = HEAP32[$7>>2]|0;
   $222 = $221 | 4;
   HEAP32[$7>>2] = $222;
   $223 = HEAP32[11156]|0;
   $224 = ($223|0)==(46);
   if ($224) {
    _NextToken();
    $225 = ((($3)) + 16|0);
    $$0$ph$i = 0;
    L169: while(1) {
     L171: while(1) {
      $226 = HEAP32[11156]|0;
      switch ($226|0) {
      case 55:  {
       break L169;
       break;
      }
      case 40:  {
       break L171;
       break;
      }
      default: {
      }
      }
      _Error(37770,$vararg_buffer17);
     }
     (_strcpy($5,(44644))|0);
     _NextToken();
     $227 = HEAP32[11156]|0;
     $228 = ($227|0)==(70);
     if ($228) {
      _NextToken();
      _ConstAbsIntExpr(3,$3);
      $229 = HEAP32[$225>>2]|0;
      $$1$i = $229;
     } else {
      $$1$i = $$0$ph$i;
     }
     (_AddConstSym($5,10940,48,$$1$i)|0);
     $230 = HEAP32[11156]|0;
     $231 = ($230|0)==(52);
     if (!($231)) {
      break;
     }
     $232 = (($$1$i) + 1)|0;
     _NextToken();
     $$0$ph$i = $232;
    }
    (_ConsumeRCurly()|0);
   }
   $233 = ((($0)) + 4|0);
   HEAP32[$233>>2] = 275;
   $234 = ((($0)) + 12|0);
   HEAP32[$234>>2] = 0;
   break;
  }
  case 40:  {
   $235 = (_FindSym((44644))|0);
   $236 = ($235|0)==(0|0);
   if ($236) {
    label = 138;
   } else {
    $$idx = ((($235)) + 20|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $237 = $$idx$val & 16389;
    $238 = ($237|0)==(16389);
    if ($238) {
     _NextToken();
     $239 = ((($0)) + 4|0);
     $240 = ((($235)) + 24|0);
     $241 = HEAP32[$240>>2]|0;
     (_TypeCopy($239,$241)|0);
    } else {
     label = 138;
    }
   }
   break;
  }
  default: {
   label = 138;
  }
  }
 } while(0);
 do {
  if ((label|0) == 138) {
   $242 = ($1|0)<(0);
   if ($242) {
    _Error(29105,$vararg_buffer19);
    $243 = ((($0)) + 4|0);
    HEAP32[$243>>2] = 275;
    $244 = ((($0)) + 12|0);
    HEAP32[$244>>2] = 0;
    break;
   } else {
    $245 = HEAP32[$7>>2]|0;
    $246 = $245 | 2;
    HEAP32[$7>>2] = $246;
    $247 = ((($0)) + 4|0);
    HEAP32[$247>>2] = $1;
    $248 = ((($0)) + 12|0);
    HEAP32[$248>>2] = 0;
    break;
   }
  }
 } while(0);
 $249 = (_OptionalQualifiers(6144)|0);
 $250 = $11 | $249;
 $251 = ((($0)) + 4|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = $250 | $252;
 HEAP32[$251>>2] = $253;
 STACKTOP = sp;return;
}
function _ParseDecl($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$idx$val$i = 0, $$04857$i = 0, $$1$idx$val$i = 0, $$149$i = 0, $$2$i = 0, $$idx$val = 0, $$idx2$i = 0, $$idx2$val$i = 0, $$idx45$val = 0, $$idx46$val = 0, $$idx47$val = 0, $$idx48$val = 0, $$idx49$val$pre = 0, $$idx53$pre$phi$iZZ2D = 0, $$idx53$val$i = 0, $$idx54$val$i = 0, $$pr$i = 0, $$pre$i = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $phitmp = 0, $phitmp53 = 0;
 var $storemerge$i = 0, $trunc = 0, $trunc$clear = 0, $trunc51 = 0, $trunc51$clear = 0, $trunc54 = 0, $trunc54$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 244|0);
 HEAP8[$3>>0] = 0;
 $4 = ((($1)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 316|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($1)) + 312|0);
 HEAP32[$6>>2] = 0;
 _Declarator($1,$2);
 $7 = ((($0)) + 4|0);
 $8 = (_TypeLen($7)|0);
 $9 = (($8) + 1)|0;
 $$idx$val = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$idx$val))|0;
 $11 = ($10>>>0)>(29);
 if ($11) {
  _Fatal(27729,$vararg_buffer);
  // unreachable;
 }
 $12 = ((($1)) + 4|0);
 $13 = (((($1)) + 4|0) + ($$idx$val<<3)|0);
 (_TypeCopy($13,$7)|0);
 $14 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $14;
 $15 = HEAP32[$12>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0$idx$val$i = $15;$$04857$i = 0;$23 = $12;
  while(1) {
   $17 = $$0$idx$val$i & 15;
   $18 = ($17|0)==(12);
   if ($18) {
    $19 = $$0$idx$val$i & 260096;
    $20 = $19 | $$04857$i;
    $21 = $$0$idx$val$i & -260097;
    $$149$i = $20;$storemerge$i = $21;
   } else {
    $22 = $$04857$i | $$0$idx$val$i;
    $$149$i = 0;$storemerge$i = $22;
   }
   HEAP32[$23>>2] = $storemerge$i;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    break;
   } else {
    $$0$idx$val$i = $25;$$04857$i = $$149$i;$23 = $24;
   }
  }
  $27 = ($$149$i|0)==(0);
  if (!($27)) {
   $29 = HEAP32[3332]|0;
   $30 = HEAP32[3331]|0;
   FUNCTION_TABLE_viiii[$29 & 1]($30,27754,27771,332);
   // unreachable;
  }
  $$pr$i = HEAP32[$12>>2]|0;
  $28 = ($$pr$i|0)==(0);
  if (!($28)) {
   $$1$idx$val$i = $$pr$i;$35 = $12;
   while(1) {
    $31 = $$1$idx$val$i & 15;
    $32 = ($31|0)==(13);
    do {
     if ($32) {
      $33 = $$1$idx$val$i & 196608;
      $34 = ($33|0)==(0);
      do {
       if ($34) {
        $$pre$i = ((($35)) + 8|0);
        $$idx53$pre$phi$iZZ2D = $$pre$i;
       } else {
        $36 = $$1$idx$val$i & -196609;
        HEAP32[$35>>2] = $36;
        $37 = ((($35)) + 8|0);
        $$idx54$val$i = HEAP32[$37>>2]|0;
        $38 = $$idx54$val$i & 15;
        $39 = ($38|0)==(14);
        if (!($39)) {
         _Error(27944,$vararg_buffer7);
         $$idx53$pre$phi$iZZ2D = $37;
         break;
        }
        $40 = $$idx54$val$i & 196608;
        $41 = ($40|0)==(0);
        if (!($41)) {
         $42 = ($40|0)==($33|0);
         if ($42) {
          _Warning(27786,$vararg_buffer1);
          $$idx53$pre$phi$iZZ2D = $37;
          break;
         } else {
          _Error(27835,$vararg_buffer3);
          $$idx53$pre$phi$iZZ2D = $37;
          break;
         }
        }
        $43 = ($33|0)==(65536);
        if ($43) {
         $44 = (_IsVariadicFunc($37)|0);
         $45 = ($44|0)==(0);
         if (!($45)) {
          _Error(27894,$vararg_buffer5);
          $$idx53$pre$phi$iZZ2D = $37;
          break;
         }
        }
        $46 = $$idx54$val$i | $33;
        HEAP32[$37>>2] = $46;
        $$idx53$pre$phi$iZZ2D = $37;
       }
      } while(0);
      $47 = HEAP32[$35>>2]|0;
      $48 = $47 & 49152;
      $49 = ($48|0)==(0);
      $$idx53$val$i = HEAP32[$$idx53$pre$phi$iZZ2D>>2]|0;
      $50 = $$idx53$val$i & 15;
      $51 = ($50|0)==(14);
      if ($49) {
       if ($51) {
        $52 = $$idx53$val$i & 49152;
        $53 = ($52|0)==(0);
        if ($53) {
         $54 = HEAP8[41046]|0;
         $55 = $54&255;
         $56 = (_AddrSizeQualifier($55)|0);
         $$2$i = $56;
        } else {
         $$2$i = $52;
        }
       } else {
        $57 = HEAP8[41047]|0;
        $58 = $57&255;
        $59 = (_AddrSizeQualifier($58)|0);
        $$2$i = $59;
       }
       $60 = HEAP32[$35>>2]|0;
       $61 = $60 | $$2$i;
       HEAP32[$35>>2] = $61;
       break;
      } else {
       if (!($51)) {
        break;
       }
       $62 = $$idx53$val$i & 49152;
       $63 = ($62|0)==(0);
       if ($63) {
        $64 = $$idx53$val$i | $48;
        HEAP32[$$idx53$pre$phi$iZZ2D>>2] = $64;
        break;
       }
       $65 = ($62|0)==($48|0);
       if ($65) {
        break;
       }
       _Error(28002,$vararg_buffer9);
       $66 = HEAP32[$$idx53$pre$phi$iZZ2D>>2]|0;
       $67 = $66 & -49153;
       $68 = $67 | $48;
       HEAP32[$$idx53$pre$phi$iZZ2D>>2] = $68;
       break;
      }
     } else {
      $69 = $$1$idx$val$i & 49167;
      $70 = ($69|0)==(14);
      if ($70) {
       $71 = HEAP8[41046]|0;
       $72 = $71&255;
       $73 = (_AddrSizeQualifier($72)|0);
       $74 = HEAP32[$35>>2]|0;
       $75 = $74 | $73;
       HEAP32[$35>>2] = $75;
      }
     }
    } while(0);
    $76 = ((($35)) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(0);
    if ($78) {
     break;
    } else {
     $$1$idx$val$i = $77;$35 = $76;
    }
   }
   $$idx49$val$pre = HEAP32[$12>>2]|0;
   $phitmp = $$idx49$val$pre & 15;
   $phitmp53 = ($phitmp|0)==(14);
   if ($phitmp53) {
    $79 = HEAP32[$1>>2]|0;
    $80 = $79 | 256;
    HEAP32[$1>>2] = $80;
   }
  }
 }
 _ParseAttribute($1);
 $$idx48$val = HEAP32[$12>>2]|0;
 $trunc54 = $$idx48$val&255;
 $trunc54$clear = $trunc54 & 15;
 switch ($trunc54$clear<<24>>24) {
 case 14:  {
  label = 42;
  break;
 }
 case 13:  {
  $$idx2$i = ((($1)) + 12|0);
  $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
  $81 = $$idx2$val$i & 15;
  $82 = ($81|0)==(14);
  if ($82) {
   label = 42;
  }
  break;
 }
 default: {
 }
 }
 if ((label|0) == 42) {
  $83 = (_GetFuncReturn($12)|0);
  $$idx47$val = HEAP32[$83>>2]|0;
  $trunc51 = $$idx47$val&255;
  $trunc51$clear = $trunc51 & 15;
  switch ($trunc51$clear<<24>>24) {
  case 14:  {
   _Error(28034,$vararg_buffer11);
   break;
  }
  case 12:  {
   _Error(28080,$vararg_buffer13);
   break;
  }
  default: {
  }
  }
  $$idx45$val = HEAP32[$83>>2]|0;
  $84 = $$idx45$val & 260096;
  $85 = ($84|0)==(0);
  do {
   if (!($85)) {
    $86 = ((($83)) + 8|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0);
    if ($88) {
     $89 = $$idx45$val & 15;
     $90 = ($89|0)==(9);
     if ($90) {
      _Error(28123,$vararg_buffer15);
      break;
     } else {
      _Warning(28174,$vararg_buffer17);
      $91 = HEAP32[$83>>2]|0;
      $92 = $91 & -260097;
      HEAP32[$83>>2] = $92;
      break;
     }
    }
   }
  } while(0);
  $93 = ((($0)) + 244|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $94 & 2;
  $96 = ($95|0)==(0);
  if (!($96)) {
   $97 = HEAP32[$83>>2]|0;
   $98 = ($97|0)==(275);
   if ($98) {
    $99 = ((($83)) + 8|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)==(0);
    if ($101) {
     $102 = (_IS_Get(8668)|0);
     $103 = ($102|0)>(0);
     if ($103) {
      _Warning(28222,$vararg_buffer19);
     }
     $104 = (_GetFuncDesc($12)|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $105 | 32;
     HEAP32[$104>>2] = $106;
    }
   }
  }
 }
 $107 = HEAP32[$1>>2]|0;
 $108 = $107 & 256;
 $109 = ($108|0)!=(0);
 $110 = $107 & 16399;
 $111 = ($110|0)==(16389);
 $or$cond = $109 | $111;
 if (!($or$cond)) {
  $112 = ((($0)) + 244|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 & 2;
  $115 = ($114|0)==(0);
  if (!($115)) {
   $116 = (_IS_Get(8668)|0);
   $117 = ($116|0)>(0);
   if ($117) {
    _Warning(28272,$vararg_buffer21);
   }
  }
 }
 $$idx46$val = HEAP32[$12>>2]|0;
 $trunc = $$idx46$val&255;
 $trunc$clear = $trunc & 15;
 switch ($trunc$clear<<24>>24) {
 case 9: case 14:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $118 = (_SizeOf($12)|0);
 $119 = ($118>>>0)>(65535);
 if (!($119)) {
  STACKTOP = sp;return;
 }
 $120 = HEAP8[$3>>0]|0;
 $121 = ($120<<24>>24)==(0);
 if ($121) {
  HEAP32[$vararg_buffer26>>2] = $118;
  _Error(28343,$vararg_buffer26);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer23>>2] = $3;
  $vararg_ptr25 = ((($vararg_buffer23)) + 4|0);
  HEAP32[$vararg_ptr25>>2] = $118;
  _Error(28310,$vararg_buffer23);
  STACKTOP = sp;return;
 }
}
function _Declarator($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i9 = 0, $$031$i8 = 0, $$031$idx$i = 0, $$031$idx$val$i = 0, $$04310 = 0, $$1 = 0, $$idx$i = 0, $$idx$i4 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i5 = 0, $$idx2 = 0, $$idx2$val = 0, $$lobit$i = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0, $storemerge = 0, $storemerge$in = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer21 = sp + 152|0;
 $vararg_buffer19 = sp + 144|0;
 $vararg_buffer17 = sp + 136|0;
 $vararg_buffer15 = sp + 128|0;
 $vararg_buffer13 = sp + 120|0;
 $vararg_buffer11 = sp + 112|0;
 $vararg_buffer9 = sp + 104|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $2 = sp;
 $3 = (_OptionalQualifiers(245760)|0);
 $4 = HEAP32[11156]|0;
 L1: do {
  switch ($4|0) {
  case 58:  {
   _NextToken();
   $5 = (_OptionalQualifiers(14336)|0);
   _Declarator($0,$1);
   $$idx$i = ((($0)) + 316|0);
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $6 = (($$idx$val$i) + 1)|0;
   $7 = ($6>>>0)>(29);
   if ($7) {
    _Fatal(27729,$vararg_buffer);
    // unreachable;
   }
   $8 = $3 | $5;
   $9 = $8 | 61;
   HEAP32[$$idx$i>>2] = $6;
   $10 = (((($0)) + 4|0) + ($$idx$val$i<<3)|0);
   HEAP32[$10>>2] = $9;
   STACKTOP = sp;return;
   break;
  }
  case 43:  {
   _NextToken();
   _Declarator($0,$1);
   (_ConsumeRParen()|0);
   break;
  }
  default: {
   $11 = ($1|0)==(1);
   if ($11) {
    $12 = ((($0)) + 244|0);
    HEAP8[$12>>0] = 0;
    break L1;
   }
   $13 = ($4|0)==(40);
   if ($13) {
    $14 = ((($0)) + 244|0);
    (_strcpy($14,(44644))|0);
    _NextToken();
    break L1;
   }
   $15 = ($1|0)==(0);
   if ($15) {
    _Error(37770,$vararg_buffer1);
   }
   $16 = ((($0)) + 244|0);
   HEAP8[$16>>0] = 0;
  }
  }
 } while(0);
 $17 = HEAP32[11156]|0;
 $18 = $17 | 1;
 $19 = ($18|0)==(43);
 if (!($19)) {
  $92 = $3 & 16384;
  $93 = ($92|0)==(0);
  if (!($93)) {
   _Error(28506,$vararg_buffer15);
  }
  $94 = $3 & 32768;
  $95 = ($94|0)==(0);
  if (!($95)) {
   _Error(28535,$vararg_buffer17);
  }
  $96 = $3 & 65536;
  $97 = ($96|0)==(0);
  if (!($97)) {
   _Error(28563,$vararg_buffer19);
  }
  $98 = $3 & 131072;
  $99 = ($98|0)==(0);
  if ($99) {
   STACKTOP = sp;return;
  }
  _Error(28596,$vararg_buffer21);
  STACKTOP = sp;return;
 }
 $$idx2 = ((($0)) + 316|0);
 $20 = ((($2)) + 16|0);
 $21 = ((($0)) + 244|0);
 $$04310 = $3;$22 = $17;
 while(1) {
  $23 = ($22|0)==(43);
  if ($23) {
   _NextToken();
   $24 = (_NewFuncDesc()|0);
   _EnterFunctionLevel();
   $25 = HEAP32[11156]|0;
   $26 = ($25|0)==(85);
   L39: do {
    if ($26) {
     $27 = HEAP32[$24>>2]|0;
     $28 = $27 | 5;
     HEAP32[$24>>2] = $28;
    } else {
     $29 = ($25|0)==(24);
     $30 = HEAP32[11180]|0;
     $31 = ($30|0)==(85);
     $or$cond$i = $29 & $31;
     if ($or$cond$i) {
      _NextToken();
      $32 = HEAP32[$24>>2]|0;
      $33 = $32 | 2;
      HEAP32[$24>>2] = $33;
      break;
     }
     $34 = ($25|0)==(40);
     if ($34) {
      switch ($30|0) {
      case 52: case 85:  {
       break;
      }
      default: {
       break L39;
      }
      }
      $35 = (_FindSym((44644))|0);
      $36 = ($35|0)==(0|0);
      if (!($36)) {
       $$idx$i4 = ((($35)) + 20|0);
       $$idx$val$i5 = HEAP32[$$idx$i4>>2]|0;
       $37 = $$idx$val$i5 & 16389;
       $38 = ($37|0)==(16389);
       if ($38) {
        break;
       }
      }
      $39 = HEAP32[$24>>2]|0;
      $40 = $39 | 16;
      HEAP32[$24>>2] = $40;
     }
    }
   } while(0);
   $41 = HEAP32[$24>>2]|0;
   $42 = $41 & 16;
   $43 = ($42|0)==(0);
   if ($43) {
    _ParseAnsiParamList($24);
   } else {
    _ParseOldStyleParamList($24);
   }
   $44 = (_GetSymTab()|0);
   $45 = ((($44)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($24)) + 20|0);
   HEAP32[$47>>2] = $46;
   $48 = ($46|0)==(0|0);
   if (!($48)) {
    $49 = HEAP32[$24>>2]|0;
    $50 = $49 >>> 2;
    $$lobit$i = $50 & 1;
    $51 = ((($24)) + 16|0);
    $$0$i9 = $$lobit$i;$$031$i8 = $46;
    while(1) {
     $52 = ((($$031$i8)) + 24|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (_CheckedSizeOf($53)|0);
     $$031$idx$i = ((($$031$i8)) + 20|0);
     $$031$idx$val$i = HEAP32[$$031$idx$i>>2]|0;
     $55 = $$031$idx$val$i & 16386;
     $56 = ($55|0)==(2);
     if ($56) {
      $57 = ((($$031$i8)) + 40|0);
      HEAP32[$57>>2] = $$0$i9;
     } else {
      $58 = ((($$031$i8)) + 36|0);
      HEAP32[$58>>2] = $$0$i9;
     }
     $59 = (($54) + ($$0$i9))|0;
     $60 = HEAP32[$51>>2]|0;
     $61 = (($60) + ($54))|0;
     HEAP32[$51>>2] = $61;
     $62 = ((($$031$i8)) + 4|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)==(0|0);
     if ($64) {
      break;
     } else {
      $$0$i9 = $59;$$031$i8 = $63;
     }
    }
   }
   _RememberFunctionLevel($24);
   $65 = HEAP32[$24>>2]|0;
   $66 = $65 & 4;
   $67 = ($66|0)==(0);
   $68 = $$04310 & 65536;
   $69 = ($68|0)==(0);
   $or$cond = $69 | $67;
   if ($or$cond) {
    $$1 = $$04310;
   } else {
    $70 = $$04310 & -65537;
    _Error(28380,$vararg_buffer3);
    $$1 = $70;
   }
   $$idx2$val = HEAP32[$$idx2>>2]|0;
   $71 = (($$idx2$val) + 1)|0;
   $72 = ($71>>>0)>(29);
   if ($72) {
    label = 37;
    break;
   }
   $73 = $$1 | 94;
   $74 = (((($0)) + 4|0) + ($$idx2$val<<3)|0);
   HEAP32[$74>>2] = $73;
   $75 = HEAP32[$$idx2>>2]|0;
   $76 = (((((($0)) + 4|0) + ($75<<3)|0)) + 4|0);
   HEAP32[$76>>2] = $24;
   $storemerge$in = $75;
  } else {
   $77 = ($$04310|0)==(0);
   if (!($77)) {
    _Error(28422,$vararg_buffer7);
   }
   _NextToken();
   $78 = HEAP32[11156]|0;
   $79 = ($78|0)==(47);
   if ($79) {
    $$0 = -1;
   } else {
    _ConstAbsIntExpr(3,$2);
    $80 = HEAP32[$20>>2]|0;
    $81 = ($80|0)<(1);
    if ($81) {
     $82 = HEAP8[$21>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if ($83) {
      _Error(28481,$vararg_buffer11);
     } else {
      HEAP32[$vararg_buffer9>>2] = $21;
      _Error(28451,$vararg_buffer9);
     }
     HEAP32[$20>>2] = 1;
     $100 = 1;
    } else {
     $100 = $80;
    }
    $$0 = $100;
   }
   (_ConsumeRBrack()|0);
   $$idx$val = HEAP32[$$idx2>>2]|0;
   $84 = (($$idx$val) + 1)|0;
   $85 = ($84>>>0)>(29);
   if ($85) {
    label = 49;
    break;
   }
   $86 = (((($0)) + 4|0) + ($$idx$val<<3)|0);
   HEAP32[$86>>2] = 60;
   $87 = HEAP32[$$idx2>>2]|0;
   $88 = (((((($0)) + 4|0) + ($87<<3)|0)) + 4|0);
   HEAP32[$88>>2] = $$0;
   $storemerge$in = $87;
  }
  $storemerge = (($storemerge$in) + 1)|0;
  HEAP32[$$idx2>>2] = $storemerge;
  $89 = HEAP32[11156]|0;
  $90 = $89 | 1;
  $91 = ($90|0)==(43);
  if ($91) {
   $$04310 = 0;$22 = $89;
  } else {
   label = 60;
   break;
  }
 }
 if ((label|0) == 37) {
  _Fatal(27729,$vararg_buffer5);
  // unreachable;
 }
 else if ((label|0) == 49) {
  _Fatal(27729,$vararg_buffer13);
  // unreachable;
 }
 else if ((label|0) == 60) {
  STACKTOP = sp;return;
 }
}
function _OptionalQualifiers($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$lcssa = 0, $$0$us = 0, $$1 = 0, $$1$us = 0, $$2 = 0, $$3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split2D = 0, $switch$split412D = 0, $switch$split442D = 0, $switch$split472D = 0, $trunc = 0, $trunc27 = 0, $trunc27$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0;
 var $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer39 = sp + 112|0;
 $vararg_buffer37 = sp + 104|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0 & 131072;
 $2 = $0 & 65536;
 $3 = $0 & 32768;
 $4 = $0 & 16384;
 $5 = $0 & 8192;
 $6 = $0 & 4096;
 $7 = $0 & 2048;
 $8 = ($7|0)==(0);
 $9 = ($6|0)==(0);
 $10 = ($5|0)==(0);
 $11 = ($4|0)==(0);
 $12 = ($3|0)==(0);
 $13 = ($2|0)==(0);
 $14 = ($1|0)==(0);
 L1: do {
  if ($14) {
   $$0$us = 0;
   while(1) {
    $15 = HEAP32[11156]|0;
    switch ($15|0) {
    case 7:  {
     if ($8) {
      $$0$lcssa = $$0$us;
      break L1;
     }
     $31 = $$0$us & 2048;
     $32 = ($31|0)==(0);
     if (!($32)) {
      HEAP32[$vararg_buffer13>>2] = 36444;
      _Warning(28748,$vararg_buffer13);
     }
     $33 = $$0$us | 2048;
     $$1$us = $33;
     break;
    }
    case 8:  {
     if ($9) {
      $$0$lcssa = $$0$us;
      break L1;
     }
     $28 = $$0$us & 4096;
     $29 = ($28|0)==(0);
     if (!($29)) {
      HEAP32[$vararg_buffer10>>2] = 36450;
      _Warning(28748,$vararg_buffer10);
     }
     $30 = $$0$us | 4096;
     $$1$us = $30;
     break;
    }
    case 9:  {
     if ($10) {
      $$0$lcssa = $$0$us;
      break L1;
     }
     $25 = $$0$us & 8192;
     $26 = ($25|0)==(0);
     if (!($26)) {
      HEAP32[$vararg_buffer7>>2] = 36459;
      _Warning(28748,$vararg_buffer7);
     }
     $27 = $$0$us | 8192;
     $$1$us = $27;
     break;
    }
    case 93:  {
     if ($11) {
      $$0$lcssa = $$0$us;
      break L1;
     }
     $22 = $$0$us & 16384;
     $23 = ($22|0)==(0);
     if (!($23)) {
      HEAP32[$vararg_buffer4>>2] = 41049;
      _Warning(28748,$vararg_buffer4);
     }
     $24 = $$0$us | 16384;
     $$1$us = $24;
     break;
    }
    case 92:  {
     if ($12) {
      $$0$lcssa = $$0$us;
      break L1;
     }
     $19 = $$0$us & 32768;
     $20 = ($19|0)==(0);
     if (!($20)) {
      HEAP32[$vararg_buffer1>>2] = 41054;
      _Warning(28748,$vararg_buffer1);
     }
     $21 = $$0$us | 32768;
     $$1$us = $21;
     break;
    }
    case 11:  {
     if ($13) {
      $$0$lcssa = $$0$us;
      break L1;
     }
     $16 = $$0$us & 65536;
     $17 = ($16|0)==(0);
     if (!($17)) {
      HEAP32[$vararg_buffer>>2] = 30627;
      _Warning(28748,$vararg_buffer);
     }
     $18 = $$0$us | 65536;
     $$1$us = $18;
     break;
    }
    default: {
     $$0$lcssa = $$0$us;
     break L1;
    }
    }
    _NextToken();
    $$0$us = $$1$us;
   }
  } else {
   $$0 = 0;
   while(1) {
    $34 = HEAP32[11156]|0;
    switch ($34|0) {
    case 7:  {
     if ($8) {
      $$0$lcssa = $$0;
      break L1;
     }
     $35 = $$0 & 2048;
     $36 = ($35|0)==(0);
     if (!($36)) {
      HEAP32[$vararg_buffer16>>2] = 36444;
      _Warning(28748,$vararg_buffer16);
     }
     $37 = $$0 | 2048;
     $$1 = $37;
     break;
    }
    case 8:  {
     if ($9) {
      $$0$lcssa = $$0;
      break L1;
     }
     $38 = $$0 & 4096;
     $39 = ($38|0)==(0);
     if (!($39)) {
      HEAP32[$vararg_buffer19>>2] = 36450;
      _Warning(28748,$vararg_buffer19);
     }
     $40 = $$0 | 4096;
     $$1 = $40;
     break;
    }
    case 9:  {
     if ($10) {
      $$0$lcssa = $$0;
      break L1;
     }
     $41 = $$0 & 8192;
     $42 = ($41|0)==(0);
     if (!($42)) {
      HEAP32[$vararg_buffer22>>2] = 36459;
      _Warning(28748,$vararg_buffer22);
     }
     $43 = $$0 | 8192;
     $$1 = $43;
     break;
    }
    case 93:  {
     if ($11) {
      $$0$lcssa = $$0;
      break L1;
     }
     $44 = $$0 & 16384;
     $45 = ($44|0)==(0);
     if (!($45)) {
      HEAP32[$vararg_buffer25>>2] = 41049;
      _Warning(28748,$vararg_buffer25);
     }
     $46 = $$0 | 16384;
     $$1 = $46;
     break;
    }
    case 92:  {
     if ($12) {
      $$0$lcssa = $$0;
      break L1;
     }
     $47 = $$0 & 32768;
     $48 = ($47|0)==(0);
     if (!($48)) {
      HEAP32[$vararg_buffer28>>2] = 41054;
      _Warning(28748,$vararg_buffer28);
     }
     $49 = $$0 | 32768;
     $$1 = $49;
     break;
    }
    case 11:  {
     if ($13) {
      $$0$lcssa = $$0;
      break L1;
     }
     $50 = $$0 & 65536;
     $51 = ($50|0)==(0);
     if (!($51)) {
      HEAP32[$vararg_buffer31>>2] = 30627;
      _Warning(28748,$vararg_buffer31);
     }
     $52 = $$0 | 65536;
     $$1 = $52;
     break;
    }
    case 12:  {
     $53 = $$0 & 131072;
     $54 = ($53|0)==(0);
     if (!($54)) {
      HEAP32[$vararg_buffer34>>2] = 30596;
      _Warning(28748,$vararg_buffer34);
     }
     $55 = $$0 | 131072;
     $$1 = $55;
     break;
    }
    default: {
     $$0$lcssa = $$0;
     break L1;
    }
    }
    _NextToken();
    $$0 = $$1;
   }
  }
 } while(0);
 $56 = $$0$lcssa & 49152;
 $trunc = $56&65535;
 $switch$split2D = ($trunc<<16>>16)<(0);
 L75: do {
  if ($switch$split2D) {
   switch ($trunc<<16>>16) {
   case -32768:  {
    $$2 = $$0$lcssa;
    break;
   }
   default: {
    label = 58;
   }
   }
  } else {
   $switch$split442D = ($trunc<<16>>16)<(16384);
   if ($switch$split442D) {
    switch ($trunc<<16>>16) {
    case 0:  {
     $$2 = $$0$lcssa;
     break L75;
     break;
    }
    default: {
     label = 58;
     break L75;
    }
    }
   } else {
    switch ($trunc<<16>>16) {
    case 16384:  {
     $$2 = $$0$lcssa;
     break L75;
     break;
    }
    default: {
     label = 58;
     break L75;
    }
    }
   }
  }
 } while(0);
 if ((label|0) == 58) {
  _Error(28774,$vararg_buffer37);
  $57 = $$0$lcssa & -49153;
  $$2 = $57;
 }
 $trunc27 = $$2 & 196608;
 $trunc27$clear = $trunc27 & 262143;
 $switch$split412D = ($trunc27$clear|0)<(65536);
 L84: do {
  if ($switch$split412D) {
   switch ($trunc27$clear|0) {
   case 0:  {
    $$3 = $$2;
    break;
   }
   default: {
    break L84;
   }
   }
   STACKTOP = sp;return ($$3|0);
  } else {
   $switch$split472D = ($trunc27$clear|0)<(131072);
   if ($switch$split472D) {
    switch ($trunc27$clear|0) {
    case 65536:  {
     $$3 = $$2;
     break;
    }
    default: {
     break L84;
    }
    }
    STACKTOP = sp;return ($$3|0);
   } else {
    switch ($trunc27$clear|0) {
    case 131072:  {
     $$3 = $$2;
     break;
    }
    default: {
     break L84;
    }
    }
    STACKTOP = sp;return ($$3|0);
   }
  }
 } while(0);
 _Error(28826,$vararg_buffer39);
 $58 = $$2 & -196609;
 $$3 = $58;
 STACKTOP = sp;return ($$3|0);
}
function _ParseAnsiParamList($0) {
 $0 = $0|0;
 var $$0 = 0, $$idx$val = 0, $$idx$val$i = 0, $$old = 0, $$old1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 336|0;
 $2 = sp + 16|0;
 $$old = HEAP32[11156]|0;
 $$old1 = ($$old|0)==(85);
 if ($$old1) {
  (_ConsumeRParen()|0);
  STACKTOP = sp;return;
 }
 $3 = ((($2)) + 244|0);
 $4 = ((($2)) + 4|0);
 $5 = ((($0)) + 12|0);
 $6 = $$old;
 while(1) {
  $7 = ($6|0)==(38);
  if ($7) {
   _NextToken();
   $8 = HEAP32[$0>>2]|0;
   $9 = $8 | 4;
   HEAP32[$0>>2] = $9;
   $$0 = 0;
  } else {
   _ParseDeclSpec($1,1,275);
   $10 = HEAP32[$1>>2]|0;
   $11 = $10 & 1;
   $12 = ($11|0)==(0);
   do {
    if ($12) {
     $13 = $10 & 2;
     $14 = ($13|0)==(0);
     if ($14) {
      _Error(28626,$vararg_buffer);
      HEAP32[$1>>2] = 4225;
      break;
     } else {
      HEAP32[$1>>2] = 4230;
      break;
     }
    } else {
     HEAP32[$1>>2] = 4225;
    }
   } while(0);
   _ParseDecl($1,$2,2);
   $15 = HEAP8[$3>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if ($16) {
    (_AnonName($3,31735)|0);
    $17 = HEAP32[$0>>2]|0;
    $18 = $17 | 64;
    HEAP32[$0>>2] = $18;
    $19 = HEAP32[$2>>2]|0;
    $20 = $19 & -4097;
    HEAP32[$2>>2] = $20;
   }
   _ParseAttribute($2);
   $$idx$val$i = HEAP32[$4>>2]|0;
   $21 = $$idx$val$i & 15;
   $22 = ($21|0)==(12);
   if ($22) {
    HEAP32[$4>>2] = 61;
   }
   $23 = HEAP32[$2>>2]|0;
   $24 = (_AddLocalSym($3,$4,$23,0)|0);
   _SymUseAttr($24,$2);
   $$idx$val = HEAP32[$4>>2]|0;
   $25 = $$idx$val & 112;
   $26 = ($25|0)==(64);
   if ($26) {
    $27 = (_IS_Get(13064)|0);
    $28 = ($27|0)==(0);
    if (!($28)) {
     HEAP32[$vararg_buffer1>>2] = $3;
     _Warning(28705,$vararg_buffer1);
    }
   }
   $29 = HEAP32[$5>>2]|0;
   $30 = (($29) + 1)|0;
   HEAP32[$5>>2] = $30;
   $31 = HEAP32[11156]|0;
   $32 = ($31|0)==(52);
   if ($32) {
    _NextToken();
    $$0 = 1;
   } else {
    $$0 = 0;
   }
  }
  $33 = HEAP32[11156]|0;
  $34 = ($33|0)!=(85);
  $or$cond = $$0 & $34;
  if ($or$cond) {
   $6 = $33;
  } else {
   break;
  }
 }
 (_ConsumeRParen()|0);
 STACKTOP = sp;return;
}
function _ParseOldStyleParamList($0) {
 $0 = $0|0;
 var $$idx$val$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 352|0;
 $2 = sp + 32|0;
 $3 = ((($0)) + 12|0);
 L1: while(1) {
  $4 = HEAP32[11156]|0;
  switch ($4|0) {
  case 85:  {
   break L1;
   break;
  }
  case 40:  {
   (_AddLocalSym((44644),10940,4737,0)|0);
   $5 = HEAP32[$3>>2]|0;
   $6 = (($5) + 1)|0;
   HEAP32[$3>>2] = $6;
   _NextToken();
   break;
  }
  default: {
   _Error(37770,$vararg_buffer);
   _SkipTokens(7232,3);
  }
  }
  $7 = HEAP32[11156]|0;
  $8 = ($7|0)==(52);
  if (!($8)) {
   break;
  }
  _NextToken();
 }
 (_ConsumeRParen()|0);
 $9 = HEAP32[11156]|0;
 $10 = ($9|0)==(46);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ((($2)) + 244|0);
 $12 = ((($2)) + 4|0);
 while(1) {
  _ParseDeclSpec($1,1,275);
  $13 = HEAP32[$1>>2]|0;
  $14 = $13 & 3;
  $15 = ($14|0)==(0);
  if ($15) {
   _Error(28626,$vararg_buffer1);
  }
  while(1) {
   _ParseDecl($1,$2,0);
   $16 = HEAP8[$11>>0]|0;
   $17 = ($16<<24>>24)==(0);
   do {
    if (!($17)) {
     $18 = (_FindLocalSym($11)|0);
     $19 = ($18|0)==(0|0);
     if ($19) {
      HEAP32[$vararg_buffer5>>2] = $11;
      _Error(28680,$vararg_buffer5);
      break;
     }
     $20 = ((($18)) + 20|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = $21 & 512;
     $23 = ($22|0)==(0);
     if ($23) {
      $28 = ((($18)) + 48|0);
      HEAP32[$vararg_buffer3>>2] = $28;
      _Error(28648,$vararg_buffer3);
      break;
     }
     $$idx$val$i = HEAP32[$12>>2]|0;
     $24 = $$idx$val$i & 15;
     $25 = ($24|0)==(12);
     if ($25) {
      HEAP32[$12>>2] = 61;
     }
     _ChangeSymType($18,$12);
     $26 = HEAP32[$20>>2]|0;
     $27 = $26 & -513;
     HEAP32[$20>>2] = $27;
    }
   } while(0);
   $29 = HEAP32[11156]|0;
   $30 = ($29|0)==(52);
   if (!($30)) {
    break;
   }
   _NextToken();
  }
  (_ConsumeSemi()|0);
  $31 = HEAP32[11156]|0;
  $32 = ($31|0)==(46);
  if ($32) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ParseDeclSpec($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 244|0);
 HEAP32[$4>>2] = 0;
 $5 = (_OptionalQualifiers(6144)|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = $6 & -2;
 HEAP32[$4>>2] = $7;
 $8 = HEAP32[11156]|0;
 switch ($8|0) {
 case 3:  {
  HEAP32[$0>>2] = 12;
  _NextToken();
  break;
 }
 case 5:  {
  HEAP32[$0>>2] = 4;
  _NextToken();
  break;
 }
 case 4:  {
  HEAP32[$0>>2] = 6;
  _NextToken();
  break;
 }
 case 2:  {
  HEAP32[$0>>2] = 1;
  _NextToken();
  break;
 }
 case 6:  {
  HEAP32[$0>>2] = 16389;
  _NextToken();
  break;
 }
 default: {
  $9 = $6 | 1;
  HEAP32[$4>>2] = $9;
  HEAP32[$0>>2] = $1;
 }
 }
 _ParseTypeSpec($0,$2,$5);
 return;
}
function _ParseFieldWidth($0) {
 $0 = $0|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $1 = sp;
 $2 = HEAP32[11156]|0;
 $3 = ($2|0)==(84);
 do {
  if ($3) {
   _NextToken();
   _ConstAbsIntExpr(3,$1);
   $4 = ((($1)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)<(0);
   if ($6) {
    _Error(29119,$vararg_buffer);
    $$0 = -1;
    break;
   }
   $7 = ($5|0)>(16);
   if ($7) {
    _Error(29147,$vararg_buffer1);
    $$0 = -1;
    break;
   }
   $8 = ($5|0)==(0);
   if ($8) {
    $9 = ((($0)) + 244|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if (!($11)) {
     _Error(29183,$vararg_buffer3);
     $$0 = -1;
     break;
    }
   }
   $$idx = ((($0)) + 4|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $12 = $$idx$val & 15;
   $13 = ($12|0)==(3);
   if ($13) {
    $$0 = $5;
   } else {
    _Error(29214,$vararg_buffer5);
    $$0 = -1;
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _CheckEmptyDecl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 244|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 _Warning(29241,$vararg_buffer);
 STACKTOP = sp;return;
}
function _ParseInit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_IS_Get(8668)|0);
 $2 = ($1|0)==(2);
 $3 = $2&1;
 $4 = (_ParseInitInternal($0,$3)|0);
 $5 = (_HaveGlobalCode()|0);
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return ($4|0);
 }
 _Error(29261,$vararg_buffer);
 _RemoveGlobalCode();
 STACKTOP = sp;return ($4|0);
}
function _ParseInitInternal($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$0$i10 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i5$i$i = 0, $$0$lcssa$i5$i$i15 = 0, $$01$i$i = 0, $$01$i$i$i = 0, $$01$i$i$i12 = 0, $$01$ph$i$i = 0, $$01$ph$i36$i = 0, $$03$i = 0, $$03$i$i = 0, $$03$i$i7 = 0, $$034$i$be = 0, $$034$i62 = 0, $$034$idx$i = 0, $$034$idx$val$i = 0, $$044$i = 0, $$1$i = 0;
 var $$1$i$i = 0, $$1$i1156 = 0, $$1$i40$i = 0, $$2$i = 0, $$3$i = 0, $$cmp$i = 0, $$idx$val$i = 0, $$idx$val$i18 = 0, $$off$i = 0, $$sroa$20$059 = 0, $$sroa$20$3 = 0, $$sroa$20$3$ph = 0, $$sroa$20$4 = 0, $$sroa$20$5 = 0, $$sroa$20$6 = 0, $$sroa$29$061 = 0, $$sroa$29$3 = 0, $$sroa$29$3$ph = 0, $$sroa$29$4 = 0, $$sroa$29$5 = 0;
 var $$sroa$29$6 = 0, $$sroa$5$060 = 0, $$sroa$5$3 = 0, $$sroa$5$3$ph = 0, $$sroa$5$4 = 0, $$sroa$5$5 = 0, $$sroa$5$6 = 0, $$sroa$5$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $or$cond$i$i = 0;
 var $or$cond$i$i9 = 0, $or$cond$i20 = 0, $or$cond7$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer21 = sp + 152|0;
 $vararg_buffer19 = sp + 144|0;
 $vararg_buffer17 = sp + 136|0;
 $vararg_buffer15 = sp + 128|0;
 $vararg_buffer13 = sp + 120|0;
 $vararg_buffer11 = sp + 112|0;
 $vararg_buffer9 = sp + 104|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $2 = sp;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & -260097;
 switch ($4|0) {
 case 40: case 39: case 1172: case 1300: case 147: case 275: case 658: case 786: case 145: case 273:  {
  $5 = HEAP32[11156]|0;
  $6 = ($5|0)==(46);
  if ($6) {
   $$01$i$i$i = 0;
   while(1) {
    $7 = (($$01$i$i$i) + 1)|0;
    _NextToken();
    $8 = HEAP32[11156]|0;
    $9 = ($8|0)==(46);
    if ($9) {
     $$01$i$i$i = $7;
    } else {
     break;
    }
   }
   $10 = ($7|0)==(0);
   if ($10) {
    $$0$lcssa$i5$i$i = 0;
   } else {
    _Warning(29287,$vararg_buffer);
    $$0$lcssa$i5$i$i = $7;
   }
  } else {
   $$0$lcssa$i5$i$i = 0;
  }
  _ConstExpr(3,$2);
  _TypeConversion($2,$0);
  $11 = ($$0$lcssa$i5$i$i|0)==(0);
  L9: do {
   if (!($11)) {
    $$03$i$i7 = $$0$lcssa$i5$i$i;
    while(1) {
     $12 = HEAP32[11156]|0;
     $13 = ($12|0)==(55);
     if ($13) {
      _NextToken();
     } else {
      $14 = ($12|0)==(52);
      $15 = HEAP32[11180]|0;
      $16 = ($15|0)==(55);
      $or$cond$i$i9 = $14 & $16;
      if (!($or$cond$i$i9)) {
       break;
      }
      _NextToken();
      _NextToken();
     }
     $17 = (($$03$i$i7) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      break L9;
     } else {
      $$03$i$i7 = $17;
     }
    }
    _Error(30780,$vararg_buffer1);
   }
  } while(0);
  _DefineData($2);
  $19 = (_SizeOf($0)|0);
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 61:  {
  $20 = HEAP32[11156]|0;
  $21 = ($20|0)==(46);
  if ($21) {
   $$01$i$i = 0;
   while(1) {
    $22 = (($$01$i$i) + 1)|0;
    _NextToken();
    $23 = HEAP32[11156]|0;
    $24 = ($23|0)==(46);
    if ($24) {
     $$01$i$i = $22;
    } else {
     $$0$lcssa$i$i = $22;
     break;
    }
   }
  } else {
   $$0$lcssa$i$i = 0;
  }
  _ConstExpr(3,$2);
  _TypeConversion($2,$0);
  _DefineData($2);
  $25 = ($$0$lcssa$i$i|0)==(0);
  L25: do {
   if (!($25)) {
    $$03$i$i = $$0$lcssa$i$i;
    while(1) {
     $26 = HEAP32[11156]|0;
     $27 = ($26|0)==(55);
     if ($27) {
      _NextToken();
     } else {
      $28 = ($26|0)==(52);
      $29 = HEAP32[11180]|0;
      $30 = ($29|0)==(55);
      $or$cond$i$i = $28 & $30;
      if (!($or$cond$i$i)) {
       break;
      }
      _NextToken();
      _NextToken();
     }
     $31 = (($$03$i$i) + -1)|0;
     $32 = ($31|0)==(0);
     if ($32) {
      break L25;
     } else {
      $$03$i$i = $31;
     }
    }
    _Error(30780,$vararg_buffer3);
   }
  } while(0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 60:  {
  $33 = (_GetElementType($0)|0);
  $34 = (_CheckedSizeOf($33)|0);
  $35 = (_GetElementCount($0)|0);
  $$idx$val$i = HEAP32[$33>>2]|0;
  $36 = $$idx$val$i & 15;
  $37 = ($36|0)==(1);
  L37: do {
   if ($37) {
    $38 = HEAP32[11156]|0;
    switch ($38|0) {
    case 86: case 90:  {
     $191 = 0;
     break;
    }
    case 46:  {
     $39 = HEAP32[11180]|0;
     switch ($39|0) {
     case 86: case 90:  {
      break;
     }
     default: {
      label = 30;
      break L37;
     }
     }
     _NextToken();
     $191 = 1;
     break;
    }
    default: {
     label = 30;
     break L37;
    }
    }
    $40 = HEAP32[(44640)>>2]|0;
    _TranslateLiteral($40);
    $41 = HEAP32[(44640)>>2]|0;
    $42 = (_GetLiteralSize($41)|0);
    $$off$i = (($35) + 1)|0;
    $$cmp$i = ($$off$i>>>0)>(1);
    $43 = ($42|0)==($$off$i|0);
    $or$cond$i = $$cmp$i & $43;
    $44 = $or$cond$i << 31 >> 31;
    $$0$i10 = (($44) + ($42))|0;
    $45 = HEAP32[(44640)>>2]|0;
    $46 = (_GetLiteralStr($45)|0);
    _g_defbytes($46,$$0$i10);
    _NextToken();
    if ($191) {
     (_ConsumeRCurly()|0);
     $$3$i = $$0$i10;
    } else {
     $$3$i = $$0$i10;
    }
   } else {
    label = 30;
   }
  } while(0);
  if ((label|0) == 30) {
   (_ConsumeLCurly()|0);
   $47 = HEAP32[11156]|0;
   $48 = ($47|0)==(55);
   L46: do {
    if ($48) {
     $$2$i = 0;
    } else {
     $$1$i1156 = 0;
     while(1) {
      (_ParseInitInternal($33,0)|0);
      $49 = (($$1$i1156) + 1)|0;
      $50 = HEAP32[11156]|0;
      $51 = ($50|0)==(52);
      if (!($51)) {
       $$2$i = $49;
       break L46;
      }
      _NextToken();
      $52 = HEAP32[11156]|0;
      $53 = ($52|0)==(55);
      if ($53) {
       $$2$i = $49;
       break;
      } else {
       $$1$i1156 = $49;
      }
     }
    }
   } while(0);
   (_ConsumeRCurly()|0);
   $$3$i = $$2$i;
  }
  $54 = ($35|0)==(-1);
  do {
   if ($54) {
    _SetElementCount($0,$$3$i);
    $$044$i = $$3$i;
   } else {
    $55 = ($35|0)==(0);
    $56 = ($1|0)!=(0);
    $or$cond7$i = $56 & $55;
    if ($or$cond7$i) {
     $$044$i = $$3$i;
    } else {
     $57 = ($35|0)>($$3$i|0);
     if ($57) {
      $58 = (($35) - ($$3$i))|0;
      $59 = Math_imul($58, $34)|0;
      _g_zerobytes($59);
      $$044$i = $35;
      break;
     }
     $60 = ($35|0)<($$3$i|0);
     if ($60) {
      _Error(29320,$vararg_buffer5);
      $$044$i = $35;
     } else {
      $$044$i = $35;
     }
    }
   }
  } while(0);
  $61 = Math_imul($$044$i, $34)|0;
  $$0 = $61;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 75: case 74:  {
  (_ConsumeLCurly()|0);
  $62 = (_GetSymEntry($0)|0);
  $63 = ((($62)) + 36|0);
  $64 = ((($62)) + 40|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = HEAP32[$63>>2]|0;
  $67 = ($66|0)==(0|0);
  if ($67) {
   _Error(29342,$vararg_buffer7);
   $$01$ph$i$i = 1;
   L65: while(1) {
    L67: while(1) {
     $68 = HEAP32[11156]|0;
     switch ($68|0) {
     case 1: case 41:  {
      $$0 = 0;
      label = 119;
      break L65;
      break;
     }
     case 55:  {
      label = 47;
      break L67;
      break;
     }
     case 46:  {
      label = 48;
      break L67;
      break;
     }
     default: {
     }
     }
     _NextToken();
    }
    if ((label|0) == 47) {
     label = 0;
     $69 = (($$01$ph$i$i) + -1)|0;
     $$1$i$i = $69;
    }
    else if ((label|0) == 48) {
     label = 0;
     $70 = (($$01$ph$i$i) + 1)|0;
     $$1$i$i = $70;
    }
    _NextToken();
    $71 = ($$1$i$i|0)==(0);
    if ($71) {
     $$0 = 0;
     label = 119;
     break;
    } else {
     $$01$ph$i$i = $$1$i$i;
    }
   }
   if ((label|0) == 119) {
    STACKTOP = sp;return ($$0|0);
   }
  }
  $72 = HEAP32[11156]|0;
  $73 = ($72|0)==(55);
  do {
   if ($73) {
    (_ConsumeRCurly()|0);
    $$sroa$5$7 = 0;
   } else {
    $74 = ((($66)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($2)) + 16|0);
    $77 = ($1|0)==(0);
    $$034$i62 = $75;$$sroa$20$059 = 0;$$sroa$29$061 = 0;$$sroa$5$060 = 0;
    L81: while(1) {
     $78 = ($$034$i62|0)==(0|0);
     if ($78) {
      label = 54;
      break;
     }
     $$034$idx$i = ((($$034$i62)) + 20|0);
     $$034$idx$val$i = HEAP32[$$034$idx$i>>2]|0;
     $83 = $$034$idx$val$i & 16388;
     $84 = ($83|0)==(16388);
     do {
      if ($84) {
       $85 = ((($$034$i62)) + 44|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = 1 << $86;
       $88 = (($87) + -1)|0;
       $89 = ((($$034$i62)) + 36|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = $90 << 3;
       $92 = ((($$034$i62)) + 40|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = (($91) + ($93))|0;
       $95 = $$sroa$5$060 << 3;
       $96 = (($95) + ($$sroa$29$061))|0;
       $97 = ($94|0)==($96|0);
       if (!($97)) {
        label = 63;
        break L81;
       }
       $100 = ((($$034$i62)) + 48|0);
       $101 = (_IsAnonName($100)|0);
       $102 = ($101|0)==(0);
       if (!($102)) {
        $103 = HEAP32[$85>>2]|0;
        $104 = (($103) + ($$sroa$29$061))|0;
        $105 = ($104>>>0)<(17);
        if (!($105)) {
         label = 66;
         break L81;
        }
        $108 = ($104|0)==(16);
        if ($108) {
         $109 = (($$sroa$5$060) + 2)|0;
         _g_defdata(41,$$sroa$20$059,0);
         $$sroa$20$3 = 0;$$sroa$29$3 = 0;$$sroa$5$3 = $109;
        } else {
         $$sroa$20$3 = $$sroa$20$059;$$sroa$29$3 = $104;$$sroa$5$3 = $$sroa$5$060;
        }
        $$sroa$20$5 = $$sroa$20$3;$$sroa$29$5 = $$sroa$29$3;$$sroa$5$5 = $$sroa$5$3;
        break;
       }
       $110 = HEAP32[11156]|0;
       $111 = ($110|0)==(46);
       if ($111) {
        $$01$i$i$i12 = 0;
        while(1) {
         $112 = (($$01$i$i$i12) + 1)|0;
         _NextToken();
         $113 = HEAP32[11156]|0;
         $114 = ($113|0)==(46);
         if ($114) {
          $$01$i$i$i12 = $112;
         } else {
          break;
         }
        }
        $115 = ($112|0)==(0);
        if ($115) {
         $$0$lcssa$i5$i$i15 = 0;
        } else {
         _Warning(29287,$vararg_buffer11);
         $$0$lcssa$i5$i$i15 = $112;
        }
       } else {
        $$0$lcssa$i5$i$i15 = 0;
       }
       _ConstExpr(3,$2);
       _TypeConversion($2,10956);
       $116 = ($$0$lcssa$i5$i$i15|0)==(0);
       L100: do {
        if (!($116)) {
         $$03$i = $$0$lcssa$i5$i$i15;
         while(1) {
          $117 = HEAP32[11156]|0;
          $118 = ($117|0)==(55);
          if ($118) {
           _NextToken();
          } else {
           $119 = ($117|0)==(52);
           $120 = HEAP32[11180]|0;
           $121 = ($120|0)==(55);
           $or$cond$i20 = $119 & $121;
           if (!($or$cond$i20)) {
            break;
           }
           _NextToken();
           _NextToken();
          }
          $122 = (($$03$i) + -1)|0;
          $123 = ($122|0)==(0);
          if ($123) {
           break L100;
          } else {
           $$03$i = $122;
          }
         }
         _Error(30780,$vararg_buffer13);
        }
       } while(0);
       $124 = (_ED_IsConstAbsInt($2)|0);
       $125 = ($124|0)==(0);
       if ($125) {
        _Error(29499,$vararg_buffer15);
        (_ED_MakeConstAbsInt($2,1)|0);
       }
       $126 = HEAP32[$76>>2]|0;
       $127 = ($126|0)>($88|0);
       if ($127) {
        _Warning(29529,$vararg_buffer17);
        $128 = HEAP32[$76>>2]|0;
        $129 = $128 & $88;
        HEAP32[$76>>2] = $129;
        $136 = $129;
       } else {
        $136 = $126;
       }
       $130 = HEAP32[$89>>2]|0;
       $131 = (($130) - ($$sroa$5$060))|0;
       $132 = $131 << 3;
       $133 = HEAP32[$92>>2]|0;
       $134 = (($132) + ($133))|0;
       $135 = $136 << $134;
       $137 = $135 | $$sroa$20$059;
       $138 = HEAP32[$85>>2]|0;
       $139 = (($138) + ($$sroa$29$061))|0;
       $140 = ($139>>>0)<(17);
       if (!($140)) {
        label = 85;
        break L81;
       }
       $143 = ($139|0)==(16);
       if ($143) {
        $144 = (($$sroa$5$060) + 2)|0;
        _g_defdata(41,$137,0);
        $$sroa$20$3$ph = 0;$$sroa$29$3$ph = 0;$$sroa$5$3$ph = $144;
       } else {
        $$sroa$20$3$ph = $137;$$sroa$29$3$ph = $139;$$sroa$5$3$ph = $$sroa$5$060;
       }
       $$sroa$20$4 = $$sroa$20$3$ph;$$sroa$29$4 = $$sroa$29$3$ph;$$sroa$5$4 = $$sroa$5$3$ph;
       label = 95;
      } else {
       $145 = ($$sroa$29$061|0)==(0);
       if (!($145)) {
        label = 91;
        break L81;
       }
       $148 = ((($$034$i62)) + 24|0);
       $149 = HEAP32[$148>>2]|0;
       if ($77) {
        $154 = 0;
       } else {
        $150 = ((($$034$i62)) + 8|0);
        $151 = HEAP32[$150>>2]|0;
        $152 = ($151|0)==(0|0);
        $154 = $152;
       }
       $153 = $154&1;
       $155 = (_ParseInitInternal($149,$153)|0);
       $156 = (($155) + ($$sroa$5$060))|0;
       $$sroa$20$4 = $$sroa$20$059;$$sroa$29$4 = 0;$$sroa$5$4 = $156;
       label = 95;
      }
     } while(0);
     if ((label|0) == 95) {
      label = 0;
      $157 = HEAP32[11156]|0;
      $158 = ($157|0)==(52);
      if (!($158)) {
       $$sroa$20$6 = $$sroa$20$4;$$sroa$29$6 = $$sroa$29$4;$$sroa$5$6 = $$sroa$5$4;
       label = 100;
       break;
      }
      _NextToken();
      $$sroa$20$5 = $$sroa$20$4;$$sroa$29$5 = $$sroa$29$4;$$sroa$5$5 = $$sroa$5$4;
     }
     $$idx$val$i18 = HEAP32[$0>>2]|0;
     $159 = $$idx$val$i18 & 15;
     $160 = ($159|0)==(11);
     if ($160) {
      $$034$i$be = 0;
     } else {
      $161 = ((($$034$i62)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $$034$i$be = $162;
     }
     $163 = HEAP32[11156]|0;
     $164 = ($163|0)==(55);
     if ($164) {
      $$sroa$20$6 = $$sroa$20$5;$$sroa$29$6 = $$sroa$29$5;$$sroa$5$6 = $$sroa$5$5;
      label = 100;
      break;
     } else {
      $$034$i62 = $$034$i$be;$$sroa$20$059 = $$sroa$20$5;$$sroa$29$061 = $$sroa$29$5;$$sroa$5$060 = $$sroa$5$5;
     }
    }
    if ((label|0) == 54) {
     _Error(29320,$vararg_buffer9);
     $$01$ph$i36$i = 1;
     L134: while(1) {
      L136: while(1) {
       $79 = HEAP32[11156]|0;
       switch ($79|0) {
       case 1: case 41:  {
        $$0 = $$sroa$5$060;
        label = 119;
        break L134;
        break;
       }
       case 55:  {
        label = 58;
        break L136;
        break;
       }
       case 46:  {
        label = 59;
        break L136;
        break;
       }
       default: {
       }
       }
       _NextToken();
      }
      if ((label|0) == 58) {
       label = 0;
       $80 = (($$01$ph$i36$i) + -1)|0;
       $$1$i40$i = $80;
      }
      else if ((label|0) == 59) {
       label = 0;
       $81 = (($$01$ph$i36$i) + 1)|0;
       $$1$i40$i = $81;
      }
      _NextToken();
      $82 = ($$1$i40$i|0)==(0);
      if ($82) {
       $$0 = $$sroa$5$060;
       label = 119;
       break;
      } else {
       $$01$ph$i36$i = $$1$i40$i;
      }
     }
     if ((label|0) == 119) {
      STACKTOP = sp;return ($$0|0);
     }
    }
    else if ((label|0) == 63) {
     $98 = HEAP32[3332]|0;
     $99 = HEAP32[3331]|0;
     FUNCTION_TABLE_viiii[$98 & 1]($99,29391,27771,2024);
     // unreachable;
    }
    else if ((label|0) == 66) {
     $106 = HEAP32[3332]|0;
     $107 = HEAP32[3331]|0;
     FUNCTION_TABLE_viiii[$106 & 1]($107,29476,27771,2032);
     // unreachable;
    }
    else if ((label|0) == 85) {
     $141 = HEAP32[3332]|0;
     $142 = HEAP32[3331]|0;
     FUNCTION_TABLE_viiii[$141 & 1]($142,29476,27771,2059);
     // unreachable;
    }
    else if ((label|0) == 91) {
     $146 = HEAP32[3332]|0;
     $147 = HEAP32[3331]|0;
     FUNCTION_TABLE_viiii[$146 & 1]($147,29571,27771,2069);
     // unreachable;
    }
    else if ((label|0) == 100) {
     (_ConsumeRCurly()|0);
     $165 = ($$sroa$29$6|0)==(0);
     if ($165) {
      $$sroa$5$7 = $$sroa$5$6;
      break;
     }
     $166 = (($$sroa$5$6) + 2)|0;
     _g_defdata(41,$$sroa$20$6,0);
     $$sroa$5$7 = $166;
     break;
    }
   }
  } while(0);
  $167 = ($65>>>0)>($$sroa$5$7>>>0);
  if (!($167)) {
   $$0 = $$sroa$5$7;
   STACKTOP = sp;return ($$0|0);
  }
  $168 = (($65) - ($$sroa$5$7))|0;
  _g_zerobytes($168);
  $$0 = $65;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 9:  {
  $169 = (_IS_Get(8668)|0);
  $170 = ($169|0)==(2);
  if ($170) {
   (_ConsumeLCurly()|0);
   $171 = ((($2)) + 4|0);
   $172 = ((($2)) + 16|0);
   $$0$i = 0;
   while(1) {
    _ConstExpr(3,$2);
    $173 = HEAP32[$171>>2]|0;
    $174 = HEAP32[$173>>2]|0;
    $175 = $174 & -260097;
    switch ($175|0) {
    case 145: case 273:  {
     $176 = (_ED_IsConstAbsInt($2)|0);
     $177 = ($176|0)==(0);
     if (!($177)) {
      $178 = HEAP32[$172>>2]|0;
      $179 = $178 & 255;
      HEAP32[$172>>2] = $179;
     }
     _DefineData($2);
     $180 = (($$0$i) + 1)|0;
     $$1$i = $180;
     break;
    }
    case 60: case 61: case 147: case 275: case 658: case 786:  {
     $181 = (_ED_IsConstAbsInt($2)|0);
     $182 = ($181|0)==(0);
     if (!($182)) {
      $183 = HEAP32[$172>>2]|0;
      $184 = $183 & 65535;
      HEAP32[$172>>2] = $184;
     }
     _DefineData($2);
     $185 = (($$0$i) + 2)|0;
     $$1$i = $185;
     break;
    }
    case 1172: case 1300:  {
     _DefineData($2);
     $186 = (($$0$i) + 4)|0;
     $$1$i = $186;
     break;
    }
    default: {
     _Error(29587,$vararg_buffer19);
     $$1$i = $$0$i;
    }
    }
    $187 = HEAP32[11156]|0;
    $188 = ($187|0)==(52);
    if (!($188)) {
     break;
    }
    _NextToken();
    $189 = HEAP32[11156]|0;
    $190 = ($189|0)==(55);
    if ($190) {
     break;
    } else {
     $$0$i = $$1$i;
    }
   }
   (_ConsumeRCurly()|0);
   $$0 = $$1$i;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 default: {
 }
 }
 _Error(38830,$vararg_buffer21);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _DefineData($0) {
 $0 = $0|0;
 var $$idx10 = 0, $$idx10$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$idx10 = ((($0)) + 8|0);
 $$idx10$val = HEAP32[$$idx10>>2]|0;
 $trunc = $$idx10$val&255;
 switch ($trunc<<24>>24) {
 case 1:  {
  $1 = ((($0)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_TypeOf($2)|0);
  $4 = $3 | 32;
  $5 = ((($0)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  _g_defdata($4,$6,0);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $7 = ((($0)) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  _g_defdata(4096,$8,$10);
  STACKTOP = sp;return;
  break;
 }
 case -128: case 4:  {
  $11 = ((($0)) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  _g_defdata(0,$12,$14);
  STACKTOP = sp;return;
  break;
 }
 case 8:  {
  $15 = (_IS_Get(8408)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   _Error(29618,$vararg_buffer);
  }
  $17 = ((($0)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  _g_defdata(32768,$18,$20);
  STACKTOP = sp;return;
  break;
 }
 case 64: case 32: case 16:  {
  _Error(29665,$vararg_buffer1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $21 = $$idx10$val & 255;
  HEAP32[$vararg_buffer3>>2] = $21;
  _Internal(29690,$vararg_buffer3);
  // unreachable;
 }
 }
}
function _NewMacro($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 48)|0;
 $3 = (_xmalloc($2)|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = -1;
 $6 = ((($3)) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 16|0);
 (_InitCollection($7)|0);
 $8 = ((($3)) + 28|0);
 ;HEAP32[$8>>2]=HEAP32[46076>>2]|0;HEAP32[$8+4>>2]=HEAP32[46076+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[46076+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[46076+12>>2]|0;
 $9 = ((($3)) + 44|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($3)) + 45|0);
 $11 = (($1) + 1)|0;
 _memcpy(($10|0),($0|0),($11|0))|0;
 return ($3|0);
}
function _DefineNumericMacro($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_sprintf($2,34204,$vararg_buffer)|0);
 $3 = (_strlen($0)|0);
 $4 = (($3) + 48)|0;
 $5 = (_xmalloc($4)|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($5)) + 8|0);
 HEAP32[$7>>2] = -1;
 $8 = ((($5)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($5)) + 16|0);
 (_InitCollection($9)|0);
 $10 = ((($5)) + 28|0);
 ;HEAP32[$10>>2]=HEAP32[46076>>2]|0;HEAP32[$10+4>>2]=HEAP32[46076+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[46076+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[46076+12>>2]|0;
 $11 = ((($5)) + 44|0);
 HEAP8[$11>>0] = 0;
 $12 = ((($5)) + 45|0);
 $13 = (($3) + 1)|0;
 _memcpy(($12|0),($0|0),($13|0))|0;
 $14 = (_strlen($2)|0);
 _SB_CopyBuf($10,$2,$14);
 $15 = (_HashStr($12)|0);
 $16 = (($15>>>0) % 211)&-1;
 $17 = (45040 + ($16<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 HEAP32[$5>>2] = $18;
 HEAP32[$17>>2] = $5;
 STACKTOP = sp;return;
}
function _DefineTextMacro($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 48)|0;
 $4 = (_xmalloc($3)|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($4)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($4)) + 16|0);
 (_InitCollection($8)|0);
 $9 = ((($4)) + 28|0);
 ;HEAP32[$9>>2]=HEAP32[46076>>2]|0;HEAP32[$9+4>>2]=HEAP32[46076+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[46076+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[46076+12>>2]|0;
 $10 = ((($4)) + 44|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($4)) + 45|0);
 $12 = (($2) + 1)|0;
 _memcpy(($11|0),($0|0),($12|0))|0;
 $13 = (_strlen($1)|0);
 _SB_CopyBuf($9,$1,$13);
 $14 = (_HashStr($11)|0);
 $15 = (($14>>>0) % 211)&-1;
 $16 = (45040 + ($15<<2)|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$4>>2] = $17;
 HEAP32[$16>>2] = $4;
 return;
}
function _InsertMacro($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 45|0);
 $2 = (_HashStr($1)|0);
 $3 = (($2>>>0) % 211)&-1;
 $4 = (45040 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$0>>2] = $5;
 HEAP32[$4>>2] = $0;
 return;
}
function _UndefineMacro($0) {
 $0 = $0|0;
 var $$0 = 0, $$01722 = 0, $$01722$phi = 0, $$018 = 0, $$021 = 0, $$023 = 0, $$09$i = 0, $$idx$val$i = 0, $$idx$val8$i = 0, $$idx7$i = 0, $$idx7$val$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_HashStr($0)|0);
 $2 = (($1>>>0) % 211)&-1;
 $3 = (45040 + ($2<<2)|0);
 $$021 = HEAP32[$3>>2]|0;
 $4 = ($$021|0)==(0|0);
 if ($4) {
  $$018 = 0;
  return ($$018|0);
 } else {
  $$01722 = 0;$$023 = $$021;
 }
 while(1) {
  $5 = ((($$023)) + 45|0);
  $6 = (_strcmp($5,$0)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   break;
  }
  $$0 = HEAP32[$$023>>2]|0;
  $17 = ($$0|0)==(0|0);
  if ($17) {
   $$018 = 0;
   label = 11;
   break;
  } else {
   $$01722$phi = $$023;$$023 = $$0;$$01722 = $$01722$phi;
  }
 }
 if ((label|0) == 11) {
  return ($$018|0);
 }
 $8 = ($$01722|0)==(0|0);
 $9 = HEAP32[$$023>>2]|0;
 if ($8) {
  HEAP32[$3>>2] = $9;
 } else {
  HEAP32[$$01722>>2] = $9;
 }
 $10 = ((($$023)) + 16|0);
 $$idx$val8$i = HEAP32[$10>>2]|0;
 $11 = ($$idx$val8$i|0)==(0);
 if (!($11)) {
  $$idx7$i = ((($$023)) + 24|0);
  $$09$i = 0;
  while(1) {
   $$idx7$val$i = HEAP32[$$idx7$i>>2]|0;
   $12 = (($$idx7$val$i) + ($$09$i<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   _xfree($13);
   $14 = (($$09$i) + 1)|0;
   $$idx$val$i = HEAP32[$10>>2]|0;
   $15 = ($14>>>0)<($$idx$val$i>>>0);
   if ($15) {
    $$09$i = $14;
   } else {
    break;
   }
  }
 }
 _DoneCollection($10);
 $16 = ((($$023)) + 28|0);
 _SB_Done($16);
 _xfree($$023);
 $$018 = 1;
 return ($$018|0);
}
function _FindMacro($0) {
 $0 = $0|0;
 var $$0 = 0, $$010 = 0, $$011 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_HashStr($0)|0);
 $2 = (($1>>>0) % 211)&-1;
 $3 = (45040 + ($2<<2)|0);
 $$010 = HEAP32[$3>>2]|0;
 $4 = ($$010|0)==(0|0);
 if ($4) {
  $$09 = 0;
  return ($$09|0);
 } else {
  $$011 = $$010;
 }
 while(1) {
  $5 = ((($$011)) + 45|0);
  $6 = (_strcmp($5,$0)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $$09 = $$011;
   label = 4;
   break;
  }
  $$0 = HEAP32[$$011>>2]|0;
  $8 = ($$0|0)==(0|0);
  if ($8) {
   $$09 = 0;
   label = 4;
   break;
  } else {
   $$011 = $$0;
  }
 }
 if ((label|0) == 4) {
  return ($$09|0);
 }
 return (0)|0;
}
function _FindMacroArg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$010 = 0, $$07 = 0, $$idx = 0, $$idx$val9 = 0, $$idx8 = 0, $$idx8$val = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 16|0);
 $$idx$val9 = HEAP32[$$idx>>2]|0;
 $2 = ($$idx$val9|0)==(0);
 if ($2) {
  $$07 = -1;
  return ($$07|0);
 }
 $$idx8 = ((($0)) + 24|0);
 $$idx8$val = HEAP32[$$idx8>>2]|0;
 $$010 = 0;
 while(1) {
  $3 = (($$idx8$val) + ($$010<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (_strcmp($4,$1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$07 = $$010;
   label = 5;
   break;
  }
  $7 = (($$010) + 1)|0;
  $8 = ($7>>>0)<($$idx$val9>>>0);
  if ($8) {
   $$010 = $7;
  } else {
   $$07 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$07|0);
 }
 return (0)|0;
}
function _AddMacroArg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$013 = 0, $$idx$val12 = 0, $$idx10 = 0, $$idx10$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 16|0);
 $$idx$val12 = HEAP32[$2>>2]|0;
 $3 = ($$idx$val12|0)==(0);
 L1: do {
  if (!($3)) {
   $$idx10 = ((($0)) + 24|0);
   $$idx10$val = HEAP32[$$idx10>>2]|0;
   $$013 = 0;
   while(1) {
    $6 = (($$idx10$val) + ($$013<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (_strcmp($7,$1)|0);
    $9 = ($8|0)==(0);
    $4 = (($$013) + 1)|0;
    if ($9) {
     break;
    }
    $5 = ($4>>>0)<($$idx$val12>>>0);
    if ($5) {
     $$013 = $4;
    } else {
     break L1;
    }
   }
   HEAP32[$vararg_buffer>>2] = $1;
   _Error(29720,$vararg_buffer);
  }
 } while(0);
 $10 = (_xstrdup($1)|0);
 $11 = HEAP32[$2>>2]|0;
 _CollInsert($2,$10,$11);
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 1)|0;
 HEAP32[$12>>2] = $14;
 STACKTOP = sp;return;
}
function _MacroCmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$013 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if (!($6)) {
  $$011 = 1;
  return ($$011|0);
 }
 $7 = ($3|0)>(0);
 L4: do {
  if ($7) {
   $8 = ((($0)) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ((($1)) + 16|0);
   $11 = ((($0)) + 24|0);
   $12 = ((($1)) + 24|0);
   $$013 = 0;
   while(1) {
    $15 = ($9>>>0)>($$013>>>0);
    if (!($15)) {
     label = 6;
     break;
    }
    $18 = HEAP32[$10>>2]|0;
    $19 = ($18>>>0)>($$013>>>0);
    if (!($19)) {
     label = 8;
     break;
    }
    $22 = HEAP32[$11>>2]|0;
    $23 = (($22) + ($$013<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = HEAP32[$12>>2]|0;
    $26 = (($25) + ($$013<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (_strcmp($24,$27)|0);
    $29 = ($28|0)==(0);
    $13 = (($$013) + 1)|0;
    if (!($29)) {
     $$011 = 1;
     label = 11;
     break;
    }
    $14 = ($13|0)<($3|0);
    if ($14) {
     $$013 = $13;
    } else {
     break L4;
    }
   }
   if ((label|0) == 6) {
    $16 = HEAP32[3332]|0;
    $17 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$16 & 1]($17,40922,40950,155);
    // unreachable;
   }
   else if ((label|0) == 8) {
    $20 = HEAP32[3332]|0;
    $21 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$20 & 1]($21,40922,40950,155);
    // unreachable;
   }
   else if ((label|0) == 11) {
    return ($$011|0);
   }
  }
 } while(0);
 $30 = ((($0)) + 28|0);
 $31 = ((($1)) + 28|0);
 $32 = (_SB_Compare($30,$31)|0);
 $$011 = $32;
 return ($$011|0);
}
function _PrintMacroStats($0) {
 $0 = $0|0;
 var $$01416 = 0, $$015 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 (_fwrite(29752,27,1,$0)|0);
 $$01416 = 0;
 while(1) {
  HEAP32[$vararg_buffer>>2] = $$01416;
  (_fprintf($0,29780,$vararg_buffer)|0);
  $1 = (45040 + ($$01416<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if ($3) {
   (_fwrite(29787,6,1,$0)|0);
  } else {
   $$015 = $2;
   while(1) {
    $4 = ((($$015)) + 45|0);
    HEAP32[$vararg_buffer1>>2] = $4;
    (_fprintf($0,36440,$vararg_buffer1)|0);
    $5 = HEAP32[$$015>>2]|0;
    $6 = ($5|0)==(0|0);
    if ($6) {
     break;
    } else {
     $$015 = $5;
    }
   }
   (_fputc(10,$0)|0);
  }
  $7 = (($$01416) + 1)|0;
  $exitcond = ($7|0)==(211);
  if ($exitcond) {
   break;
  } else {
   $$01416 = $7;
  }
 }
 STACKTOP = sp;return;
}
function _InitIncludePaths() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_NewSearchPath()|0);
 HEAP32[11471] = $0;
 $1 = (_NewSearchPath()|0);
 HEAP32[11472] = $1;
 return;
}
function _FinishIncludePaths() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11471]|0;
 _AddSearchPathFromEnv($0,29794);
 $1 = HEAP32[11472]|0;
 _AddSearchPathFromEnv($1,29794);
 $2 = HEAP32[11471]|0;
 _AddSubSearchPathFromEnv($2,29803,32729);
 $3 = HEAP32[11471]|0;
 _AddSearchPath($3,29813);
 return;
}
function _OpenMainFile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $IFiles$idx$val$i = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 24)|0;
 $3 = (_xmalloc($2)|0);
 $IFiles$idx$val$i = HEAP32[11474]|0;
 $4 = (($IFiles$idx$val$i) + 1)|0;
 HEAP32[$3>>2] = $4;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 1;
 $9 = ((($3)) + 20|0);
 $10 = (($1) + 1)|0;
 _memcpy(($9|0),($0|0),($10|0))|0;
 _CollInsert(45896,$3,$IFiles$idx$val$i);
 $11 = (_fopen($0,40730)|0);
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = (___errno_location()|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_strerror($14)|0);
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $15;
  _Fatal(29826,$vararg_buffer);
  // unreachable;
 } else {
  $16 = (_NewAFile($3,$11)|0);
  $17 = (_NewStrBuf()|0);
  HEAP32[11473] = $17;
  $18 = ((($16)) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$16>>2]|0;
  _UpdateLineInfo($19,$20,$17);
  STACKTOP = sp;return;
 }
}
function _NewAFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $2 = sp + 88|0;
 $3 = sp + 8|0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $4 = (_xmalloc(16)|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($4)) + 4|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($4)) + 8|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 HEAP32[$7>>2] = $9;
 $10 = ($8|0)==(0);
 do {
  if ($10) {
   $11 = ((($0)) + 20|0);
   $12 = (_FileStat($11,$3)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $17 = ((($3)) + 36|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($0)) + 8|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($3)) + 56|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ((($0)) + 12|0);
    HEAP32[$22>>2] = $21;
    _g_fileinfo($11,$18,$21);
    $$pre$phiZ2D = $11;
    break;
   } else {
    $14 = (___errno_location()|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_strerror($15)|0);
    HEAP32[$vararg_buffer>>2] = $11;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $16;
    _Fatal(29858,$vararg_buffer);
    // unreachable;
   }
  } else {
   $$pre = ((($0)) + 20|0);
   $$pre$phiZ2D = $$pre;
  }
 } while(0);
 $23 = HEAP32[11477]|0;
 _CollInsert(45908,$4,$23);
 $24 = (_FindName($$pre$phiZ2D)|0);
 $25 = $24;
 $26 = $$pre$phiZ2D;
 $27 = (($25) - ($26))|0;
 _SB_CopyBuf($2,$$pre$phiZ2D,$27);
 _SB_Terminate($2);
 $28 = HEAP32[11472]|0;
 $$idx$val = HEAP32[$2>>2]|0;
 $29 = (_PushSearchPath($28,$$idx$val)|0);
 $30 = ((($4)) + 12|0);
 HEAP32[$30>>2] = $29;
 _SB_Done($2);
 STACKTOP = sp;return ($4|0);
}
function _OpenIncludeFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$in = 0, $$01115$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AFiles$idx$val = 0, $IFiles$idx$val$i = 0, $IFiles$idx$val14$i = 0, $IFiles$idx13$val$i = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $AFiles$idx$val = HEAP32[11477]|0;
 $2 = ($AFiles$idx$val>>>0)>(16);
 if ($2) {
  _PPError(29879,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $3 = ($1|0)==(2);
 $4 = HEAP32[11471]|0;
 $5 = HEAP32[11472]|0;
 $6 = $3 ? $4 : $5;
 $7 = (_SearchFile($6,$0)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$vararg_buffer1>>2] = $0;
  _PPError(29904,$vararg_buffer1);
  STACKTOP = sp;return;
 }
 $IFiles$idx$val14$i = HEAP32[11474]|0;
 $9 = ($IFiles$idx$val14$i|0)==(0);
 L9: do {
  if ($9) {
   label = 10;
  } else {
   $IFiles$idx13$val$i = HEAP32[(45904)>>2]|0;
   $$01115$i = 0;
   while(1) {
    $12 = (($IFiles$idx13$val$i) + ($$01115$i<<2)|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 20|0);
    $15 = (_strcmp($7,$14)|0);
    $16 = ($15|0)==(0);
    $10 = (($$01115$i) + 1)|0;
    if ($16) {
     break;
    }
    $11 = ($10>>>0)<($IFiles$idx$val14$i>>>0);
    if ($11) {
     $$01115$i = $10;
    } else {
     label = 10;
     break L9;
    }
   }
   $17 = ($13|0)==(0|0);
   if ($17) {
    label = 10;
   } else {
    $$0$in = $13;
   }
  }
 } while(0);
 if ((label|0) == 10) {
  $18 = (_strlen($7)|0);
  $19 = (($18) + 24)|0;
  $20 = (_xmalloc($19)|0);
  $IFiles$idx$val$i = HEAP32[11474]|0;
  $21 = (($IFiles$idx$val$i) + 1)|0;
  HEAP32[$20>>2] = $21;
  $22 = ((($20)) + 4|0);
  HEAP32[$22>>2] = 0;
  $23 = ((($20)) + 8|0);
  HEAP32[$23>>2] = 0;
  $24 = ((($20)) + 12|0);
  HEAP32[$24>>2] = 0;
  $25 = ((($20)) + 16|0);
  HEAP32[$25>>2] = $1;
  $26 = ((($20)) + 20|0);
  $27 = (($18) + 1)|0;
  _memcpy(($26|0),($7|0),($27|0))|0;
  _CollInsert(45896,$20,$IFiles$idx$val$i);
  $$0$in = $20;
 }
 _xfree($7);
 $28 = ((($$0$in)) + 20|0);
 $29 = (_fopen($28,40730)|0);
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = (___errno_location()|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_strerror($32)|0);
  HEAP32[$vararg_buffer3>>2] = $28;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $33;
  _PPError(29932,$vararg_buffer3);
  STACKTOP = sp;return;
 } else {
  $34 = HEAP32[3678]|0;
  HEAP32[$vararg_buffer7>>2] = $28;
  _Print($34,1,29966,$vararg_buffer7);
  (_NewAFile($$0$in,$29)|0);
  STACKTOP = sp;return;
 }
}
function _NextChar() {
 var $$cast$i = 0, $$idx10$val$i = 0, $$idx2$val$i = 0, $$idx5$i = 0, $$idx5$val$i = 0, $$idx5$val13$i = 0, $$idx6$val$i = 0, $$idx8$i = 0, $$idx8$val$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $InputStack$idx$val$i = 0, $InputStack$idx1$val16$i = 0;
 var $or$cond$i = 0, $or$cond17$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11473]|0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $6 = (($2) + 1)|0;
  HEAP32[$1>>2] = $6;
  $$idx5$val13$i = $6;
 } else {
  $$idx5$val13$i = $2;
 }
 $7 = ($$idx5$val13$i>>>0)<($4>>>0);
 $InputStack$idx1$val16$i = HEAP32[11480]|0;
 $8 = ($InputStack$idx1$val16$i|0)==(0);
 $or$cond17$i = $7 | $8;
 L4: do {
  if ($or$cond17$i) {
   $$idx2$val$i = $$idx5$val13$i;$$idx6$val$i = $4;$21 = $0;$InputStack$idx$val$i = $InputStack$idx1$val16$i;
  } else {
   $9 = $0;
   while(1) {
    _FreeStrBuf($9);
    $10 = HEAP32[11480]|0;
    $11 = ($10|0)==(0);
    if ($11) {
     break;
    }
    $14 = (($10) + -1)|0;
    HEAP32[11480] = $14;
    $15 = HEAP32[(45928)>>2]|0;
    $16 = (($15) + ($14<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    HEAP32[11473] = $17;
    $$cast$i = $17;
    $$idx5$i = ((($$cast$i)) + 8|0);
    $$idx5$val$i = HEAP32[$$idx5$i>>2]|0;
    $$idx8$i = ((($$cast$i)) + 4|0);
    $$idx8$val$i = HEAP32[$$idx8$i>>2]|0;
    $18 = ($$idx5$val$i>>>0)<($$idx8$val$i>>>0);
    $19 = ($14|0)==(0);
    $or$cond$i = $19 | $18;
    if ($or$cond$i) {
     $$idx2$val$i = $$idx5$val$i;$$idx6$val$i = $$idx8$val$i;$21 = $$cast$i;$InputStack$idx$val$i = $14;
     break L4;
    } else {
     $9 = $$cast$i;
    }
   }
   $12 = HEAP32[3332]|0;
   $13 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$12 & 1]($13,29992,40950,202);
   // unreachable;
  }
 } while(0);
 $20 = ($$idx2$val$i>>>0)<($$idx6$val$i>>>0);
 if (!($20)) {
  HEAP8[46897] = 0;
  HEAP8[46896] = 0;
  return;
 }
 $$idx10$val$i = HEAP32[$21>>2]|0;
 $22 = (($$idx10$val$i) + ($$idx2$val$i)|0);
 $23 = HEAP8[$22>>0]|0;
 HEAP8[46896] = $23;
 $24 = (($$idx2$val$i) + 1)|0;
 $25 = ($24>>>0)<($$idx6$val$i>>>0);
 if ($25) {
  $26 = (($$idx10$val$i) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  HEAP8[46897] = $27;
  return;
 }
 $28 = ($InputStack$idx$val$i|0)==(0);
 if ($28) {
  HEAP8[46897] = 0;
  return;
 } else {
  HEAP8[46897] = 32;
  return;
 }
}
function _ClearLine() {
 var $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $InputStack$idx$val = 0, $InputStack$idx$val4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $InputStack$idx$val4 = HEAP32[11480]|0;
 $0 = ($InputStack$idx$val4|0)==(0);
 if (!($0)) {
  $$05 = 0;
  while(1) {
   $1 = HEAP32[(45928)>>2]|0;
   $2 = (($1) + ($$05<<2)|0);
   $3 = HEAP32[$2>>2]|0;
   _FreeStrBuf($3);
   $4 = (($$05) + 1)|0;
   $InputStack$idx$val = HEAP32[11480]|0;
   $5 = ($4>>>0)<($InputStack$idx$val>>>0);
   if ($5) {
    $$05 = $4;
   } else {
    break;
   }
  }
 }
 HEAP32[11480] = 0;
 $6 = HEAP32[11473]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 HEAP8[46896] = 0;
 HEAP8[46897] = 0;
 return;
}
function _InitLine($0) {
 $0 = $0|0;
 var $$idx7 = 0, $$idx7$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11473]|0;
 HEAP32[11473] = $0;
 $$idx7 = ((($0)) + 8|0);
 $$idx7$val = HEAP32[$$idx7>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($$idx7$val>>>0);
 if ($4) {
  $5 = HEAP32[$0>>2]|0;
  $6 = (($5) + ($$idx7$val)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7;
 } else {
  $8 = 0;
 }
 HEAP8[46896] = $8;
 $9 = (($$idx7$val) + 1)|0;
 $10 = ($3>>>0)>($9>>>0);
 if (!($10)) {
  $14 = 0;
  HEAP8[46897] = $14;
  return ($1|0);
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = (($11) + ($9)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13;
 HEAP8[46897] = $14;
 return ($1|0);
}
function _NextLine() {
 var $$014$ph = 0, $$014$ph$in$in = 0, $$05$i = 0, $$2 = 0, $$idx = 0, $$idx$val = 0, $$idx7$i = 0, $$idx7$val$i = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $AFiles$idx$val = 0, $AFiles$idx$val$i = 0, $AFiles$idx16$val = 0, $InputStack$idx$val$i = 0, $InputStack$idx$val4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $InputStack$idx$val4$i = HEAP32[11480]|0;
 $0 = ($InputStack$idx$val4$i|0)==(0);
 if (!($0)) {
  $$05$i = 0;
  while(1) {
   $1 = HEAP32[(45928)>>2]|0;
   $2 = (($1) + ($$05$i<<2)|0);
   $3 = HEAP32[$2>>2]|0;
   _FreeStrBuf($3);
   $4 = (($$05$i) + 1)|0;
   $InputStack$idx$val$i = HEAP32[11480]|0;
   $5 = ($4>>>0)<($InputStack$idx$val$i>>>0);
   if ($5) {
    $$05$i = $4;
   } else {
    break;
   }
  }
 }
 HEAP32[11480] = 0;
 $6 = HEAP32[11473]|0;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($6)) + 4|0);
 HEAP32[$8>>2] = 0;
 HEAP8[46896] = 0;
 HEAP8[46897] = 0;
 $AFiles$idx16$val = HEAP32[11477]|0;
 $9 = ($AFiles$idx16$val|0)==(0);
 if ($9) {
  $$2 = 0;
  return ($$2|0);
 }
 $10 = (($AFiles$idx16$val) + -1)|0;
 $11 = HEAP32[(45916)>>2]|0;
 $12 = (($11) + ($10<<2)|0);
 $$014$ph$in$in = $12;
 L8: while(1) {
  $$014$ph = HEAP32[$$014$ph$in$in>>2]|0;
  $13 = ((($$014$ph)) + 4|0);
  L10: while(1) {
   $14 = HEAP32[$13>>2]|0;
   $15 = (_fgetc($14)|0);
   switch ($15|0) {
   case 0:  {
    continue L10;
    break;
   }
   case -1:  {
    break L10;
    break;
   }
   case 10:  {
    break;
   }
   default: {
    $56 = HEAP32[11473]|0;
    _SB_AppendChar($56,$15);
    continue L10;
   }
   }
   $37 = HEAP32[$$014$ph>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[$$014$ph>>2] = $38;
   $39 = HEAP32[11473]|0;
   $40 = ((($39)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $57 = $39;
    break L8;
   }
   $43 = (($41) + -1)|0;
   $44 = HEAP32[$39>>2]|0;
   $45 = (($44) + ($43)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = ($46<<24>>24)==(13);
   if ($47) {
    _SB_Drop($39,1);
    $$pre = HEAP32[11473]|0;
    $$phi$trans$insert = ((($$pre)) + 4|0);
    $$pre32 = HEAP32[$$phi$trans$insert>>2]|0;
    $48 = ($$pre32|0)==(0);
    if ($48) {
     $57 = $$pre;
     break L8;
    } else {
     $50 = $$pre32;$52 = $$pre;
    }
   } else {
    $50 = $41;$52 = $39;
   }
   $49 = (($50) + -1)|0;
   $51 = HEAP32[$52>>2]|0;
   $53 = (($51) + ($49)|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = ($54<<24>>24)==(92);
   if (!($55)) {
    $57 = $52;
    break L8;
   }
   HEAP8[$53>>0] = 10;
  }
  $16 = HEAP32[11473]|0;
  $$idx = ((($16)) + 4|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $17 = ($$idx$val|0)==(0);
  if (!($17)) {
   label = 8;
   break;
  }
  $AFiles$idx$val$i = HEAP32[11477]|0;
  $20 = ($AFiles$idx$val$i|0)==(0);
  if ($20) {
   label = 10;
   break;
  }
  $23 = (($AFiles$idx$val$i) + -1)|0;
  $24 = HEAP32[(45916)>>2]|0;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  (_fclose($28)|0);
  _CollDelete(45908,$23);
  $29 = ((($26)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==(0);
  if (!($31)) {
   $32 = HEAP32[11472]|0;
   _PopSearchPath($32);
  }
  _xfree($26);
  $AFiles$idx$val = HEAP32[11477]|0;
  $33 = ($AFiles$idx$val|0)==(0);
  if ($33) {
   $$2 = 0;
   label = 26;
   break;
  }
  $34 = (($AFiles$idx$val) + -1)|0;
  $35 = HEAP32[(45916)>>2]|0;
  $36 = (($35) + ($34<<2)|0);
  $$014$ph$in$in = $36;
 }
 if ((label|0) == 8) {
  $18 = HEAP32[$$014$ph>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$$014$ph>>2] = $19;
  $57 = $16;
 }
 else if ((label|0) == 10) {
  $21 = HEAP32[3332]|0;
  $22 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$21 & 1]($22,30005,30020,330);
  // unreachable;
 }
 else if ((label|0) == 26) {
  return ($$2|0);
 }
 _SB_Terminate($57);
 $58 = HEAP32[11473]|0;
 $$idx7$i = ((($58)) + 8|0);
 $$idx7$val$i = HEAP32[$$idx7$i>>2]|0;
 $59 = ((($58)) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60>>>0)>($$idx7$val$i>>>0);
 if ($61) {
  $62 = HEAP32[$58>>2]|0;
  $63 = (($62) + ($$idx7$val$i)|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64;
 } else {
  $65 = 0;
 }
 HEAP8[46896] = $65;
 $66 = (($$idx7$val$i) + 1)|0;
 $67 = ($60>>>0)>($66>>>0);
 if ($67) {
  $68 = HEAP32[$58>>2]|0;
  $69 = (($68) + ($66)|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70;
 } else {
  $71 = 0;
 }
 HEAP8[46897] = $71;
 $72 = ((($$014$ph)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$$014$ph>>2]|0;
 _UpdateLineInfo($73,$74,$58);
 $$2 = 1;
 return ($$2|0);
}
function _GetInputFile($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 return ($1|0);
}
function _GetCurrentFile() {
 var $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $AFiles$idx$val = 0, $AFiles$idx15$val = 0, $IFiles$idx$val = 0, $IFiles$idx13$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $AFiles$idx$val = HEAP32[11477]|0;
 $0 = ($AFiles$idx$val|0)==(0);
 if (!($0)) {
  $1 = (($AFiles$idx$val) + -1)|0;
  $AFiles$idx15$val = HEAP32[(45916)>>2]|0;
  $2 = (($AFiles$idx15$val) + ($1<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $$1 = $6;
  return ($$1|0);
 }
 $IFiles$idx$val = HEAP32[11474]|0;
 $7 = ($IFiles$idx$val|0)==(0);
 if ($7) {
  $$1 = 30033;
  return ($$1|0);
 }
 $IFiles$idx13$val = HEAP32[(45904)>>2]|0;
 $8 = HEAP32[$IFiles$idx13$val>>2]|0;
 $9 = ((($8)) + 20|0);
 $$1 = $9;
 return ($$1|0);
}
function _GetCurrentLine() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $AFiles$idx$val = 0, $AFiles$idx7$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $AFiles$idx$val = HEAP32[11477]|0;
 $0 = ($AFiles$idx$val|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (($AFiles$idx$val) + -1)|0;
 $AFiles$idx7$val = HEAP32[(45916)>>2]|0;
 $2 = (($AFiles$idx7$val) + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $$0 = $4;
 return ($$0|0);
}
function _CreateDependencies() {
 var $0 = 0, $1 = 0, $DepName$idx$val = 0, $DepName$idx2$val = 0, $FullDepName$idx$val = 0, $FullDepName$idx1$val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $DepName$idx2$val = HEAP32[(45968)>>2]|0;
 $0 = ($DepName$idx2$val|0)==(0);
 if (!($0)) {
  $DepName$idx$val = HEAP32[11491]|0;
  _CreateDepFile($DepName$idx$val,5);
 }
 $FullDepName$idx1$val = HEAP32[(45984)>>2]|0;
 $1 = ($FullDepName$idx1$val|0)==(0);
 if ($1) {
  return;
 }
 $FullDepName$idx$val = HEAP32[11495]|0;
 _CreateDepFile($FullDepName$idx$val,7);
 return;
}
function _CreateDepFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i22 = 0, $$0$i13 = 0, $$01518$i1830 = 0, $$01518$i29 = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i$i23 = 0, $$pre$i14 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $DepTarget$idx$val = 0, $IFiles$idx$val$i = 0, $IFiles$idx$val$i16 = 0, $IFiles$idx16$val$pre$i = 0, $IFiles$idx16$val$pre$i25 = 0, $IFiles$idx17$val$i = 0, $IFiles$idx17$val$i20 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (_fopen($0,30054)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___errno_location()|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_strerror($5)|0);
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $6;
  _Fatal(30056,$vararg_buffer);
  // unreachable;
 }
 $7 = HEAP32[(46000)>>2]|0;
 $8 = ($7|0)==(0);
 L4: do {
  if ($8) {
   $9 = HEAP32[11250]|0;
   $$0$i = $9;
   while(1) {
    $10 = HEAP8[$$0$i>>0]|0;
    switch ($10<<24>>24) {
    case 0:  {
     break L4;
     break;
    }
    case 32:  {
     (_fputc(92,$2)|0);
     $$pre$i = HEAP8[$$0$i>>0]|0;
     $12 = $$pre$i;
     break;
    }
    default: {
     $12 = $10;
    }
    }
    $11 = $12 << 24 >> 24;
    (_fputc($11,$2)|0);
    $13 = ((($$0$i)) + 1|0);
    $$0$i = $13;
   }
  } else {
   $DepTarget$idx$val = HEAP32[11499]|0;
   $$0$i13 = $DepTarget$idx$val;
   while(1) {
    $14 = HEAP8[$$0$i13>>0]|0;
    switch ($14<<24>>24) {
    case 0:  {
     break L4;
     break;
    }
    case 32:  {
     (_fputc(92,$2)|0);
     $$pre$i14 = HEAP8[$$0$i13>>0]|0;
     $16 = $$pre$i14;
     break;
    }
    default: {
     $16 = $14;
    }
    }
    $15 = $16 << 24 >> 24;
    (_fputc($15,$2)|0);
    $17 = ((($$0$i13)) + 1|0);
    $$0$i13 = $17;
   }
  }
 } while(0);
 (_fwrite(30093,2,1,$2)|0);
 $IFiles$idx$val$i16 = HEAP32[11474]|0;
 $18 = ($IFiles$idx$val$i16|0)==(0);
 L18: do {
  if (!($18)) {
   $$01518$i1830 = 0;
   while(1) {
    $IFiles$idx17$val$i20 = HEAP32[(45904)>>2]|0;
    $21 = (($IFiles$idx17$val$i20) + ($$01518$i1830<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($22)) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $24 & $1;
    $26 = ($25|0)==(0);
    L21: do {
     if (!($26)) {
      $27 = ($$01518$i1830|0)==(0);
      if (!($27)) {
       (_fputc(32,$2)|0);
      }
      $28 = ((($22)) + 20|0);
      $$0$i$i22 = $28;
      while(1) {
       $29 = HEAP8[$$0$i$i22>>0]|0;
       switch ($29<<24>>24) {
       case 0:  {
        break L21;
        break;
       }
       case 32:  {
        (_fputc(92,$2)|0);
        $$pre$i$i23 = HEAP8[$$0$i$i22>>0]|0;
        $31 = $$pre$i$i23;
        break;
       }
       default: {
        $31 = $29;
       }
       }
       $30 = $31 << 24 >> 24;
       (_fputc($30,$2)|0);
       $32 = ((($$0$i$i22)) + 1|0);
       $$0$i$i22 = $32;
      }
     }
    } while(0);
    $33 = (($$01518$i1830) + 1)|0;
    $34 = ($33>>>0)<($IFiles$idx$val$i16>>>0);
    if (!($34)) {
     break L18;
    }
    $IFiles$idx16$val$pre$i25 = HEAP32[11474]|0;
    $35 = ($IFiles$idx16$val$pre$i25>>>0)>($33>>>0);
    if ($35) {
     $$01518$i1830 = $33;
    } else {
     break;
    }
   }
   $19 = HEAP32[3332]|0;
   $20 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$19 & 1]($20,40922,40950,129);
   // unreachable;
  }
 } while(0);
 (_fwrite(33696,2,1,$2)|0);
 $IFiles$idx$val$i = HEAP32[11474]|0;
 $36 = ($IFiles$idx$val$i|0)==(0);
 L35: do {
  if (!($36)) {
   $$01518$i29 = 0;
   while(1) {
    $IFiles$idx17$val$i = HEAP32[(45904)>>2]|0;
    $39 = (($IFiles$idx17$val$i) + ($$01518$i29<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $42 & $1;
    $44 = ($43|0)==(0);
    L38: do {
     if (!($44)) {
      $45 = ($$01518$i29|0)==(0);
      if (!($45)) {
       (_fputc(32,$2)|0);
      }
      $46 = ((($40)) + 20|0);
      $$0$i$i = $46;
      while(1) {
       $47 = HEAP8[$$0$i$i>>0]|0;
       switch ($47<<24>>24) {
       case 0:  {
        break L38;
        break;
       }
       case 32:  {
        (_fputc(92,$2)|0);
        $$pre$i$i = HEAP8[$$0$i$i>>0]|0;
        $49 = $$pre$i$i;
        break;
       }
       default: {
        $49 = $47;
       }
       }
       $48 = $49 << 24 >> 24;
       (_fputc($48,$2)|0);
       $50 = ((($$0$i$i)) + 1|0);
       $$0$i$i = $50;
      }
     }
    } while(0);
    $51 = (($$01518$i29) + 1)|0;
    $52 = ($51>>>0)<($IFiles$idx$val$i>>>0);
    if (!($52)) {
     break L35;
    }
    $IFiles$idx16$val$pre$i = HEAP32[11474]|0;
    $53 = ($IFiles$idx16$val$pre$i>>>0)>($51>>>0);
    if ($53) {
     $$01518$i29 = $51;
    } else {
     break;
    }
   }
   $37 = HEAP32[3332]|0;
   $38 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$37 & 1]($38,40922,40950,129);
   // unreachable;
  }
 } while(0);
 (_fwrite(30096,3,1,$2)|0);
 $54 = (_fclose($2)|0);
 $55 = ($54|0)==(0);
 if ($55) {
  STACKTOP = sp;return;
 } else {
  (_remove($0)|0);
  _Fatal(30100,$vararg_buffer2);
  // unreachable;
 }
}
function _AddLoop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_xmalloc(16)|0);
 $3 = HEAP32[11252]|0;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($2)) + 8|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($2)) + 12|0);
 HEAP32[$6>>2] = $1;
 $7 = HEAP32[11483]|0;
 HEAP32[$2>>2] = $7;
 HEAP32[11483] = $2;
 return ($2|0);
}
function _CurrentLoop() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11483]|0;
 return ($0|0);
}
function _DelLoop() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11483]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = HEAP32[3332]|0;
  $3 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$2 & 1]($3,33432,30144,97);
  // unreachable;
 } else {
  $4 = HEAP32[$0>>2]|0;
  HEAP32[11483] = $4;
  _xfree($0);
  return;
 }
}
function _IsSym($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$04$i = 0, $$1$i = 0, $$15$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[46896]|0;
 $2 = (_IsIdent($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $$0$i = 0;$$04$i = $0;
 }
 while(1) {
  $4 = ($$0$i>>>0)<(64);
  if ($4) {
   $5 = (($$0$i) + 1)|0;
   $6 = ((($$04$i)) + 1|0);
   $7 = HEAP8[46896]|0;
   HEAP8[$$04$i>>0] = $7;
   $$1$i = $5;$$15$i = $6;
  } else {
   $$1$i = $$0$i;$$15$i = $$04$i;
  }
  _NextChar();
  $8 = HEAP8[46896]|0;
  $9 = (_IsIdent($8)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$0$i = $$1$i;$$04$i = $$15$i;
   continue;
  }
  $11 = HEAP8[46896]|0;
  $12 = (_IsDigit($11)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   break;
  } else {
   $$0$i = $$1$i;$$04$i = $$15$i;
  }
 }
 HEAP8[$$15$i>>0] = 0;
 $$0 = 1;
 return ($$0|0);
}
function _NextToken() {
 var $$$0$i = 0, $$$169$i = 0, $$$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$ph$i = 0, $$04$i$i = 0, $$062$lcssa84$i = 0, $$062$lcssa85$i = 0, $$06274$i = 0, $$06473$i = 0, $$065$ph$i = 0, $$066$lcssa$i = 0, $$06679$i = 0, $$067$i = 0, $$068$i = 0, $$1$i$i = 0, $$15$i$i = 0, $$163$i = 0, $$169$i = 0;
 var $$3$i = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $$lcssa$i = 0, $$pre = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0.0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond4 = 0;
 var $storemerge$i = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc71$i = 0, $trunc71$i$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $$byval_copy20 = sp + 112|0;
 $$byval_copy19 = sp + 104|0;
 $vararg_buffer11 = sp + 96|0;
 $vararg_buffer9 = sp + 88|0;
 $vararg_buffer7 = sp + 80|0;
 $vararg_buffer5 = sp + 72|0;
 $vararg_buffer3 = sp + 64|0;
 $vararg_buffer1 = sp + 56|0;
 $vararg_buffer = sp + 48|0;
 $0 = sp + 120|0;
 $1 = sp + 40|0;
 $2 = sp + 32|0;
 $3 = sp + 24|0;
 $4 = sp + 16|0;
 $5 = sp + 8|0;
 $6 = sp;
 $7 = sp + 136|0;
 L1: while(1) {
  $8 = HEAP8[46896]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   while(1) {
    $10 = (_NextLine()|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$0$i = 1;
     break L1;
    }
    _Preprocess();
    $12 = HEAP8[46896]|0;
    $13 = ($12<<24>>24)==(0);
    if (!($13)) {
     $$lcssa$i = $12;
     break;
    }
   }
  } else {
   $$lcssa$i = $8;
  }
  $14 = (_IsSpace($$lcssa$i)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   $$0$i = 0;
   break;
  }
  _NextChar();
 }
 $16 = HEAP32[(44712)>>2]|0;
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  _ReleaseLineInfo($16);
 }
 dest=44624; src=44720; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $18 = HEAP32[(44712)>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = (_GetCurLineInfo()|0);
  $21 = (_UseLineInfo($20)|0);
  HEAP32[(44712)>>2] = $21;
 }
 $22 = (_GetCurLineInfo()|0);
 $23 = (_UseLineInfo($22)|0);
 HEAP32[(44808)>>2] = $23;
 if ($$0$i) {
  HEAP32[11180] = 1;
  STACKTOP = sp;return;
 }
 $24 = HEAP8[46896]|0;
 $25 = (_IsDigit($24)|0);
 $26 = ($25|0)==(0);
 do {
  if ($26) {
   $27 = HEAP8[46896]|0;
   $28 = ($27<<24>>24)==(46);
   if ($28) {
    $29 = HEAP8[46897]|0;
    $30 = (_IsDigit($29)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $$pre = HEAP8[46896]|0;
    $162 = $$pre;
   } else {
    $162 = $27;
   }
   $163 = ($162<<24>>24)==(76);
   $164 = HEAP8[46897]|0;
   $165 = ($164<<24>>24)==(34);
   $or$cond4 = $163 & $165;
   if ($or$cond4) {
    _StringConst();
    STACKTOP = sp;return;
   }
   $166 = (_IsIdent($162)|0);
   $167 = ($166|0)==(0);
   if (!($167)) {
    $$0$i$i = 0;$$04$i$i = $7;
    while(1) {
     $168 = ($$0$i$i>>>0)<(64);
     if ($168) {
      $169 = ((($$04$i$i)) + 1|0);
      $170 = (($$0$i$i) + 1)|0;
      $171 = HEAP8[46896]|0;
      HEAP8[$$04$i$i>>0] = $171;
      $$1$i$i = $170;$$15$i$i = $169;
     } else {
      $$1$i$i = $$0$i$i;$$15$i$i = $$04$i$i;
     }
     _NextChar();
     $172 = HEAP8[46896]|0;
     $173 = (_IsIdent($172)|0);
     $174 = ($173|0)==(0);
     if (!($174)) {
      $$0$i$i = $$1$i$i;$$04$i$i = $$15$i$i;
      continue;
     }
     $175 = HEAP8[46896]|0;
     $176 = (_IsDigit($175)|0);
     $177 = ($176|0)==(0);
     if ($177) {
      break;
     } else {
      $$0$i$i = $$1$i$i;$$04$i$i = $$15$i$i;
     }
    }
    HEAP8[$$15$i$i>>0] = 0;
    $178 = (_bsearch($7,7244,52,8,6)|0);
    $179 = ($178|0)==(0|0);
    if ($179) {
     label = 88;
    } else {
     $180 = ((($178)) + 5|0);
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = (_IS_Get(8668)|0);
     $184 = 1 << $183;
     $185 = $184 & $182;
     $186 = ($185|0)==(0);
     if ($186) {
      label = 88;
     } else {
      $187 = ((($178)) + 4|0);
      $188 = HEAP8[$187>>0]|0;
      $189 = $188&255;
      HEAP32[11180] = $189;
      $190 = ($188<<24>>24)==(40);
      if (!($190)) {
       STACKTOP = sp;return;
      }
     }
    }
    if ((label|0) == 88) {
     HEAP32[11180] = 40;
    }
    $191 = HEAP8[$7>>0]|0;
    $192 = ($191<<24>>24)==(95);
    if ($192) {
     $193 = ((($7)) + 1|0);
     $194 = HEAP8[$193>>0]|0;
     $195 = ($194<<24>>24)==(95);
     if ($195) {
      $196 = ((($7)) + 2|0);
      $197 = (_strcmp($196,30304)|0);
      $198 = ($197|0)==(0);
      if ($198) {
       $199 = (_GetCurrentFile()|0);
       $200 = (_AddLiteral($199)|0);
       HEAP32[(44736)>>2] = $200;
       HEAP32[11180] = 86;
       STACKTOP = sp;return;
      }
      $201 = (_strcmp($196,30311)|0);
      $202 = ($201|0)==(0);
      if ($202) {
       HEAP32[11180] = 87;
       $203 = (_GetCurrentLine()|0);
       HEAP32[(44724)>>2] = $203;
       HEAP32[(44812)>>2] = 10940;
       STACKTOP = sp;return;
      }
      $204 = (_strcmp($196,30318)|0);
      $205 = ($204|0)==(0);
      $206 = HEAP32[11507]|0;
      $207 = ($206|0)!=(0|0);
      $or$cond = $205 & $207;
      if ($or$cond) {
       $208 = (_F_GetFuncName($206)|0);
       $209 = (_AddLiteral($208)|0);
       HEAP32[(44736)>>2] = $209;
       HEAP32[11180] = 86;
       STACKTOP = sp;return;
      }
     }
    }
    (_strcpy((44740),$7)|0);
    HEAP32[11180] = 40;
    STACKTOP = sp;return;
   }
   $210 = HEAP8[46896]|0;
   $211 = $210 << 24 >> 24;
   do {
    switch ($211|0) {
    case 33:  {
     _NextChar();
     $212 = HEAP8[46896]|0;
     $213 = ($212<<24>>24)==(61);
     if ($213) {
      HEAP32[11180] = 64;
      _NextChar();
      STACKTOP = sp;return;
     } else {
      HEAP32[11180] = 65;
      STACKTOP = sp;return;
     }
     break;
    }
    case 34:  {
     _StringConst();
     STACKTOP = sp;return;
     break;
    }
    case 37:  {
     _NextChar();
     $214 = HEAP8[46896]|0;
     $215 = ($214<<24>>24)==(61);
     if ($215) {
      HEAP32[11180] = 81;
      _NextChar();
      STACKTOP = sp;return;
     } else {
      HEAP32[11180] = 82;
      STACKTOP = sp;return;
     }
     break;
    }
    case 38:  {
     _NextChar();
     $216 = HEAP8[46896]|0;
     $217 = $216 << 24 >> 24;
     switch ($217|0) {
     case 38:  {
      HEAP32[11180] = 61;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     case 61:  {
      HEAP32[11180] = 62;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     default: {
      HEAP32[11180] = 63;
      STACKTOP = sp;return;
     }
     }
     break;
    }
    case 39:  {
     _NextChar();
     $218 = (_ParseChar()|0);
     $219 = HEAP8[46896]|0;
     $220 = ($219<<24>>24)==(39);
     if ($220) {
      _NextChar();
     } else {
      _Error(39530,$vararg_buffer7);
     }
     HEAP32[11180] = 88;
     $221 = (_TgtTranslateChar($218)|0);
     $222 = (_SignExtendChar($221)|0);
     HEAP32[(44724)>>2] = $222;
     HEAP32[(44812)>>2] = 10940;
     STACKTOP = sp;return;
     break;
    }
    case 40:  {
     HEAP32[11180] = 43;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 41:  {
     HEAP32[11180] = 85;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 42:  {
     _NextChar();
     $223 = HEAP8[46896]|0;
     $224 = ($223<<24>>24)==(61);
     if ($224) {
      HEAP32[11180] = 57;
      _NextChar();
      STACKTOP = sp;return;
     } else {
      HEAP32[11180] = 58;
      STACKTOP = sp;return;
     }
     break;
    }
    case 43:  {
     _NextChar();
     $225 = HEAP8[46896]|0;
     $226 = $225 << 24 >> 24;
     switch ($226|0) {
     case 43:  {
      HEAP32[11180] = 49;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     case 61:  {
      HEAP32[11180] = 50;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     default: {
      HEAP32[11180] = 51;
      STACKTOP = sp;return;
     }
     }
     break;
    }
    case 44:  {
     HEAP32[11180] = 52;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 45:  {
     _NextChar();
     $227 = HEAP8[46896]|0;
     $228 = $227 << 24 >> 24;
     switch ($228|0) {
     case 45:  {
      HEAP32[11180] = 53;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     case 61:  {
      HEAP32[11180] = 54;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     case 62:  {
      HEAP32[11180] = 45;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     default: {
      HEAP32[11180] = 56;
      STACKTOP = sp;return;
     }
     }
     break;
    }
    case 46:  {
     _NextChar();
     $229 = HEAP8[46896]|0;
     $230 = ($229<<24>>24)==(46);
     if (!($230)) {
      HEAP32[11180] = 44;
      STACKTOP = sp;return;
     }
     _NextChar();
     $231 = HEAP8[46896]|0;
     $232 = ($231<<24>>24)==(46);
     if ($232) {
      HEAP32[11180] = 38;
      _NextChar();
      STACKTOP = sp;return;
     } else {
      $233 = $231&255;
      HEAP32[$vararg_buffer9>>2] = $233;
      _Error(30325,$vararg_buffer9);
      _NextChar();
      STACKTOP = sp;return;
     }
     break;
    }
    case 47:  {
     _NextChar();
     $234 = HEAP8[46896]|0;
     $235 = ($234<<24>>24)==(61);
     if ($235) {
      HEAP32[11180] = 59;
      _NextChar();
      STACKTOP = sp;return;
     } else {
      HEAP32[11180] = 60;
      STACKTOP = sp;return;
     }
     break;
    }
    case 58:  {
     HEAP32[11180] = 84;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 59:  {
     HEAP32[11180] = 41;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 60:  {
     _NextChar();
     $236 = HEAP8[46896]|0;
     $237 = $236 << 24 >> 24;
     switch ($237|0) {
     case 61:  {
      HEAP32[11180] = 71;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     case 60:  {
      _NextChar();
      $238 = HEAP8[46896]|0;
      $239 = ($238<<24>>24)==(61);
      if ($239) {
       HEAP32[11180] = 75;
       _NextChar();
       STACKTOP = sp;return;
      } else {
       HEAP32[11180] = 76;
       STACKTOP = sp;return;
      }
      break;
     }
     default: {
      HEAP32[11180] = 72;
      STACKTOP = sp;return;
     }
     }
     break;
    }
    case 61:  {
     _NextChar();
     $240 = HEAP8[46896]|0;
     $241 = ($240<<24>>24)==(61);
     if ($241) {
      HEAP32[11180] = 69;
      _NextChar();
      STACKTOP = sp;return;
     } else {
      HEAP32[11180] = 70;
      STACKTOP = sp;return;
     }
     break;
    }
    case 62:  {
     _NextChar();
     $242 = HEAP8[46896]|0;
     $243 = $242 << 24 >> 24;
     switch ($243|0) {
     case 61:  {
      HEAP32[11180] = 73;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     case 62:  {
      _NextChar();
      $244 = HEAP8[46896]|0;
      $245 = ($244<<24>>24)==(61);
      if ($245) {
       HEAP32[11180] = 77;
       _NextChar();
       STACKTOP = sp;return;
      } else {
       HEAP32[11180] = 78;
       STACKTOP = sp;return;
      }
      break;
     }
     default: {
      HEAP32[11180] = 74;
      STACKTOP = sp;return;
     }
     }
     break;
    }
    case 63:  {
     HEAP32[11180] = 83;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 91:  {
     HEAP32[11180] = 42;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 93:  {
     HEAP32[11180] = 47;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 94:  {
     _NextChar();
     $246 = HEAP8[46896]|0;
     $247 = ($246<<24>>24)==(61);
     if ($247) {
      HEAP32[11180] = 79;
      _NextChar();
      STACKTOP = sp;return;
     } else {
      HEAP32[11180] = 80;
      STACKTOP = sp;return;
     }
     break;
    }
    case 123:  {
     HEAP32[11180] = 46;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 124:  {
     _NextChar();
     $248 = HEAP8[46896]|0;
     $249 = $248 << 24 >> 24;
     switch ($249|0) {
     case 124:  {
      HEAP32[11180] = 66;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     case 61:  {
      HEAP32[11180] = 67;
      _NextChar();
      STACKTOP = sp;return;
      break;
     }
     default: {
      HEAP32[11180] = 68;
      STACKTOP = sp;return;
     }
     }
     break;
    }
    case 125:  {
     HEAP32[11180] = 55;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    case 126:  {
     HEAP32[11180] = 48;
     _NextChar();
     STACKTOP = sp;return;
     break;
    }
    default: {
     $250 = $210&255;
     HEAP32[$vararg_buffer11>>2] = $250;
     _Error(30325,$vararg_buffer11);
     _NextChar();
     STACKTOP = sp;return;
    }
    }
   } while(0);
  }
 } while(0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 $32 = HEAP8[46896]|0;
 $33 = ($32<<24>>24)==(48);
 if ($33) {
  _NextChar();
  $34 = HEAP8[46896]|0;
  $35 = $34 << 24 >> 24;
  $36 = (_toupper($35)|0);
  $37 = ($36|0)==(88);
  if ($37) {
   _NextChar();
   $$pre$i = HEAP8[46896]|0;
   $$0$ph$i = 16;$$065$ph$i = 16;$38 = $$pre$i;
  } else {
   $$0$ph$i = 10;$$065$ph$i = 8;$38 = $34;
  }
 } else {
  $$0$ph$i = 10;$$065$ph$i = 10;$38 = $32;
 }
 $39 = (_IsXDigit($38)|0);
 $40 = ($39|0)==(0);
 L203: do {
  if (!($40)) {
   while(1) {
    $41 = HEAP8[46896]|0;
    $42 = $41 << 24 >> 24;
    $43 = (_HexVal($42)|0);
    $44 = ($43>>>0)<($$0$ph$i>>>0);
    if (!($44)) {
     break L203;
    }
    $45 = HEAP8[46896]|0;
    $46 = $45 << 24 >> 24;
    _SB_AppendChar($0,$46);
    _NextChar();
    $47 = HEAP8[46896]|0;
    $48 = (_IsXDigit($47)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     break;
    }
   }
  }
 } while(0);
 _SB_Terminate($0);
 $50 = HEAP8[46896]|0;
 $51 = $50 << 24 >> 24;
 $52 = ($50<<24>>24)==(46);
 L208: do {
  if ($52) {
   $60 = 1;
  } else {
   $trunc$i = $$0$ph$i&255;
   $trunc$i$clear = $trunc$i & 31;
   switch ($trunc$i$clear<<24>>24) {
   case 10:  {
    $53 = (_toupper($51)|0);
    $54 = ($53|0)==(69);
    $60 = $54;
    break L208;
    break;
   }
   case 16:  {
    break;
   }
   default: {
    $60 = 0;
    break L208;
   }
   }
   $55 = (_toupper($51)|0);
   $56 = ($55|0)==(80);
   if ($56) {
    $57 = (_IS_Get(8668)|0);
    $58 = ($57|0)>(0);
    $60 = $58;
   } else {
    $60 = 0;
   }
  }
 } while(0);
 $59 = $60 ^ 1;
 $61 = ($$065$ph$i|0)==(8);
 $or$cond$i = $61 & $59;
 $$$0$i = $or$cond$i ? 8 : $$0$ph$i;
 $62 = ((($0)) + 8|0);
 HEAP32[$62>>2] = 0;
 $63 = ((($0)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)==(0);
 L215: do {
  if ($65) {
   $$066$lcssa$i = 0;
  } else {
   $$06679$i = 0;$67 = 0;
   while(1) {
    $66 = (($67) + 1)|0;
    HEAP32[$62>>2] = $66;
    $68 = HEAP32[$0>>2]|0;
    $69 = (($68) + ($67)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = ($70<<24>>24)==(0);
    if ($71) {
     $$066$lcssa$i = $$06679$i;
     break L215;
    }
    $72 = $70 << 24 >> 24;
    $73 = (_HexVal($72)|0);
    $74 = ($73>>>0)<($$$0$i>>>0);
    if (!($74)) {
     _Error(30156,$vararg_buffer);
    }
    $75 = Math_imul($$06679$i, $$$0$i)|0;
    $76 = (($73) + ($75))|0;
    $77 = HEAP32[$62>>2]|0;
    $78 = HEAP32[$63>>2]|0;
    $79 = ($77>>>0)<($78>>>0);
    if ($79) {
     $$06679$i = $76;$67 = $77;
    } else {
     $$066$lcssa$i = $76;
     break;
    }
   }
  }
 } while(0);
 _SB_Done($0);
 if ($60) {
  $108 = (+_FP_D_FromInt($$066$lcssa$i));
  HEAPF64[$1>>3] = $108;
  $109 = HEAP8[46896]|0;
  $110 = ($109<<24>>24)==(46);
  if ($110) {
   _NextChar();
   $111 = (+_FP_D_Make(1.0));
   HEAPF64[$2>>3] = $111;
   $112 = HEAP8[46896]|0;
   $113 = (_IsXDigit($112)|0);
   $114 = ($113|0)==(0);
   L228: do {
    if (!($114)) {
     while(1) {
      $115 = HEAP8[46896]|0;
      $116 = $115 << 24 >> 24;
      $117 = (_HexVal($116)|0);
      $118 = ($117>>>0)<($$$0$i>>>0);
      if (!($118)) {
       break L228;
      }
      $119 = Math_imul($117, $$$0$i)|0;
      $120 = (+_FP_D_FromInt($119));
      HEAPF64[$4>>3] = $120;
      ;HEAP32[$$byval_copy19>>2]=HEAP32[$4>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$4+4>>2]|0;
      ;HEAP32[$$byval_copy20>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$2+4>>2]|0;
      $121 = (+_FP_D_Div($$byval_copy19,$$byval_copy20));
      HEAPF64[$3>>3] = $121;
      ;HEAP32[$$byval_copy19>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$1+4>>2]|0;
      ;HEAP32[$$byval_copy20>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$3+4>>2]|0;
      $122 = (+_FP_D_Add($$byval_copy19,$$byval_copy20));
      HEAPF64[$1>>3] = $122;
      $123 = (+_FP_D_FromInt($117));
      HEAPF64[$5>>3] = $123;
      ;HEAP32[$$byval_copy19>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$2+4>>2]|0;
      ;HEAP32[$$byval_copy20>>2]=HEAP32[$5>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$5+4>>2]|0;
      $124 = (+_FP_D_Mul($$byval_copy19,$$byval_copy20));
      HEAPF64[$2>>3] = $124;
      _NextChar();
      $125 = HEAP8[46896]|0;
      $126 = (_IsXDigit($125)|0);
      $127 = ($126|0)==(0);
      if ($127) {
       break;
      }
     }
    }
   } while(0);
  }
  $trunc71$i = $$$0$i&255;
  $trunc71$i$clear = $trunc71$i & 31;
  switch ($trunc71$i$clear<<24>>24) {
  case 16:  {
   $128 = HEAP8[46896]|0;
   $129 = $128 << 24 >> 24;
   $130 = (_toupper($129)|0);
   $131 = ($130|0)==(70);
   if ($131) {
    label = 62;
   }
   break;
  }
  case 10:  {
   $132 = HEAP8[46896]|0;
   $133 = $132 << 24 >> 24;
   $134 = (_toupper($133)|0);
   $135 = ($134|0)==(69);
   if ($135) {
    label = 62;
   }
   break;
  }
  default: {
  }
  }
  if ((label|0) == 62) {
   _NextChar();
   $136 = HEAP8[46896]|0;
   switch ($136<<24>>24) {
   case 45:  {
    _NextChar();
    break;
   }
   case 43:  {
    _NextChar();
    break;
   }
   default: {
   }
   }
   $137 = HEAP8[46896]|0;
   $138 = (_IsDigit($137)|0);
   $139 = ($138|0)==(0);
   if ($139) {
    $$062$lcssa85$i = 0;
    label = 70;
   } else {
    $$06274$i = 0;$$06473$i = 0;
    while(1) {
     $140 = (($$06473$i) + 1)|0;
     $141 = ($140>>>0)<(4);
     if ($141) {
      $142 = ($$06274$i*10)|0;
      $143 = HEAP8[46896]|0;
      $144 = $143 << 24 >> 24;
      $145 = (_HexVal($144)|0);
      $146 = (($145) + ($142))|0;
      $$163$i = $146;
     } else {
      $$163$i = $$06274$i;
     }
     _NextChar();
     $147 = HEAP8[46896]|0;
     $148 = (_IsDigit($147)|0);
     $149 = ($148|0)==(0);
     if ($149) {
      break;
     } else {
      $$06274$i = $$163$i;$$06473$i = $140;
     }
    }
    $150 = ($140|0)==(0);
    if ($150) {
     $$062$lcssa85$i = $$163$i;
     label = 70;
    } else {
     $151 = ($140>>>0)>(3);
     if ($151) {
      _Warning(30264,$vararg_buffer5);
      $$062$lcssa84$i = $$163$i;
     } else {
      $$062$lcssa84$i = $$163$i;
     }
    }
   }
   if ((label|0) == 70) {
    _Error(30223,$vararg_buffer3);
    $$062$lcssa84$i = $$062$lcssa85$i;
   }
   $152 = ($$062$lcssa84$i|0)==(0);
   if (!($152)) {
    $153 = (+($$062$lcssa84$i>>>0));
    $154 = (+Math_pow(10.0,(+$153)));
    $155 = (+_FP_D_Make($154));
    HEAPF64[$6>>3] = $155;
    ;HEAP32[$$byval_copy19>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy19+4>>2]=HEAP32[$1+4>>2]|0;
    ;HEAP32[$$byval_copy20>>2]=HEAP32[$6>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$6+4>>2]|0;
    $156 = (+_FP_D_Mul($$byval_copy19,$$byval_copy20));
    HEAPF64[$1>>3] = $156;
   }
  }
  $157 = HEAP8[46896]|0;
  $158 = $157 << 24 >> 24;
  $159 = (_toupper($158)|0);
  $160 = ($159|0)==(70);
  if ($160) {
   _NextChar();
   $storemerge$i = 11036;
  } else {
   $storemerge$i = 11052;
  }
  HEAP32[(44812)>>2] = $storemerge$i;
  $161 = +HEAPF64[$1>>3];
  HEAPF64[(44728)>>3] = $161;
  HEAP32[11180] = 89;
 } else {
  $80 = HEAP8[46896]|0;
  $81 = $80 << 24 >> 24;
  $82 = (_toupper($81)|0);
  switch ($82|0) {
  case 85:  {
   _NextChar();
   $83 = HEAP8[46896]|0;
   $84 = $83 << 24 >> 24;
   $85 = (_toupper($84)|0);
   $86 = ($85|0)==(76);
   if ($86) {
    _NextChar();
    $$067$i = 1;$$068$i = 8;
   } else {
    $$067$i = 1;$$068$i = 10;
   }
   break;
  }
  case 76:  {
   _NextChar();
   $87 = HEAP8[46896]|0;
   $88 = $87 << 24 >> 24;
   $89 = (_toupper($88)|0);
   $90 = ($89|0)==(85);
   if ($90) {
    _NextChar();
    $$067$i = 1;$$068$i = 8;
   } else {
    $$067$i = 1;$$068$i = 12;
   }
   break;
  }
  default: {
   $91 = ($$065$ph$i|0)==(10);
   $$$i = $91 ? 13 : 15;
   $$067$i = 0;$$068$i = $$$i;
  }
  }
  $92 = ($$066$lcssa$i>>>0)>(32767);
  if ($92) {
   $93 = $$068$i & 14;
   $94 = ($$066$lcssa$i>>>0)<(65536);
   if ($94) {
    $95 = $$068$i & 2;
    $96 = $95 | $$067$i;
    $97 = ($96|0)==(0);
    if ($97) {
     _Warning(30206,$vararg_buffer1);
     $$169$i = $93;
    } else {
     $$169$i = $93;
    }
   } else {
    $$169$i = $93;
   }
  } else {
   $$169$i = $$068$i;
  }
  $98 = ($$066$lcssa$i>>>0)>(65535);
  $99 = $$169$i & -3;
  $$$169$i = $98 ? $99 : $$169$i;
  $100 = ($$066$lcssa$i|0)<(0);
  $101 = $$$169$i & -5;
  $$3$i = $100 ? $101 : $$$169$i;
  $102 = $$3$i & 1;
  $103 = ($102|0)==(0);
  do {
   if ($103) {
    $104 = $$3$i & 2;
    $105 = ($104|0)==(0);
    if (!($105)) {
     HEAP32[(44812)>>2] = 10956;
     break;
    }
    $106 = $$3$i & 4;
    $107 = ($106|0)==(0);
    if ($107) {
     HEAP32[(44812)>>2] = 10988;
     break;
    } else {
     HEAP32[(44812)>>2] = 10972;
     break;
    }
   } else {
    HEAP32[(44812)>>2] = 10940;
   }
  } while(0);
  HEAP32[(44724)>>2] = $$066$lcssa$i;
  HEAP32[11180] = 87;
 }
 STACKTOP = sp;return;
}
function _StringConst() {
 var $$lcssa$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 HEAP32[11180] = 86;
 L1: while(1) {
  $1 = HEAP8[46896]|0;
  $2 = ($1<<24>>24)==(76);
  $3 = HEAP8[46897]|0;
  $4 = ($3<<24>>24)==(34);
  $or$cond = $2 & $4;
  if ($or$cond) {
   HEAP32[11180] = 90;
   _NextChar();
   _NextChar();
  } else {
   $5 = ($1<<24>>24)==(34);
   if (!($5)) {
    break;
   }
   _NextChar();
  }
  L7: while(1) {
   $6 = HEAP8[46896]|0;
   switch ($6<<24>>24) {
   case 34:  {
    break L7;
    break;
   }
   case 0:  {
    label = 7;
    break L7;
    break;
   }
   default: {
   }
   }
   $7 = (_ParseChar()|0);
   _SB_AppendChar($0,$7);
  }
  if ((label|0) == 7) {
   label = 0;
   _Error(30709,$vararg_buffer);
  }
  _NextChar();
  while(1) {
   $8 = HEAP8[46896]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    while(1) {
     $10 = (_NextLine()|0);
     $11 = ($10|0)==(0);
     if ($11) {
      continue L1;
     }
     _Preprocess();
     $12 = HEAP8[46896]|0;
     $13 = ($12<<24>>24)==(0);
     if (!($13)) {
      $$lcssa$i = $12;
      break;
     }
    }
   } else {
    $$lcssa$i = $8;
   }
   $14 = (_IsSpace($$lcssa$i)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    continue L1;
   }
   _NextChar();
  }
 }
 _SB_AppendChar($0,0);
 $16 = (_AddLiteralStr($0)|0);
 HEAP32[(44736)>>2] = $16;
 _SB_Done($0);
 STACKTOP = sp;return;
}
function _CmpKey_1045($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($0,$2)|0);
 return ($3|0);
}
function _ParseChar() {
 var $$01219 = 0, $$01418 = 0, $$022 = 0, $$1 = 0, $$113 = 0, $$115 = 0, $$2$lcssa = 0, $$221 = 0, $$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = HEAP8[46896]|0;
 $1 = ($0<<24>>24)==(92);
 L1: do {
  if ($1) {
   _NextChar();
   $2 = HEAP8[46896]|0;
   $3 = $2 << 24 >> 24;
   do {
    switch ($3|0) {
    case 92: case 39: case 34: case 63:  {
     $$3 = $3;
     break L1;
     break;
    }
    case 97:  {
     $$3 = 7;
     break L1;
     break;
    }
    case 98:  {
     $$3 = 8;
     break L1;
     break;
    }
    case 102:  {
     $$3 = 12;
     break L1;
     break;
    }
    case 114:  {
     $$3 = 13;
     break L1;
     break;
    }
    case 110:  {
     $$3 = 10;
     break L1;
     break;
    }
    case 116:  {
     $$3 = 9;
     break L1;
     break;
    }
    case 118:  {
     $$3 = 11;
     break L1;
     break;
    }
    case 88: case 120:  {
     $4 = HEAP8[46897]|0;
     $5 = (_IsXDigit($4)|0);
     $6 = ($5|0)==(0);
     if ($6) {
      _Error(30364,$vararg_buffer);
      $$3 = 32;
      break L1;
     }
     $7 = HEAP8[46897]|0;
     $8 = (_IsXDigit($7)|0);
     $9 = ($8|0)==(0);
     if ($9) {
      $$3 = 0;
      break L1;
     } else {
      $$01219 = 0;$$01418 = 0;
     }
     while(1) {
      $10 = $$01418 << 4;
      $11 = ($10|0)>(255);
      if ($11) {
       $12 = ($$01219|0)==(0);
       if ($12) {
        _Error(30401,$vararg_buffer1);
        $$113 = 1;$$115 = $$01418;
       } else {
        $$113 = $$01219;$$115 = $$01418;
       }
      } else {
       $13 = HEAP8[46897]|0;
       $14 = $13 << 24 >> 24;
       $15 = (_HexVal($14)|0);
       $16 = $15 | $10;
       $$113 = $$01219;$$115 = $16;
      }
      _NextChar();
      $17 = HEAP8[46897]|0;
      $18 = (_IsXDigit($17)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       $$3 = $$115;
       break;
      } else {
       $$01219 = $$113;$$01418 = $$115;
      }
     }
     break;
    }
    case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
     $20 = (_HexVal($3)|0);
     $21 = HEAP8[46897]|0;
     $22 = (_IsODigit($21)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$2$lcssa = $20;
     } else {
      $$022 = 1;$$221 = $20;$25 = 0;
      while(1) {
       $24 = $25&1;
       $26 = $24 ^ 1;
       $$1 = (($26) + ($$022))|0;
       $27 = $$221 << 3;
       $28 = HEAP8[46897]|0;
       $29 = $28 << 24 >> 24;
       $30 = (_HexVal($29)|0);
       $31 = $30 | $27;
       _NextChar();
       $32 = HEAP8[46897]|0;
       $33 = (_IsODigit($32)|0);
       $34 = ($33|0)==(0);
       $35 = ($$1|0)<(3);
       $not$ = $34 ^ 1;
       $36 = $35 & $not$;
       if ($36) {
        $$022 = $$1;$$221 = $31;$25 = $34;
       } else {
        $$2$lcssa = $31;
        break;
       }
      }
     }
     $37 = ($$2$lcssa|0)>(255);
     if (!($37)) {
      $$3 = $$2$lcssa;
      break L1;
     }
     _Error(30437,$vararg_buffer3);
     $$3 = $$2$lcssa;
     break L1;
     break;
    }
    default: {
     _Error(30475,$vararg_buffer5);
     $38 = HEAP8[46896]|0;
     switch ($38<<24>>24) {
     case 0: case 39:  {
      $$3 = 32;
      break L1;
      break;
     }
     default: {
     }
     }
     while(1) {
      $39 = HEAP8[46897]|0;
      switch ($39<<24>>24) {
      case 0: case 34: case 39:  {
       $$3 = 32;
       break L1;
       break;
      }
      default: {
      }
      }
      _NextChar();
     }
    }
    }
   } while(0);
  } else {
   $40 = $0 << 24 >> 24;
   $$3 = $40;
  }
 } while(0);
 _NextChar();
 $41 = (_SignExtendChar($$3)|0);
 STACKTOP = sp;return ($41|0);
}
function _SkipTokens($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0710$us = 0, $$old = 0, $$old1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$old = HEAP32[11156]|0;
 $$old1 = ($$old|0)==(1);
 if ($$old1) {
  return;
 }
 $2 = ($1|0)==(0);
 if ($2) {
  while(1) {
   _NextToken();
   $11 = HEAP32[11156]|0;
   $12 = ($11|0)==(1);
   if ($12) {
    break;
   }
  }
  return;
 } else {
  $7 = $$old;
 }
 L8: while(1) {
  $$0710$us = 0;
  while(1) {
   $5 = (($0) + ($$0710$us<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==($6|0);
   $3 = (($$0710$us) + 1)|0;
   if ($8) {
    label = 8;
    break L8;
   }
   $4 = ($3>>>0)<($1>>>0);
   if ($4) {
    $$0710$us = $3;
   } else {
    break;
   }
  }
  _NextToken();
  $9 = HEAP32[11156]|0;
  $10 = ($9|0)==(1);
  if ($10) {
   label = 8;
   break;
  } else {
   $7 = $9;
  }
 }
 if ((label|0) == 8) {
  return;
 }
}
function _Consume($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11156]|0;
 $3 = ($2|0)==($0|0);
 if ($3) {
  _NextToken();
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $1;
  _Error(32813,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _ConsumeColon() {
 var $$0$i = 0, $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(84);
 if ($1) {
  _NextToken();
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  HEAP32[$vararg_buffer>>2] = 30728;
  _Error(32813,$vararg_buffer);
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _ConsumeSemi() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(41);
 L1: do {
  if ($1) {
   _NextToken();
   $$0 = 1;
  } else {
   _Error(31570,$vararg_buffer);
   $2 = HEAP32[11156]|0;
   switch ($2|0) {
   case 52: case 84:  {
    break;
   }
   default: {
    $$0 = 0;
    break L1;
   }
   }
   _NextToken();
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ConsumeComma() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(52);
 if ($1) {
  _NextToken();
  $$0 = 1;
 } else {
  _Error(30741,$vararg_buffer);
  $2 = HEAP32[11156]|0;
  $3 = ($2|0)==(41);
  if ($3) {
   _NextToken();
   $$0 = 0;
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _ConsumeLParen() {
 var $$0$i = 0, $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(43);
 if ($1) {
  _NextToken();
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  HEAP32[$vararg_buffer>>2] = 30754;
  _Error(32813,$vararg_buffer);
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _ConsumeRParen() {
 var $$0$i = 0, $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(85);
 if ($1) {
  _NextToken();
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  HEAP32[$vararg_buffer>>2] = 32103;
  _Error(32813,$vararg_buffer);
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _ConsumeRBrack() {
 var $$0$i = 0, $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(47);
 if ($1) {
  _NextToken();
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  HEAP32[$vararg_buffer>>2] = 30767;
  _Error(32813,$vararg_buffer);
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _ConsumeLCurly() {
 var $$0$i = 0, $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(46);
 if ($1) {
  _NextToken();
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  HEAP32[$vararg_buffer>>2] = 31454;
  _Error(32813,$vararg_buffer);
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _ConsumeRCurly() {
 var $$0$i = 0, $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11156]|0;
 $1 = ($0|0)==(55);
 if ($1) {
  _NextToken();
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  HEAP32[$vararg_buffer>>2] = 30780;
  _Error(32813,$vararg_buffer);
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _OptShift1($0) {
 $0 = $0|0;
 var $$080$lcssa = 0, $$08088 = 0, $$08185 = 0, $$08287 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i86 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond84 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i86 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i86|0)==(0);
 if ($1) {
  $$080$lcssa = 0;
  return ($$080$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $3 = ((($0)) + 152|0);
 $$08088 = 0;$$08287 = 0;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + ($$08287<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(37);
  L6: do {
   if ($8) {
    $9 = ((($6)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_GetShift($10)|0);
    $12 = ($11|0)!=(0);
    $13 = $11 & 3840;
    $14 = ($13|0)==(256);
    $or$cond84 = $12 & $14;
    if ($or$cond84) {
     $15 = $11 & 255;
     $16 = (($$08287) + 1)|0;
     $17 = (_RegXUsed($0,$16)|0);
     $18 = ($17|0)==(0);
     do {
      if ($18) {
       $19 = ($15|0)==(0);
       if ($19) {
        $21 = HEAP32[$3>>2]|0;
        $22 = ($21>>>0)<(200);
        if ($22) {
         $$2 = $$08088;
         break L6;
        }
        $23 = ((($6)) + 36|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (_NewCodeEntry(2,1,31305,0,$24)|0);
        _CS_InsertEntry($0,$25,$16);
        $26 = (_CS_GenLabel($0,$25)|0);
        $27 = HEAP32[$23>>2]|0;
        $28 = (_NewCodeEntry(24,0,0,0,$27)|0);
        $29 = (($$08287) + 2)|0;
        _CS_InsertEntry($0,$28,$29);
        $30 = ((($26)) + 4|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = HEAP32[$23>>2]|0;
        $33 = (_NewCodeEntry(9,12,$31,$26,$32)|0);
        $34 = (($$08287) + 3)|0;
        _CS_InsertEntry($0,$33,$34);
        $35 = HEAP32[$23>>2]|0;
        $36 = (_NewCodeEntry(55,1,31305,0,$35)|0);
        $37 = (($$08287) + 4)|0;
        _CS_InsertEntry($0,$36,$37);
        break;
       } else {
        $20 = ((($6)) + 36|0);
        $$08185 = $15;
        while(1) {
         $38 = (($$08185) + -1)|0;
         $39 = HEAP32[$20>>2]|0;
         $40 = (_NewCodeEntry(2,1,31305,0,$39)|0);
         _CS_InsertEntry($0,$40,$16);
         $41 = ($38|0)==(0);
         if ($41) {
          break;
         } else {
          $$08185 = $38;
         }
        }
       }
      } else {
       $42 = ((($6)) + 40|0);
       $43 = HEAP32[$42>>2]|0;
       $44 = ((($43)) + 2|0);
       $45 = HEAP16[$44>>1]|0;
       $46 = ($45<<16>>16)==(0);
       $47 = ($15|0)==(1);
       $or$cond = $47 & $46;
       if (!($or$cond)) {
        $$2 = $$08088;
        break L6;
       }
       $48 = (_CS_GetNextEntry($0,$$08287)|0);
       $49 = ($48|0)==(0|0);
       if ($49) {
        $$2 = $$08088;
        break L6;
       }
       $50 = ((($6)) + 36|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (_NewCodeEntry(2,1,31305,0,$51)|0);
       _CS_InsertEntry($0,$52,$16);
       $53 = (_CS_GenLabel($0,$48)|0);
       $54 = ((($53)) + 4|0);
       $55 = HEAP32[$54>>2]|0;
       $56 = HEAP32[$50>>2]|0;
       $57 = (_NewCodeEntry(3,12,$55,$53,$56)|0);
       $58 = (($$08287) + 2)|0;
       _CS_InsertEntry($0,$57,$58);
       $59 = HEAP32[$50>>2]|0;
       $60 = (_NewCodeEntry(28,0,0,0,$59)|0);
       $61 = (($$08287) + 3)|0;
       _CS_InsertEntry($0,$60,$61);
      }
     } while(0);
     _CS_DelEntry($0,$$08287);
     $62 = (($$08088) + 1)|0;
     $$2 = $62;
    } else {
     $$2 = $$08088;
    }
   } else {
    $$2 = $$08088;
   }
  } while(0);
  $63 = (($$08287) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $64 = ($63>>>0)<($$idx$val$i>>>0);
  if ($64) {
   $$08088 = $$2;$$08287 = $63;
  } else {
   $$080$lcssa = $$2;
   break;
  }
 }
 return ($$080$lcssa|0);
}
function _GetShift($0) {
 $0 = $0|0;
 var $$0 = 0, $$016 = 0, $$1 = 0, $$1$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strncmp($0,30793,5)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 4352;
 } else {
  $3 = (_strncmp($0,30799,5)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 4608;
  } else {
   $5 = (_strncmp($0,34428,5)|0);
   $6 = ($5|0)==(0);
   if ($6) {
    $$0 = 8448;
   } else {
    $7 = (_strncmp($0,34434,5)|0);
    $8 = ($7|0)==(0);
    if ($8) {
     $$0 = 8704;
    } else {
     $$016 = 0;
     return ($$016|0);
    }
   }
  }
 }
 $9 = ((($0)) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 switch ($11|0) {
 case 121:  {
  $$1 = $$0;
  break;
 }
 case 49:  {
  $12 = $$0 | 1;
  $$1 = $12;
  break;
 }
 case 50:  {
  $13 = $$0 | 2;
  $$1 = $13;
  break;
 }
 case 51:  {
  $14 = $$0 | 3;
  $$1 = $14;
  break;
 }
 case 52:  {
  $15 = $$0 | 4;
  $$1 = $15;
  break;
 }
 case 53:  {
  $16 = $$0 | 5;
  $$1 = $16;
  break;
 }
 case 54:  {
  $17 = $$0 | 6;
  $$1 = $17;
  break;
 }
 case 55:  {
  $18 = $$0 | 7;
  $$1 = $18;
  break;
 }
 default: {
  $$016 = 0;
  return ($$016|0);
 }
 }
 $19 = ((($0)) + 6|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(0);
 $$1$ = $21 ? $$1 : 0;
 $$016 = $$1$;
 return ($$016|0);
}
function _OptShift2($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$046$lcssa = 0, $$04656 = 0, $$047 = 0, $$04854 = 0, $$049 = 0, $$1 = 0, $$150 = 0, $$51 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i53 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i53 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i53|0)==(0);
 if ($2) {
  $$046$lcssa = 0;
  STACKTOP = sp;return ($$046$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($0)) + 152|0);
 $$04656 = 0;$$04854 = 0;$8 = $$idx$val$i53;
 while(1) {
  $9 = ($8>>>0)>($$04854>>>0);
  if (!($9)) {
   label = 4;
   break;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($$04854<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$1>>2] = $14;
  $15 = HEAP8[$14>>0]|0;
  switch ($15<<24>>24) {
  case 3: case 9:  {
   $16 = ((($14)) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(0|0);
   if ($18) {
    $$1 = $$04656;
   } else {
    $19 = (($$04854) + 1)|0;
    $20 = (_CS_GetEntries($0,$4,$19,3)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $$1 = $$04656;
    } else {
     $22 = HEAP32[$4>>2]|0;
     $23 = HEAP8[$22>>0]|0;
     $24 = ($23<<24>>24)==(23);
     if ($24) {
      $25 = HEAP32[$1>>2]|0;
      $26 = ((($25)) + 20|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($27)) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = HEAP32[$5>>2]|0;
      $31 = ($29|0)==($30|0);
      if ($31) {
       $32 = (_CS_RangeHasLabel($0,$$04854,2)|0);
       $33 = ($32|0)==(0);
       if ($33) {
        $34 = HEAP32[$5>>2]|0;
        $35 = HEAP8[$34>>0]|0;
        $36 = ($35<<24>>24)==(37);
        if ($36) {
         $37 = ((($34)) + 4|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = (_GetShift($38)|0);
         $40 = $39 & 65280;
         $41 = ($40|0)==(4608);
         if ($41) {
          $42 = $39 & 255;
          $43 = ($42|0)==(0);
          if ($43) {
           $$1 = $$04656;
          } else {
           $44 = HEAP32[$6>>2]|0;
           $45 = HEAP8[$44>>0]|0;
           $46 = ($45<<24>>24)==(37);
           if ($46) {
            $47 = ((($44)) + 4|0);
            $48 = HEAP32[$47>>2]|0;
            $49 = (_GetShift($48)|0);
            $50 = $49 & 65280;
            $51 = ($50|0)==(4608);
            $52 = $49 & 255;
            if ($51) {
             $53 = ($52|0)==(0);
             $$ = (($52) + ($42))|0;
             $$51 = $53 ? 3 : 4;
             $$047 = $$51;$$049 = $$;
            } else {
             $$047 = 3;$$049 = $42;
            }
           } else {
            $$047 = 3;$$049 = $42;
           }
           $54 = ($$049*100)|0;
           $55 = HEAP32[$7>>2]|0;
           $56 = ($54>>>0)>($55>>>0);
           if ($56) {
            $$1 = $$04656;
           } else {
            $57 = (($$047) + ($$04854))|0;
            $58 = (_RegXUsed($0,$57)|0);
            $59 = ($58|0)==(0);
            if ($59) {
             $$0 = $57;$$150 = $$049;
             while(1) {
              $60 = HEAP32[$5>>2]|0;
              $61 = ((($60)) + 36|0);
              $62 = HEAP32[$61>>2]|0;
              $63 = (_NewCodeEntry(18,2,31314,0,$62)|0);
              $64 = (($$0) + 1)|0;
              _CS_InsertEntry($0,$63,$$0);
              $65 = HEAP32[$5>>2]|0;
              $66 = ((($65)) + 36|0);
              $67 = HEAP32[$66>>2]|0;
              $68 = (_NewCodeEntry(55,1,31305,0,$67)|0);
              $69 = (($$0) + 2)|0;
              _CS_InsertEntry($0,$68,$64);
              $70 = (($$150) + -1)|0;
              $71 = ($70|0)==(0);
              if ($71) {
               break;
              } else {
               $$0 = $69;$$150 = $70;
              }
             }
             _CS_DelEntries($0,$$04854,$$047);
             $72 = (($$04656) + 1)|0;
             $$1 = $72;
            } else {
             $$1 = $$04656;
            }
           }
          }
         } else {
          $$1 = $$04656;
         }
        } else {
         $$1 = $$04656;
        }
       } else {
        $$1 = $$04656;
       }
      } else {
       $$1 = $$04656;
      }
     } else {
      $$1 = $$04656;
     }
    }
   }
   break;
  }
  default: {
   $$1 = $$04656;
  }
  }
  $73 = (($$04854) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $74 = ($73>>>0)<($$idx$val$i>>>0);
  if ($74) {
   $$04656 = $$1;$$04854 = $73;$8 = $$idx$val$i;
  } else {
   $$046$lcssa = $$1;
   label = 22;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return ($$046$lcssa|0);
 }
 return (0)|0;
}
function _OptShift3($0) {
 $0 = $0|0;
 var $$030$lcssa = 0, $$03037 = 0, $$03135 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i34 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i34|0)==(0);
 if ($2) {
  $$030$lcssa = 0;
  STACKTOP = sp;return ($$030$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$03037 = 0;$$03135 = 0;$6 = $$idx$val$i34;
 while(1) {
  $7 = ($6>>>0)>($$03135>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$03135<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP8[$12>>0]|0;
  switch ($13<<24>>24) {
  case 30: case 3:  {
   $14 = ((($12)) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $$1 = $$03037;
   } else {
    $17 = ((($12)) + 40|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 2|0);
    $20 = HEAP16[$19>>1]|0;
    $21 = ($20<<16>>16)==(0);
    if ($21) {
     $22 = (($$03135) + 1)|0;
     $23 = (_CS_GetEntries($0,$4,$22,2)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $$1 = $$03037;
     } else {
      $25 = HEAP32[$4>>2]|0;
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(28);
      if ($27) {
       $28 = HEAP32[$1>>2]|0;
       $29 = ((($28)) + 20|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ((($30)) + 12|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = HEAP32[$5>>2]|0;
       $34 = ($32|0)==($33|0);
       if ($34) {
        $35 = (_CS_RangeHasLabel($0,$$03135,2)|0);
        $36 = ($35|0)==(0);
        if ($36) {
         $37 = HEAP32[$5>>2]|0;
         $38 = HEAP8[$37>>0]|0;
         $39 = ($38<<24>>24)==(37);
         if ($39) {
          $40 = ((($37)) + 4|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = (_GetShift($41)|0);
          $43 = ($42|0)!=(0);
          $44 = $42 & 3840;
          $45 = ($44|0)==(512);
          $or$cond = $43 & $45;
          if ($or$cond) {
           $46 = $42 & 255;
           $47 = ($46|0)==(0);
           if ($47) {
            $$1 = $$03037;
           } else {
            $48 = ((($37)) + 36|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = (_NewCodeEntry(55,1,31305,0,$49)|0);
            $51 = (($$03135) + 3)|0;
            _CS_InsertEntry($0,$50,$51);
            $52 = (($46) + -1)|0;
            $53 = ($52|0)==(0);
            if (!($53)) {
             $54 = (($$03135) + 4)|0;
             $60 = $52;
             while(1) {
              $55 = HEAP32[$5>>2]|0;
              $56 = ((($55)) + 36|0);
              $57 = HEAP32[$56>>2]|0;
              $58 = (_NewCodeEntry(43,1,31305,0,$57)|0);
              _CS_InsertEntry($0,$58,$54);
              $59 = (($60) + -1)|0;
              $61 = ($59|0)==(0);
              if ($61) {
               break;
              } else {
               $60 = $59;
              }
             }
            }
            _CS_DelEntries($0,$$03135,3);
            $62 = (($$03037) + 1)|0;
            $$1 = $62;
           }
          } else {
           $$1 = $$03037;
          }
         } else {
          $$1 = $$03037;
         }
        } else {
         $$1 = $$03037;
        }
       } else {
        $$1 = $$03037;
       }
      } else {
       $$1 = $$03037;
      }
     }
    } else {
     $$1 = $$03037;
    }
   }
   break;
  }
  default: {
   $$1 = $$03037;
  }
  }
  $63 = (($$03135) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $64 = ($63>>>0)<($$idx$val$i>>>0);
  if ($64) {
   $$03037 = $$1;$$03135 = $63;$6 = $$idx$val$i;
  } else {
   $$030$lcssa = $$1;
   label = 20;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return ($$030$lcssa|0);
 }
 return (0)|0;
}
function _OptShift4($0) {
 $0 = $0|0;
 var $$054$lcssa = 0, $$05461 = 0, $$05560 = 0, $$05658 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i59 = 0, $$idx$val$i62 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i59 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i59|0)==(0);
 if ($1) {
  $$054$lcssa = 0;
  return ($$054$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $3 = ((($0)) + 152|0);
 $$05461 = 0;$$05560 = 0;$$idx$val$i62 = $$idx$val$i59;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + ($$05560<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(37);
  do {
   if ($8) {
    $9 = ((($6)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_GetShift($10)|0);
    $12 = ($11|0)!=(0);
    $13 = $11 & 3840;
    $14 = ($13|0)==(512);
    $or$cond = $12 & $14;
    if ($or$cond) {
     $15 = ((($6)) + 40|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ((($16)) + 2|0);
     $18 = HEAP16[$17>>1]|0;
     $19 = ($18<<16>>16)==(0);
     if ($19) {
      $20 = $11 & 255;
      $21 = ($20|0)==(0);
      if ($21) {
       $24 = HEAP32[$3>>2]|0;
       $25 = ($24>>>0)<(200);
       if ($25) {
        $$2 = $$05461;$$idx$val$i = $$idx$val$i62;
        break;
       }
       $26 = ((($6)) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (_NewCodeEntry(43,1,31305,0,$27)|0);
       $29 = (($$05560) + 1)|0;
       _CS_InsertEntry($0,$28,$29);
       $30 = (_CS_GenLabel($0,$28)|0);
       $31 = HEAP32[$26>>2]|0;
       $32 = (_NewCodeEntry(24,0,0,0,$31)|0);
       $33 = (($$05560) + 2)|0;
       _CS_InsertEntry($0,$32,$33);
       $34 = ((($30)) + 4|0);
       $35 = HEAP32[$34>>2]|0;
       $36 = HEAP32[$26>>2]|0;
       $37 = (_NewCodeEntry(9,12,$35,$30,$36)|0);
       $38 = (($$05560) + 3)|0;
       _CS_InsertEntry($0,$37,$38);
       $39 = HEAP32[$26>>2]|0;
       $40 = (_NewCodeEntry(54,1,31305,0,$39)|0);
       $41 = (($$05560) + 4)|0;
       _CS_InsertEntry($0,$40,$41);
      } else {
       $22 = ((($6)) + 36|0);
       $23 = (($$05560) + 1)|0;
       $$05658 = $20;
       while(1) {
        $42 = (($$05658) + -1)|0;
        $43 = HEAP32[$22>>2]|0;
        $44 = (_NewCodeEntry(43,1,31305,0,$43)|0);
        _CS_InsertEntry($0,$44,$23);
        $45 = ($42|0)==(0);
        if ($45) {
         break;
        } else {
         $$05658 = $42;
        }
       }
      }
      _CS_DelEntry($0,$$05560);
      $46 = (($$05461) + 1)|0;
      $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
      $$2 = $46;$$idx$val$i = $$idx$val$i$pre;
     } else {
      $$2 = $$05461;$$idx$val$i = $$idx$val$i62;
     }
    } else {
     $$2 = $$05461;$$idx$val$i = $$idx$val$i62;
    }
   } else {
    $$2 = $$05461;$$idx$val$i = $$idx$val$i62;
   }
  } while(0);
  $47 = (($$05560) + 1)|0;
  $48 = ($47>>>0)<($$idx$val$i>>>0);
  if ($48) {
   $$05461 = $$2;$$05560 = $47;$$idx$val$i62 = $$idx$val$i;
  } else {
   $$054$lcssa = $$2;
   break;
  }
 }
 return ($$054$lcssa|0);
}
function _OptShift5($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$08185 = 0, $$088 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i84 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $switch$split2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i84 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i84|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $$08185 = 0;$$088 = 0;$8 = $$idx$val$i84;
 while(1) {
  $9 = ($8>>>0)>($$08185>>>0);
  if (!($9)) {
   label = 4;
   break;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($$08185<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$1>>2] = $14;
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&255;
  $17 = ($16<<24>>24)==(40);
  L7: do {
   if ($17) {
    $18 = ($15&65535) >>> 8;
    $19 = $18&255;
    switch ($19<<24>>24) {
    case 3: case 6:  {
     break;
    }
    default: {
     $$1 = $$088;
     break L7;
    }
    }
    $20 = (($$08185) + 1)|0;
    $21 = (_CS_GetEntries($0,$4,$20,4)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $$1 = $$088;
    } else {
     $23 = (_CS_RangeHasLabel($0,$20,4)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $25 = HEAP32[$4>>2]|0;
      $26 = HEAP16[$25>>1]|0;
      $27 = $26&255;
      $28 = ($27<<24>>24)==(41);
      if ($28) {
       $29 = ($26&65535) >>> 8;
       $30 = $29&255;
       switch ($30<<24>>24) {
       case 3: case 6:  {
        break;
       }
       default: {
        $$1 = $$088;
        break L7;
       }
       }
       $31 = HEAP32[$5>>2]|0;
       $32 = HEAP8[$31>>0]|0;
       $33 = ($32<<24>>24)==(37);
       if ($33) {
        $34 = ((($31)) + 4|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (_GetShift($35)|0);
        $37 = ($36|0)!=(0);
        $38 = $36 & 255;
        $39 = ($38|0)==(1);
        $or$cond = $37 & $39;
        if ($or$cond) {
         $40 = HEAP32[$6>>2]|0;
         $41 = HEAP16[$40>>1]|0;
         $42 = $41&255;
         $43 = ($42<<24>>24)==(62);
         if ($43) {
          $44 = ($41&65535) >>> 8;
          $45 = $44&255;
          switch ($45<<24>>24) {
          case 3: case 6:  {
           break;
          }
          default: {
           $$1 = $$088;
           break L7;
          }
          }
          $46 = HEAP32[$7>>2]|0;
          $47 = HEAP16[$46>>1]|0;
          $48 = $47&255;
          $49 = ($48<<24>>24)==(63);
          if ($49) {
           $50 = ($47&65535) >>> 8;
           $51 = $50&255;
           switch ($51<<24>>24) {
           case 3: case 6:  {
            break;
           }
           default: {
            $$1 = $$088;
            break L7;
           }
           }
           $52 = (($$08185) + 5)|0;
           $53 = (_RegAXUsed($0,$52)|0);
           $54 = ($53|0)==(0);
           if ($54) {
            $switch$split2D = ($36|0)<(8449);
            L21: do {
             if ($switch$split2D) {
              switch ($36|0) {
              case 4353:  {
               label = 21;
               break L21;
               break;
              }
              case 4609:  {
               break;
              }
              default: {
               break L21;
              }
              }
              $55 = HEAP32[$4>>2]|0;
              $56 = ((($55)) + 1|0);
              $57 = HEAP8[$56>>0]|0;
              $58 = $57&255;
              $59 = ((($55)) + 4|0);
              $60 = HEAP32[$59>>2]|0;
              $61 = ((($55)) + 36|0);
              $62 = HEAP32[$61>>2]|0;
              $63 = (_NewCodeEntry(40,$58,$60,0,$62)|0);
              _CS_InsertEntry($0,$63,$52);
              $64 = HEAP32[$5>>2]|0;
              $65 = ((($64)) + 36|0);
              $66 = HEAP32[$65>>2]|0;
              $67 = (_NewCodeEntry(18,2,31314,0,$66)|0);
              $68 = (($$08185) + 6)|0;
              _CS_InsertEntry($0,$67,$68);
              $69 = HEAP32[$5>>2]|0;
              $70 = ((($69)) + 36|0);
              $71 = HEAP32[$70>>2]|0;
              $72 = (_NewCodeEntry(55,1,31305,0,$71)|0);
              $73 = (($$08185) + 7)|0;
              _CS_InsertEntry($0,$72,$73);
              $74 = HEAP32[$7>>2]|0;
              $75 = ((($74)) + 1|0);
              $76 = HEAP8[$75>>0]|0;
              $77 = $76&255;
              $78 = ((($74)) + 4|0);
              $79 = HEAP32[$78>>2]|0;
              $80 = ((($74)) + 36|0);
              $81 = HEAP32[$80>>2]|0;
              $82 = (_NewCodeEntry(62,$77,$79,0,$81)|0);
              $83 = (($$08185) + 8)|0;
              _CS_InsertEntry($0,$82,$83);
              $84 = HEAP32[$1>>2]|0;
              $85 = ((($84)) + 1|0);
              $86 = HEAP8[$85>>0]|0;
              $87 = $86&255;
              $88 = ((($84)) + 4|0);
              $89 = HEAP32[$88>>2]|0;
              $90 = ((($84)) + 36|0);
              $91 = HEAP32[$90>>2]|0;
              $92 = (_NewCodeEntry(40,$87,$89,0,$91)|0);
              $93 = (($$08185) + 9)|0;
              _CS_InsertEntry($0,$92,$93);
              $94 = HEAP32[$5>>2]|0;
              $95 = ((($94)) + 36|0);
              $96 = HEAP32[$95>>2]|0;
              $97 = (_NewCodeEntry(55,1,31305,0,$96)|0);
              $98 = (($$08185) + 10)|0;
              _CS_InsertEntry($0,$97,$98);
              $99 = HEAP32[$6>>2]|0;
              $100 = ((($99)) + 1|0);
              $101 = HEAP8[$100>>0]|0;
              $102 = $101&255;
              $103 = ((($99)) + 4|0);
              $104 = HEAP32[$103>>2]|0;
              $105 = ((($99)) + 36|0);
              $106 = HEAP32[$105>>2]|0;
              $107 = (_NewCodeEntry(62,$102,$104,0,$106)|0);
              $108 = (($$08185) + 11)|0;
              _CS_InsertEntry($0,$107,$108);
              _CS_DelEntries($0,$$08185,5);
             } else {
              switch ($36|0) {
              case 8449:  {
               label = 21;
               break L21;
               break;
              }
              case 8705:  {
               break;
              }
              default: {
               break L21;
              }
              }
              $109 = HEAP32[$4>>2]|0;
              $110 = ((($109)) + 1|0);
              $111 = HEAP8[$110>>0]|0;
              $112 = $111&255;
              $113 = ((($109)) + 4|0);
              $114 = HEAP32[$113>>2]|0;
              $115 = ((($109)) + 36|0);
              $116 = HEAP32[$115>>2]|0;
              $117 = (_NewCodeEntry(40,$112,$114,0,$116)|0);
              _CS_InsertEntry($0,$117,$52);
              $118 = HEAP32[$5>>2]|0;
              $119 = ((($118)) + 36|0);
              $120 = HEAP32[$119>>2]|0;
              $121 = (_NewCodeEntry(43,1,31305,0,$120)|0);
              $122 = (($$08185) + 6)|0;
              _CS_InsertEntry($0,$121,$122);
              $123 = HEAP32[$7>>2]|0;
              $124 = ((($123)) + 1|0);
              $125 = HEAP8[$124>>0]|0;
              $126 = $125&255;
              $127 = ((($123)) + 4|0);
              $128 = HEAP32[$127>>2]|0;
              $129 = ((($123)) + 36|0);
              $130 = HEAP32[$129>>2]|0;
              $131 = (_NewCodeEntry(62,$126,$128,0,$130)|0);
              $132 = (($$08185) + 7)|0;
              _CS_InsertEntry($0,$131,$132);
              $133 = HEAP32[$1>>2]|0;
              $134 = ((($133)) + 1|0);
              $135 = HEAP8[$134>>0]|0;
              $136 = $135&255;
              $137 = ((($133)) + 4|0);
              $138 = HEAP32[$137>>2]|0;
              $139 = ((($133)) + 36|0);
              $140 = HEAP32[$139>>2]|0;
              $141 = (_NewCodeEntry(40,$136,$138,0,$140)|0);
              $142 = (($$08185) + 8)|0;
              _CS_InsertEntry($0,$141,$142);
              $143 = HEAP32[$5>>2]|0;
              $144 = ((($143)) + 36|0);
              $145 = HEAP32[$144>>2]|0;
              $146 = (_NewCodeEntry(55,1,31305,0,$145)|0);
              $147 = (($$08185) + 9)|0;
              _CS_InsertEntry($0,$146,$147);
              $148 = HEAP32[$6>>2]|0;
              $149 = ((($148)) + 1|0);
              $150 = HEAP8[$149>>0]|0;
              $151 = $150&255;
              $152 = ((($148)) + 4|0);
              $153 = HEAP32[$152>>2]|0;
              $154 = ((($148)) + 36|0);
              $155 = HEAP32[$154>>2]|0;
              $156 = (_NewCodeEntry(62,$151,$153,0,$155)|0);
              $157 = (($$08185) + 10)|0;
              _CS_InsertEntry($0,$156,$157);
              _CS_DelEntries($0,$$08185,5);
             }
            } while(0);
            if ((label|0) == 21) {
             label = 0;
             $158 = HEAP32[$5>>2]|0;
             $159 = ((($158)) + 36|0);
             $160 = HEAP32[$159>>2]|0;
             $161 = (_NewCodeEntry(2,1,31305,0,$160)|0);
             _CS_InsertEntry($0,$161,$20);
             $162 = HEAP32[$6>>2]|0;
             $163 = ((($162)) + 1|0);
             $164 = HEAP8[$163>>0]|0;
             $165 = $164&255;
             $166 = ((($162)) + 4|0);
             $167 = HEAP32[$166>>2]|0;
             $168 = ((($162)) + 36|0);
             $169 = HEAP32[$168>>2]|0;
             $170 = (_NewCodeEntry(62,$165,$167,0,$169)|0);
             $171 = (($$08185) + 2)|0;
             _CS_InsertEntry($0,$170,$171);
             $172 = HEAP32[$4>>2]|0;
             $173 = ((($172)) + 1|0);
             $174 = HEAP8[$173>>0]|0;
             $175 = $174&255;
             $176 = ((($172)) + 4|0);
             $177 = HEAP32[$176>>2]|0;
             $178 = ((($172)) + 36|0);
             $179 = HEAP32[$178>>2]|0;
             $180 = (_NewCodeEntry(40,$175,$177,0,$179)|0);
             $181 = (($$08185) + 3)|0;
             _CS_InsertEntry($0,$180,$181);
             $182 = HEAP32[$5>>2]|0;
             $183 = ((($182)) + 36|0);
             $184 = HEAP32[$183>>2]|0;
             $185 = (_NewCodeEntry(54,1,31305,0,$184)|0);
             $186 = (($$08185) + 4)|0;
             _CS_InsertEntry($0,$185,$186);
             $187 = HEAP32[$7>>2]|0;
             $188 = ((($187)) + 1|0);
             $189 = HEAP8[$188>>0]|0;
             $190 = $189&255;
             $191 = ((($187)) + 4|0);
             $192 = HEAP32[$191>>2]|0;
             $193 = ((($187)) + 36|0);
             $194 = HEAP32[$193>>2]|0;
             $195 = (_NewCodeEntry(62,$190,$192,0,$194)|0);
             _CS_InsertEntry($0,$195,$52);
             $196 = (($$08185) + 6)|0;
             _CS_DelEntries($0,$196,4);
            }
            $197 = (($$088) + 1)|0;
            $$1 = $197;
           } else {
            $$1 = $$088;
           }
          } else {
           $$1 = $$088;
          }
         } else {
          $$1 = $$088;
         }
        } else {
         $$1 = $$088;
        }
       } else {
        $$1 = $$088;
       }
      } else {
       $$1 = $$088;
      }
     } else {
      $$1 = $$088;
     }
    }
   } else {
    $$1 = $$088;
   }
  } while(0);
  $198 = (($$08185) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $199 = ($198>>>0)<($$idx$val$i>>>0);
  if ($199) {
   $$08185 = $198;$$088 = $$1;$8 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 24;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptShift6($0) {
 $0 = $0|0;
 var $$050$lcssa = 0, $$05063 = 0, $$05161 = 0, $$052 = 0, $$052$in57 = 0, $$052$in57$phi = 0, $$052$lcssa = 0, $$05255 = 0, $$05258 = 0, $$05356 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i60 = 0, $$idx$val$i70 = 0, $$lcssa = 0, $$pre = 0, $1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $indvars$iv = 0;
 var $indvars$iv$next = 0, $not$ = 0, $or$cond = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i60 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i60|0)==(0);
 if ($1) {
  $$050$lcssa = 0;
  return ($$050$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $3 = ((($0)) + 152|0);
 $$05063 = 0;$$05161 = 0;$$idx$val$i70 = $$idx$val$i60;$indvars$iv = 2;
 while(1) {
  $4 = HEAP32[$2>>2]|0;
  $5 = (($4) + ($$05161<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(37);
  L6: do {
   if ($8) {
    $9 = ((($6)) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (_GetShift($10)|0);
    $12 = ($11|0)!=(0);
    $13 = $11 & 3840;
    $14 = ($13|0)==(256);
    $or$cond = $12 & $14;
    if ($or$cond) {
     $15 = $11 & 255;
     $trunc = $11&255;
     switch ($trunc<<24>>24) {
     case 0:  {
      $$1 = $$05063;$$idx$val$i = $$idx$val$i70;
      break L6;
      break;
     }
     case 1:  {
      $16 = HEAP32[$3>>2]|0;
      $17 = ($16>>>0)>(200);
      if ($17) {
       $21 = $16;
       label = 8;
      }
      break;
     }
     default: {
      $$pre = HEAP32[$3>>2]|0;
      $21 = $$pre;
      label = 8;
     }
     }
     if ((label|0) == 8) {
      label = 0;
      $18 = ($15*300)|0;
      $19 = (($18) + 400)|0;
      $20 = (($19>>>0) / 3)&-1;
      $not$ = ($20>>>0)>($21>>>0);
      if ($not$) {
       $$1 = $$05063;$$idx$val$i = $$idx$val$i70;
       break;
      }
     }
     $22 = (($$05161) + 1)|0;
     $23 = ((($6)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (_NewCodeEntry(63,3,34681,0,$24)|0);
     _CS_InsertEntry($0,$25,$22);
     $$05255 = (($$05161) + 2)|0;
     $26 = ($15|0)==(0);
     $27 = HEAP32[$23>>2]|0;
     if ($26) {
      $$052$lcssa = $$05255;$$lcssa = $27;
     } else {
      $28 = $15 << 1;
      $$052$in57 = $$05161;$$05258 = $$05255;$$05356 = $15;$30 = $27;
      while(1) {
       $29 = (($$05356) + -1)|0;
       $31 = (_NewCodeEntry(2,1,31305,0,$30)|0);
       $32 = (($$052$in57) + 3)|0;
       _CS_InsertEntry($0,$31,$$05258);
       $33 = HEAP32[$23>>2]|0;
       $34 = (_NewCodeEntry(54,3,34681,0,$33)|0);
       _CS_InsertEntry($0,$34,$32);
       $$052 = (($$05258) + 2)|0;
       $35 = ($29|0)==(0);
       $36 = HEAP32[$23>>2]|0;
       if ($35) {
        break;
       } else {
        $$052$in57$phi = $$05258;$$05258 = $$052;$$05356 = $29;$30 = $36;$$052$in57 = $$052$in57$phi;
       }
      }
      $37 = (($indvars$iv) + ($28))|0;
      $$052$lcssa = $37;$$lcssa = $36;
     }
     $38 = (_NewCodeEntry(41,3,34681,0,$$lcssa)|0);
     _CS_InsertEntry($0,$38,$$052$lcssa);
     _CS_DelEntry($0,$$05161);
     $39 = (($$05063) + 1)|0;
     $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
     $$1 = $39;$$idx$val$i = $$idx$val$i$pre;
    } else {
     $$1 = $$05063;$$idx$val$i = $$idx$val$i70;
    }
   } else {
    $$1 = $$05063;$$idx$val$i = $$idx$val$i70;
   }
  } while(0);
  $40 = (($$05161) + 1)|0;
  $41 = ($40>>>0)<($$idx$val$i>>>0);
  $indvars$iv$next = (($indvars$iv) + 1)|0;
  if ($41) {
   $$05063 = $$1;$$05161 = $40;$$idx$val$i70 = $$idx$val$i;$indvars$iv = $indvars$iv$next;
  } else {
   $$050$lcssa = $$1;
   break;
  }
 }
 return ($$050$lcssa|0);
}
function _OptStackOps($0) {
 $0 = $0|0;
 var $$0$i = 0, $$0$in$be$i = 0, $$0$in4$i = 0, $$0$lcssa = 0, $$0$ph218 = 0, $$0206 = 0, $$03$i = 0, $$05$i = 0, $$065$ph217 = 0, $$065205 = 0, $$067$ph214 = 0, $$071$ph211 = 0, $$075$ph210 = 0, $$075204 = 0, $$1$i = 0, $$168 = 0, $$172 = 0, $$176 = 0, $$2 = 0, $$269 = 0;
 var $$273 = 0, $$idx$i = 0, $$idx$i80 = 0, $$idx$i82 = 0, $$idx$val$i = 0, $$idx$val$i203 = 0, $$idx$val$i203209 = 0, $$idx$val$i203219 = 0, $$idx$val$i207 = 0, $$idx$val$i79 = 0, $$idx$val$i81 = 0, $$idx$val$i83 = 0, $$idx$val$i98 = 0, $$mask = 0, $$pre$i = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i203209 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i203209|0)>(0);
 if (!($2)) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 12|0);
 $5 = ((($1)) + 20|0);
 $6 = ((($1)) + 24|0);
 $7 = ((($1)) + 28|0);
 $8 = ((($1)) + 32|0);
 $9 = ((($1)) + 44|0);
 $10 = ((($1)) + 48|0);
 $11 = ((($1)) + 52|0);
 $12 = ((($1)) + 56|0);
 $13 = ((($1)) + 68|0);
 $14 = ((($1)) + 72|0);
 $15 = ((($1)) + 76|0);
 $16 = ((($1)) + 80|0);
 $17 = ((($1)) + 92|0);
 $18 = ((($1)) + 96|0);
 $19 = ((($1)) + 100|0);
 $20 = ((($1)) + 104|0);
 $21 = ((($1)) + 116|0);
 $22 = ((($1)) + 120|0);
 $23 = ((($1)) + 124|0);
 $24 = ((($1)) + 128|0);
 $25 = ((($1)) + 140|0);
 $26 = ((($1)) + 144|0);
 $27 = ((($1)) + 148|0);
 $28 = ((($1)) + 152|0);
 $29 = ((($1)) + 8|0);
 $30 = ((($1)) + 88|0);
 $31 = ((($1)) + 112|0);
 $32 = ((($1)) + 184|0);
 $33 = ((($1)) + 188|0);
 $34 = ((($1)) + 160|0);
 $35 = ((($1)) + 164|0);
 $36 = ((($1)) + 168|0);
 $37 = ((($1)) + 172|0);
 $38 = ((($1)) + 176|0);
 $39 = ((($1)) + 180|0);
 $40 = ((($1)) + 132|0);
 $41 = ((($1)) + 108|0);
 $42 = ((($1)) + 16|0);
 $43 = ((($1)) + 40|0);
 $44 = ((($1)) + 36|0);
 $45 = ((($1)) + 60|0);
 $46 = ((($1)) + 64|0);
 $47 = ((($1)) + 84|0);
 $48 = ((($1)) + 136|0);
 $49 = ((($1)) + 156|0);
 $50 = ((($1)) + 16|0);
 $51 = ((($1)) + 88|0);
 $$0$ph218 = 0;$$065$ph217 = 0;$$067$ph214 = 0;$$071$ph211 = 0;$$075$ph210 = 0;$$idx$val$i203219 = $$idx$val$i203209;
 L4: while(1) {
  $$0206 = $$0$ph218;$$065205 = $$065$ph217;$$075204 = $$075$ph210;$$idx$val$i207 = $$idx$val$i203219;
  L6: while(1) {
   $52 = ($$idx$val$i207>>>0)>($$075204>>>0);
   if (!($52)) {
    label = 5;
    break L4;
   }
   $55 = HEAP32[$3>>2]|0;
   $56 = (($55) + ($$075204<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   switch ($$065205|0) {
   case 0:  {
    label = 7;
    break L6;
    break;
   }
   case 1:  {
    $$168 = $$067$ph214;$$172 = $$071$ph211;
    label = 8;
    break L6;
    break;
   }
   case 2:  {
    label = 14;
    break L6;
    break;
   }
   case 3:  {
    break;
   }
   default: {
    $$176 = $$075204;$$2 = $$065205;$$269 = $$067$ph214;$$273 = $$071$ph211;
    break L6;
   }
   }
   $123 = (_GetRegInfo($0,$$075204,1008)|0);
   $124 = HEAP32[$4>>2]|0;
   $125 = $124 | $123;
   HEAP32[$4>>2] = $125;
   $126 = HEAP32[$5>>2]|0;
   $127 = ($126|0)>(-1);
   if ($127) {
    $128 = HEAP32[$$idx$i>>2]|0;
    $129 = ($128>>>0)>($126>>>0);
    if (!($129)) {
     label = 35;
     break L4;
    }
    $132 = HEAP32[$3>>2]|0;
    $133 = (($132) + ($126<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    HEAP32[$6>>2] = $134;
    $135 = $134;
    $236 = $135;
   } else {
    HEAP32[$6>>2] = 0;
    $236 = 0;
   }
   $136 = HEAP32[$7>>2]|0;
   $137 = ($136|0)>(-1);
   if ($137) {
    $138 = HEAP32[$$idx$i>>2]|0;
    $139 = ($138>>>0)>($136>>>0);
    if (!($139)) {
     label = 40;
     break L4;
    }
    $142 = HEAP32[$3>>2]|0;
    $143 = (($142) + ($136<<2)|0);
    $144 = HEAP32[$143>>2]|0;
    HEAP32[$8>>2] = $144;
   } else {
    HEAP32[$8>>2] = 0;
   }
   $145 = HEAP32[$9>>2]|0;
   $146 = ($145|0)>(-1);
   if ($146) {
    $147 = HEAP32[$$idx$i>>2]|0;
    $148 = ($147>>>0)>($145>>>0);
    if (!($148)) {
     label = 45;
     break L4;
    }
    $151 = HEAP32[$3>>2]|0;
    $152 = (($151) + ($145<<2)|0);
    $153 = HEAP32[$152>>2]|0;
    HEAP32[$10>>2] = $153;
    $154 = $153;
    $245 = $154;
   } else {
    HEAP32[$10>>2] = 0;
    $245 = 0;
   }
   $155 = HEAP32[$11>>2]|0;
   $156 = ($155|0)>(-1);
   if ($156) {
    $157 = HEAP32[$$idx$i>>2]|0;
    $158 = ($157>>>0)>($155>>>0);
    if (!($158)) {
     label = 50;
     break L4;
    }
    $161 = HEAP32[$3>>2]|0;
    $162 = (($161) + ($155<<2)|0);
    $163 = HEAP32[$162>>2]|0;
    HEAP32[$12>>2] = $163;
   } else {
    HEAP32[$12>>2] = 0;
   }
   $164 = HEAP32[$13>>2]|0;
   $165 = ($164|0)>(-1);
   if ($165) {
    $166 = HEAP32[$$idx$i>>2]|0;
    $167 = ($166>>>0)>($164>>>0);
    if (!($167)) {
     label = 55;
     break L4;
    }
    $170 = HEAP32[$3>>2]|0;
    $171 = (($170) + ($164<<2)|0);
    $172 = HEAP32[$171>>2]|0;
    HEAP32[$14>>2] = $172;
   } else {
    HEAP32[$14>>2] = 0;
   }
   $173 = HEAP32[$15>>2]|0;
   $174 = ($173|0)>(-1);
   if ($174) {
    $175 = HEAP32[$$idx$i>>2]|0;
    $176 = ($175>>>0)>($173>>>0);
    if (!($176)) {
     label = 60;
     break L4;
    }
    $179 = HEAP32[$3>>2]|0;
    $180 = (($179) + ($173<<2)|0);
    $181 = HEAP32[$180>>2]|0;
    HEAP32[$16>>2] = $181;
   } else {
    HEAP32[$16>>2] = 0;
   }
   $182 = HEAP32[$17>>2]|0;
   $183 = ($182|0)>(-1);
   if ($183) {
    $184 = HEAP32[$$idx$i>>2]|0;
    $185 = ($184>>>0)>($182>>>0);
    if (!($185)) {
     label = 65;
     break L4;
    }
    $188 = HEAP32[$3>>2]|0;
    $189 = (($188) + ($182<<2)|0);
    $190 = HEAP32[$189>>2]|0;
    HEAP32[$18>>2] = $190;
   } else {
    HEAP32[$18>>2] = 0;
   }
   $191 = HEAP32[$19>>2]|0;
   $192 = ($191|0)>(-1);
   if ($192) {
    $193 = HEAP32[$$idx$i>>2]|0;
    $194 = ($193>>>0)>($191>>>0);
    if (!($194)) {
     label = 70;
     break L4;
    }
    $197 = HEAP32[$3>>2]|0;
    $198 = (($197) + ($191<<2)|0);
    $199 = HEAP32[$198>>2]|0;
    HEAP32[$20>>2] = $199;
   } else {
    HEAP32[$20>>2] = 0;
   }
   $200 = HEAP32[$21>>2]|0;
   $201 = ($200|0)>(-1);
   if ($201) {
    $202 = HEAP32[$$idx$i>>2]|0;
    $203 = ($202>>>0)>($200>>>0);
    if (!($203)) {
     label = 75;
     break L4;
    }
    $206 = HEAP32[$3>>2]|0;
    $207 = (($206) + ($200<<2)|0);
    $208 = HEAP32[$207>>2]|0;
    HEAP32[$22>>2] = $208;
   } else {
    HEAP32[$22>>2] = 0;
   }
   $209 = HEAP32[$23>>2]|0;
   $210 = ($209|0)>(-1);
   if ($210) {
    $211 = HEAP32[$$idx$i>>2]|0;
    $212 = ($211>>>0)>($209>>>0);
    if (!($212)) {
     label = 80;
     break L4;
    }
    $215 = HEAP32[$3>>2]|0;
    $216 = (($215) + ($209<<2)|0);
    $217 = HEAP32[$216>>2]|0;
    HEAP32[$24>>2] = $217;
   } else {
    HEAP32[$24>>2] = 0;
   }
   $218 = HEAP32[$25>>2]|0;
   $219 = ($218|0)>(-1);
   if ($219) {
    $220 = HEAP32[$$idx$i>>2]|0;
    $221 = ($220>>>0)>($218>>>0);
    if (!($221)) {
     label = 85;
     break L4;
    }
    $224 = HEAP32[$3>>2]|0;
    $225 = (($224) + ($218<<2)|0);
    $226 = HEAP32[$225>>2]|0;
    HEAP32[$26>>2] = $226;
   } else {
    HEAP32[$26>>2] = 0;
   }
   $227 = HEAP32[$27>>2]|0;
   $228 = ($227|0)>(-1);
   if ($228) {
    $229 = HEAP32[$$idx$i>>2]|0;
    $230 = ($229>>>0)>($227>>>0);
    if (!($230)) {
     label = 90;
     break L4;
    }
    $233 = HEAP32[$3>>2]|0;
    $234 = (($233) + ($227<<2)|0);
    $235 = HEAP32[$234>>2]|0;
    HEAP32[$28>>2] = $235;
   } else {
    HEAP32[$28>>2] = 0;
   }
   $237 = ($236|0)==(0|0);
   if ($237) {
    $254 = $125;
   } else {
    $238 = ((($236)) + 1|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = ($239<<24>>24)==(3);
    if ($240) {
     $241 = ((($236)) + 14|0);
     $242 = HEAP16[$241>>1]|0;
     $243 = $242&65535;
     $244 = $125 | $243;
     HEAP32[$4>>2] = $244;
     $254 = $244;
    } else {
     $254 = $125;
    }
   }
   $246 = ($245|0)==(0|0);
   if (!($246)) {
    $247 = ((($245)) + 1|0);
    $248 = HEAP8[$247>>0]|0;
    $249 = ($248<<24>>24)==(3);
    if ($249) {
     $250 = ((($245)) + 14|0);
     $251 = HEAP16[$250>>1]|0;
     $252 = $251&65535;
     $253 = $254 | $252;
     HEAP32[$4>>2] = $253;
    }
   }
   $255 = HEAP32[$29>>2]|0;
   $256 = ((($255)) + 8|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = ($257|0)==(0);
   if ($258) {
    $266 = $255;
   } else {
    $259 = HEAP32[$1>>2]|0;
    $260 = HEAP32[$35>>2]|0;
    $261 = (($260) + 1)|0;
    $262 = (_GetRegInfo($259,$261,$257)|0);
    $263 = $262 & $257;
    $264 = ($263|0)==(0);
    if (!($264)) {
     label = 121;
     break;
    }
    $$pre$i = HEAP32[$29>>2]|0;
    $266 = $$pre$i;
   }
   $265 = ((($266)) + 12|0);
   $267 = HEAP32[$265>>2]|0;
   $268 = $267 & 1;
   $269 = ($268|0)==(0);
   if (!($269)) {
    $270 = HEAP32[$38>>2]|0;
    $271 = ((($270)) + 40|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = HEAP16[$272>>1]|0;
    $274 = ($273<<16>>16)>(-1);
    if (!($274)) {
     label = 121;
     break;
    }
   }
   $275 = $267 & 2;
   $276 = ($275|0)==(0);
   if (!($276)) {
    $277 = HEAP32[$38>>2]|0;
    $278 = ((($277)) + 40|0);
    $279 = HEAP32[$278>>2]|0;
    $280 = ((($279)) + 2|0);
    $281 = HEAP16[$280>>1]|0;
    $282 = ($281<<16>>16)==(0);
    if (!($282)) {
     label = 121;
     break;
    }
   }
   $283 = $267 & 4;
   $284 = ($283|0)==(0);
   do {
    if (!($284)) {
     $285 = HEAP32[$5>>2]|0;
     $286 = HEAP32[$9>>2]|0;
     $287 = $285 | $286;
     $288 = ($287|0)<(0);
     if ($288) {
      label = 121;
      break L6;
     }
     $289 = $267 & 12;
     $290 = ($289|0)==(0);
     if ($290) {
      break;
     }
     $291 = HEAP32[$42>>2]|0;
     $292 = HEAP32[$43>>2]|0;
     $293 = $291 & 1;
     $294 = $293 & $292;
     $295 = ($294|0)==(0);
     if ($295) {
      label = 121;
      break L6;
     }
    }
   } while(0);
   $296 = $267 & 16;
   $297 = ($296|0)==(0);
   do {
    if (!($297)) {
     $298 = HEAP32[$17>>2]|0;
     $299 = HEAP32[$21>>2]|0;
     $300 = $298 | $299;
     $301 = ($300|0)<(0);
     if ($301) {
      label = 121;
      break L6;
     }
     $302 = $267 & 48;
     $303 = ($302|0)==(0);
     if ($303) {
      break;
     }
     $304 = HEAP32[$30>>2]|0;
     $305 = HEAP32[$31>>2]|0;
     $306 = $304 & 1;
     $307 = $306 & $305;
     $308 = ($307|0)==(0);
     if ($308) {
      label = 121;
      break L6;
     }
    }
   } while(0);
   $309 = HEAP32[$30>>2]|0;
   $310 = HEAP32[$31>>2]|0;
   $311 = $310 | $309;
   $312 = $311 & 16;
   $313 = ($312|0)==(0);
   if (!($313)) {
    label = 121;
    break;
   }
   $314 = HEAP32[$4>>2]|0;
   $315 = $314 & 48;
   $316 = ($315|0)==(0);
   do {
    if ($316) {
     HEAP32[$32>>2] = 34402;
     HEAP32[$33>>2] = 34407;
    } else {
     $317 = $314 & 768;
     $318 = ($317|0)==(0);
     if ($318) {
      HEAP32[$32>>2] = 30805;
      HEAP32[$33>>2] = 30810;
      break;
     }
     $319 = $314 & 192;
     $320 = ($319|0)==(0);
     if (!($320)) {
      label = 121;
      break L6;
     }
     HEAP32[$32>>2] = 30817;
     HEAP32[$33>>2] = 30822;
    }
   } while(0);
   $322 = HEAP32[$1>>2]|0;
   $323 = HEAP32[$34>>2]|0;
   $324 = HEAP32[$35>>2]|0;
   $325 = (_CS_IsBasicBlock($322,$323,$324)|0);
   $326 = ($325|0)==(0);
   $327 = HEAP32[$34>>2]|0;
   if ($326) {
    $$176 = $327;$$2 = 0;$$269 = $$067$ph214;$$273 = $$071$ph211;
    break;
   }
   $328 = (_CS_GetPrevEntry($0,$327)|0);
   HEAP32[$36>>2] = $328;
   $329 = HEAP32[$34>>2]|0;
   $330 = HEAP32[$$idx$i>>2]|0;
   $331 = ($330>>>0)>($329>>>0);
   if (!($331)) {
    label = 124;
    break L4;
   }
   $334 = HEAP32[$3>>2]|0;
   $335 = (($334) + ($329<<2)|0);
   $336 = HEAP32[$335>>2]|0;
   HEAP32[$37>>2] = $336;
   $337 = HEAP32[$35>>2]|0;
   $338 = ($330>>>0)>($337>>>0);
   if (!($338)) {
    label = 126;
    break L4;
   }
   $341 = (($334) + ($337<<2)|0);
   $342 = HEAP32[$341>>2]|0;
   HEAP32[$38>>2] = $342;
   $343 = (_CS_GetNextEntry($0,$337)|0);
   HEAP32[$39>>2] = $343;
   $$idx$val$i98 = HEAP32[$$idx$i>>2]|0;
   $344 = HEAP32[$34>>2]|0;
   $$03$i = (($344) + 1)|0;
   $345 = HEAP32[$35>>2]|0;
   $346 = ($$03$i|0)<($345|0);
   if ($346) {
    $$0$in4$i = $344;$$05$i = $$03$i;
    while(1) {
     $347 = HEAP32[$1>>2]|0;
     $348 = ((($347)) + 8|0);
     $349 = HEAP32[$348>>2]|0;
     $350 = ($349>>>0)>($$05$i>>>0);
     if (!($350)) {
      label = 129;
      break L4;
     }
     $353 = ((($347)) + 16|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = (($354) + ($$05$i<<2)|0);
     $356 = HEAP32[$355>>2]|0;
     $357 = ((($356)) + 14|0);
     $358 = HEAP16[$357>>1]|0;
     $359 = $358 & 12288;
     $360 = ($359<<16>>16)==(0);
     do {
      if ($360) {
       $377 = HEAP8[$356>>0]|0;
       $378 = ($377<<24>>24)==(37);
       if (!($378)) {
        $$0$in$be$i = $$05$i;
        break;
       }
       $379 = ((($356)) + 4|0);
       $380 = HEAP32[$379>>2]|0;
       $381 = (_strcmp($380,36890)|0);
       $not$$i = ($381|0)==(0);
       if ($not$$i) {
        label = 138;
       } else {
        $$0$in$be$i = $$05$i;
       }
      } else {
       $361 = ((($356)) + 1|0);
       $362 = HEAP8[$361>>0]|0;
       $363 = ($362<<24>>24)==(10);
       if (!($363)) {
        $364 = ((($356)) + 40|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = ((($365)) + 4|0);
        $367 = HEAP16[$366>>1]|0;
        $368 = ($367<<16>>16)>(1);
        if (!($368)) {
         label = 133;
         break L4;
        }
       }
       $371 = ((($356)) + 4|0);
       $372 = HEAP32[$371>>2]|0;
       $373 = (_strcmp($372,36898)|0);
       $374 = ($373|0)==(0);
       if ($374) {
        label = 138;
       } else {
        label = 135;
        break L4;
       }
      }
     } while(0);
     do {
      if ((label|0) == 138) {
       label = 0;
       $382 = (_CS_GetPrevEntry($347,$$05$i)|0);
       $383 = ($382|0)==(0|0);
       do {
        if ($383) {
         label = 142;
        } else {
         $384 = HEAP8[$382>>0]|0;
         $385 = ($384<<24>>24)==(42);
         if (!($385)) {
          label = 142;
          break;
         }
         $386 = (_CE_IsConstImm($382)|0);
         $387 = ($386|0)==(0);
         if ($387) {
          label = 142;
          break;
         }
         $388 = ((($382)) + 8|0);
         $389 = HEAP32[$388>>2]|0;
         $390 = (($389) + -2)|0;
         _CE_SetNumArg($382,$390);
         $$1$i = $$05$i;
        }
       } while(0);
       do {
        if ((label|0) == 142) {
         label = 0;
         $391 = ((($356)) + 40|0);
         $392 = HEAP32[$391>>2]|0;
         $393 = ((($392)) + 4|0);
         $394 = HEAP16[$393>>1]|0;
         $395 = $394 << 16 >> 16;
         $396 = (($395) + -2)|0;
         $397 = (_MakeHexArg($396)|0);
         $398 = ((($356)) + 36|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = (_NewCodeEntry(42,2,$397,0,$399)|0);
         $401 = (($$0$in4$i) + 2)|0;
         $402 = HEAP32[$1>>2]|0;
         _CS_InsertEntry($402,$400,$$05$i);
         $403 = HEAP32[$5>>2]|0;
         $404 = ($403|0)<($$05$i|0);
         if (!($404)) {
          $405 = (($403) + 1)|0;
          HEAP32[$5>>2] = $405;
         }
         $406 = HEAP32[$7>>2]|0;
         $407 = ($406|0)<($$05$i|0);
         if (!($407)) {
          $408 = (($406) + 1)|0;
          HEAP32[$7>>2] = $408;
         }
         $409 = HEAP32[$9>>2]|0;
         $410 = ($409|0)<($$05$i|0);
         if (!($410)) {
          $411 = (($409) + 1)|0;
          HEAP32[$9>>2] = $411;
         }
         $412 = HEAP32[$11>>2]|0;
         $413 = ($412|0)<($$05$i|0);
         if (!($413)) {
          $414 = (($412) + 1)|0;
          HEAP32[$11>>2] = $414;
         }
         $415 = HEAP32[$13>>2]|0;
         $416 = ($415|0)<($$05$i|0);
         if (!($416)) {
          $417 = (($415) + 1)|0;
          HEAP32[$13>>2] = $417;
         }
         $418 = HEAP32[$15>>2]|0;
         $419 = ($418|0)<($$05$i|0);
         if (!($419)) {
          $420 = (($418) + 1)|0;
          HEAP32[$15>>2] = $420;
         }
         $421 = HEAP32[$17>>2]|0;
         $422 = ($421|0)<($$05$i|0);
         if (!($422)) {
          $423 = (($421) + 1)|0;
          HEAP32[$17>>2] = $423;
         }
         $424 = HEAP32[$19>>2]|0;
         $425 = ($424|0)<($$05$i|0);
         if (!($425)) {
          $426 = (($424) + 1)|0;
          HEAP32[$19>>2] = $426;
         }
         $427 = HEAP32[$21>>2]|0;
         $428 = ($427|0)<($$05$i|0);
         if (!($428)) {
          $429 = (($427) + 1)|0;
          HEAP32[$21>>2] = $429;
         }
         $430 = HEAP32[$23>>2]|0;
         $431 = ($430|0)<($$05$i|0);
         if (!($431)) {
          $432 = (($430) + 1)|0;
          HEAP32[$23>>2] = $432;
         }
         $433 = HEAP32[$25>>2]|0;
         $434 = ($433|0)<($$05$i|0);
         if (!($434)) {
          $435 = (($433) + 1)|0;
          HEAP32[$25>>2] = $435;
         }
         $436 = HEAP32[$27>>2]|0;
         $437 = ($436|0)<($$05$i|0);
         if (!($437)) {
          $438 = (($436) + 1)|0;
          HEAP32[$27>>2] = $438;
         }
         $439 = HEAP32[$37>>2]|0;
         $440 = ($439|0)==(0|0);
         do {
          if (!($440)) {
           $441 = HEAP32[$34>>2]|0;
           $442 = ($441|0)<($$05$i|0);
           if ($442) {
            break;
           }
           $443 = (($441) + 1)|0;
           HEAP32[$34>>2] = $443;
          }
         } while(0);
         $444 = HEAP32[$38>>2]|0;
         $445 = ($444|0)==(0|0);
         if ($445) {
          $$1$i = $401;
          break;
         }
         $446 = HEAP32[$35>>2]|0;
         $447 = ($446|0)<($$05$i|0);
         if ($447) {
          $$1$i = $401;
          break;
         }
         $448 = (($446) + 1)|0;
         HEAP32[$35>>2] = $448;
         $$1$i = $401;
        }
       } while(0);
       $449 = HEAP32[$1>>2]|0;
       $450 = (($$1$i) + 1)|0;
       $451 = (_RegYUsed($449,$450)|0);
       $452 = ($451|0)==(0);
       if ($452) {
        $$0$in$be$i = $$1$i;
        break;
       }
       $453 = ((($356)) + 40|0);
       $454 = HEAP32[$453>>2]|0;
       $455 = ((($454)) + 4|0);
       $456 = HEAP16[$455>>1]|0;
       $457 = $456 << 16 >> 16;
       $458 = (_MakeHexArg($457)|0);
       $459 = ((($356)) + 36|0);
       $460 = HEAP32[$459>>2]|0;
       $461 = (_NewCodeEntry(42,2,$458,0,$460)|0);
       $462 = HEAP32[$1>>2]|0;
       _CS_InsertEntry($462,$461,$450);
       $463 = HEAP32[$5>>2]|0;
       $464 = ($463|0)>($$1$i|0);
       if ($464) {
        $465 = (($463) + 1)|0;
        HEAP32[$5>>2] = $465;
       }
       $466 = HEAP32[$7>>2]|0;
       $467 = ($466|0)>($$1$i|0);
       if ($467) {
        $468 = (($466) + 1)|0;
        HEAP32[$7>>2] = $468;
       }
       $469 = HEAP32[$9>>2]|0;
       $470 = ($469|0)>($$1$i|0);
       if ($470) {
        $471 = (($469) + 1)|0;
        HEAP32[$9>>2] = $471;
       }
       $472 = HEAP32[$11>>2]|0;
       $473 = ($472|0)>($$1$i|0);
       if ($473) {
        $474 = (($472) + 1)|0;
        HEAP32[$11>>2] = $474;
       }
       $475 = HEAP32[$13>>2]|0;
       $476 = ($475|0)>($$1$i|0);
       if ($476) {
        $477 = (($475) + 1)|0;
        HEAP32[$13>>2] = $477;
       }
       $478 = HEAP32[$15>>2]|0;
       $479 = ($478|0)>($$1$i|0);
       if ($479) {
        $480 = (($478) + 1)|0;
        HEAP32[$15>>2] = $480;
       }
       $481 = HEAP32[$17>>2]|0;
       $482 = ($481|0)>($$1$i|0);
       if ($482) {
        $483 = (($481) + 1)|0;
        HEAP32[$17>>2] = $483;
       }
       $484 = HEAP32[$19>>2]|0;
       $485 = ($484|0)>($$1$i|0);
       if ($485) {
        $486 = (($484) + 1)|0;
        HEAP32[$19>>2] = $486;
       }
       $487 = HEAP32[$21>>2]|0;
       $488 = ($487|0)>($$1$i|0);
       if ($488) {
        $489 = (($487) + 1)|0;
        HEAP32[$21>>2] = $489;
       }
       $490 = HEAP32[$23>>2]|0;
       $491 = ($490|0)>($$1$i|0);
       if ($491) {
        $492 = (($490) + 1)|0;
        HEAP32[$23>>2] = $492;
       }
       $493 = HEAP32[$25>>2]|0;
       $494 = ($493|0)>($$1$i|0);
       if ($494) {
        $495 = (($493) + 1)|0;
        HEAP32[$25>>2] = $495;
       }
       $496 = HEAP32[$27>>2]|0;
       $497 = ($496|0)>($$1$i|0);
       if ($497) {
        $498 = (($496) + 1)|0;
        HEAP32[$27>>2] = $498;
       }
       $499 = HEAP32[$37>>2]|0;
       $500 = ($499|0)==(0|0);
       do {
        if (!($500)) {
         $501 = HEAP32[$34>>2]|0;
         $502 = ($501|0)>($$1$i|0);
         if (!($502)) {
          break;
         }
         $503 = (($501) + 1)|0;
         HEAP32[$34>>2] = $503;
        }
       } while(0);
       $504 = HEAP32[$38>>2]|0;
       $505 = ($504|0)==(0|0);
       if ($505) {
        $$0$in$be$i = $450;
        break;
       }
       $506 = HEAP32[$35>>2]|0;
       $507 = ($506|0)>($$1$i|0);
       if (!($507)) {
        $$0$in$be$i = $450;
        break;
       }
       $508 = (($506) + 1)|0;
       HEAP32[$35>>2] = $508;
       $$0$in$be$i = $450;
      }
     } while(0);
     $$0$i = (($$0$in$be$i) + 1)|0;
     $509 = HEAP32[$35>>2]|0;
     $510 = ($$0$i|0)<($509|0);
     if ($510) {
      $$0$in4$i = $$0$in$be$i;$$05$i = $$0$i;
     } else {
      break;
     }
    }
   }
   $511 = HEAP32[$30>>2]|0;
   $512 = $511 & 2;
   $513 = ($512|0)==(0);
   if (!($513)) {
    $514 = HEAP32[$41>>2]|0;
    $515 = (($514) + -2)|0;
    HEAP32[$41>>2] = $515;
   }
   $516 = HEAP32[$31>>2]|0;
   $517 = $516 & 2;
   $518 = ($517|0)==(0);
   if (!($518)) {
    $519 = HEAP32[$40>>2]|0;
    $520 = (($519) + -2)|0;
    HEAP32[$40>>2] = $520;
   }
   _CS_GenRegInfo($0);
   $521 = HEAP32[$29>>2]|0;
   $522 = ((($521)) + 4|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = (FUNCTION_TABLE_ii[$523 & 127]($1)|0);
   $525 = (($524) + ($$0206))|0;
   $$idx$val$i79 = HEAP32[$$idx$i>>2]|0;
   $526 = (($$075204) - ($$idx$val$i98))|0;
   $527 = (($526) + ($$idx$val$i79))|0;
   _CS_GenRegInfo($0);
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $528 = ($527|0)<($$idx$val$i|0);
   if ($528) {
    $$0206 = $525;$$065205 = 0;$$075204 = $527;$$idx$val$i207 = $$idx$val$i;
   } else {
    $$0$lcssa = $525;
    label = 210;
    break L4;
   }
  }
  L223: do {
   if ((label|0) == 7) {
    label = 0;
    HEAP32[$29>>2] = 0;
    HEAP32[$4>>2] = 0;
    HEAP32[$42>>2] = 0;
    HEAP32[$5>>2] = -1;
    HEAP32[$7>>2] = -1;
    HEAP32[$44>>2] = 0;
    HEAP32[$43>>2] = 0;
    HEAP32[$9>>2] = -1;
    HEAP32[$11>>2] = -1;
    HEAP32[$45>>2] = 0;
    HEAP32[$46>>2] = 0;
    HEAP32[$13>>2] = -1;
    HEAP32[$15>>2] = -1;
    HEAP32[$47>>2] = 0;
    HEAP32[$30>>2] = 0;
    HEAP32[$17>>2] = -1;
    HEAP32[$19>>2] = -1;
    HEAP32[$41>>2] = 0;
    HEAP32[$31>>2] = 0;
    HEAP32[$21>>2] = -1;
    HEAP32[$23>>2] = -1;
    HEAP32[$40>>2] = 0;
    HEAP32[$48>>2] = 0;
    HEAP32[$25>>2] = -1;
    HEAP32[$27>>2] = -1;
    HEAP32[$49>>2] = 0;
    HEAP32[$34>>2] = -1;
    HEAP32[$35>>2] = -1;
    $$168 = 0;$$172 = 0;
    label = 8;
   }
   else if ((label|0) == 14) {
    label = 0;
    $$idx$i82 = ((($57)) + 24|0);
    $$idx$val$i83 = HEAP32[$$idx$i82>>2]|0;
    $65 = ($$idx$val$i83|0)==(0);
    if (!($65)) {
     HEAP32[$30>>2] = 0;
     HEAP32[$17>>2] = -1;
     HEAP32[$19>>2] = -1;
     HEAP32[$41>>2] = 0;
     HEAP32[$31>>2] = 0;
     HEAP32[$21>>2] = -1;
     HEAP32[$23>>2] = -1;
     HEAP32[$40>>2] = 0;
     HEAP32[$48>>2] = 0;
     HEAP32[$25>>2] = -1;
     HEAP32[$27>>2] = -1;
     HEAP32[$49>>2] = 0;
    }
    $66 = HEAP16[$57>>1]|0;
    $67 = $66&255;
    $68 = ($67<<24>>24)==(37);
    do {
     if ($68) {
      $69 = ((($57)) + 4|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (_bsearch($70,7660,20,16,7)|0);
      HEAP32[$29>>2] = $71;
      $72 = ($71|0)==(0|0);
      if (!($72)) {
       HEAP32[$35>>2] = $$075204;
       HEAP32[$38>>2] = $57;
       $$176 = $$075204;$$2 = 3;$$269 = $$067$ph214;$$273 = $$071$ph211;
       break L223;
      }
      $73 = HEAP32[$69>>2]|0;
      $74 = (_bsearch($73,7980,43,4,8)|0);
      $75 = ($74|0)==(0|0);
      if ($75) {
       $76 = HEAP32[$34>>2]|0;
       $$176 = $76;$$2 = 0;$$269 = $$067$ph214;$$273 = $$071$ph211;
       break L223;
      } else {
       $77 = ((($57)) + 14|0);
       $78 = HEAP16[$77>>1]|0;
       $79 = ((($57)) + 16|0);
       $80 = HEAP16[$79>>1]|0;
       $81 = $80 | $78;
       $82 = $81&65535;
       $83 = HEAP32[$4>>2]|0;
       $84 = $82 | $83;
       HEAP32[$4>>2] = $84;
       _TrackLoads($51,$57,$$075204);
       $$pre$phiZ2D = $77;
       break;
      }
     } else {
      $85 = ((($57)) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = $86 & 128;
      $88 = ($87|0)==(0);
      $89 = $86 >>> 16;
      $90 = $89&65535;
      if (!($88)) {
       $91 = ((($57)) + 16|0);
       $92 = HEAP16[$91>>1]|0;
       $93 = ($92&65535)<(8);
       if ($93) {
        $94 = HEAP32[$34>>2]|0;
        $$176 = $94;$$2 = 0;$$269 = $$067$ph214;$$273 = $$071$ph211;
        break L223;
       }
      }
      $95 = ((($57)) + 14|0);
      $96 = $90 & 12288;
      $97 = ($96<<16>>16)==(0);
      do {
       if (!($97)) {
        $$mask = $66 & -256;
        $98 = ($$mask<<16>>16)==(2560);
        if ($98) {
         $99 = ((($57)) + 40|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = ((($100)) + 4|0);
         $102 = HEAP16[$101>>1]|0;
         $103 = ($102<<16>>16)<(2);
         if (!($103)) {
          break;
         }
        }
        $104 = HEAP32[$34>>2]|0;
        $$176 = $104;$$2 = 0;$$269 = $$067$ph214;$$273 = $$071$ph211;
        break L223;
       }
      } while(0);
      $105 = ((($57)) + 16|0);
      $106 = HEAP16[$105>>1]|0;
      $107 = $106 | $90;
      $108 = $107&65535;
      $109 = HEAP32[$4>>2]|0;
      $110 = $108 | $109;
      HEAP32[$4>>2] = $110;
      _TrackLoads($51,$57,$$075204);
      $$pre$phiZ2D = $95;
     }
    } while(0);
    $111 = HEAP16[$$pre$phiZ2D>>1]|0;
    $112 = $111&65535;
    $113 = $112 | $$071$ph211;
    $114 = $$067$ph214 & 3;
    $115 = $114 ^ 3;
    $116 = $115 & $113;
    $117 = ($116|0)==(0);
    if ($117) {
     $119 = ((($57)) + 16|0);
     $120 = HEAP16[$119>>1]|0;
     $121 = $120&65535;
     $122 = $121 | $$067$ph214;
     $$176 = $$075204;$$2 = 2;$$269 = $122;$$273 = $113;
     break;
    } else {
     $118 = HEAP32[$34>>2]|0;
     $$176 = $118;$$2 = 0;$$269 = $$067$ph214;$$273 = $113;
     break;
    }
   }
   else if ((label|0) == 121) {
    label = 0;
    $321 = HEAP32[$34>>2]|0;
    $$176 = $321;$$2 = 0;$$269 = $$067$ph214;$$273 = $$071$ph211;
   }
  } while(0);
  do {
   if ((label|0) == 8) {
    label = 0;
    $$idx$i80 = ((($57)) + 24|0);
    $$idx$val$i81 = HEAP32[$$idx$i80>>2]|0;
    $58 = ($$idx$val$i81|0)==(0);
    if (!($58)) {
     HEAP32[$42>>2] = 0;
     HEAP32[$5>>2] = -1;
     HEAP32[$7>>2] = -1;
     HEAP32[$44>>2] = 0;
     HEAP32[$43>>2] = 0;
     HEAP32[$9>>2] = -1;
     HEAP32[$11>>2] = -1;
     HEAP32[$45>>2] = 0;
     HEAP32[$46>>2] = 0;
     HEAP32[$13>>2] = -1;
     HEAP32[$15>>2] = -1;
     HEAP32[$47>>2] = 0;
    }
    $59 = HEAP8[$57>>0]|0;
    $60 = ($59<<24>>24)==(37);
    if ($60) {
     $61 = ((($57)) + 4|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = (_strcmp($62,35341)|0);
     $64 = ($63|0)==(0);
     if ($64) {
      HEAP32[$34>>2] = $$075204;
      $$176 = $$075204;$$2 = 2;$$269 = $$168;$$273 = $$172;
      break;
     }
    }
    _TrackLoads($50,$57,$$075204);
    $$176 = $$075204;$$2 = 1;$$269 = $$168;$$273 = $$172;
   }
  } while(0);
  $529 = (($$176) + 1)|0;
  $$idx$val$i203 = HEAP32[$$idx$i>>2]|0;
  $530 = ($529|0)<($$idx$val$i203|0);
  if ($530) {
   $$0$ph218 = $$0206;$$065$ph217 = $$2;$$067$ph214 = $$269;$$071$ph211 = $$273;$$075$ph210 = $529;$$idx$val$i203219 = $$idx$val$i203;
  } else {
   $$0$lcssa = $$0206;
   label = 210;
   break;
  }
 }
 switch (label|0) {
  case 5: {
   $53 = HEAP32[3332]|0;
   $54 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$53 & 1]($54,40922,40950,129);
   // unreachable;
   break;
  }
  case 35: {
   $130 = HEAP32[3332]|0;
   $131 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$130 & 1]($131,40922,40950,129);
   // unreachable;
   break;
  }
  case 40: {
   $140 = HEAP32[3332]|0;
   $141 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$140 & 1]($141,40922,40950,129);
   // unreachable;
   break;
  }
  case 45: {
   $149 = HEAP32[3332]|0;
   $150 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$149 & 1]($150,40922,40950,129);
   // unreachable;
   break;
  }
  case 50: {
   $159 = HEAP32[3332]|0;
   $160 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$159 & 1]($160,40922,40950,129);
   // unreachable;
   break;
  }
  case 55: {
   $168 = HEAP32[3332]|0;
   $169 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$168 & 1]($169,40922,40950,129);
   // unreachable;
   break;
  }
  case 60: {
   $177 = HEAP32[3332]|0;
   $178 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$177 & 1]($178,40922,40950,129);
   // unreachable;
   break;
  }
  case 65: {
   $186 = HEAP32[3332]|0;
   $187 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$186 & 1]($187,40922,40950,129);
   // unreachable;
   break;
  }
  case 70: {
   $195 = HEAP32[3332]|0;
   $196 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$195 & 1]($196,40922,40950,129);
   // unreachable;
   break;
  }
  case 75: {
   $204 = HEAP32[3332]|0;
   $205 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$204 & 1]($205,40922,40950,129);
   // unreachable;
   break;
  }
  case 80: {
   $213 = HEAP32[3332]|0;
   $214 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$213 & 1]($214,40922,40950,129);
   // unreachable;
   break;
  }
  case 85: {
   $222 = HEAP32[3332]|0;
   $223 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$222 & 1]($223,40922,40950,129);
   // unreachable;
   break;
  }
  case 90: {
   $231 = HEAP32[3332]|0;
   $232 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$231 & 1]($232,40922,40950,129);
   // unreachable;
   break;
  }
  case 124: {
   $332 = HEAP32[3332]|0;
   $333 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$332 & 1]($333,40922,40950,129);
   // unreachable;
   break;
  }
  case 126: {
   $339 = HEAP32[3332]|0;
   $340 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$339 & 1]($340,40922,40950,129);
   // unreachable;
   break;
  }
  case 129: {
   $351 = HEAP32[3332]|0;
   $352 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$351 & 1]($352,40922,40950,129);
   // unreachable;
   break;
  }
  case 133: {
   $369 = HEAP32[3332]|0;
   $370 = HEAP32[3331]|0;
   FUNCTION_TABLE_viiii[$369 & 1]($370,30829,30885,444);
   // unreachable;
   break;
  }
  case 135: {
   $375 = HEAP32[3332]|0;
   $376 = HEAP32[3331]|0;
   FUNCTION_TABLE_viiii[$375 & 1]($376,30901,30885,445);
   // unreachable;
   break;
  }
  case 210: {
   STACKTOP = sp;return ($$0$lcssa|0);
   break;
  }
 }
 return (0)|0;
}
function _TrackLoads($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$079 = 0, $$08085 = 0, $$pre = 0, $$pre$phi101Z2D = 0, $$pre$phi95Z2D = 0, $$pre$phi98Z2D = 0, $$pre104 = 0, $$pre105 = 0, $$pre106 = 0, $$pre90 = 0, $$pre93 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)==(0);
 $7 = $4 >>> 16;
 $8 = $7&65535;
 if (!($6)) {
  $9 = ((($1)) + 16|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10&65535;
  $12 = $11 & 1;
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = $11 & 2;
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = ((($0)) + 24|0);
     $$08085 = $16;
     break;
    }
    $17 = $11 & 4;
    $18 = ($17|0)==(0);
    $19 = ((($0)) + 48|0);
    if ($18) {
     $21 = HEAP32[3332]|0;
     $22 = HEAP32[3331]|0;
     FUNCTION_TABLE_viiii[$21 & 1]($22,31357,30885,276);
     // unreachable;
    } else {
     $$08085 = $19;
    }
   } else {
    $20 = ($0|0)==(0|0);
    if ($20) {
     $21 = HEAP32[3332]|0;
     $22 = HEAP32[3331]|0;
     FUNCTION_TABLE_viiii[$21 & 1]($22,31357,30885,276);
     // unreachable;
    } else {
     $$08085 = $0;
    }
   }
  } while(0);
  $23 = ((($$08085)) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(-1);
  $$pre106 = ((($$08085)) + 12|0);
  if ($25) {
   label = 11;
  } else {
   $26 = HEAP32[$$pre106>>2]|0;
   $27 = ($26|0)>(-1);
   if ($27) {
    label = 11;
   } else {
    $$pre = HEAP32[$$08085>>2]|0;
    $$pre$phi101Z2D = $$08085;$31 = $$pre;
   }
  }
  if ((label|0) == 11) {
   $28 = HEAP32[$$08085>>2]|0;
   $29 = $28 | 16;
   HEAP32[$$08085>>2] = $29;
   $$pre$phi101Z2D = $$08085;$31 = $29;
  }
  HEAP32[$23>>2] = $2;
  HEAP32[$$pre106>>2] = -1;
  $30 = $31 & -4;
  HEAP32[$$pre$phi101Z2D>>2] = $30;
  $32 = ((($1)) + 1|0);
  $33 = HEAP8[$32>>0]|0;
  switch ($33<<24>>24) {
  case 6: case 3: case 2:  {
   $34 = $30 | 1;
   HEAP32[$$pre$phi101Z2D>>2] = $34;
   STACKTOP = sp;return;
   break;
  }
  case 10:  {
   $35 = ((($1)) + 40|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($36)) + 4|0);
   $38 = HEAP16[$37>>1]|0;
   $39 = ($38<<16>>16)<(0);
   if ($39) {
    STACKTOP = sp;return;
   }
   $40 = ((($1)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_strcmp($41,36898)|0);
   $43 = ($42|0)==(0);
   if (!($43)) {
    STACKTOP = sp;return;
   }
   $44 = ((($$08085)) + 20|0);
   $45 = $38&65535;
   $46 = $45 & 255;
   HEAP32[$44>>2] = $46;
   $47 = $31 | 3;
   HEAP32[$$pre$phi101Z2D>>2] = $47;
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 }
 $48 = $4 & 256;
 $49 = ($48|0)==(0);
 $50 = HEAP8[$1>>0]|0;
 if (!($49)) {
  switch ($50<<24>>24) {
  case 66:  {
   $51 = ((($0)) + 24|0);
   $$0 = $51;$$079 = $0;
   break;
  }
  case 67:  {
   $52 = ((($0)) + 48|0);
   $$0 = $52;$$079 = $0;
   break;
  }
  case 71:  {
   $53 = ((($0)) + 24|0);
   $$0 = $0;$$079 = $53;
   break;
  }
  case 73:  {
   $54 = ((($0)) + 48|0);
   $$0 = $0;$$079 = $54;
   break;
  }
  case 70:  {
   $55 = ((($0)) + 24|0);
   HEAP32[$55>>2] = 0;
   $56 = ((($0)) + 28|0);
   HEAP32[$56>>2] = -1;
   $57 = ((($0)) + 36|0);
   HEAP32[$57>>2] = -1;
   $58 = ((($0)) + 44|0);
   HEAP32[$58>>2] = 0;
   STACKTOP = sp;return;
   break;
  }
  case 72:  {
   STACKTOP = sp;return;
   break;
  }
  default: {
   _Internal(31365,$vararg_buffer);
   // unreachable;
  }
  }
  $59 = ((($$0)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)>(-1);
  $$pre105 = ((($$0)) + 12|0);
  if ($61) {
   label = 28;
  } else {
   $62 = HEAP32[$$pre105>>2]|0;
   $63 = ($62|0)>(-1);
   if ($63) {
    label = 28;
   } else {
    $$pre90 = HEAP32[$$0>>2]|0;
    $$pre$phi98Z2D = $$0;$72 = $$pre90;
   }
  }
  if ((label|0) == 28) {
   $64 = HEAP32[$$0>>2]|0;
   $65 = $64 | 16;
   HEAP32[$$0>>2] = $65;
   $$pre$phi98Z2D = $$0;$72 = $65;
  }
  $66 = ((($$079)) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  HEAP32[$59>>2] = $67;
  HEAP32[$$pre105>>2] = $2;
  $68 = ((($$079)) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ((($$0)) + 20|0);
  HEAP32[$70>>2] = $69;
  $71 = $72 & -4;
  HEAP32[$$pre$phi98Z2D>>2] = $71;
  $73 = HEAP32[$$079>>2]|0;
  $74 = $73 & 3;
  $75 = $74 | $71;
  HEAP32[$$pre$phi98Z2D>>2] = $75;
  STACKTOP = sp;return;
 }
 $76 = ($50<<24>>24)==(37);
 if ($76) {
  $77 = ((($1)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_strcmp($78,36890)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   $81 = ((($1)) + 40|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = ((($82)) + 4|0);
   $84 = HEAP16[$83>>1]|0;
   $85 = ($84<<16>>16)<(0);
   if (!($85)) {
    $86 = ((($0)) + 4|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)>(-1);
    if ($88) {
     label = 36;
    } else {
     $89 = ((($0)) + 12|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ($90|0)>(-1);
     if ($91) {
      label = 36;
     }
    }
    if ((label|0) == 36) {
     $92 = HEAP32[$0>>2]|0;
     $93 = $92 | 16;
     HEAP32[$0>>2] = $93;
    }
    $94 = ((($0)) + 24|0);
    $95 = ((($0)) + 28|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)>(-1);
    $$pre104 = ((($0)) + 36|0);
    if ($97) {
     label = 40;
    } else {
     $98 = HEAP32[$$pre104>>2]|0;
     $99 = ($98|0)>(-1);
     if ($99) {
      label = 40;
     } else {
      $$pre93 = HEAP32[$94>>2]|0;
      $$pre$phi95Z2D = $94;$110 = $$pre93;
     }
    }
    if ((label|0) == 40) {
     $100 = HEAP32[$94>>2]|0;
     $101 = $100 | 16;
     HEAP32[$94>>2] = $101;
     $$pre$phi95Z2D = $94;$110 = $101;
    }
    HEAP32[$86>>2] = $2;
    $102 = ((($0)) + 12|0);
    HEAP32[$102>>2] = -1;
    $103 = HEAP32[$0>>2]|0;
    $104 = $103 | 3;
    HEAP32[$0>>2] = $104;
    $105 = $84&65535;
    $106 = $105 & 255;
    $107 = (($106) + -1)|0;
    $108 = ((($0)) + 20|0);
    HEAP32[$108>>2] = $107;
    HEAP32[$95>>2] = $2;
    HEAP32[$$pre104>>2] = -1;
    $109 = $110 | 3;
    HEAP32[$$pre$phi95Z2D>>2] = $109;
    $111 = ((($0)) + 44|0);
    HEAP32[$111>>2] = $106;
    $112 = ((($0)) + 48|0);
    HEAP32[$112>>2] = 0;
    $113 = ((($0)) + 52|0);
    HEAP32[$113>>2] = -1;
    $114 = ((($0)) + 60|0);
    HEAP32[$114>>2] = -1;
    $115 = ((($0)) + 68|0);
    HEAP32[$115>>2] = 0;
    STACKTOP = sp;return;
   }
  }
 }
 $116 = ((($1)) + 16|0);
 $117 = HEAP16[$116>>1]|0;
 $118 = $117 & 1;
 $119 = ($118<<16>>16)==(0);
 if ($119) {
  $123 = $8 & 1;
  $124 = ($123<<16>>16)==(0);
  if (!($124)) {
   $125 = ((($0)) + 4|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($126|0)>(-1);
   if ($127) {
    $128 = HEAP32[$0>>2]|0;
    $129 = $128 | 8;
    HEAP32[$0>>2] = $129;
   }
  }
 } else {
  HEAP32[$0>>2] = 0;
  $120 = ((($0)) + 4|0);
  HEAP32[$120>>2] = -1;
  $121 = ((($0)) + 12|0);
  HEAP32[$121>>2] = -1;
  $122 = ((($0)) + 20|0);
  HEAP32[$122>>2] = 0;
 }
 $130 = ((($0)) + 24|0);
 $131 = $117 & 2;
 $132 = ($131<<16>>16)==(0);
 if ($132) {
  $136 = $8 & 2;
  $137 = ($136<<16>>16)==(0);
  if (!($137)) {
   $138 = ((($0)) + 28|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = ($139|0)>(-1);
   if ($140) {
    $141 = HEAP32[$130>>2]|0;
    $142 = $141 | 8;
    HEAP32[$130>>2] = $142;
   }
  }
 } else {
  HEAP32[$130>>2] = 0;
  $133 = ((($0)) + 28|0);
  HEAP32[$133>>2] = -1;
  $134 = ((($0)) + 36|0);
  HEAP32[$134>>2] = -1;
  $135 = ((($0)) + 44|0);
  HEAP32[$135>>2] = 0;
 }
 $143 = ((($0)) + 48|0);
 $144 = $117 & 4;
 $145 = ($144<<16>>16)==(0);
 if (!($145)) {
  HEAP32[$143>>2] = 0;
  $146 = ((($0)) + 52|0);
  HEAP32[$146>>2] = -1;
  $147 = ((($0)) + 60|0);
  HEAP32[$147>>2] = -1;
  $148 = ((($0)) + 68|0);
  HEAP32[$148>>2] = 0;
  STACKTOP = sp;return;
 }
 $149 = $8 & 4;
 $150 = ($149<<16>>16)==(0);
 if ($150) {
  STACKTOP = sp;return;
 }
 $151 = ((($0)) + 52|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)>(-1);
 if (!($153)) {
  STACKTOP = sp;return;
 }
 $154 = HEAP32[$143>>2]|0;
 $155 = $154 | 8;
 HEAP32[$143>>2] = $155;
 STACKTOP = sp;return;
}
function _CmpFunc_1160($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($0,$2)|0);
 return ($3|0);
}
function _CmpHarmless($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($0,$2)|0);
 return ($3|0);
}
function _Opt___bzero($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==(0|0);
 $6 = ($4|0)==(0|0);
 $or$cond$i = $5 | $6;
 if ($or$cond$i) {
  label = 7;
 } else {
  $7 = ((($2)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(3);
  if ($9) {
   $10 = ((($4)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(3);
   if ($12) {
    $13 = ((($2)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_strlen($14)|0);
    $16 = ((($4)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (_strncmp($14,$17,$15)|0);
    $19 = ($18|0)==(0);
    $20 = $14;
    $21 = $17;
    if ($19) {
     $22 = (($17) + ($15)|0);
     $23 = (_strcmp($22,39172)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $25 = ((($0)) + 184|0);
      HEAP32[$25>>2] = $20;
      $26 = ((($0)) + 188|0);
      HEAP32[$26>>2] = $21;
     } else {
      label = 7;
     }
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $27 = ((($0)) + 188|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($0)) + 172|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_NewCodeEntry(63,3,$28,0,$32)|0);
  $34 = ((($0)) + 160|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 1)|0;
  _InsertEntry($0,$33,$36);
  $37 = ((($0)) + 184|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$29>>2]|0;
  $40 = ((($39)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_NewCodeEntry(62,3,$38,0,$41)|0);
  $43 = HEAP32[$34>>2]|0;
  $44 = (($43) + 1)|0;
  _InsertEntry($0,$42,$44);
 }
 $45 = HEAP32[$0>>2]|0;
 $46 = ((($0)) + 164|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 1)|0;
 $49 = (_RegAXUsed($45,$48)|0);
 $50 = ($49|0)==(0);
 if ($50) {
  $$pre = ((($0)) + 176|0);
  $$pre$phiZ2D = $$pre;
 } else {
  $51 = ((($0)) + 184|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($0)) + 176|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ((($54)) + 36|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (_NewCodeEntry(40,3,$52,0,$56)|0);
  $58 = HEAP32[$46>>2]|0;
  $59 = (($58) + 1)|0;
  _InsertEntry($0,$57,$59);
  $60 = ((($0)) + 188|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = HEAP32[$53>>2]|0;
  $63 = ((($62)) + 36|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (_NewCodeEntry(41,3,$61,0,$64)|0);
  $66 = HEAP32[$46>>2]|0;
  $67 = (($66) + 2)|0;
  _InsertEntry($0,$65,$67);
  $$pre$phiZ2D = $53;
 }
 $68 = HEAP32[$$pre$phiZ2D>>2]|0;
 $69 = ((($68)) + 40|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP16[$70>>1]|0;
 $72 = ($71<<16>>16)==(0);
 if ($72) {
  _RemoveRemainders($0);
  return 1;
 }
 $73 = ((($68)) + 36|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (_NewCodeEntry(40,2,34449,0,$74)|0);
 $76 = HEAP32[$46>>2]|0;
 $77 = (($76) + 1)|0;
 _InsertEntry($0,$75,$77);
 $78 = HEAP32[$$pre$phiZ2D>>2]|0;
 $79 = ((($78)) + 40|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = HEAP16[$80>>1]|0;
 $82 = ($81<<16>>16)<(130);
 if ($82) {
  $83 = $81 << 16 >> 16;
  $84 = (($83) + -1)|0;
  $85 = (_MakeHexArg($84)|0);
  $86 = HEAP32[$$pre$phiZ2D>>2]|0;
  $87 = ((($86)) + 36|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (_NewCodeEntry(42,2,$85,0,$88)|0);
  $90 = HEAP32[$46>>2]|0;
  $91 = (($90) + 2)|0;
  _InsertEntry($0,$89,$91);
  $92 = ((($0)) + 184|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = HEAP32[$$pre$phiZ2D>>2]|0;
  $95 = ((($94)) + 36|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (_NewCodeEntry(62,10,$93,0,$96)|0);
  $98 = HEAP32[$46>>2]|0;
  $99 = (($98) + 3)|0;
  _InsertEntry($0,$97,$99);
  $100 = HEAP32[$0>>2]|0;
  $101 = (_CS_GenLabel($100,$97)|0);
  $102 = HEAP32[$$pre$phiZ2D>>2]|0;
  $103 = ((($102)) + 36|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (_NewCodeEntry(24,0,0,0,$104)|0);
  $106 = HEAP32[$46>>2]|0;
  $107 = (($106) + 4)|0;
  _InsertEntry($0,$105,$107);
  $108 = ((($101)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = HEAP32[$$pre$phiZ2D>>2]|0;
  $111 = ((($110)) + 36|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (_NewCodeEntry(9,12,$109,$101,$112)|0);
  $114 = HEAP32[$46>>2]|0;
  $115 = (($114) + 5)|0;
  _InsertEntry($0,$113,$115);
  _RemoveRemainders($0);
  return 1;
 } else {
  $116 = ((($78)) + 36|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (_NewCodeEntry(42,2,34449,0,$117)|0);
  $119 = HEAP32[$46>>2]|0;
  $120 = (($119) + 2)|0;
  _InsertEntry($0,$118,$120);
  $121 = ((($0)) + 184|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = HEAP32[$$pre$phiZ2D>>2]|0;
  $124 = ((($123)) + 36|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (_NewCodeEntry(62,10,$122,0,$125)|0);
  $127 = HEAP32[$46>>2]|0;
  $128 = (($127) + 3)|0;
  _InsertEntry($0,$126,$128);
  $129 = HEAP32[$0>>2]|0;
  $130 = (_CS_GenLabel($129,$126)|0);
  $131 = HEAP32[$$pre$phiZ2D>>2]|0;
  $132 = ((($131)) + 36|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = (_NewCodeEntry(29,0,0,0,$133)|0);
  $135 = HEAP32[$46>>2]|0;
  $136 = (($135) + 4)|0;
  _InsertEntry($0,$134,$136);
  $137 = HEAP32[$$pre$phiZ2D>>2]|0;
  $138 = ((($137)) + 40|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = HEAP16[$139>>1]|0;
  $141 = $140 << 16 >> 16;
  $142 = (_MakeHexArg($141)|0);
  $143 = HEAP32[$$pre$phiZ2D>>2]|0;
  $144 = ((($143)) + 36|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (_NewCodeEntry(20,2,$142,0,$145)|0);
  $147 = HEAP32[$46>>2]|0;
  $148 = (($147) + 5)|0;
  _InsertEntry($0,$146,$148);
  $149 = ((($130)) + 4|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = HEAP32[$$pre$phiZ2D>>2]|0;
  $152 = ((($151)) + 36|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (_NewCodeEntry(8,12,$150,$130,$153)|0);
  $155 = HEAP32[$46>>2]|0;
  $156 = (($155) + 6)|0;
  _InsertEntry($0,$154,$156);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_staspidx($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==(0|0);
 $6 = ($4|0)==(0|0);
 $or$cond$i = $5 | $6;
 if (!($or$cond$i)) {
  $7 = ((($2)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(3);
  if ($9) {
   $10 = ((($4)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(3);
   if ($12) {
    $13 = ((($2)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_strlen($14)|0);
    $16 = ((($4)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (_strncmp($14,$17,$15)|0);
    $19 = ($18|0)==(0);
    $20 = $14;
    $21 = $17;
    if ($19) {
     $22 = (($17) + ($15)|0);
     $23 = (_strcmp($22,39172)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $25 = ((($0)) + 184|0);
      HEAP32[$25>>2] = $20;
      $26 = ((($0)) + 188|0);
      HEAP32[$26>>2] = $21;
      $49 = $14;
      $45 = ((($0)) + 176|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ((($46)) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      $50 = (_NewCodeEntry(62,10,$49,0,$48)|0);
      $51 = ((($0)) + 164|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (($52) + 1)|0;
      _InsertEntry($0,$50,$53);
      _RemoveRemainders($0);
      return 1;
     }
    }
   }
  }
 }
 $27 = ((($0)) + 188|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($0)) + 172|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 36|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_NewCodeEntry(63,3,$28,0,$32)|0);
 $34 = ((($0)) + 160|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 1)|0;
 _InsertEntry($0,$33,$36);
 $37 = ((($0)) + 184|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$29>>2]|0;
 $40 = ((($39)) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (_NewCodeEntry(62,3,$38,0,$41)|0);
 $43 = HEAP32[$34>>2]|0;
 $44 = (($43) + 1)|0;
 _InsertEntry($0,$42,$44);
 $$pre = HEAP32[$37>>2]|0;
 $49 = $$pre;
 $45 = ((($0)) + 176|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $50 = (_NewCodeEntry(62,10,$49,0,$48)|0);
 $51 = ((($0)) + 164|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 _InsertEntry($0,$50,$53);
 _RemoveRemainders($0);
 return 1;
}
function _Opt_staxspidx($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)==(0|0);
 $6 = ($4|0)==(0|0);
 $or$cond$i = $5 | $6;
 if ($or$cond$i) {
  label = 7;
 } else {
  $7 = ((($2)) + 1|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(3);
  if ($9) {
   $10 = ((($4)) + 1|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(3);
   if ($12) {
    $13 = ((($2)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_strlen($14)|0);
    $16 = ((($4)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (_strncmp($14,$17,$15)|0);
    $19 = ($18|0)==(0);
    $20 = $14;
    $21 = $17;
    if ($19) {
     $22 = (($17) + ($15)|0);
     $23 = (_strcmp($22,39172)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $25 = ((($0)) + 184|0);
      HEAP32[$25>>2] = $20;
      $26 = ((($0)) + 188|0);
      HEAP32[$26>>2] = $21;
      $$pre$phiZ2D = $25;$49 = $14;
     } else {
      label = 7;
     }
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $27 = ((($0)) + 188|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ((($0)) + 172|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($30)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_NewCodeEntry(63,3,$28,0,$32)|0);
  $34 = ((($0)) + 160|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 1)|0;
  _InsertEntry($0,$33,$36);
  $37 = ((($0)) + 184|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$29>>2]|0;
  $40 = ((($39)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_NewCodeEntry(62,3,$38,0,$41)|0);
  $43 = HEAP32[$34>>2]|0;
  $44 = (($43) + 1)|0;
  _InsertEntry($0,$42,$44);
  $$pre = HEAP32[$37>>2]|0;
  $$pre$phiZ2D = $37;$49 = $$pre;
 }
 $45 = ((($0)) + 176|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ((($46)) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $50 = (_NewCodeEntry(62,10,$49,0,$48)|0);
 $51 = ((($0)) + 164|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 1)|0;
 _InsertEntry($0,$50,$53);
 $54 = HEAP32[$45>>2]|0;
 $55 = ((($54)) + 40|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($56)) + 4|0);
 $58 = HEAP16[$57>>1]|0;
 $59 = ($58<<16>>16)<(0);
 if ($59) {
  $67 = ((($54)) + 36|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (_NewCodeEntry(29,0,0,0,$68)|0);
  $$0 = $69;
 } else {
  $60 = $58 << 16 >> 16;
  $61 = (($60) + 1)|0;
  $62 = (_MakeHexArg($61)|0);
  $63 = HEAP32[$45>>2]|0;
  $64 = ((($63)) + 36|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (_NewCodeEntry(42,2,$62,0,$65)|0);
  $$0 = $66;
 }
 $70 = HEAP32[$51>>2]|0;
 $71 = (($70) + 2)|0;
 _InsertEntry($0,$$0,$71);
 $72 = HEAP32[$45>>2]|0;
 $73 = ((($72)) + 40|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ((($74)) + 2|0);
 $76 = HEAP16[$75>>1]|0;
 $77 = ($76<<16>>16)<(0);
 if ($77) {
  $84 = ((($72)) + 36|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (_NewCodeEntry(71,0,0,0,$85)|0);
  $$1 = $86;
  $87 = HEAP32[$51>>2]|0;
  $88 = (($87) + 3)|0;
  _InsertEntry($0,$$1,$88);
  $89 = HEAP32[$$pre$phiZ2D>>2]|0;
  $90 = HEAP32[$45>>2]|0;
  $91 = ((($90)) + 36|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (_NewCodeEntry(62,10,$89,0,$92)|0);
  $94 = HEAP32[$51>>2]|0;
  $95 = (($94) + 4)|0;
  _InsertEntry($0,$93,$95);
  $96 = HEAP32[$45>>2]|0;
  $97 = ((($96)) + 36|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (_NewCodeEntry(42,2,34449,0,$98)|0);
  $100 = HEAP32[$51>>2]|0;
  $101 = (($100) + 5)|0;
  _InsertEntry($0,$99,$101);
  _RemoveRemainders($0);
  return 1;
 } else {
  $78 = $76 << 16 >> 16;
  $79 = (_MakeHexArg($78)|0);
  $80 = HEAP32[$45>>2]|0;
  $81 = ((($80)) + 36|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (_NewCodeEntry(40,2,$79,0,$82)|0);
  $$1 = $83;
  $87 = HEAP32[$51>>2]|0;
  $88 = (($87) + 3)|0;
  _InsertEntry($0,$$1,$88);
  $89 = HEAP32[$$pre$phiZ2D>>2]|0;
  $90 = HEAP32[$45>>2]|0;
  $91 = ((($90)) + 36|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (_NewCodeEntry(62,10,$89,0,$92)|0);
  $94 = HEAP32[$51>>2]|0;
  $95 = (($94) + 4)|0;
  _InsertEntry($0,$93,$95);
  $96 = HEAP32[$45>>2]|0;
  $97 = ((($96)) + 36|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (_NewCodeEntry(42,2,34449,0,$98)|0);
  $100 = HEAP32[$51>>2]|0;
  $101 = (($100) + 5)|0;
  _InsertEntry($0,$99,$101);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_tosaddax($0) {
 $0 = $0|0;
 var $$0 = 0, $$idx$i = 0, $$idx$val$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 180|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,31325,30885,1098);
  // unreachable;
 }
 $6 = ((($0)) + 176|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 2|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = ($11<<16>>16)==(0);
 do {
  if ($12) {
   $13 = HEAP8[$2>>0]|0;
   $14 = ($13<<24>>24)==(42);
   if ($14) {
    $15 = (_CE_IsKnownImm($2,0)|0);
    $16 = ($15|0)==(0);
    if (!($16)) {
     $17 = HEAP32[$1>>2]|0;
     $$idx$i = ((($17)) + 24|0);
     $$idx$val$i = HEAP32[$$idx$i>>2]|0;
     $18 = ($$idx$val$i|0)==(0);
     if ($18) {
      $19 = HEAP32[$0>>2]|0;
      $20 = ((($0)) + 164|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      $23 = (_CS_GetNextEntry($19,$22)|0);
      $24 = ($23|0)==(0|0);
      if (!($24)) {
       $25 = HEAP8[$23>>0]|0;
       $26 = ($25<<24>>24)==(37);
       if ($26) {
        $27 = ((($23)) + 4|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = (_strcmp($28,34420)|0);
        $30 = ($29|0)==(0);
        if (!($30)) {
         $31 = (_strcmp($28,31343)|0);
         $32 = ($31|0)==(0);
         if (!($32)) {
          break;
         }
        }
        $33 = (_strcmp($28,31343)|0);
        $34 = ($33|0)==(0);
        $35 = ((($0)) + 188|0);
        $36 = HEAP32[$35>>2]|0;
        $37 = ((($0)) + 172|0);
        $38 = HEAP32[$37>>2]|0;
        $39 = ((($38)) + 36|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = (_NewCodeEntry(63,3,$36,0,$40)|0);
        $42 = ((($0)) + 160|0);
        $43 = HEAP32[$42>>2]|0;
        $44 = (($43) + 1)|0;
        _InsertEntry($0,$41,$44);
        $45 = ((($0)) + 184|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = HEAP32[$37>>2]|0;
        $48 = ((($47)) + 36|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = (_NewCodeEntry(62,3,$46,0,$49)|0);
        $51 = HEAP32[$42>>2]|0;
        $52 = (($51) + 1)|0;
        _InsertEntry($0,$50,$52);
        $53 = HEAP32[$1>>2]|0;
        $54 = ((($53)) + 36|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = (_NewCodeEntry(67,0,0,0,$55)|0);
        $57 = HEAP32[$20>>2]|0;
        $58 = (($57) + 1)|0;
        $59 = HEAP32[$0>>2]|0;
        _CS_DelEntry($59,$58);
        $60 = ((($0)) + 20|0);
        $61 = HEAP32[$60>>2]|0;
        $62 = ($61|0)>($58|0);
        if ($62) {
         $63 = (($61) + -1)|0;
         HEAP32[$60>>2] = $63;
        } else {
         $64 = ($61|0)==($58|0);
         if ($64) {
          HEAP32[$60>>2] = -1;
          $65 = ((($0)) + 24|0);
          HEAP32[$65>>2] = 0;
         }
        }
        $66 = ((($0)) + 28|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($67|0)>($58|0);
        if ($68) {
         $69 = (($67) + -1)|0;
         HEAP32[$66>>2] = $69;
        } else {
         $70 = ($67|0)==($58|0);
         if ($70) {
          HEAP32[$66>>2] = -1;
          $71 = ((($0)) + 32|0);
          HEAP32[$71>>2] = 0;
         }
        }
        $72 = ((($0)) + 44|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = ($73|0)>($58|0);
        if ($74) {
         $75 = (($73) + -1)|0;
         HEAP32[$72>>2] = $75;
        } else {
         $76 = ($73|0)==($58|0);
         if ($76) {
          HEAP32[$72>>2] = -1;
          $77 = ((($0)) + 48|0);
          HEAP32[$77>>2] = 0;
         }
        }
        $78 = ((($0)) + 52|0);
        $79 = HEAP32[$78>>2]|0;
        $80 = ($79|0)>($58|0);
        if ($80) {
         $81 = (($79) + -1)|0;
         HEAP32[$78>>2] = $81;
        } else {
         $82 = ($79|0)==($58|0);
         if ($82) {
          HEAP32[$78>>2] = -1;
          $83 = ((($0)) + 56|0);
          HEAP32[$83>>2] = 0;
         }
        }
        $84 = ((($0)) + 68|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($85|0)>($58|0);
        if ($86) {
         $87 = (($85) + -1)|0;
         HEAP32[$84>>2] = $87;
        } else {
         $88 = ($85|0)==($58|0);
         if ($88) {
          HEAP32[$84>>2] = -1;
          $89 = ((($0)) + 72|0);
          HEAP32[$89>>2] = 0;
         }
        }
        $90 = ((($0)) + 76|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ($91|0)>($58|0);
        if ($92) {
         $93 = (($91) + -1)|0;
         HEAP32[$90>>2] = $93;
        } else {
         $94 = ($91|0)==($58|0);
         if ($94) {
          HEAP32[$90>>2] = -1;
          $95 = ((($0)) + 80|0);
          HEAP32[$95>>2] = 0;
         }
        }
        $96 = ((($0)) + 92|0);
        $97 = HEAP32[$96>>2]|0;
        $98 = ($97|0)>($58|0);
        if ($98) {
         $99 = (($97) + -1)|0;
         HEAP32[$96>>2] = $99;
        } else {
         $100 = ($97|0)==($58|0);
         if ($100) {
          HEAP32[$96>>2] = -1;
          $101 = ((($0)) + 96|0);
          HEAP32[$101>>2] = 0;
         }
        }
        $102 = ((($0)) + 100|0);
        $103 = HEAP32[$102>>2]|0;
        $104 = ($103|0)>($58|0);
        if ($104) {
         $105 = (($103) + -1)|0;
         HEAP32[$102>>2] = $105;
        } else {
         $106 = ($103|0)==($58|0);
         if ($106) {
          HEAP32[$102>>2] = -1;
          $107 = ((($0)) + 104|0);
          HEAP32[$107>>2] = 0;
         }
        }
        $108 = ((($0)) + 116|0);
        $109 = HEAP32[$108>>2]|0;
        $110 = ($109|0)>($58|0);
        if ($110) {
         $111 = (($109) + -1)|0;
         HEAP32[$108>>2] = $111;
        } else {
         $112 = ($109|0)==($58|0);
         if ($112) {
          HEAP32[$108>>2] = -1;
          $113 = ((($0)) + 120|0);
          HEAP32[$113>>2] = 0;
         }
        }
        $114 = ((($0)) + 124|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = ($115|0)>($58|0);
        do {
         if ($116) {
          $117 = (($115) + -1)|0;
          HEAP32[$114>>2] = $117;
         } else {
          $118 = ($115|0)==($58|0);
          if (!($118)) {
           break;
          }
          HEAP32[$114>>2] = -1;
          $119 = ((($0)) + 128|0);
          HEAP32[$119>>2] = 0;
         }
        } while(0);
        $120 = ((($0)) + 140|0);
        $121 = HEAP32[$120>>2]|0;
        $122 = ($121|0)>($58|0);
        do {
         if ($122) {
          $123 = (($121) + -1)|0;
          HEAP32[$120>>2] = $123;
         } else {
          $124 = ($121|0)==($58|0);
          if (!($124)) {
           break;
          }
          HEAP32[$120>>2] = -1;
          $125 = ((($0)) + 144|0);
          HEAP32[$125>>2] = 0;
         }
        } while(0);
        $126 = ((($0)) + 148|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = ($127|0)>($58|0);
        do {
         if ($128) {
          $129 = (($127) + -1)|0;
          HEAP32[$126>>2] = $129;
         } else {
          $130 = ($127|0)==($58|0);
          if (!($130)) {
           break;
          }
          HEAP32[$126>>2] = -1;
          $131 = ((($0)) + 152|0);
          HEAP32[$131>>2] = 0;
         }
        } while(0);
        $132 = HEAP32[$42>>2]|0;
        $133 = ($132|0)>($58|0);
        do {
         if ($133) {
          $134 = (($132) + -1)|0;
          HEAP32[$42>>2] = $134;
         } else {
          $135 = ($132|0)==($58|0);
          if (!($135)) {
           break;
          }
          HEAP32[$37>>2] = 0;
         }
        } while(0);
        $136 = HEAP32[$20>>2]|0;
        $137 = ($136|0)>($58|0);
        do {
         if ($137) {
          $138 = (($136) + -1)|0;
          HEAP32[$20>>2] = $138;
          $141 = $138;
         } else {
          $139 = ($136|0)==($58|0);
          if (!($139)) {
           $141 = $136;
           break;
          }
          HEAP32[$6>>2] = 0;
          $141 = $58;
         }
        } while(0);
        $140 = (($141) + 1)|0;
        _InsertEntry($0,$56,$140);
        $142 = HEAP32[$45>>2]|0;
        $143 = ((($23)) + 36|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (_NewCodeEntry(40,10,$142,0,$144)|0);
        $146 = HEAP32[$20>>2]|0;
        $147 = (($146) + 2)|0;
        $148 = HEAP32[$0>>2]|0;
        _CS_DelEntry($148,$147);
        $149 = HEAP32[$60>>2]|0;
        $150 = ($149|0)>($147|0);
        do {
         if ($150) {
          $151 = (($149) + -1)|0;
          HEAP32[$60>>2] = $151;
         } else {
          $152 = ($149|0)==($147|0);
          if (!($152)) {
           break;
          }
          HEAP32[$60>>2] = -1;
          $153 = ((($0)) + 24|0);
          HEAP32[$153>>2] = 0;
         }
        } while(0);
        $154 = HEAP32[$66>>2]|0;
        $155 = ($154|0)>($147|0);
        do {
         if ($155) {
          $156 = (($154) + -1)|0;
          HEAP32[$66>>2] = $156;
         } else {
          $157 = ($154|0)==($147|0);
          if (!($157)) {
           break;
          }
          HEAP32[$66>>2] = -1;
          $158 = ((($0)) + 32|0);
          HEAP32[$158>>2] = 0;
         }
        } while(0);
        $159 = HEAP32[$72>>2]|0;
        $160 = ($159|0)>($147|0);
        do {
         if ($160) {
          $161 = (($159) + -1)|0;
          HEAP32[$72>>2] = $161;
         } else {
          $162 = ($159|0)==($147|0);
          if (!($162)) {
           break;
          }
          HEAP32[$72>>2] = -1;
          $163 = ((($0)) + 48|0);
          HEAP32[$163>>2] = 0;
         }
        } while(0);
        $164 = HEAP32[$78>>2]|0;
        $165 = ($164|0)>($147|0);
        do {
         if ($165) {
          $166 = (($164) + -1)|0;
          HEAP32[$78>>2] = $166;
         } else {
          $167 = ($164|0)==($147|0);
          if (!($167)) {
           break;
          }
          HEAP32[$78>>2] = -1;
          $168 = ((($0)) + 56|0);
          HEAP32[$168>>2] = 0;
         }
        } while(0);
        $169 = HEAP32[$84>>2]|0;
        $170 = ($169|0)>($147|0);
        do {
         if ($170) {
          $171 = (($169) + -1)|0;
          HEAP32[$84>>2] = $171;
         } else {
          $172 = ($169|0)==($147|0);
          if (!($172)) {
           break;
          }
          HEAP32[$84>>2] = -1;
          $173 = ((($0)) + 72|0);
          HEAP32[$173>>2] = 0;
         }
        } while(0);
        $174 = HEAP32[$90>>2]|0;
        $175 = ($174|0)>($147|0);
        do {
         if ($175) {
          $176 = (($174) + -1)|0;
          HEAP32[$90>>2] = $176;
         } else {
          $177 = ($174|0)==($147|0);
          if (!($177)) {
           break;
          }
          HEAP32[$90>>2] = -1;
          $178 = ((($0)) + 80|0);
          HEAP32[$178>>2] = 0;
         }
        } while(0);
        $179 = HEAP32[$96>>2]|0;
        $180 = ($179|0)>($147|0);
        do {
         if ($180) {
          $181 = (($179) + -1)|0;
          HEAP32[$96>>2] = $181;
         } else {
          $182 = ($179|0)==($147|0);
          if (!($182)) {
           break;
          }
          HEAP32[$96>>2] = -1;
          $183 = ((($0)) + 96|0);
          HEAP32[$183>>2] = 0;
         }
        } while(0);
        $184 = HEAP32[$102>>2]|0;
        $185 = ($184|0)>($147|0);
        do {
         if ($185) {
          $186 = (($184) + -1)|0;
          HEAP32[$102>>2] = $186;
         } else {
          $187 = ($184|0)==($147|0);
          if (!($187)) {
           break;
          }
          HEAP32[$102>>2] = -1;
          $188 = ((($0)) + 104|0);
          HEAP32[$188>>2] = 0;
         }
        } while(0);
        $189 = HEAP32[$108>>2]|0;
        $190 = ($189|0)>($147|0);
        do {
         if ($190) {
          $191 = (($189) + -1)|0;
          HEAP32[$108>>2] = $191;
         } else {
          $192 = ($189|0)==($147|0);
          if (!($192)) {
           break;
          }
          HEAP32[$108>>2] = -1;
          $193 = ((($0)) + 120|0);
          HEAP32[$193>>2] = 0;
         }
        } while(0);
        $194 = HEAP32[$114>>2]|0;
        $195 = ($194|0)>($147|0);
        do {
         if ($195) {
          $196 = (($194) + -1)|0;
          HEAP32[$114>>2] = $196;
         } else {
          $197 = ($194|0)==($147|0);
          if (!($197)) {
           break;
          }
          HEAP32[$114>>2] = -1;
          $198 = ((($0)) + 128|0);
          HEAP32[$198>>2] = 0;
         }
        } while(0);
        $199 = HEAP32[$120>>2]|0;
        $200 = ($199|0)>($147|0);
        do {
         if ($200) {
          $201 = (($199) + -1)|0;
          HEAP32[$120>>2] = $201;
         } else {
          $202 = ($199|0)==($147|0);
          if (!($202)) {
           break;
          }
          HEAP32[$120>>2] = -1;
          $203 = ((($0)) + 144|0);
          HEAP32[$203>>2] = 0;
         }
        } while(0);
        $204 = HEAP32[$126>>2]|0;
        $205 = ($204|0)>($147|0);
        do {
         if ($205) {
          $206 = (($204) + -1)|0;
          HEAP32[$126>>2] = $206;
         } else {
          $207 = ($204|0)==($147|0);
          if (!($207)) {
           break;
          }
          HEAP32[$126>>2] = -1;
          $208 = ((($0)) + 152|0);
          HEAP32[$208>>2] = 0;
         }
        } while(0);
        $209 = HEAP32[$42>>2]|0;
        $210 = ($209|0)>($147|0);
        do {
         if ($210) {
          $211 = (($209) + -1)|0;
          HEAP32[$42>>2] = $211;
         } else {
          $212 = ($209|0)==($147|0);
          if (!($212)) {
           break;
          }
          HEAP32[$37>>2] = 0;
         }
        } while(0);
        $213 = HEAP32[$20>>2]|0;
        $214 = ($213|0)>($147|0);
        do {
         if ($214) {
          $215 = (($213) + -1)|0;
          HEAP32[$20>>2] = $215;
          $218 = $215;
         } else {
          $216 = ($213|0)==($147|0);
          if (!($216)) {
           $218 = $213;
           break;
          }
          HEAP32[$6>>2] = 0;
          $218 = $147;
         }
        } while(0);
        $217 = (($218) + 2)|0;
        _InsertEntry($0,$145,$217);
        if (!($34)) {
         _RemoveRemainders($0);
         return 1;
        }
        $219 = HEAP32[$0>>2]|0;
        $220 = HEAP32[$20>>2]|0;
        $221 = (($220) + 2)|0;
        $222 = (_CS_GetNextEntry($219,$221)|0);
        $223 = ($222|0)==(0|0);
        if ($223) {
         $224 = HEAP32[3332]|0;
         $225 = HEAP32[3331]|0;
         FUNCTION_TABLE_viiii[$224 & 1]($225,31350,30885,1146);
         // unreachable;
        }
        $226 = HEAP32[$0>>2]|0;
        $227 = (_CS_GenLabel($226,$222)|0);
        $228 = ((($227)) + 4|0);
        $229 = HEAP32[$228>>2]|0;
        $230 = ((($145)) + 36|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = (_NewCodeEntry(9,12,$229,$227,$231)|0);
        $233 = HEAP32[$20>>2]|0;
        $234 = (($233) + 3)|0;
        _InsertEntry($0,$232,$234);
        $235 = ((($232)) + 36|0);
        $236 = HEAP32[$235>>2]|0;
        $237 = (_NewCodeEntry(23,0,0,0,$236)|0);
        $238 = HEAP32[$20>>2]|0;
        $239 = (($238) + 4)|0;
        _InsertEntry($0,$237,$239);
        _RemoveRemainders($0);
        return 1;
       }
      }
     }
    }
   }
  }
 } while(0);
 $240 = ((($0)) + 40|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = $241 & 1;
 $243 = ($242|0)==(0);
 if ($243) {
  $244 = ((($0)) + 188|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = ((($0)) + 172|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = ((($247)) + 36|0);
  $249 = HEAP32[$248>>2]|0;
  $250 = (_NewCodeEntry(63,3,$245,0,$249)|0);
  $251 = ((($0)) + 160|0);
  $252 = HEAP32[$251>>2]|0;
  $253 = (($252) + 1)|0;
  _InsertEntry($0,$250,$253);
 }
 $254 = ((($0)) + 16|0);
 $255 = HEAP32[$254>>2]|0;
 $256 = $255 & 1;
 $257 = ($256|0)==(0);
 if ($257) {
  $258 = ((($0)) + 184|0);
  $259 = HEAP32[$258>>2]|0;
  $260 = ((($0)) + 172|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = ((($261)) + 36|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (_NewCodeEntry(62,3,$259,0,$263)|0);
  $265 = ((($0)) + 160|0);
  $266 = HEAP32[$265>>2]|0;
  $267 = (($266) + 1)|0;
  _InsertEntry($0,$264,$267);
  $$pre$phiZ2D = $260;
 } else {
  $$pre = ((($0)) + 172|0);
  $$pre$phiZ2D = $$pre;
 }
 $268 = ((($0)) + 164|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = (($269) + 1)|0;
 $271 = ((($0)) + 192|0);
 HEAP32[$271>>2] = $270;
 $272 = HEAP32[$6>>2]|0;
 $273 = ((($272)) + 36|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = (_NewCodeEntry(14,0,0,0,$274)|0);
 $276 = HEAP32[$271>>2]|0;
 $277 = (($276) + 1)|0;
 HEAP32[$271>>2] = $277;
 _InsertEntry($0,$275,$276);
 $278 = ((($0)) + 16|0);
 _AddOpLow($0,0,$278);
 $279 = HEAP32[$$pre$phiZ2D>>2]|0;
 $280 = ((($279)) + 40|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = ((($281)) + 2|0);
 $283 = HEAP16[$282>>1]|0;
 $284 = ($283<<16>>16)==(0);
 if ($284) {
  $285 = HEAP32[$0>>2]|0;
  $286 = HEAP32[$1>>2]|0;
  $287 = (_CS_GenLabel($285,$286)|0);
  $288 = ((($287)) + 4|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = HEAP32[$6>>2]|0;
  $291 = ((($290)) + 36|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = (_NewCodeEntry(3,12,$289,$287,$292)|0);
  $294 = HEAP32[$271>>2]|0;
  $295 = (($294) + 1)|0;
  HEAP32[$271>>2] = $295;
  _InsertEntry($0,$293,$294);
  $296 = HEAP32[$6>>2]|0;
  $297 = ((($296)) + 36|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = (_NewCodeEntry(28,0,0,0,$298)|0);
  $300 = HEAP32[$271>>2]|0;
  $301 = (($300) + 1)|0;
  HEAP32[$271>>2] = $301;
  _InsertEntry($0,$299,$300);
  _RemoveRemainders($0);
  return 1;
 }
 $302 = HEAP32[$6>>2]|0;
 $303 = ((($302)) + 40|0);
 $304 = HEAP32[$303>>2]|0;
 $305 = ((($304)) + 2|0);
 $306 = HEAP16[$305>>1]|0;
 $307 = ($306<<16>>16)==(0);
 L173: do {
  if ($307) {
   $308 = ($283<<16>>16)<(0);
   do {
    if ($308) {
     $309 = HEAP32[$240>>2]|0;
     $310 = $309 & 2;
     $311 = ($310|0)==(0);
     if (!($311)) {
      break L173;
     }
     $318 = HEAP32[$240>>2]|0;
     $319 = $318 & 1;
     $320 = ($319|0)==(0);
     if ($320) {
      $331 = ((($0)) + 188|0);
      $332 = HEAP32[$331>>2]|0;
      $333 = ((($302)) + 36|0);
      $334 = HEAP32[$333>>2]|0;
      $335 = (_NewCodeEntry(41,3,$332,0,$334)|0);
      $$0 = $335;
      break;
     } else {
      $321 = ((($0)) + 48|0);
      $322 = HEAP32[$321>>2]|0;
      $323 = ((($322)) + 1|0);
      $324 = HEAP8[$323>>0]|0;
      $325 = $324&255;
      $326 = ((($322)) + 4|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ((($302)) + 36|0);
      $329 = HEAP32[$328>>2]|0;
      $330 = (_NewCodeEntry(41,$325,$327,0,$329)|0);
      $$0 = $330;
      break;
     }
    } else {
     $312 = $283 << 16 >> 16;
     $313 = (_MakeHexArg($312)|0);
     $314 = HEAP32[$6>>2]|0;
     $315 = ((($314)) + 36|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = (_NewCodeEntry(41,2,$313,0,$316)|0);
     $$0 = $317;
    }
   } while(0);
   $336 = HEAP32[$271>>2]|0;
   $337 = (($336) + 1)|0;
   HEAP32[$271>>2] = $337;
   _InsertEntry($0,$$0,$336);
   $338 = HEAP32[$0>>2]|0;
   $339 = HEAP32[$1>>2]|0;
   $340 = (_CS_GenLabel($338,$339)|0);
   $341 = ((($340)) + 4|0);
   $342 = HEAP32[$341>>2]|0;
   $343 = HEAP32[$6>>2]|0;
   $344 = ((($343)) + 36|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = (_NewCodeEntry(3,12,$342,$340,$345)|0);
   $347 = HEAP32[$271>>2]|0;
   $348 = (($347) + 1)|0;
   HEAP32[$271>>2] = $348;
   _InsertEntry($0,$346,$347);
   $349 = HEAP32[$6>>2]|0;
   $350 = ((($349)) + 36|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = (_NewCodeEntry(28,0,0,0,$351)|0);
   $353 = HEAP32[$271>>2]|0;
   $354 = (($353) + 1)|0;
   HEAP32[$271>>2] = $354;
   _InsertEntry($0,$352,$353);
   _RemoveRemainders($0);
   return 1;
  }
 } while(0);
 _AddOpHigh($0,0,$278,1);
 _RemoveRemainders($0);
 return 1;
}
function _Opt_tosandax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 188|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 172|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_NewCodeEntry(63,3,$6,0,$10)|0);
  $12 = ((($0)) + 160|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  _InsertEntry($0,$11,$14);
 }
 $15 = ((($0)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 1;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = ((($0)) + 184|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 172|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_NewCodeEntry(62,3,$20,0,$24)|0);
  $26 = ((($0)) + 160|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  _InsertEntry($0,$25,$28);
 }
 $29 = ((($0)) + 164|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 $32 = ((($0)) + 192|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($0)) + 16|0);
 _AddOpLow($0,1,$33);
 _AddOpHigh($0,1,$33,1);
 _RemoveRemainders($0);
 return 1;
}
function _Opt_tosaslax($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _Opt_tosshift($0,30956);
 return 1;
}
function _Opt_tosasrax($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _Opt_tosshift($0,30991);
 return 1;
}
function _Opt_toseqax($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _Opt_toseqax_tosneax($0,31318);
 return 1;
}
function _Opt_tosgeax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 164|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 192|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 & 1;
 $10 = $9 & $8;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,31230,30885,1287);
  // unreachable;
 } else {
  _AddOpLow($0,18,$5);
  _AddOpHigh($0,58,$5,0);
  $14 = ((($0)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_NewCodeEntry(25,2,31314,0,$17)|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$4>>2] = $20;
  _InsertEntry($0,$18,$19);
  $21 = HEAP32[$14>>2]|0;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_NewCodeEntry(2,1,31305,0,$23)|0);
  $25 = HEAP32[$4>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$4>>2] = $26;
  _InsertEntry($0,$24,$25);
  $27 = HEAP32[$0>>2]|0;
  $28 = (_CS_GenLabel($27,$24)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$14>>2]|0;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_NewCodeEntry(13,12,$30,$28,$33)|0);
  $35 = HEAP32[$4>>2]|0;
  $36 = (($35) + -2)|0;
  _InsertEntry($0,$34,$36);
  $37 = HEAP32[$4>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$4>>2] = $38;
  $39 = HEAP32[$14>>2]|0;
  $40 = ((($39)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_NewCodeEntry(40,2,34449,0,$41)|0);
  $43 = HEAP32[$4>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$4>>2] = $44;
  _InsertEntry($0,$42,$43);
  $45 = HEAP32[$14>>2]|0;
  $46 = ((($45)) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_NewCodeEntry(41,2,34449,0,$47)|0);
  $49 = HEAP32[$4>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$4>>2] = $50;
  _InsertEntry($0,$48,$49);
  $51 = HEAP32[$14>>2]|0;
  $52 = ((($51)) + 36|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_NewCodeEntry(54,1,31305,0,$53)|0);
  $55 = HEAP32[$4>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$4>>2] = $56;
  _InsertEntry($0,$54,$55);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_tosltax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 164|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 192|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 & 1;
 $10 = $9 & $8;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,31230,30885,1341);
  // unreachable;
 } else {
  _AddOpLow($0,18,$5);
  _AddOpHigh($0,58,$5,0);
  $14 = ((($0)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_NewCodeEntry(25,2,31314,0,$17)|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$4>>2] = $20;
  _InsertEntry($0,$18,$19);
  $21 = HEAP32[$14>>2]|0;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_NewCodeEntry(2,1,31305,0,$23)|0);
  $25 = HEAP32[$4>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$4>>2] = $26;
  _InsertEntry($0,$24,$25);
  $27 = HEAP32[$0>>2]|0;
  $28 = (_CS_GenLabel($27,$24)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$14>>2]|0;
  $32 = ((($31)) + 36|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_NewCodeEntry(12,12,$30,$28,$33)|0);
  $35 = HEAP32[$4>>2]|0;
  $36 = (($35) + -2)|0;
  _InsertEntry($0,$34,$36);
  $37 = HEAP32[$4>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$4>>2] = $38;
  $39 = HEAP32[$14>>2]|0;
  $40 = ((($39)) + 36|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (_NewCodeEntry(40,2,34449,0,$41)|0);
  $43 = HEAP32[$4>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$4>>2] = $44;
  _InsertEntry($0,$42,$43);
  $45 = HEAP32[$14>>2]|0;
  $46 = ((($45)) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_NewCodeEntry(41,2,34449,0,$47)|0);
  $49 = HEAP32[$4>>2]|0;
  $50 = (($49) + 1)|0;
  HEAP32[$4>>2] = $50;
  _InsertEntry($0,$48,$49);
  $51 = HEAP32[$14>>2]|0;
  $52 = ((($51)) + 36|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_NewCodeEntry(54,1,31305,0,$53)|0);
  $55 = HEAP32[$4>>2]|0;
  $56 = (($55) + 1)|0;
  HEAP32[$4>>2] = $56;
  _InsertEntry($0,$54,$55);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_tosneax($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _Opt_toseqax_tosneax($0,31307);
 return 1;
}
function _Opt_tosorax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 188|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 172|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_NewCodeEntry(63,3,$6,0,$10)|0);
  $12 = ((($0)) + 160|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  _InsertEntry($0,$11,$14);
 }
 $15 = ((($0)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 1;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = ((($0)) + 184|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 172|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_NewCodeEntry(62,3,$20,0,$24)|0);
  $26 = ((($0)) + 160|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  _InsertEntry($0,$25,$28);
 }
 $29 = ((($0)) + 164|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 $32 = ((($0)) + 192|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($0)) + 16|0);
 _AddOpLow($0,45,$33);
 _AddOpHigh($0,45,$33,1);
 _RemoveRemainders($0);
 return 1;
}
function _Opt_tosshlax($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _Opt_tosshift($0,31152);
 return 1;
}
function _Opt_tosshrax($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _Opt_tosshift($0,31187);
 return 1;
}
function _Opt_tossubax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 164|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 192|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 176|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($6)) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_NewCodeEntry(59,0,0,0,$8)|0);
 $10 = HEAP32[$4>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$4>>2] = $11;
 _InsertEntry($0,$9,$10);
 $12 = ((($0)) + 88|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 112|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $13 & 1;
 $17 = $16 & $15;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = HEAP32[3332]|0;
  $20 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$19 & 1]($20,31230,30885,1444);
  // unreachable;
 } else {
  _AddOpLow($0,58,$12);
  _AddOpHigh($0,58,$12,1);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_tosugeax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 164|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 192|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 & 1;
 $10 = $9 & $8;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,31230,30885,1471);
  // unreachable;
 } else {
  _AddOpLow($0,18,$5);
  _AddOpHigh($0,58,$5,0);
  $14 = ((($0)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_NewCodeEntry(40,2,34449,0,$17)|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$4>>2] = $20;
  _InsertEntry($0,$18,$19);
  $21 = HEAP32[$14>>2]|0;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_NewCodeEntry(41,2,34449,0,$23)|0);
  $25 = HEAP32[$4>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$4>>2] = $26;
  _InsertEntry($0,$24,$25);
  $27 = HEAP32[$14>>2]|0;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_NewCodeEntry(54,1,31305,0,$29)|0);
  $31 = HEAP32[$4>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$4>>2] = $32;
  _InsertEntry($0,$30,$31);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_tosugtax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 164|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 192|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 & 1;
 $10 = $9 & $8;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,31230,30885,1510);
  // unreachable;
 } else {
  $14 = ((($0)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_NewCodeEntry(59,0,0,0,$17)|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$4>>2] = $20;
  _InsertEntry($0,$18,$19);
  _AddOpLow($0,58,$5);
  $21 = HEAP32[$14>>2]|0;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_NewCodeEntry(62,3,34681,0,$23)|0);
  $25 = HEAP32[$4>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$4>>2] = $26;
  _InsertEntry($0,$24,$25);
  _AddOpHigh($0,58,$5,0);
  $27 = HEAP32[$14>>2]|0;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_NewCodeEntry(45,3,34681,0,$29)|0);
  $31 = HEAP32[$4>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$4>>2] = $32;
  _InsertEntry($0,$30,$31);
  $33 = HEAP32[$14>>2]|0;
  $34 = ((($33)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_NewCodeEntry(37,6,31297,0,$35)|0);
  $37 = HEAP32[$4>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$4>>2] = $38;
  _InsertEntry($0,$36,$37);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_tosuleax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 164|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 192|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 & 1;
 $10 = $9 & $8;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,31230,30885,1553);
  // unreachable;
 } else {
  $14 = ((($0)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_NewCodeEntry(59,0,0,0,$17)|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$4>>2] = $20;
  _InsertEntry($0,$18,$19);
  _AddOpLow($0,58,$5);
  $21 = HEAP32[$14>>2]|0;
  $22 = ((($21)) + 36|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (_NewCodeEntry(62,3,34681,0,$23)|0);
  $25 = HEAP32[$4>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$4>>2] = $26;
  _InsertEntry($0,$24,$25);
  _AddOpHigh($0,58,$5,0);
  $27 = HEAP32[$14>>2]|0;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_NewCodeEntry(45,3,34681,0,$29)|0);
  $31 = HEAP32[$4>>2]|0;
  $32 = (($31) + 1)|0;
  HEAP32[$4>>2] = $32;
  _InsertEntry($0,$30,$31);
  $33 = HEAP32[$14>>2]|0;
  $34 = ((($33)) + 36|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (_NewCodeEntry(37,6,31289,0,$35)|0);
  $37 = HEAP32[$4>>2]|0;
  $38 = (($37) + 1)|0;
  HEAP32[$4>>2] = $38;
  _InsertEntry($0,$36,$37);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_tosultax($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 164|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 192|0);
 HEAP32[$4>>2] = $3;
 $5 = ((($0)) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 112|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $6 & 1;
 $10 = $9 & $8;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,31230,30885,1596);
  // unreachable;
 } else {
  _AddOpLow($0,18,$5);
  _AddOpHigh($0,58,$5,0);
  $14 = ((($0)) + 176|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_NewCodeEntry(37,6,31281,0,$17)|0);
  $19 = HEAP32[$4>>2]|0;
  $20 = (($19) + 1)|0;
  HEAP32[$4>>2] = $20;
  _InsertEntry($0,$18,$19);
  _RemoveRemainders($0);
  return 1;
 }
 return (0)|0;
}
function _Opt_tosxorax($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 188|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($0)) + 172|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (_NewCodeEntry(63,3,$6,0,$10)|0);
  $12 = ((($0)) + 160|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 1)|0;
  _InsertEntry($0,$11,$14);
 }
 $15 = ((($0)) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 1;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = ((($0)) + 184|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 172|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($22)) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_NewCodeEntry(62,3,$20,0,$24)|0);
  $26 = ((($0)) + 160|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 1)|0;
  _InsertEntry($0,$25,$28);
  $$pre$phiZ2D = $21;
 } else {
  $$pre = ((($0)) + 172|0);
  $$pre$phiZ2D = $$pre;
 }
 $29 = ((($0)) + 164|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 1)|0;
 $32 = ((($0)) + 192|0);
 HEAP32[$32>>2] = $31;
 $33 = ((($0)) + 16|0);
 _AddOpLow($0,25,$33);
 $34 = HEAP32[$$pre$phiZ2D>>2]|0;
 $35 = ((($34)) + 40|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($36)) + 2|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = ($38<<16>>16)<(0);
 do {
  if (!($39)) {
   $40 = ((($0)) + 176|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ((($41)) + 40|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ((($43)) + 2|0);
   $45 = HEAP16[$44>>1]|0;
   $46 = ($45<<16>>16)<(0);
   if ($46) {
    $56 = ($38<<16>>16)==(0);
    if (!($56)) {
     break;
    }
    _RemoveRemainders($0);
    return 1;
   } else {
    $47 = $45 ^ $38;
    $48 = $47 << 16 >> 16;
    $49 = (_MakeHexArg($48)|0);
    $50 = HEAP32[$40>>2]|0;
    $51 = ((($50)) + 36|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (_NewCodeEntry(41,2,$49,0,$52)|0);
    $54 = HEAP32[$32>>2]|0;
    $55 = (($54) + 1)|0;
    HEAP32[$32>>2] = $55;
    _InsertEntry($0,$53,$54);
    _RemoveRemainders($0);
    return 1;
   }
  }
 } while(0);
 _AddOpHigh($0,25,$33,1);
 _RemoveRemainders($0);
 return 1;
}
function _InsertEntry($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 _CS_InsertEntry($3,$1,$2);
 $4 = ((($0)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($2|0);
 if (!($6)) {
  $7 = (($5) + 1)|0;
  HEAP32[$4>>2] = $7;
 }
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)<($2|0);
 if (!($10)) {
  $11 = (($9) + 1)|0;
  HEAP32[$8>>2] = $11;
 }
 $12 = ((($0)) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<($2|0);
 if (!($14)) {
  $15 = (($13) + 1)|0;
  HEAP32[$12>>2] = $15;
 }
 $16 = ((($0)) + 52|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)<($2|0);
 if (!($18)) {
  $19 = (($17) + 1)|0;
  HEAP32[$16>>2] = $19;
 }
 $20 = ((($0)) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<($2|0);
 if (!($22)) {
  $23 = (($21) + 1)|0;
  HEAP32[$20>>2] = $23;
 }
 $24 = ((($0)) + 76|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)<($2|0);
 if (!($26)) {
  $27 = (($25) + 1)|0;
  HEAP32[$24>>2] = $27;
 }
 $28 = ((($0)) + 92|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)<($2|0);
 if (!($30)) {
  $31 = (($29) + 1)|0;
  HEAP32[$28>>2] = $31;
 }
 $32 = ((($0)) + 100|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)<($2|0);
 if (!($34)) {
  $35 = (($33) + 1)|0;
  HEAP32[$32>>2] = $35;
 }
 $36 = ((($0)) + 116|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)<($2|0);
 if (!($38)) {
  $39 = (($37) + 1)|0;
  HEAP32[$36>>2] = $39;
 }
 $40 = ((($0)) + 124|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)<($2|0);
 if (!($42)) {
  $43 = (($41) + 1)|0;
  HEAP32[$40>>2] = $43;
 }
 $44 = ((($0)) + 140|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)<($2|0);
 if (!($46)) {
  $47 = (($45) + 1)|0;
  HEAP32[$44>>2] = $47;
 }
 $48 = ((($0)) + 148|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)<($2|0);
 if (!($50)) {
  $51 = (($49) + 1)|0;
  HEAP32[$48>>2] = $51;
 }
 $52 = ((($0)) + 172|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)==(0|0);
 if (!($54)) {
  $55 = ((($0)) + 160|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)<($2|0);
  if (!($57)) {
   $58 = (($56) + 1)|0;
   HEAP32[$55>>2] = $58;
  }
 }
 $59 = ((($0)) + 176|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(0|0);
 if ($61) {
  return;
 }
 $62 = ((($0)) + 164|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = ($63|0)<($2|0);
 if ($64) {
  return;
 }
 $65 = (($63) + 1)|0;
 HEAP32[$62>>2] = $65;
 return;
}
function _AddOpLow($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $42 = ((($0)) + 184|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ((($0)) + 176|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + 36|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (_NewCodeEntry($1,3,$43,0,$47)|0);
  $49 = ((($0)) + 192|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 1)|0;
  HEAP32[$49>>2] = $51;
  _InsertEntry($0,$48,$50);
  return;
 }
 $6 = $3 & 2;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 1|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ((($9)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 176|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($16)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_NewCodeEntry($1,$12,$14,0,$18)|0);
  $20 = ((($0)) + 192|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$20>>2] = $22;
  _InsertEntry($0,$19,$21);
 } else {
  $23 = ((($2)) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_MakeHexArg($24)|0);
  $26 = ((($0)) + 176|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ((($27)) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (_NewCodeEntry(42,2,$25,0,$29)|0);
  $31 = ((($0)) + 192|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$31>>2] = $33;
  _InsertEntry($0,$30,$32);
  $34 = HEAP32[$26>>2]|0;
  $35 = ((($34)) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (_NewCodeEntry($1,10,36898,0,$36)|0);
  $38 = HEAP32[$31>>2]|0;
  $39 = (($38) + 1)|0;
  HEAP32[$31>>2] = $39;
  _InsertEntry($0,$37,$38);
 }
 $40 = HEAP32[$2>>2]|0;
 $41 = $40 | 4;
 HEAP32[$2>>2] = $41;
 return;
}
function _AddOpHigh($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$pre$phi51Z2D = 0, $$pre50 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)!=(0);
 $5 = ((($0)) + 176|0);
 if ($4) {
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($6)) + 36|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_NewCodeEntry(46,0,0,0,$8)|0);
  $10 = ((($0)) + 192|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 1)|0;
  HEAP32[$10>>2] = $12;
  _InsertEntry($0,$9,$11);
  $$pre$phi51Z2D = $10;
 } else {
  $$pre50 = ((($0)) + 192|0);
  $$pre$phi51Z2D = $$pre50;
 }
 $13 = HEAP32[$5>>2]|0;
 $14 = ((($13)) + 36|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_NewCodeEntry(71,0,0,0,$15)|0);
 $17 = HEAP32[$$pre$phi51Z2D>>2]|0;
 $18 = (($17) + 1)|0;
 HEAP32[$$pre$phi51Z2D>>2] = $18;
 _InsertEntry($0,$16,$17);
 $19 = ((($2)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & 1;
 $22 = ($21|0)==(0);
 if ($22) {
  $55 = ((($0)) + 188|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$5>>2]|0;
  $58 = ((($57)) + 36|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (_NewCodeEntry($1,3,$56,0,$59)|0);
  $61 = HEAP32[$$pre$phi51Z2D>>2]|0;
  $62 = (($61) + 1)|0;
  HEAP32[$$pre$phi51Z2D>>2] = $62;
  _InsertEntry($0,$60,$61);
 } else {
  $23 = $20 & 2;
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = ((($2)) + 32|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 1|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ((($26)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$5>>2]|0;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_NewCodeEntry($1,$29,$31,0,$34)|0);
   $36 = HEAP32[$$pre$phi51Z2D>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[$$pre$phi51Z2D>>2] = $37;
   _InsertEntry($0,$35,$36);
  } else {
   $38 = ((($2)) + 44|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (_MakeHexArg($39)|0);
   $41 = HEAP32[$5>>2]|0;
   $42 = ((($41)) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (_NewCodeEntry(42,2,$40,0,$43)|0);
   $45 = HEAP32[$$pre$phi51Z2D>>2]|0;
   $46 = (($45) + 1)|0;
   HEAP32[$$pre$phi51Z2D>>2] = $46;
   _InsertEntry($0,$44,$45);
   $47 = HEAP32[$5>>2]|0;
   $48 = ((($47)) + 36|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (_NewCodeEntry($1,10,36898,0,$49)|0);
   $51 = HEAP32[$$pre$phi51Z2D>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$$pre$phi51Z2D>>2] = $52;
   _InsertEntry($0,$50,$51);
  }
  $53 = HEAP32[$19>>2]|0;
  $54 = $53 | 4;
  HEAP32[$19>>2] = $54;
 }
 if (!($4)) {
  return;
 }
 $63 = HEAP32[$5>>2]|0;
 $64 = ((($63)) + 36|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (_NewCodeEntry(66,0,0,0,$65)|0);
 $67 = HEAP32[$$pre$phi51Z2D>>2]|0;
 $68 = (($67) + 1)|0;
 HEAP32[$$pre$phi51Z2D>>2] = $68;
 _InsertEntry($0,$66,$67);
 $69 = HEAP32[$5>>2]|0;
 $70 = ((($69)) + 36|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (_NewCodeEntry(50,0,0,0,$71)|0);
 $73 = HEAP32[$$pre$phi51Z2D>>2]|0;
 $74 = (($73) + 1)|0;
 HEAP32[$$pre$phi51Z2D>>2] = $74;
 _InsertEntry($0,$72,$73);
 return;
}
function _RemoveRemainders($0) {
 $0 = $0|0;
 var $$phi$trans$insert = 0, $$phi$trans$insert76 = 0, $$phi$trans$insert78 = 0, $$phi$trans$insert80 = 0, $$pre = 0, $$pre$phi82Z2D = 0, $$pre$phi83Z2D = 0, $$pre$phi84Z2D = 0, $$pre$phiZ2D = 0, $$pre77 = 0, $$pre79 = 0, $$pre81 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 12;
 $4 = ($3|0)==(4);
 do {
  if ($4) {
   $5 = ((($0)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)>(-1);
   do {
    if ($7) {
     $8 = HEAP32[$0>>2]|0;
     _CS_DelEntry($8,$6);
     $9 = HEAP32[$5>>2]|0;
     $10 = ($9|0)>($6|0);
     if ($10) {
      $11 = (($9) + -1)|0;
      HEAP32[$5>>2] = $11;
     } else {
      $12 = ($9|0)==($6|0);
      if ($12) {
       HEAP32[$5>>2] = -1;
       $13 = ((($0)) + 24|0);
       HEAP32[$13>>2] = 0;
      }
     }
     $14 = ((($0)) + 28|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>($6|0);
     if ($16) {
      $17 = (($15) + -1)|0;
      HEAP32[$14>>2] = $17;
      $863 = $17;
     } else {
      $18 = ($15|0)==($6|0);
      if ($18) {
       HEAP32[$14>>2] = -1;
       $19 = ((($0)) + 32|0);
       HEAP32[$19>>2] = 0;
       $863 = -1;
      } else {
       $863 = $15;
      }
     }
     $20 = ((($0)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)>($6|0);
     if ($22) {
      $23 = (($21) + -1)|0;
      HEAP32[$20>>2] = $23;
     } else {
      $24 = ($21|0)==($6|0);
      if ($24) {
       HEAP32[$20>>2] = -1;
       $25 = ((($0)) + 48|0);
       HEAP32[$25>>2] = 0;
      }
     }
     $26 = ((($0)) + 52|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)>($6|0);
     if ($28) {
      $29 = (($27) + -1)|0;
      HEAP32[$26>>2] = $29;
     } else {
      $30 = ($27|0)==($6|0);
      if ($30) {
       HEAP32[$26>>2] = -1;
       $31 = ((($0)) + 56|0);
       HEAP32[$31>>2] = 0;
      }
     }
     $32 = ((($0)) + 68|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)>($6|0);
     if ($34) {
      $35 = (($33) + -1)|0;
      HEAP32[$32>>2] = $35;
     } else {
      $36 = ($33|0)==($6|0);
      if ($36) {
       HEAP32[$32>>2] = -1;
       $37 = ((($0)) + 72|0);
       HEAP32[$37>>2] = 0;
      }
     }
     $38 = ((($0)) + 76|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)>($6|0);
     if ($40) {
      $41 = (($39) + -1)|0;
      HEAP32[$38>>2] = $41;
     } else {
      $42 = ($39|0)==($6|0);
      if ($42) {
       HEAP32[$38>>2] = -1;
       $43 = ((($0)) + 80|0);
       HEAP32[$43>>2] = 0;
      }
     }
     $44 = ((($0)) + 92|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45|0)>($6|0);
     if ($46) {
      $47 = (($45) + -1)|0;
      HEAP32[$44>>2] = $47;
     } else {
      $48 = ($45|0)==($6|0);
      if ($48) {
       HEAP32[$44>>2] = -1;
       $49 = ((($0)) + 96|0);
       HEAP32[$49>>2] = 0;
      }
     }
     $50 = ((($0)) + 100|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)>($6|0);
     if ($52) {
      $53 = (($51) + -1)|0;
      HEAP32[$50>>2] = $53;
     } else {
      $54 = ($51|0)==($6|0);
      if ($54) {
       HEAP32[$50>>2] = -1;
       $55 = ((($0)) + 104|0);
       HEAP32[$55>>2] = 0;
      }
     }
     $56 = ((($0)) + 116|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)>($6|0);
     if ($58) {
      $59 = (($57) + -1)|0;
      HEAP32[$56>>2] = $59;
     } else {
      $60 = ($57|0)==($6|0);
      if ($60) {
       HEAP32[$56>>2] = -1;
       $61 = ((($0)) + 120|0);
       HEAP32[$61>>2] = 0;
      }
     }
     $62 = ((($0)) + 124|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)>($6|0);
     if ($64) {
      $65 = (($63) + -1)|0;
      HEAP32[$62>>2] = $65;
     } else {
      $66 = ($63|0)==($6|0);
      if ($66) {
       HEAP32[$62>>2] = -1;
       $67 = ((($0)) + 128|0);
       HEAP32[$67>>2] = 0;
      }
     }
     $68 = ((($0)) + 140|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)>($6|0);
     if ($70) {
      $71 = (($69) + -1)|0;
      HEAP32[$68>>2] = $71;
     } else {
      $72 = ($69|0)==($6|0);
      if ($72) {
       HEAP32[$68>>2] = -1;
       $73 = ((($0)) + 144|0);
       HEAP32[$73>>2] = 0;
      }
     }
     $74 = ((($0)) + 148|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)>($6|0);
     if ($76) {
      $77 = (($75) + -1)|0;
      HEAP32[$74>>2] = $77;
     } else {
      $78 = ($75|0)==($6|0);
      if ($78) {
       HEAP32[$74>>2] = -1;
       $79 = ((($0)) + 152|0);
       HEAP32[$79>>2] = 0;
      }
     }
     $80 = ((($0)) + 160|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)>($6|0);
     if ($82) {
      $83 = (($81) + -1)|0;
      HEAP32[$80>>2] = $83;
     } else {
      $84 = ($81|0)==($6|0);
      if ($84) {
       $85 = ((($0)) + 172|0);
       HEAP32[$85>>2] = 0;
      }
     }
     $86 = ((($0)) + 164|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)>($6|0);
     if ($88) {
      $89 = (($87) + -1)|0;
      HEAP32[$86>>2] = $89;
      $$pre$phiZ2D = $14;$92 = $863;
      break;
     }
     $90 = ($87|0)==($6|0);
     if ($90) {
      $91 = ((($0)) + 176|0);
      HEAP32[$91>>2] = 0;
      $$pre$phiZ2D = $14;$92 = $863;
     } else {
      $$pre$phiZ2D = $14;$92 = $863;
     }
    } else {
     $$phi$trans$insert = ((($0)) + 28|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $$pre$phiZ2D = $$phi$trans$insert;$92 = $$pre;
    }
   } while(0);
   $93 = ($92|0)>(-1);
   if ($93) {
    $94 = HEAP32[$0>>2]|0;
    _CS_DelEntry($94,$92);
    $95 = HEAP32[$5>>2]|0;
    $96 = ($95|0)>($92|0);
    if ($96) {
     $97 = (($95) + -1)|0;
     HEAP32[$5>>2] = $97;
    } else {
     $98 = ($95|0)==($92|0);
     if ($98) {
      HEAP32[$5>>2] = -1;
      $99 = ((($0)) + 24|0);
      HEAP32[$99>>2] = 0;
     }
    }
    $100 = HEAP32[$$pre$phiZ2D>>2]|0;
    $101 = ($100|0)>($92|0);
    if ($101) {
     $102 = (($100) + -1)|0;
     HEAP32[$$pre$phiZ2D>>2] = $102;
    } else {
     $103 = ($100|0)==($92|0);
     if ($103) {
      HEAP32[$$pre$phiZ2D>>2] = -1;
      $104 = ((($0)) + 32|0);
      HEAP32[$104>>2] = 0;
     }
    }
    $105 = ((($0)) + 44|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ($106|0)>($92|0);
    if ($107) {
     $108 = (($106) + -1)|0;
     HEAP32[$105>>2] = $108;
    } else {
     $109 = ($106|0)==($92|0);
     if ($109) {
      HEAP32[$105>>2] = -1;
      $110 = ((($0)) + 48|0);
      HEAP32[$110>>2] = 0;
     }
    }
    $111 = ((($0)) + 52|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)>($92|0);
    if ($113) {
     $114 = (($112) + -1)|0;
     HEAP32[$111>>2] = $114;
    } else {
     $115 = ($112|0)==($92|0);
     if ($115) {
      HEAP32[$111>>2] = -1;
      $116 = ((($0)) + 56|0);
      HEAP32[$116>>2] = 0;
     }
    }
    $117 = ((($0)) + 68|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = ($118|0)>($92|0);
    if ($119) {
     $120 = (($118) + -1)|0;
     HEAP32[$117>>2] = $120;
    } else {
     $121 = ($118|0)==($92|0);
     if ($121) {
      HEAP32[$117>>2] = -1;
      $122 = ((($0)) + 72|0);
      HEAP32[$122>>2] = 0;
     }
    }
    $123 = ((($0)) + 76|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($124|0)>($92|0);
    if ($125) {
     $126 = (($124) + -1)|0;
     HEAP32[$123>>2] = $126;
    } else {
     $127 = ($124|0)==($92|0);
     if ($127) {
      HEAP32[$123>>2] = -1;
      $128 = ((($0)) + 80|0);
      HEAP32[$128>>2] = 0;
     }
    }
    $129 = ((($0)) + 92|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)>($92|0);
    if ($131) {
     $132 = (($130) + -1)|0;
     HEAP32[$129>>2] = $132;
    } else {
     $133 = ($130|0)==($92|0);
     if ($133) {
      HEAP32[$129>>2] = -1;
      $134 = ((($0)) + 96|0);
      HEAP32[$134>>2] = 0;
     }
    }
    $135 = ((($0)) + 100|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)>($92|0);
    if ($137) {
     $138 = (($136) + -1)|0;
     HEAP32[$135>>2] = $138;
    } else {
     $139 = ($136|0)==($92|0);
     if ($139) {
      HEAP32[$135>>2] = -1;
      $140 = ((($0)) + 104|0);
      HEAP32[$140>>2] = 0;
     }
    }
    $141 = ((($0)) + 116|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)>($92|0);
    if ($143) {
     $144 = (($142) + -1)|0;
     HEAP32[$141>>2] = $144;
    } else {
     $145 = ($142|0)==($92|0);
     if ($145) {
      HEAP32[$141>>2] = -1;
      $146 = ((($0)) + 120|0);
      HEAP32[$146>>2] = 0;
     }
    }
    $147 = ((($0)) + 124|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)>($92|0);
    if ($149) {
     $150 = (($148) + -1)|0;
     HEAP32[$147>>2] = $150;
    } else {
     $151 = ($148|0)==($92|0);
     if ($151) {
      HEAP32[$147>>2] = -1;
      $152 = ((($0)) + 128|0);
      HEAP32[$152>>2] = 0;
     }
    }
    $153 = ((($0)) + 140|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)>($92|0);
    if ($155) {
     $156 = (($154) + -1)|0;
     HEAP32[$153>>2] = $156;
    } else {
     $157 = ($154|0)==($92|0);
     if ($157) {
      HEAP32[$153>>2] = -1;
      $158 = ((($0)) + 144|0);
      HEAP32[$158>>2] = 0;
     }
    }
    $159 = ((($0)) + 148|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = ($160|0)>($92|0);
    if ($161) {
     $162 = (($160) + -1)|0;
     HEAP32[$159>>2] = $162;
    } else {
     $163 = ($160|0)==($92|0);
     if ($163) {
      HEAP32[$159>>2] = -1;
      $164 = ((($0)) + 152|0);
      HEAP32[$164>>2] = 0;
     }
    }
    $165 = ((($0)) + 160|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)>($92|0);
    if ($167) {
     $168 = (($166) + -1)|0;
     HEAP32[$165>>2] = $168;
    } else {
     $169 = ($166|0)==($92|0);
     if ($169) {
      $170 = ((($0)) + 172|0);
      HEAP32[$170>>2] = 0;
     }
    }
    $171 = ((($0)) + 164|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = ($172|0)>($92|0);
    if ($173) {
     $174 = (($172) + -1)|0;
     HEAP32[$171>>2] = $174;
     break;
    }
    $175 = ($172|0)==($92|0);
    if ($175) {
     $176 = ((($0)) + 176|0);
     HEAP32[$176>>2] = 0;
    }
   }
  }
 } while(0);
 $177 = ((($0)) + 40|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = $178 & 12;
 $180 = ($179|0)==(4);
 do {
  if ($180) {
   $181 = ((($0)) + 44|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ($182|0)>(-1);
   do {
    if ($183) {
     $184 = HEAP32[$0>>2]|0;
     _CS_DelEntry($184,$182);
     $185 = ((($0)) + 20|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)>($182|0);
     if ($187) {
      $188 = (($186) + -1)|0;
      HEAP32[$185>>2] = $188;
     } else {
      $189 = ($186|0)==($182|0);
      if ($189) {
       HEAP32[$185>>2] = -1;
       $190 = ((($0)) + 24|0);
       HEAP32[$190>>2] = 0;
      }
     }
     $191 = ((($0)) + 28|0);
     $192 = HEAP32[$191>>2]|0;
     $193 = ($192|0)>($182|0);
     if ($193) {
      $194 = (($192) + -1)|0;
      HEAP32[$191>>2] = $194;
     } else {
      $195 = ($192|0)==($182|0);
      if ($195) {
       HEAP32[$191>>2] = -1;
       $196 = ((($0)) + 32|0);
       HEAP32[$196>>2] = 0;
      }
     }
     $197 = HEAP32[$181>>2]|0;
     $198 = ($197|0)>($182|0);
     if ($198) {
      $199 = (($197) + -1)|0;
      HEAP32[$181>>2] = $199;
     } else {
      $200 = ($197|0)==($182|0);
      if ($200) {
       HEAP32[$181>>2] = -1;
       $201 = ((($0)) + 48|0);
       HEAP32[$201>>2] = 0;
      }
     }
     $202 = ((($0)) + 52|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)>($182|0);
     if ($204) {
      $205 = (($203) + -1)|0;
      HEAP32[$202>>2] = $205;
      $864 = $205;
     } else {
      $206 = ($203|0)==($182|0);
      if ($206) {
       HEAP32[$202>>2] = -1;
       $207 = ((($0)) + 56|0);
       HEAP32[$207>>2] = 0;
       $864 = -1;
      } else {
       $864 = $203;
      }
     }
     $208 = ((($0)) + 68|0);
     $209 = HEAP32[$208>>2]|0;
     $210 = ($209|0)>($182|0);
     if ($210) {
      $211 = (($209) + -1)|0;
      HEAP32[$208>>2] = $211;
     } else {
      $212 = ($209|0)==($182|0);
      if ($212) {
       HEAP32[$208>>2] = -1;
       $213 = ((($0)) + 72|0);
       HEAP32[$213>>2] = 0;
      }
     }
     $214 = ((($0)) + 76|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ($215|0)>($182|0);
     if ($216) {
      $217 = (($215) + -1)|0;
      HEAP32[$214>>2] = $217;
     } else {
      $218 = ($215|0)==($182|0);
      if ($218) {
       HEAP32[$214>>2] = -1;
       $219 = ((($0)) + 80|0);
       HEAP32[$219>>2] = 0;
      }
     }
     $220 = ((($0)) + 92|0);
     $221 = HEAP32[$220>>2]|0;
     $222 = ($221|0)>($182|0);
     if ($222) {
      $223 = (($221) + -1)|0;
      HEAP32[$220>>2] = $223;
     } else {
      $224 = ($221|0)==($182|0);
      if ($224) {
       HEAP32[$220>>2] = -1;
       $225 = ((($0)) + 96|0);
       HEAP32[$225>>2] = 0;
      }
     }
     $226 = ((($0)) + 100|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = ($227|0)>($182|0);
     if ($228) {
      $229 = (($227) + -1)|0;
      HEAP32[$226>>2] = $229;
     } else {
      $230 = ($227|0)==($182|0);
      if ($230) {
       HEAP32[$226>>2] = -1;
       $231 = ((($0)) + 104|0);
       HEAP32[$231>>2] = 0;
      }
     }
     $232 = ((($0)) + 116|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = ($233|0)>($182|0);
     if ($234) {
      $235 = (($233) + -1)|0;
      HEAP32[$232>>2] = $235;
     } else {
      $236 = ($233|0)==($182|0);
      if ($236) {
       HEAP32[$232>>2] = -1;
       $237 = ((($0)) + 120|0);
       HEAP32[$237>>2] = 0;
      }
     }
     $238 = ((($0)) + 124|0);
     $239 = HEAP32[$238>>2]|0;
     $240 = ($239|0)>($182|0);
     if ($240) {
      $241 = (($239) + -1)|0;
      HEAP32[$238>>2] = $241;
     } else {
      $242 = ($239|0)==($182|0);
      if ($242) {
       HEAP32[$238>>2] = -1;
       $243 = ((($0)) + 128|0);
       HEAP32[$243>>2] = 0;
      }
     }
     $244 = ((($0)) + 140|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = ($245|0)>($182|0);
     if ($246) {
      $247 = (($245) + -1)|0;
      HEAP32[$244>>2] = $247;
     } else {
      $248 = ($245|0)==($182|0);
      if ($248) {
       HEAP32[$244>>2] = -1;
       $249 = ((($0)) + 144|0);
       HEAP32[$249>>2] = 0;
      }
     }
     $250 = ((($0)) + 148|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = ($251|0)>($182|0);
     if ($252) {
      $253 = (($251) + -1)|0;
      HEAP32[$250>>2] = $253;
     } else {
      $254 = ($251|0)==($182|0);
      if ($254) {
       HEAP32[$250>>2] = -1;
       $255 = ((($0)) + 152|0);
       HEAP32[$255>>2] = 0;
      }
     }
     $256 = ((($0)) + 160|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ($257|0)>($182|0);
     if ($258) {
      $259 = (($257) + -1)|0;
      HEAP32[$256>>2] = $259;
     } else {
      $260 = ($257|0)==($182|0);
      if ($260) {
       $261 = ((($0)) + 172|0);
       HEAP32[$261>>2] = 0;
      }
     }
     $262 = ((($0)) + 164|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = ($263|0)>($182|0);
     if ($264) {
      $265 = (($263) + -1)|0;
      HEAP32[$262>>2] = $265;
      $$pre$phi82Z2D = $202;$268 = $864;
      break;
     }
     $266 = ($263|0)==($182|0);
     if ($266) {
      $267 = ((($0)) + 176|0);
      HEAP32[$267>>2] = 0;
      $$pre$phi82Z2D = $202;$268 = $864;
     } else {
      $$pre$phi82Z2D = $202;$268 = $864;
     }
    } else {
     $$phi$trans$insert76 = ((($0)) + 52|0);
     $$pre77 = HEAP32[$$phi$trans$insert76>>2]|0;
     $$pre$phi82Z2D = $$phi$trans$insert76;$268 = $$pre77;
    }
   } while(0);
   $269 = ($268|0)>(-1);
   if ($269) {
    $270 = HEAP32[$0>>2]|0;
    _CS_DelEntry($270,$268);
    $271 = ((($0)) + 20|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = ($272|0)>($268|0);
    if ($273) {
     $274 = (($272) + -1)|0;
     HEAP32[$271>>2] = $274;
    } else {
     $275 = ($272|0)==($268|0);
     if ($275) {
      HEAP32[$271>>2] = -1;
      $276 = ((($0)) + 24|0);
      HEAP32[$276>>2] = 0;
     }
    }
    $277 = ((($0)) + 28|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = ($278|0)>($268|0);
    if ($279) {
     $280 = (($278) + -1)|0;
     HEAP32[$277>>2] = $280;
    } else {
     $281 = ($278|0)==($268|0);
     if ($281) {
      HEAP32[$277>>2] = -1;
      $282 = ((($0)) + 32|0);
      HEAP32[$282>>2] = 0;
     }
    }
    $283 = HEAP32[$181>>2]|0;
    $284 = ($283|0)>($268|0);
    if ($284) {
     $285 = (($283) + -1)|0;
     HEAP32[$181>>2] = $285;
    } else {
     $286 = ($283|0)==($268|0);
     if ($286) {
      HEAP32[$181>>2] = -1;
      $287 = ((($0)) + 48|0);
      HEAP32[$287>>2] = 0;
     }
    }
    $288 = HEAP32[$$pre$phi82Z2D>>2]|0;
    $289 = ($288|0)>($268|0);
    if ($289) {
     $290 = (($288) + -1)|0;
     HEAP32[$$pre$phi82Z2D>>2] = $290;
    } else {
     $291 = ($288|0)==($268|0);
     if ($291) {
      HEAP32[$$pre$phi82Z2D>>2] = -1;
      $292 = ((($0)) + 56|0);
      HEAP32[$292>>2] = 0;
     }
    }
    $293 = ((($0)) + 68|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = ($294|0)>($268|0);
    if ($295) {
     $296 = (($294) + -1)|0;
     HEAP32[$293>>2] = $296;
    } else {
     $297 = ($294|0)==($268|0);
     if ($297) {
      HEAP32[$293>>2] = -1;
      $298 = ((($0)) + 72|0);
      HEAP32[$298>>2] = 0;
     }
    }
    $299 = ((($0)) + 76|0);
    $300 = HEAP32[$299>>2]|0;
    $301 = ($300|0)>($268|0);
    if ($301) {
     $302 = (($300) + -1)|0;
     HEAP32[$299>>2] = $302;
    } else {
     $303 = ($300|0)==($268|0);
     if ($303) {
      HEAP32[$299>>2] = -1;
      $304 = ((($0)) + 80|0);
      HEAP32[$304>>2] = 0;
     }
    }
    $305 = ((($0)) + 92|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = ($306|0)>($268|0);
    if ($307) {
     $308 = (($306) + -1)|0;
     HEAP32[$305>>2] = $308;
    } else {
     $309 = ($306|0)==($268|0);
     if ($309) {
      HEAP32[$305>>2] = -1;
      $310 = ((($0)) + 96|0);
      HEAP32[$310>>2] = 0;
     }
    }
    $311 = ((($0)) + 100|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = ($312|0)>($268|0);
    if ($313) {
     $314 = (($312) + -1)|0;
     HEAP32[$311>>2] = $314;
    } else {
     $315 = ($312|0)==($268|0);
     if ($315) {
      HEAP32[$311>>2] = -1;
      $316 = ((($0)) + 104|0);
      HEAP32[$316>>2] = 0;
     }
    }
    $317 = ((($0)) + 116|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = ($318|0)>($268|0);
    if ($319) {
     $320 = (($318) + -1)|0;
     HEAP32[$317>>2] = $320;
    } else {
     $321 = ($318|0)==($268|0);
     if ($321) {
      HEAP32[$317>>2] = -1;
      $322 = ((($0)) + 120|0);
      HEAP32[$322>>2] = 0;
     }
    }
    $323 = ((($0)) + 124|0);
    $324 = HEAP32[$323>>2]|0;
    $325 = ($324|0)>($268|0);
    if ($325) {
     $326 = (($324) + -1)|0;
     HEAP32[$323>>2] = $326;
    } else {
     $327 = ($324|0)==($268|0);
     if ($327) {
      HEAP32[$323>>2] = -1;
      $328 = ((($0)) + 128|0);
      HEAP32[$328>>2] = 0;
     }
    }
    $329 = ((($0)) + 140|0);
    $330 = HEAP32[$329>>2]|0;
    $331 = ($330|0)>($268|0);
    if ($331) {
     $332 = (($330) + -1)|0;
     HEAP32[$329>>2] = $332;
    } else {
     $333 = ($330|0)==($268|0);
     if ($333) {
      HEAP32[$329>>2] = -1;
      $334 = ((($0)) + 144|0);
      HEAP32[$334>>2] = 0;
     }
    }
    $335 = ((($0)) + 148|0);
    $336 = HEAP32[$335>>2]|0;
    $337 = ($336|0)>($268|0);
    if ($337) {
     $338 = (($336) + -1)|0;
     HEAP32[$335>>2] = $338;
    } else {
     $339 = ($336|0)==($268|0);
     if ($339) {
      HEAP32[$335>>2] = -1;
      $340 = ((($0)) + 152|0);
      HEAP32[$340>>2] = 0;
     }
    }
    $341 = ((($0)) + 160|0);
    $342 = HEAP32[$341>>2]|0;
    $343 = ($342|0)>($268|0);
    if ($343) {
     $344 = (($342) + -1)|0;
     HEAP32[$341>>2] = $344;
    } else {
     $345 = ($342|0)==($268|0);
     if ($345) {
      $346 = ((($0)) + 172|0);
      HEAP32[$346>>2] = 0;
     }
    }
    $347 = ((($0)) + 164|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = ($348|0)>($268|0);
    if ($349) {
     $350 = (($348) + -1)|0;
     HEAP32[$347>>2] = $350;
     break;
    }
    $351 = ($348|0)==($268|0);
    if ($351) {
     $352 = ((($0)) + 176|0);
     HEAP32[$352>>2] = 0;
    }
   }
  }
 } while(0);
 $353 = ((($0)) + 88|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = $354 & 12;
 $356 = ($355|0)==(4);
 do {
  if ($356) {
   $357 = ((($0)) + 92|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = ($358|0)>(-1);
   do {
    if ($359) {
     $360 = HEAP32[$0>>2]|0;
     _CS_DelEntry($360,$358);
     $361 = ((($0)) + 20|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = ($362|0)>($358|0);
     if ($363) {
      $364 = (($362) + -1)|0;
      HEAP32[$361>>2] = $364;
     } else {
      $365 = ($362|0)==($358|0);
      if ($365) {
       HEAP32[$361>>2] = -1;
       $366 = ((($0)) + 24|0);
       HEAP32[$366>>2] = 0;
      }
     }
     $367 = ((($0)) + 28|0);
     $368 = HEAP32[$367>>2]|0;
     $369 = ($368|0)>($358|0);
     if ($369) {
      $370 = (($368) + -1)|0;
      HEAP32[$367>>2] = $370;
     } else {
      $371 = ($368|0)==($358|0);
      if ($371) {
       HEAP32[$367>>2] = -1;
       $372 = ((($0)) + 32|0);
       HEAP32[$372>>2] = 0;
      }
     }
     $373 = ((($0)) + 44|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = ($374|0)>($358|0);
     if ($375) {
      $376 = (($374) + -1)|0;
      HEAP32[$373>>2] = $376;
     } else {
      $377 = ($374|0)==($358|0);
      if ($377) {
       HEAP32[$373>>2] = -1;
       $378 = ((($0)) + 48|0);
       HEAP32[$378>>2] = 0;
      }
     }
     $379 = ((($0)) + 52|0);
     $380 = HEAP32[$379>>2]|0;
     $381 = ($380|0)>($358|0);
     if ($381) {
      $382 = (($380) + -1)|0;
      HEAP32[$379>>2] = $382;
     } else {
      $383 = ($380|0)==($358|0);
      if ($383) {
       HEAP32[$379>>2] = -1;
       $384 = ((($0)) + 56|0);
       HEAP32[$384>>2] = 0;
      }
     }
     $385 = ((($0)) + 68|0);
     $386 = HEAP32[$385>>2]|0;
     $387 = ($386|0)>($358|0);
     if ($387) {
      $388 = (($386) + -1)|0;
      HEAP32[$385>>2] = $388;
     } else {
      $389 = ($386|0)==($358|0);
      if ($389) {
       HEAP32[$385>>2] = -1;
       $390 = ((($0)) + 72|0);
       HEAP32[$390>>2] = 0;
      }
     }
     $391 = ((($0)) + 76|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = ($392|0)>($358|0);
     if ($393) {
      $394 = (($392) + -1)|0;
      HEAP32[$391>>2] = $394;
     } else {
      $395 = ($392|0)==($358|0);
      if ($395) {
       HEAP32[$391>>2] = -1;
       $396 = ((($0)) + 80|0);
       HEAP32[$396>>2] = 0;
      }
     }
     $397 = HEAP32[$357>>2]|0;
     $398 = ($397|0)>($358|0);
     if ($398) {
      $399 = (($397) + -1)|0;
      HEAP32[$357>>2] = $399;
     } else {
      $400 = ($397|0)==($358|0);
      if ($400) {
       HEAP32[$357>>2] = -1;
       $401 = ((($0)) + 96|0);
       HEAP32[$401>>2] = 0;
      }
     }
     $402 = ((($0)) + 100|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = ($403|0)>($358|0);
     if ($404) {
      $405 = (($403) + -1)|0;
      HEAP32[$402>>2] = $405;
      $865 = $405;
     } else {
      $406 = ($403|0)==($358|0);
      if ($406) {
       HEAP32[$402>>2] = -1;
       $407 = ((($0)) + 104|0);
       HEAP32[$407>>2] = 0;
       $865 = -1;
      } else {
       $865 = $403;
      }
     }
     $408 = ((($0)) + 116|0);
     $409 = HEAP32[$408>>2]|0;
     $410 = ($409|0)>($358|0);
     if ($410) {
      $411 = (($409) + -1)|0;
      HEAP32[$408>>2] = $411;
     } else {
      $412 = ($409|0)==($358|0);
      if ($412) {
       HEAP32[$408>>2] = -1;
       $413 = ((($0)) + 120|0);
       HEAP32[$413>>2] = 0;
      }
     }
     $414 = ((($0)) + 124|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = ($415|0)>($358|0);
     if ($416) {
      $417 = (($415) + -1)|0;
      HEAP32[$414>>2] = $417;
     } else {
      $418 = ($415|0)==($358|0);
      if ($418) {
       HEAP32[$414>>2] = -1;
       $419 = ((($0)) + 128|0);
       HEAP32[$419>>2] = 0;
      }
     }
     $420 = ((($0)) + 140|0);
     $421 = HEAP32[$420>>2]|0;
     $422 = ($421|0)>($358|0);
     if ($422) {
      $423 = (($421) + -1)|0;
      HEAP32[$420>>2] = $423;
     } else {
      $424 = ($421|0)==($358|0);
      if ($424) {
       HEAP32[$420>>2] = -1;
       $425 = ((($0)) + 144|0);
       HEAP32[$425>>2] = 0;
      }
     }
     $426 = ((($0)) + 148|0);
     $427 = HEAP32[$426>>2]|0;
     $428 = ($427|0)>($358|0);
     if ($428) {
      $429 = (($427) + -1)|0;
      HEAP32[$426>>2] = $429;
     } else {
      $430 = ($427|0)==($358|0);
      if ($430) {
       HEAP32[$426>>2] = -1;
       $431 = ((($0)) + 152|0);
       HEAP32[$431>>2] = 0;
      }
     }
     $432 = ((($0)) + 160|0);
     $433 = HEAP32[$432>>2]|0;
     $434 = ($433|0)>($358|0);
     do {
      if ($434) {
       $435 = (($433) + -1)|0;
       HEAP32[$432>>2] = $435;
      } else {
       $436 = ($433|0)==($358|0);
       if (!($436)) {
        break;
       }
       $437 = ((($0)) + 172|0);
       HEAP32[$437>>2] = 0;
      }
     } while(0);
     $438 = ((($0)) + 164|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = ($439|0)>($358|0);
     if ($440) {
      $441 = (($439) + -1)|0;
      HEAP32[$438>>2] = $441;
      $$pre$phi83Z2D = $402;$444 = $865;
      break;
     }
     $442 = ($439|0)==($358|0);
     if (!($442)) {
      $$pre$phi83Z2D = $402;$444 = $865;
      break;
     }
     $443 = ((($0)) + 176|0);
     HEAP32[$443>>2] = 0;
     $$pre$phi83Z2D = $402;$444 = $865;
    } else {
     $$phi$trans$insert78 = ((($0)) + 100|0);
     $$pre79 = HEAP32[$$phi$trans$insert78>>2]|0;
     $$pre$phi83Z2D = $$phi$trans$insert78;$444 = $$pre79;
    }
   } while(0);
   $445 = ($444|0)>(-1);
   if ($445) {
    $446 = HEAP32[$0>>2]|0;
    _CS_DelEntry($446,$444);
    $447 = ((($0)) + 20|0);
    $448 = HEAP32[$447>>2]|0;
    $449 = ($448|0)>($444|0);
    if ($449) {
     $450 = (($448) + -1)|0;
     HEAP32[$447>>2] = $450;
    } else {
     $451 = ($448|0)==($444|0);
     if ($451) {
      HEAP32[$447>>2] = -1;
      $452 = ((($0)) + 24|0);
      HEAP32[$452>>2] = 0;
     }
    }
    $453 = ((($0)) + 28|0);
    $454 = HEAP32[$453>>2]|0;
    $455 = ($454|0)>($444|0);
    if ($455) {
     $456 = (($454) + -1)|0;
     HEAP32[$453>>2] = $456;
    } else {
     $457 = ($454|0)==($444|0);
     if ($457) {
      HEAP32[$453>>2] = -1;
      $458 = ((($0)) + 32|0);
      HEAP32[$458>>2] = 0;
     }
    }
    $459 = ((($0)) + 44|0);
    $460 = HEAP32[$459>>2]|0;
    $461 = ($460|0)>($444|0);
    if ($461) {
     $462 = (($460) + -1)|0;
     HEAP32[$459>>2] = $462;
    } else {
     $463 = ($460|0)==($444|0);
     if ($463) {
      HEAP32[$459>>2] = -1;
      $464 = ((($0)) + 48|0);
      HEAP32[$464>>2] = 0;
     }
    }
    $465 = ((($0)) + 52|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = ($466|0)>($444|0);
    if ($467) {
     $468 = (($466) + -1)|0;
     HEAP32[$465>>2] = $468;
    } else {
     $469 = ($466|0)==($444|0);
     if ($469) {
      HEAP32[$465>>2] = -1;
      $470 = ((($0)) + 56|0);
      HEAP32[$470>>2] = 0;
     }
    }
    $471 = ((($0)) + 68|0);
    $472 = HEAP32[$471>>2]|0;
    $473 = ($472|0)>($444|0);
    if ($473) {
     $474 = (($472) + -1)|0;
     HEAP32[$471>>2] = $474;
    } else {
     $475 = ($472|0)==($444|0);
     if ($475) {
      HEAP32[$471>>2] = -1;
      $476 = ((($0)) + 72|0);
      HEAP32[$476>>2] = 0;
     }
    }
    $477 = ((($0)) + 76|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ($478|0)>($444|0);
    if ($479) {
     $480 = (($478) + -1)|0;
     HEAP32[$477>>2] = $480;
    } else {
     $481 = ($478|0)==($444|0);
     if ($481) {
      HEAP32[$477>>2] = -1;
      $482 = ((($0)) + 80|0);
      HEAP32[$482>>2] = 0;
     }
    }
    $483 = HEAP32[$357>>2]|0;
    $484 = ($483|0)>($444|0);
    if ($484) {
     $485 = (($483) + -1)|0;
     HEAP32[$357>>2] = $485;
    } else {
     $486 = ($483|0)==($444|0);
     if ($486) {
      HEAP32[$357>>2] = -1;
      $487 = ((($0)) + 96|0);
      HEAP32[$487>>2] = 0;
     }
    }
    $488 = HEAP32[$$pre$phi83Z2D>>2]|0;
    $489 = ($488|0)>($444|0);
    if ($489) {
     $490 = (($488) + -1)|0;
     HEAP32[$$pre$phi83Z2D>>2] = $490;
    } else {
     $491 = ($488|0)==($444|0);
     if ($491) {
      HEAP32[$$pre$phi83Z2D>>2] = -1;
      $492 = ((($0)) + 104|0);
      HEAP32[$492>>2] = 0;
     }
    }
    $493 = ((($0)) + 116|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = ($494|0)>($444|0);
    if ($495) {
     $496 = (($494) + -1)|0;
     HEAP32[$493>>2] = $496;
    } else {
     $497 = ($494|0)==($444|0);
     if ($497) {
      HEAP32[$493>>2] = -1;
      $498 = ((($0)) + 120|0);
      HEAP32[$498>>2] = 0;
     }
    }
    $499 = ((($0)) + 124|0);
    $500 = HEAP32[$499>>2]|0;
    $501 = ($500|0)>($444|0);
    if ($501) {
     $502 = (($500) + -1)|0;
     HEAP32[$499>>2] = $502;
    } else {
     $503 = ($500|0)==($444|0);
     if ($503) {
      HEAP32[$499>>2] = -1;
      $504 = ((($0)) + 128|0);
      HEAP32[$504>>2] = 0;
     }
    }
    $505 = ((($0)) + 140|0);
    $506 = HEAP32[$505>>2]|0;
    $507 = ($506|0)>($444|0);
    if ($507) {
     $508 = (($506) + -1)|0;
     HEAP32[$505>>2] = $508;
    } else {
     $509 = ($506|0)==($444|0);
     if ($509) {
      HEAP32[$505>>2] = -1;
      $510 = ((($0)) + 144|0);
      HEAP32[$510>>2] = 0;
     }
    }
    $511 = ((($0)) + 148|0);
    $512 = HEAP32[$511>>2]|0;
    $513 = ($512|0)>($444|0);
    if ($513) {
     $514 = (($512) + -1)|0;
     HEAP32[$511>>2] = $514;
    } else {
     $515 = ($512|0)==($444|0);
     if ($515) {
      HEAP32[$511>>2] = -1;
      $516 = ((($0)) + 152|0);
      HEAP32[$516>>2] = 0;
     }
    }
    $517 = ((($0)) + 160|0);
    $518 = HEAP32[$517>>2]|0;
    $519 = ($518|0)>($444|0);
    do {
     if ($519) {
      $520 = (($518) + -1)|0;
      HEAP32[$517>>2] = $520;
     } else {
      $521 = ($518|0)==($444|0);
      if (!($521)) {
       break;
      }
      $522 = ((($0)) + 172|0);
      HEAP32[$522>>2] = 0;
     }
    } while(0);
    $523 = ((($0)) + 164|0);
    $524 = HEAP32[$523>>2]|0;
    $525 = ($524|0)>($444|0);
    if ($525) {
     $526 = (($524) + -1)|0;
     HEAP32[$523>>2] = $526;
     break;
    }
    $527 = ($524|0)==($444|0);
    if (!($527)) {
     break;
    }
    $528 = ((($0)) + 176|0);
    HEAP32[$528>>2] = 0;
   }
  }
 } while(0);
 $529 = ((($0)) + 112|0);
 $530 = HEAP32[$529>>2]|0;
 $531 = $530 & 12;
 $532 = ($531|0)==(4);
 do {
  if ($532) {
   $533 = ((($0)) + 116|0);
   $534 = HEAP32[$533>>2]|0;
   $535 = ($534|0)>(-1);
   do {
    if ($535) {
     $536 = HEAP32[$0>>2]|0;
     _CS_DelEntry($536,$534);
     $537 = ((($0)) + 20|0);
     $538 = HEAP32[$537>>2]|0;
     $539 = ($538|0)>($534|0);
     if ($539) {
      $540 = (($538) + -1)|0;
      HEAP32[$537>>2] = $540;
     } else {
      $541 = ($538|0)==($534|0);
      if ($541) {
       HEAP32[$537>>2] = -1;
       $542 = ((($0)) + 24|0);
       HEAP32[$542>>2] = 0;
      }
     }
     $543 = ((($0)) + 28|0);
     $544 = HEAP32[$543>>2]|0;
     $545 = ($544|0)>($534|0);
     if ($545) {
      $546 = (($544) + -1)|0;
      HEAP32[$543>>2] = $546;
     } else {
      $547 = ($544|0)==($534|0);
      if ($547) {
       HEAP32[$543>>2] = -1;
       $548 = ((($0)) + 32|0);
       HEAP32[$548>>2] = 0;
      }
     }
     $549 = ((($0)) + 44|0);
     $550 = HEAP32[$549>>2]|0;
     $551 = ($550|0)>($534|0);
     if ($551) {
      $552 = (($550) + -1)|0;
      HEAP32[$549>>2] = $552;
     } else {
      $553 = ($550|0)==($534|0);
      if ($553) {
       HEAP32[$549>>2] = -1;
       $554 = ((($0)) + 48|0);
       HEAP32[$554>>2] = 0;
      }
     }
     $555 = ((($0)) + 52|0);
     $556 = HEAP32[$555>>2]|0;
     $557 = ($556|0)>($534|0);
     if ($557) {
      $558 = (($556) + -1)|0;
      HEAP32[$555>>2] = $558;
     } else {
      $559 = ($556|0)==($534|0);
      if ($559) {
       HEAP32[$555>>2] = -1;
       $560 = ((($0)) + 56|0);
       HEAP32[$560>>2] = 0;
      }
     }
     $561 = ((($0)) + 68|0);
     $562 = HEAP32[$561>>2]|0;
     $563 = ($562|0)>($534|0);
     if ($563) {
      $564 = (($562) + -1)|0;
      HEAP32[$561>>2] = $564;
     } else {
      $565 = ($562|0)==($534|0);
      if ($565) {
       HEAP32[$561>>2] = -1;
       $566 = ((($0)) + 72|0);
       HEAP32[$566>>2] = 0;
      }
     }
     $567 = ((($0)) + 76|0);
     $568 = HEAP32[$567>>2]|0;
     $569 = ($568|0)>($534|0);
     if ($569) {
      $570 = (($568) + -1)|0;
      HEAP32[$567>>2] = $570;
     } else {
      $571 = ($568|0)==($534|0);
      if ($571) {
       HEAP32[$567>>2] = -1;
       $572 = ((($0)) + 80|0);
       HEAP32[$572>>2] = 0;
      }
     }
     $573 = ((($0)) + 92|0);
     $574 = HEAP32[$573>>2]|0;
     $575 = ($574|0)>($534|0);
     if ($575) {
      $576 = (($574) + -1)|0;
      HEAP32[$573>>2] = $576;
     } else {
      $577 = ($574|0)==($534|0);
      if ($577) {
       HEAP32[$573>>2] = -1;
       $578 = ((($0)) + 96|0);
       HEAP32[$578>>2] = 0;
      }
     }
     $579 = ((($0)) + 100|0);
     $580 = HEAP32[$579>>2]|0;
     $581 = ($580|0)>($534|0);
     if ($581) {
      $582 = (($580) + -1)|0;
      HEAP32[$579>>2] = $582;
     } else {
      $583 = ($580|0)==($534|0);
      if ($583) {
       HEAP32[$579>>2] = -1;
       $584 = ((($0)) + 104|0);
       HEAP32[$584>>2] = 0;
      }
     }
     $585 = HEAP32[$533>>2]|0;
     $586 = ($585|0)>($534|0);
     if ($586) {
      $587 = (($585) + -1)|0;
      HEAP32[$533>>2] = $587;
     } else {
      $588 = ($585|0)==($534|0);
      if ($588) {
       HEAP32[$533>>2] = -1;
       $589 = ((($0)) + 120|0);
       HEAP32[$589>>2] = 0;
      }
     }
     $590 = ((($0)) + 124|0);
     $591 = HEAP32[$590>>2]|0;
     $592 = ($591|0)>($534|0);
     if ($592) {
      $593 = (($591) + -1)|0;
      HEAP32[$590>>2] = $593;
      $866 = $593;
     } else {
      $594 = ($591|0)==($534|0);
      if ($594) {
       HEAP32[$590>>2] = -1;
       $595 = ((($0)) + 128|0);
       HEAP32[$595>>2] = 0;
       $866 = -1;
      } else {
       $866 = $591;
      }
     }
     $596 = ((($0)) + 140|0);
     $597 = HEAP32[$596>>2]|0;
     $598 = ($597|0)>($534|0);
     if ($598) {
      $599 = (($597) + -1)|0;
      HEAP32[$596>>2] = $599;
     } else {
      $600 = ($597|0)==($534|0);
      if ($600) {
       HEAP32[$596>>2] = -1;
       $601 = ((($0)) + 144|0);
       HEAP32[$601>>2] = 0;
      }
     }
     $602 = ((($0)) + 148|0);
     $603 = HEAP32[$602>>2]|0;
     $604 = ($603|0)>($534|0);
     do {
      if ($604) {
       $605 = (($603) + -1)|0;
       HEAP32[$602>>2] = $605;
      } else {
       $606 = ($603|0)==($534|0);
       if (!($606)) {
        break;
       }
       HEAP32[$602>>2] = -1;
       $607 = ((($0)) + 152|0);
       HEAP32[$607>>2] = 0;
      }
     } while(0);
     $608 = ((($0)) + 160|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = ($609|0)>($534|0);
     do {
      if ($610) {
       $611 = (($609) + -1)|0;
       HEAP32[$608>>2] = $611;
      } else {
       $612 = ($609|0)==($534|0);
       if (!($612)) {
        break;
       }
       $613 = ((($0)) + 172|0);
       HEAP32[$613>>2] = 0;
      }
     } while(0);
     $614 = ((($0)) + 164|0);
     $615 = HEAP32[$614>>2]|0;
     $616 = ($615|0)>($534|0);
     if ($616) {
      $617 = (($615) + -1)|0;
      HEAP32[$614>>2] = $617;
      $$pre$phi84Z2D = $590;$620 = $866;
      break;
     }
     $618 = ($615|0)==($534|0);
     if (!($618)) {
      $$pre$phi84Z2D = $590;$620 = $866;
      break;
     }
     $619 = ((($0)) + 176|0);
     HEAP32[$619>>2] = 0;
     $$pre$phi84Z2D = $590;$620 = $866;
    } else {
     $$phi$trans$insert80 = ((($0)) + 124|0);
     $$pre81 = HEAP32[$$phi$trans$insert80>>2]|0;
     $$pre$phi84Z2D = $$phi$trans$insert80;$620 = $$pre81;
    }
   } while(0);
   $621 = ($620|0)>(-1);
   if ($621) {
    $622 = HEAP32[$0>>2]|0;
    _CS_DelEntry($622,$620);
    $623 = ((($0)) + 20|0);
    $624 = HEAP32[$623>>2]|0;
    $625 = ($624|0)>($620|0);
    if ($625) {
     $626 = (($624) + -1)|0;
     HEAP32[$623>>2] = $626;
    } else {
     $627 = ($624|0)==($620|0);
     if ($627) {
      HEAP32[$623>>2] = -1;
      $628 = ((($0)) + 24|0);
      HEAP32[$628>>2] = 0;
     }
    }
    $629 = ((($0)) + 28|0);
    $630 = HEAP32[$629>>2]|0;
    $631 = ($630|0)>($620|0);
    if ($631) {
     $632 = (($630) + -1)|0;
     HEAP32[$629>>2] = $632;
    } else {
     $633 = ($630|0)==($620|0);
     if ($633) {
      HEAP32[$629>>2] = -1;
      $634 = ((($0)) + 32|0);
      HEAP32[$634>>2] = 0;
     }
    }
    $635 = ((($0)) + 44|0);
    $636 = HEAP32[$635>>2]|0;
    $637 = ($636|0)>($620|0);
    if ($637) {
     $638 = (($636) + -1)|0;
     HEAP32[$635>>2] = $638;
    } else {
     $639 = ($636|0)==($620|0);
     if ($639) {
      HEAP32[$635>>2] = -1;
      $640 = ((($0)) + 48|0);
      HEAP32[$640>>2] = 0;
     }
    }
    $641 = ((($0)) + 52|0);
    $642 = HEAP32[$641>>2]|0;
    $643 = ($642|0)>($620|0);
    if ($643) {
     $644 = (($642) + -1)|0;
     HEAP32[$641>>2] = $644;
    } else {
     $645 = ($642|0)==($620|0);
     if ($645) {
      HEAP32[$641>>2] = -1;
      $646 = ((($0)) + 56|0);
      HEAP32[$646>>2] = 0;
     }
    }
    $647 = ((($0)) + 68|0);
    $648 = HEAP32[$647>>2]|0;
    $649 = ($648|0)>($620|0);
    if ($649) {
     $650 = (($648) + -1)|0;
     HEAP32[$647>>2] = $650;
    } else {
     $651 = ($648|0)==($620|0);
     if ($651) {
      HEAP32[$647>>2] = -1;
      $652 = ((($0)) + 72|0);
      HEAP32[$652>>2] = 0;
     }
    }
    $653 = ((($0)) + 76|0);
    $654 = HEAP32[$653>>2]|0;
    $655 = ($654|0)>($620|0);
    if ($655) {
     $656 = (($654) + -1)|0;
     HEAP32[$653>>2] = $656;
    } else {
     $657 = ($654|0)==($620|0);
     if ($657) {
      HEAP32[$653>>2] = -1;
      $658 = ((($0)) + 80|0);
      HEAP32[$658>>2] = 0;
     }
    }
    $659 = ((($0)) + 92|0);
    $660 = HEAP32[$659>>2]|0;
    $661 = ($660|0)>($620|0);
    if ($661) {
     $662 = (($660) + -1)|0;
     HEAP32[$659>>2] = $662;
    } else {
     $663 = ($660|0)==($620|0);
     if ($663) {
      HEAP32[$659>>2] = -1;
      $664 = ((($0)) + 96|0);
      HEAP32[$664>>2] = 0;
     }
    }
    $665 = ((($0)) + 100|0);
    $666 = HEAP32[$665>>2]|0;
    $667 = ($666|0)>($620|0);
    if ($667) {
     $668 = (($666) + -1)|0;
     HEAP32[$665>>2] = $668;
    } else {
     $669 = ($666|0)==($620|0);
     if ($669) {
      HEAP32[$665>>2] = -1;
      $670 = ((($0)) + 104|0);
      HEAP32[$670>>2] = 0;
     }
    }
    $671 = HEAP32[$533>>2]|0;
    $672 = ($671|0)>($620|0);
    if ($672) {
     $673 = (($671) + -1)|0;
     HEAP32[$533>>2] = $673;
    } else {
     $674 = ($671|0)==($620|0);
     if ($674) {
      HEAP32[$533>>2] = -1;
      $675 = ((($0)) + 120|0);
      HEAP32[$675>>2] = 0;
     }
    }
    $676 = HEAP32[$$pre$phi84Z2D>>2]|0;
    $677 = ($676|0)>($620|0);
    if ($677) {
     $678 = (($676) + -1)|0;
     HEAP32[$$pre$phi84Z2D>>2] = $678;
    } else {
     $679 = ($676|0)==($620|0);
     if ($679) {
      HEAP32[$$pre$phi84Z2D>>2] = -1;
      $680 = ((($0)) + 128|0);
      HEAP32[$680>>2] = 0;
     }
    }
    $681 = ((($0)) + 140|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = ($682|0)>($620|0);
    if ($683) {
     $684 = (($682) + -1)|0;
     HEAP32[$681>>2] = $684;
    } else {
     $685 = ($682|0)==($620|0);
     if ($685) {
      HEAP32[$681>>2] = -1;
      $686 = ((($0)) + 144|0);
      HEAP32[$686>>2] = 0;
     }
    }
    $687 = ((($0)) + 148|0);
    $688 = HEAP32[$687>>2]|0;
    $689 = ($688|0)>($620|0);
    do {
     if ($689) {
      $690 = (($688) + -1)|0;
      HEAP32[$687>>2] = $690;
     } else {
      $691 = ($688|0)==($620|0);
      if (!($691)) {
       break;
      }
      HEAP32[$687>>2] = -1;
      $692 = ((($0)) + 152|0);
      HEAP32[$692>>2] = 0;
     }
    } while(0);
    $693 = ((($0)) + 160|0);
    $694 = HEAP32[$693>>2]|0;
    $695 = ($694|0)>($620|0);
    do {
     if ($695) {
      $696 = (($694) + -1)|0;
      HEAP32[$693>>2] = $696;
     } else {
      $697 = ($694|0)==($620|0);
      if (!($697)) {
       break;
      }
      $698 = ((($0)) + 172|0);
      HEAP32[$698>>2] = 0;
     }
    } while(0);
    $699 = ((($0)) + 164|0);
    $700 = HEAP32[$699>>2]|0;
    $701 = ($700|0)>($620|0);
    if ($701) {
     $702 = (($700) + -1)|0;
     HEAP32[$699>>2] = $702;
     break;
    }
    $703 = ($700|0)==($620|0);
    if (!($703)) {
     break;
    }
    $704 = ((($0)) + 176|0);
    HEAP32[$704>>2] = 0;
   }
  }
 } while(0);
 $705 = ((($0)) + 164|0);
 $706 = HEAP32[$705>>2]|0;
 $707 = HEAP32[$0>>2]|0;
 _CS_DelEntry($707,$706);
 $708 = ((($0)) + 20|0);
 $709 = HEAP32[$708>>2]|0;
 $710 = ($709|0)>($706|0);
 if ($710) {
  $711 = (($709) + -1)|0;
  HEAP32[$708>>2] = $711;
 } else {
  $712 = ($709|0)==($706|0);
  if ($712) {
   HEAP32[$708>>2] = -1;
   $713 = ((($0)) + 24|0);
   HEAP32[$713>>2] = 0;
  }
 }
 $714 = ((($0)) + 28|0);
 $715 = HEAP32[$714>>2]|0;
 $716 = ($715|0)>($706|0);
 if ($716) {
  $717 = (($715) + -1)|0;
  HEAP32[$714>>2] = $717;
 } else {
  $718 = ($715|0)==($706|0);
  if ($718) {
   HEAP32[$714>>2] = -1;
   $719 = ((($0)) + 32|0);
   HEAP32[$719>>2] = 0;
  }
 }
 $720 = ((($0)) + 44|0);
 $721 = HEAP32[$720>>2]|0;
 $722 = ($721|0)>($706|0);
 if ($722) {
  $723 = (($721) + -1)|0;
  HEAP32[$720>>2] = $723;
 } else {
  $724 = ($721|0)==($706|0);
  if ($724) {
   HEAP32[$720>>2] = -1;
   $725 = ((($0)) + 48|0);
   HEAP32[$725>>2] = 0;
  }
 }
 $726 = ((($0)) + 52|0);
 $727 = HEAP32[$726>>2]|0;
 $728 = ($727|0)>($706|0);
 if ($728) {
  $729 = (($727) + -1)|0;
  HEAP32[$726>>2] = $729;
 } else {
  $730 = ($727|0)==($706|0);
  if ($730) {
   HEAP32[$726>>2] = -1;
   $731 = ((($0)) + 56|0);
   HEAP32[$731>>2] = 0;
  }
 }
 $732 = ((($0)) + 68|0);
 $733 = HEAP32[$732>>2]|0;
 $734 = ($733|0)>($706|0);
 if ($734) {
  $735 = (($733) + -1)|0;
  HEAP32[$732>>2] = $735;
 } else {
  $736 = ($733|0)==($706|0);
  if ($736) {
   HEAP32[$732>>2] = -1;
   $737 = ((($0)) + 72|0);
   HEAP32[$737>>2] = 0;
  }
 }
 $738 = ((($0)) + 76|0);
 $739 = HEAP32[$738>>2]|0;
 $740 = ($739|0)>($706|0);
 if ($740) {
  $741 = (($739) + -1)|0;
  HEAP32[$738>>2] = $741;
 } else {
  $742 = ($739|0)==($706|0);
  if ($742) {
   HEAP32[$738>>2] = -1;
   $743 = ((($0)) + 80|0);
   HEAP32[$743>>2] = 0;
  }
 }
 $744 = ((($0)) + 92|0);
 $745 = HEAP32[$744>>2]|0;
 $746 = ($745|0)>($706|0);
 if ($746) {
  $747 = (($745) + -1)|0;
  HEAP32[$744>>2] = $747;
 } else {
  $748 = ($745|0)==($706|0);
  if ($748) {
   HEAP32[$744>>2] = -1;
   $749 = ((($0)) + 96|0);
   HEAP32[$749>>2] = 0;
  }
 }
 $750 = ((($0)) + 100|0);
 $751 = HEAP32[$750>>2]|0;
 $752 = ($751|0)>($706|0);
 if ($752) {
  $753 = (($751) + -1)|0;
  HEAP32[$750>>2] = $753;
 } else {
  $754 = ($751|0)==($706|0);
  if ($754) {
   HEAP32[$750>>2] = -1;
   $755 = ((($0)) + 104|0);
   HEAP32[$755>>2] = 0;
  }
 }
 $756 = ((($0)) + 116|0);
 $757 = HEAP32[$756>>2]|0;
 $758 = ($757|0)>($706|0);
 if ($758) {
  $759 = (($757) + -1)|0;
  HEAP32[$756>>2] = $759;
 } else {
  $760 = ($757|0)==($706|0);
  if ($760) {
   HEAP32[$756>>2] = -1;
   $761 = ((($0)) + 120|0);
   HEAP32[$761>>2] = 0;
  }
 }
 $762 = ((($0)) + 124|0);
 $763 = HEAP32[$762>>2]|0;
 $764 = ($763|0)>($706|0);
 if ($764) {
  $765 = (($763) + -1)|0;
  HEAP32[$762>>2] = $765;
 } else {
  $766 = ($763|0)==($706|0);
  if ($766) {
   HEAP32[$762>>2] = -1;
   $767 = ((($0)) + 128|0);
   HEAP32[$767>>2] = 0;
  }
 }
 $768 = ((($0)) + 140|0);
 $769 = HEAP32[$768>>2]|0;
 $770 = ($769|0)>($706|0);
 if ($770) {
  $771 = (($769) + -1)|0;
  HEAP32[$768>>2] = $771;
 } else {
  $772 = ($769|0)==($706|0);
  if ($772) {
   HEAP32[$768>>2] = -1;
   $773 = ((($0)) + 144|0);
   HEAP32[$773>>2] = 0;
  }
 }
 $774 = ((($0)) + 148|0);
 $775 = HEAP32[$774>>2]|0;
 $776 = ($775|0)>($706|0);
 if ($776) {
  $777 = (($775) + -1)|0;
  HEAP32[$774>>2] = $777;
 } else {
  $778 = ($775|0)==($706|0);
  if ($778) {
   HEAP32[$774>>2] = -1;
   $779 = ((($0)) + 152|0);
   HEAP32[$779>>2] = 0;
  }
 }
 $780 = ((($0)) + 160|0);
 $781 = HEAP32[$780>>2]|0;
 $782 = ($781|0)>($706|0);
 if ($782) {
  $783 = (($781) + -1)|0;
  HEAP32[$780>>2] = $783;
  $792 = $783;
 } else {
  $784 = ($781|0)==($706|0);
  if ($784) {
   $785 = ((($0)) + 172|0);
   HEAP32[$785>>2] = 0;
   $792 = $706;
  } else {
   $792 = $781;
  }
 }
 $786 = HEAP32[$705>>2]|0;
 $787 = ($786|0)>($706|0);
 if ($787) {
  $788 = (($786) + -1)|0;
  HEAP32[$705>>2] = $788;
 } else {
  $789 = ($786|0)==($706|0);
  if ($789) {
   $790 = ((($0)) + 176|0);
   HEAP32[$790>>2] = 0;
  }
 }
 $791 = HEAP32[$0>>2]|0;
 _CS_DelEntry($791,$792);
 $793 = HEAP32[$708>>2]|0;
 $794 = ($793|0)>($792|0);
 do {
  if ($794) {
   $795 = (($793) + -1)|0;
   HEAP32[$708>>2] = $795;
  } else {
   $796 = ($793|0)==($792|0);
   if (!($796)) {
    break;
   }
   HEAP32[$708>>2] = -1;
   $797 = ((($0)) + 24|0);
   HEAP32[$797>>2] = 0;
  }
 } while(0);
 $798 = HEAP32[$714>>2]|0;
 $799 = ($798|0)>($792|0);
 do {
  if ($799) {
   $800 = (($798) + -1)|0;
   HEAP32[$714>>2] = $800;
  } else {
   $801 = ($798|0)==($792|0);
   if (!($801)) {
    break;
   }
   HEAP32[$714>>2] = -1;
   $802 = ((($0)) + 32|0);
   HEAP32[$802>>2] = 0;
  }
 } while(0);
 $803 = HEAP32[$720>>2]|0;
 $804 = ($803|0)>($792|0);
 do {
  if ($804) {
   $805 = (($803) + -1)|0;
   HEAP32[$720>>2] = $805;
  } else {
   $806 = ($803|0)==($792|0);
   if (!($806)) {
    break;
   }
   HEAP32[$720>>2] = -1;
   $807 = ((($0)) + 48|0);
   HEAP32[$807>>2] = 0;
  }
 } while(0);
 $808 = HEAP32[$726>>2]|0;
 $809 = ($808|0)>($792|0);
 do {
  if ($809) {
   $810 = (($808) + -1)|0;
   HEAP32[$726>>2] = $810;
  } else {
   $811 = ($808|0)==($792|0);
   if (!($811)) {
    break;
   }
   HEAP32[$726>>2] = -1;
   $812 = ((($0)) + 56|0);
   HEAP32[$812>>2] = 0;
  }
 } while(0);
 $813 = HEAP32[$732>>2]|0;
 $814 = ($813|0)>($792|0);
 do {
  if ($814) {
   $815 = (($813) + -1)|0;
   HEAP32[$732>>2] = $815;
  } else {
   $816 = ($813|0)==($792|0);
   if (!($816)) {
    break;
   }
   HEAP32[$732>>2] = -1;
   $817 = ((($0)) + 72|0);
   HEAP32[$817>>2] = 0;
  }
 } while(0);
 $818 = HEAP32[$738>>2]|0;
 $819 = ($818|0)>($792|0);
 do {
  if ($819) {
   $820 = (($818) + -1)|0;
   HEAP32[$738>>2] = $820;
  } else {
   $821 = ($818|0)==($792|0);
   if (!($821)) {
    break;
   }
   HEAP32[$738>>2] = -1;
   $822 = ((($0)) + 80|0);
   HEAP32[$822>>2] = 0;
  }
 } while(0);
 $823 = HEAP32[$744>>2]|0;
 $824 = ($823|0)>($792|0);
 do {
  if ($824) {
   $825 = (($823) + -1)|0;
   HEAP32[$744>>2] = $825;
  } else {
   $826 = ($823|0)==($792|0);
   if (!($826)) {
    break;
   }
   HEAP32[$744>>2] = -1;
   $827 = ((($0)) + 96|0);
   HEAP32[$827>>2] = 0;
  }
 } while(0);
 $828 = HEAP32[$750>>2]|0;
 $829 = ($828|0)>($792|0);
 do {
  if ($829) {
   $830 = (($828) + -1)|0;
   HEAP32[$750>>2] = $830;
  } else {
   $831 = ($828|0)==($792|0);
   if (!($831)) {
    break;
   }
   HEAP32[$750>>2] = -1;
   $832 = ((($0)) + 104|0);
   HEAP32[$832>>2] = 0;
  }
 } while(0);
 $833 = HEAP32[$756>>2]|0;
 $834 = ($833|0)>($792|0);
 do {
  if ($834) {
   $835 = (($833) + -1)|0;
   HEAP32[$756>>2] = $835;
  } else {
   $836 = ($833|0)==($792|0);
   if (!($836)) {
    break;
   }
   HEAP32[$756>>2] = -1;
   $837 = ((($0)) + 120|0);
   HEAP32[$837>>2] = 0;
  }
 } while(0);
 $838 = HEAP32[$762>>2]|0;
 $839 = ($838|0)>($792|0);
 do {
  if ($839) {
   $840 = (($838) + -1)|0;
   HEAP32[$762>>2] = $840;
  } else {
   $841 = ($838|0)==($792|0);
   if (!($841)) {
    break;
   }
   HEAP32[$762>>2] = -1;
   $842 = ((($0)) + 128|0);
   HEAP32[$842>>2] = 0;
  }
 } while(0);
 $843 = HEAP32[$768>>2]|0;
 $844 = ($843|0)>($792|0);
 do {
  if ($844) {
   $845 = (($843) + -1)|0;
   HEAP32[$768>>2] = $845;
  } else {
   $846 = ($843|0)==($792|0);
   if (!($846)) {
    break;
   }
   HEAP32[$768>>2] = -1;
   $847 = ((($0)) + 144|0);
   HEAP32[$847>>2] = 0;
  }
 } while(0);
 $848 = HEAP32[$774>>2]|0;
 $849 = ($848|0)>($792|0);
 do {
  if ($849) {
   $850 = (($848) + -1)|0;
   HEAP32[$774>>2] = $850;
  } else {
   $851 = ($848|0)==($792|0);
   if (!($851)) {
    break;
   }
   HEAP32[$774>>2] = -1;
   $852 = ((($0)) + 152|0);
   HEAP32[$852>>2] = 0;
  }
 } while(0);
 $853 = HEAP32[$780>>2]|0;
 $854 = ($853|0)>($792|0);
 do {
  if ($854) {
   $855 = (($853) + -1)|0;
   HEAP32[$780>>2] = $855;
  } else {
   $856 = ($853|0)==($792|0);
   if (!($856)) {
    break;
   }
   $857 = ((($0)) + 172|0);
   HEAP32[$857>>2] = 0;
  }
 } while(0);
 $858 = HEAP32[$705>>2]|0;
 $859 = ($858|0)>($792|0);
 if ($859) {
  $860 = (($858) + -1)|0;
  HEAP32[$705>>2] = $860;
  return;
 }
 $861 = ($858|0)==($792|0);
 if (!($861)) {
  return;
 }
 $862 = ((($0)) + 176|0);
 HEAP32[$862>>2] = 0;
 return;
}
function _Opt_tosshift($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$pre$phi1Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = ((($0)) + 188|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($0)) + 172|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_NewCodeEntry(63,3,$7,0,$11)|0);
  $13 = ((($0)) + 160|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  _InsertEntry($0,$12,$15);
 }
 $16 = ((($0)) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 1;
 $19 = ($18|0)==(0);
 if ($19) {
  $20 = ((($0)) + 184|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ((($0)) + 172|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($23)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (_NewCodeEntry(62,3,$21,0,$25)|0);
  $27 = ((($0)) + 160|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 1)|0;
  _InsertEntry($0,$26,$29);
  $$pre = HEAP32[$16>>2]|0;
  $31 = $$pre;
 } else {
  $31 = $17;
 }
 $30 = $31 & 3;
 $32 = ($30|0)==(1);
 if ($32) {
  $33 = HEAP32[$2>>2]|0;
  $34 = $33 & 3;
  $35 = ($34|0)==(1);
  if ($35) {
   $36 = ((($0)) + 48|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($0)) + 24|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($0)) + 164|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 1)|0;
   $43 = ((($0)) + 192|0);
   HEAP32[$43>>2] = $42;
   $44 = ((($0)) + 176|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($45)) + 36|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_NewCodeEntry(67,0,0,0,$47)|0);
   $49 = HEAP32[$43>>2]|0;
   $50 = (($49) + 1)|0;
   HEAP32[$43>>2] = $50;
   _InsertEntry($0,$48,$49);
   $51 = ((($39)) + 1|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = ((($39)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[$44>>2]|0;
   $57 = ((($56)) + 36|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (_NewCodeEntry(40,$53,$55,0,$58)|0);
   $60 = HEAP32[$43>>2]|0;
   $61 = (($60) + 1)|0;
   HEAP32[$43>>2] = $61;
   _InsertEntry($0,$59,$60);
   $62 = ((($37)) + 1|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = ((($37)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP32[$44>>2]|0;
   $68 = ((($67)) + 36|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (_NewCodeEntry(41,$64,$66,0,$69)|0);
   $71 = HEAP32[$43>>2]|0;
   $72 = (($71) + 1)|0;
   HEAP32[$43>>2] = $72;
   _InsertEntry($0,$70,$71);
   $73 = HEAP32[$2>>2]|0;
   $74 = $73 | 4;
   HEAP32[$2>>2] = $74;
   $75 = HEAP32[$16>>2]|0;
   $76 = $75 | 4;
   HEAP32[$16>>2] = $76;
   $$pre$phi1Z2D = $43;$$pre$phiZ2D = $44;
   $120 = HEAP32[$$pre$phiZ2D>>2]|0;
   $121 = ((($120)) + 36|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = (_NewCodeEntry(37,6,$1,0,$122)|0);
   $124 = HEAP32[$$pre$phi1Z2D>>2]|0;
   $125 = (($124) + 1)|0;
   HEAP32[$$pre$phi1Z2D>>2] = $125;
   _InsertEntry($0,$123,$124);
   _RemoveRemainders($0);
   return;
  }
 }
 $77 = ((($0)) + 188|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ((($0)) + 172|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ((($80)) + 36|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (_NewCodeEntry(63,3,$78,0,$82)|0);
 $84 = ((($0)) + 160|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 1)|0;
 _InsertEntry($0,$83,$86);
 $87 = ((($0)) + 184|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = HEAP32[$79>>2]|0;
 $90 = ((($89)) + 36|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (_NewCodeEntry(62,3,$88,0,$91)|0);
 $93 = HEAP32[$84>>2]|0;
 $94 = (($93) + 1)|0;
 _InsertEntry($0,$92,$94);
 $95 = ((($0)) + 164|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + 1)|0;
 $98 = ((($0)) + 192|0);
 HEAP32[$98>>2] = $97;
 $99 = ((($0)) + 176|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ((($100)) + 36|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (_NewCodeEntry(67,0,0,0,$102)|0);
 $104 = HEAP32[$98>>2]|0;
 $105 = (($104) + 1)|0;
 HEAP32[$98>>2] = $105;
 _InsertEntry($0,$103,$104);
 $106 = HEAP32[$87>>2]|0;
 $107 = HEAP32[$99>>2]|0;
 $108 = ((($107)) + 36|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (_NewCodeEntry(40,3,$106,0,$109)|0);
 $111 = HEAP32[$98>>2]|0;
 $112 = (($111) + 1)|0;
 HEAP32[$98>>2] = $112;
 _InsertEntry($0,$110,$111);
 $113 = HEAP32[$77>>2]|0;
 $114 = HEAP32[$99>>2]|0;
 $115 = ((($114)) + 36|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (_NewCodeEntry(41,3,$113,0,$116)|0);
 $118 = HEAP32[$98>>2]|0;
 $119 = (($118) + 1)|0;
 HEAP32[$98>>2] = $119;
 _InsertEntry($0,$117,$118);
 $$pre$phi1Z2D = $98;$$pre$phiZ2D = $99;
 $120 = HEAP32[$$pre$phiZ2D>>2]|0;
 $121 = ((($120)) + 36|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = (_NewCodeEntry(37,6,$1,0,$122)|0);
 $124 = HEAP32[$$pre$phi1Z2D>>2]|0;
 $125 = (($124) + 1)|0;
 HEAP32[$$pre$phi1Z2D>>2] = $125;
 _InsertEntry($0,$123,$124);
 _RemoveRemainders($0);
 return;
}
function _Opt_toseqax_tosneax($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 176|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_NewCodeEntry(37,6,$1,0,$5)|0);
 $7 = ((($0)) + 164|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1)|0;
 _InsertEntry($0,$6,$9);
 $10 = HEAP32[$0>>2]|0;
 $11 = (_CS_GenLabel($10,$6)|0);
 $12 = ((($0)) + 16|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 3;
 $15 = ($14|0)==(1);
 if ($15) {
  $16 = ((($0)) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $17 & 3;
  $19 = ($18|0)==(1);
  if ($19) {
   $20 = ((($0)) + 48|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($0)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = HEAP32[$7>>2]|0;
   $25 = (($24) + 1)|0;
   $26 = ((($0)) + 192|0);
   HEAP32[$26>>2] = $25;
   $27 = ((($21)) + 1|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = ((($21)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$2>>2]|0;
   $33 = ((($32)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_NewCodeEntry(19,$29,$31,0,$34)|0);
   $36 = HEAP32[$26>>2]|0;
   $37 = (($36) + 1)|0;
   HEAP32[$26>>2] = $37;
   _InsertEntry($0,$35,$36);
   $38 = ((($11)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$2>>2]|0;
   $41 = ((($40)) + 36|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (_NewCodeEntry(8,12,$39,$11,$42)|0);
   $44 = HEAP32[$26>>2]|0;
   $45 = (($44) + 1)|0;
   HEAP32[$26>>2] = $45;
   _InsertEntry($0,$43,$44);
   $46 = ((($23)) + 1|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $49 = ((($23)) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[$2>>2]|0;
   $52 = ((($51)) + 36|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (_NewCodeEntry(18,$48,$50,0,$53)|0);
   $55 = HEAP32[$26>>2]|0;
   $56 = (($55) + 1)|0;
   HEAP32[$26>>2] = $56;
   _InsertEntry($0,$54,$55);
   $57 = HEAP32[$16>>2]|0;
   $58 = $57 | 4;
   HEAP32[$16>>2] = $58;
   $59 = HEAP32[$12>>2]|0;
   $60 = $59 | 4;
   HEAP32[$12>>2] = $60;
   _RemoveRemainders($0);
   return;
  }
 }
 $61 = ((($0)) + 88|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 & 3;
 $64 = ($63|0)==(1);
 if ($64) {
  $65 = ((($0)) + 112|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 3;
  $68 = ($67|0)==(1);
  if ($68) {
   $69 = ((($0)) + 120|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ((($0)) + 96|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = HEAP32[$7>>2]|0;
   $74 = (($73) + 1)|0;
   $75 = ((($0)) + 192|0);
   HEAP32[$75>>2] = $74;
   $76 = ((($70)) + 1|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77&255;
   $79 = ((($70)) + 4|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = HEAP32[$2>>2]|0;
   $82 = ((($81)) + 36|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (_NewCodeEntry(19,$78,$80,0,$83)|0);
   $85 = HEAP32[$75>>2]|0;
   $86 = (($85) + 1)|0;
   HEAP32[$75>>2] = $86;
   _InsertEntry($0,$84,$85);
   $87 = ((($11)) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = HEAP32[$2>>2]|0;
   $90 = ((($89)) + 36|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (_NewCodeEntry(8,12,$88,$11,$91)|0);
   $93 = HEAP32[$75>>2]|0;
   $94 = (($93) + 1)|0;
   HEAP32[$75>>2] = $94;
   _InsertEntry($0,$92,$93);
   $95 = ((($72)) + 1|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = ((($72)) + 4|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$2>>2]|0;
   $101 = ((($100)) + 36|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = (_NewCodeEntry(18,$97,$99,0,$102)|0);
   $104 = HEAP32[$75>>2]|0;
   $105 = (($104) + 1)|0;
   HEAP32[$75>>2] = $105;
   _InsertEntry($0,$103,$104);
   $106 = HEAP32[$65>>2]|0;
   $107 = $106 | 4;
   HEAP32[$65>>2] = $107;
   $108 = HEAP32[$61>>2]|0;
   $109 = $108 | 4;
   HEAP32[$61>>2] = $109;
   _RemoveRemainders($0);
   return;
  }
 }
 $110 = $62 & 1;
 $111 = ($110|0)==(0);
 if (!($111)) {
  $112 = ((($0)) + 112|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $113 & 1;
  $115 = ($114|0)==(0);
  if (!($115)) {
   $116 = HEAP32[$7>>2]|0;
   $117 = (($116) + 1)|0;
   $118 = ((($0)) + 192|0);
   HEAP32[$118>>2] = $117;
   _AddOpLow($0,18,$61);
   $119 = ((($11)) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = HEAP32[$2>>2]|0;
   $122 = ((($121)) + 36|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (_NewCodeEntry(8,12,$120,$11,$123)|0);
   $125 = HEAP32[$118>>2]|0;
   $126 = (($125) + 1)|0;
   HEAP32[$118>>2] = $126;
   _InsertEntry($0,$124,$125);
   _AddOpHigh($0,18,$61,0);
   _RemoveRemainders($0);
   return;
  }
 }
 $127 = ((($0)) + 188|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ((($0)) + 172|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ((($130)) + 36|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = (_NewCodeEntry(63,3,$128,0,$132)|0);
 $134 = ((($0)) + 160|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (($135) + 1)|0;
 _InsertEntry($0,$133,$136);
 $137 = ((($0)) + 184|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = HEAP32[$129>>2]|0;
 $140 = ((($139)) + 36|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = (_NewCodeEntry(62,3,$138,0,$141)|0);
 $143 = HEAP32[$134>>2]|0;
 $144 = (($143) + 1)|0;
 _InsertEntry($0,$142,$144);
 $145 = HEAP32[$7>>2]|0;
 $146 = (($145) + 1)|0;
 $147 = ((($0)) + 192|0);
 HEAP32[$147>>2] = $146;
 $148 = HEAP32[$127>>2]|0;
 $149 = HEAP32[$2>>2]|0;
 $150 = ((($149)) + 36|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = (_NewCodeEntry(19,3,$148,0,$151)|0);
 $153 = HEAP32[$147>>2]|0;
 $154 = (($153) + 1)|0;
 HEAP32[$147>>2] = $154;
 _InsertEntry($0,$152,$153);
 $155 = ((($11)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = HEAP32[$2>>2]|0;
 $158 = ((($157)) + 36|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (_NewCodeEntry(8,12,$156,$11,$159)|0);
 $161 = HEAP32[$147>>2]|0;
 $162 = (($161) + 1)|0;
 HEAP32[$147>>2] = $162;
 _InsertEntry($0,$160,$161);
 $163 = HEAP32[$137>>2]|0;
 $164 = HEAP32[$2>>2]|0;
 $165 = ((($164)) + 36|0);
 $166 = HEAP32[$165>>2]|0;
 $167 = (_NewCodeEntry(18,3,$163,0,$166)|0);
 $168 = HEAP32[$147>>2]|0;
 $169 = (($168) + 1)|0;
 HEAP32[$147>>2] = $169;
 _InsertEntry($0,$167,$168);
 _RemoveRemainders($0);
 return;
}
function _AnonName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11484]|0;
 $3 = (($2) + 1)|0;
 HEAP32[11484] = $3;
 HEAP32[$vararg_buffer>>2] = 31407;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $3;
 (_xsprintf($0,65,31396,$vararg_buffer)|0);
 STACKTOP = sp;return ($0|0);
}
function _IsAnonName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strncmp($0,31407,5)|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 return ($3|0);
}
function _NewDataSeg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_xmalloc(20)|0);
 $3 = (_xstrdup($0)|0);
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($2)) + 8|0);
 (_InitCollection($5)|0);
 return ($2|0);
}
function _DS_AddVLine($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $3 = sp;
 (_xvsprintf($3,256,$1,$2)|0);
 $4 = ((($0)) + 8|0);
 $5 = (_xstrdup($3)|0);
 $6 = HEAP32[$4>>2]|0;
 _CollInsert($4,$5,$6);
 STACKTOP = sp;return;
}
function _DS_AddLine($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $2 = sp + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 (_xvsprintf($2,256,$1,$3)|0);
 $4 = ((($0)) + 8|0);
 $5 = (_xstrdup($2)|0);
 $6 = HEAP32[$4>>2]|0;
 _CollInsert($4,$5,$6);
 STACKTOP = sp;return;
}
function _DS_Output($0) {
 $0 = $0|0;
 var $$010 = 0, $$idx = 0, $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$idx = ((($0)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $1 = ($$idx$val|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_WriteOutput(33711,$vararg_buffer)|0);
 $3 = ((($0)) + 16|0);
 $$010 = 0;
 while(1) {
  $4 = HEAP32[$$idx>>2]|0;
  $5 = ($4>>>0)>($$010>>>0);
  if (!($5)) {
   label = 4;
   break;
  }
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + ($$010<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $10;
  (_WriteOutput(39411,$vararg_buffer1)|0);
  $11 = (($$010) + 1)|0;
  $12 = ($11>>>0)<($$idx$val>>>0);
  if ($12) {
   $$010 = $11;
  } else {
   break;
  }
 }
 if ((label|0) == 4) {
  $6 = HEAP32[3332]|0;
  $7 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$6 & 1]($7,40922,40950,155);
  // unreachable;
 }
 (_WriteOutput(34038,$vararg_buffer4)|0);
 STACKTOP = sp;return;
}
function _OptAdd1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$05561 = 0, $$062 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i60 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i60 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i60|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($1)) + 20|0);
 $$05561 = 0;$$062 = 0;$9 = $$idx$val$i60;
 while(1) {
  $10 = ($9>>>0)>($$05561>>>0);
  if (!($10)) {
   label = 4;
   break;
  }
  $13 = HEAP32[$3>>2]|0;
  $14 = (($13) + ($$05561<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$1>>2] = $15;
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(42);
  if ($17) {
   $18 = (_CE_IsConstImm($15)|0);
   $19 = ($18|0)==(0);
   if ($19) {
    $$1 = $$062;
   } else {
    $20 = (($$05561) + 1)|0;
    $21 = (_CS_RangeHasLabel($0,$20,5)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = (_CS_GetEntries($0,$4,$20,5)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $$1 = $$062;
     } else {
      $25 = HEAP32[$4>>2]|0;
      $26 = HEAP8[$25>>0]|0;
      $27 = ($26<<24>>24)==(37);
      if ($27) {
       $28 = ((($25)) + 4|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (_strcmp($29,36890)|0);
       $31 = ($30|0)==(0);
       if ($31) {
        $32 = HEAP32[$5>>2]|0;
        $33 = HEAP8[$32>>0]|0;
        $34 = ($33<<24>>24)==(37);
        if ($34) {
         $35 = ((($32)) + 4|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = (_strcmp($36,35341)|0);
         $38 = ($37|0)==(0);
         if ($38) {
          $39 = HEAP32[$6>>2]|0;
          $40 = HEAP8[$39>>0]|0;
          $41 = ($40<<24>>24)==(42);
          if ($41) {
           $42 = (_CE_IsConstImm($39)|0);
           $43 = ($42|0)==(0);
           if ($43) {
            $$1 = $$062;
           } else {
            $44 = HEAP32[$7>>2]|0;
            $45 = HEAP8[$44>>0]|0;
            $46 = ($45<<24>>24)==(37);
            if ($46) {
             $47 = ((($44)) + 4|0);
             $48 = HEAP32[$47>>2]|0;
             $49 = (_strcmp($48,36890)|0);
             $50 = ($49|0)==(0);
             if ($50) {
              $51 = HEAP32[$8>>2]|0;
              $52 = HEAP8[$51>>0]|0;
              $53 = ($52<<24>>24)==(37);
              if ($53) {
               $54 = ((($51)) + 4|0);
               $55 = HEAP32[$54>>2]|0;
               $56 = (_strcmp($55,35520)|0);
               $57 = ($56|0)==(0);
               if ($57) {
                $58 = HEAP32[$1>>2]|0;
                $59 = ((($58)) + 8|0);
                $60 = HEAP32[$59>>2]|0;
                $61 = (($60) + -1)|0;
                _CE_SetNumArg($58,$61);
                $62 = HEAP32[$4>>2]|0;
                $63 = ((($62)) + 36|0);
                $64 = HEAP32[$63>>2]|0;
                $65 = (_NewCodeEntry(40,10,36898,0,$64)|0);
                _CS_InsertEntry($0,$65,$20);
                $66 = HEAP32[$6>>2]|0;
                $67 = ((($66)) + 8|0);
                $68 = HEAP32[$67>>2]|0;
                $69 = (($68) + -3)|0;
                $70 = (_MakeHexArg($69)|0);
                $71 = HEAP32[$7>>2]|0;
                $72 = ((($71)) + 36|0);
                $73 = HEAP32[$72>>2]|0;
                $74 = (_NewCodeEntry(42,2,$70,0,$73)|0);
                $75 = (($$05561) + 2)|0;
                _CS_InsertEntry($0,$74,$75);
                $76 = HEAP32[$8>>2]|0;
                $77 = ((($76)) + 36|0);
                $78 = HEAP32[$77>>2]|0;
                $79 = (_NewCodeEntry(14,0,0,0,$78)|0);
                $80 = (($$05561) + 3)|0;
                _CS_InsertEntry($0,$79,$80);
                $81 = HEAP32[$8>>2]|0;
                $82 = ((($81)) + 36|0);
                $83 = HEAP32[$82>>2]|0;
                $84 = (_NewCodeEntry(0,10,36898,0,$83)|0);
                $85 = (($$05561) + 4)|0;
                _CS_InsertEntry($0,$84,$85);
                $86 = HEAP32[$8>>2]|0;
                $87 = ((($86)) + 36|0);
                $88 = HEAP32[$87>>2]|0;
                $89 = (_NewCodeEntry(46,0,0,0,$88)|0);
                $90 = (($$05561) + 5)|0;
                _CS_InsertEntry($0,$89,$90);
                $91 = HEAP32[$1>>2]|0;
                $92 = ((($91)) + 8|0);
                $93 = HEAP32[$92>>2]|0;
                $94 = (($93) + 1)|0;
                $95 = (_MakeHexArg($94)|0);
                $96 = HEAP32[$4>>2]|0;
                $97 = ((($96)) + 36|0);
                $98 = HEAP32[$97>>2]|0;
                $99 = (_NewCodeEntry(42,2,$95,0,$98)|0);
                $100 = (($$05561) + 6)|0;
                _CS_InsertEntry($0,$99,$100);
                $101 = HEAP32[$4>>2]|0;
                $102 = ((($101)) + 36|0);
                $103 = HEAP32[$102>>2]|0;
                $104 = (_NewCodeEntry(40,10,36898,0,$103)|0);
                $105 = (($$05561) + 7)|0;
                _CS_InsertEntry($0,$104,$105);
                $106 = HEAP32[$6>>2]|0;
                $107 = ((($106)) + 8|0);
                $108 = HEAP32[$107>>2]|0;
                $109 = (($108) + -2)|0;
                $110 = (_MakeHexArg($109)|0);
                $111 = HEAP32[$7>>2]|0;
                $112 = ((($111)) + 36|0);
                $113 = HEAP32[$112>>2]|0;
                $114 = (_NewCodeEntry(42,2,$110,0,$113)|0);
                $115 = (($$05561) + 8)|0;
                _CS_InsertEntry($0,$114,$115);
                $116 = HEAP32[$8>>2]|0;
                $117 = ((($116)) + 36|0);
                $118 = HEAP32[$117>>2]|0;
                $119 = (_NewCodeEntry(0,10,36898,0,$118)|0);
                $120 = (($$05561) + 9)|0;
                _CS_InsertEntry($0,$119,$120);
                $121 = HEAP32[$8>>2]|0;
                $122 = ((($121)) + 36|0);
                $123 = HEAP32[$122>>2]|0;
                $124 = (_NewCodeEntry(66,0,0,0,$123)|0);
                $125 = (($$05561) + 10)|0;
                _CS_InsertEntry($0,$124,$125);
                $126 = HEAP32[$8>>2]|0;
                $127 = ((($126)) + 36|0);
                $128 = HEAP32[$127>>2]|0;
                $129 = (_NewCodeEntry(50,0,0,0,$128)|0);
                $130 = (($$05561) + 11)|0;
                _CS_InsertEntry($0,$129,$130);
                $131 = (($$05561) + 12)|0;
                _CS_DelEntries($0,$131,5);
                $132 = (($$062) + 1)|0;
                $$1 = $132;
               } else {
                $$1 = $$062;
               }
              } else {
               $$1 = $$062;
              }
             } else {
              $$1 = $$062;
             }
            } else {
             $$1 = $$062;
            }
           }
          } else {
           $$1 = $$062;
          }
         } else {
          $$1 = $$062;
         }
        } else {
         $$1 = $$062;
        }
       } else {
        $$1 = $$062;
       }
      } else {
       $$1 = $$062;
      }
     }
    } else {
     $$1 = $$062;
    }
   }
  } else {
   $$1 = $$062;
  }
  $133 = (($$05561) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $134 = ($133>>>0)<($$idx$val$i>>>0);
  if ($134) {
   $$05561 = $133;$$062 = $$1;$9 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 21;
   break;
  }
 }
 if ((label|0) == 4) {
  $11 = HEAP32[3332]|0;
  $12 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$11 & 1]($12,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptAdd2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$05660 = 0, $$061 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i59 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i59 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i59|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $$05660 = 0;$$061 = 0;$7 = $$idx$val$i59;
 while(1) {
  $8 = ($7>>>0)>($$05660>>>0);
  if (!($8)) {
   label = 4;
   break;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($$05660<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(42);
  if ($15) {
   $16 = (_CE_IsConstImm($13)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = $$061;
   } else {
    $18 = (($$05660) + 1)|0;
    $19 = (_CS_RangeHasLabel($0,$18,3)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = (_CS_GetEntries($0,$4,$18,3)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      $$1 = $$061;
     } else {
      $23 = HEAP32[$4>>2]|0;
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(37);
      if ($25) {
       $26 = ((($23)) + 4|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (_strcmp($27,36890)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        $30 = HEAP32[$5>>2]|0;
        $31 = HEAP8[$30>>0]|0;
        $32 = ($31<<24>>24)==(42);
        if ($32) {
         $33 = (_CE_IsConstImm($30)|0);
         $34 = ($33|0)==(0);
         if ($34) {
          $$1 = $$061;
         } else {
          $35 = HEAP32[$6>>2]|0;
          $36 = HEAP8[$35>>0]|0;
          $37 = ($36<<24>>24)==(37);
          if ($37) {
           $38 = ((($35)) + 4|0);
           $39 = HEAP32[$38>>2]|0;
           $40 = (_strcmp($39,35138)|0);
           $41 = ($40|0)==(0);
           if ($41) {
            $42 = (($$05660) + 4)|0;
            $43 = (_GetRegInfo($0,$42,3)|0);
            $44 = $43 & 3;
            $45 = ($44|0)==(0);
            if ($45) {
             $46 = HEAP32[$1>>2]|0;
             $47 = ((($46)) + 8|0);
             $48 = HEAP32[$47>>2]|0;
             $49 = (($48) + -1)|0;
             $50 = (_MakeHexArg($49)|0);
             $51 = HEAP32[$1>>2]|0;
             $52 = ((($51)) + 36|0);
             $53 = HEAP32[$52>>2]|0;
             $54 = (_NewCodeEntry(42,2,$50,0,$53)|0);
             _CS_InsertEntry($0,$54,$42);
             $55 = HEAP32[$4>>2]|0;
             $56 = ((($55)) + 36|0);
             $57 = HEAP32[$56>>2]|0;
             $58 = (_NewCodeEntry(40,10,36898,0,$57)|0);
             $59 = (($$05660) + 5)|0;
             _CS_InsertEntry($0,$58,$59);
             $60 = HEAP32[$5>>2]|0;
             $61 = ((($60)) + 4|0);
             $62 = HEAP32[$61>>2]|0;
             $63 = ((($60)) + 36|0);
             $64 = HEAP32[$63>>2]|0;
             $65 = (_NewCodeEntry(42,2,$62,0,$64)|0);
             $66 = (($$05660) + 6)|0;
             _CS_InsertEntry($0,$65,$66);
             $67 = HEAP32[$6>>2]|0;
             $68 = ((($67)) + 36|0);
             $69 = HEAP32[$68>>2]|0;
             $70 = (_NewCodeEntry(14,0,0,0,$69)|0);
             $71 = (($$05660) + 7)|0;
             _CS_InsertEntry($0,$70,$71);
             $72 = HEAP32[$6>>2]|0;
             $73 = ((($72)) + 36|0);
             $74 = HEAP32[$73>>2]|0;
             $75 = (_NewCodeEntry(0,10,36898,0,$74)|0);
             $76 = (($$05660) + 8)|0;
             _CS_InsertEntry($0,$75,$76);
             $77 = HEAP32[$6>>2]|0;
             $78 = ((($77)) + 36|0);
             $79 = HEAP32[$78>>2]|0;
             $80 = (_NewCodeEntry(62,10,36898,0,$79)|0);
             $81 = (($$05660) + 9)|0;
             _CS_InsertEntry($0,$80,$81);
             $82 = HEAP32[$1>>2]|0;
             $83 = ((($82)) + 4|0);
             $84 = HEAP32[$83>>2]|0;
             $85 = ((($82)) + 36|0);
             $86 = HEAP32[$85>>2]|0;
             $87 = (_NewCodeEntry(42,2,$84,0,$86)|0);
             $88 = (($$05660) + 10)|0;
             _CS_InsertEntry($0,$87,$88);
             $89 = HEAP32[$4>>2]|0;
             $90 = ((($89)) + 36|0);
             $91 = HEAP32[$90>>2]|0;
             $92 = (_NewCodeEntry(40,10,36898,0,$91)|0);
             $93 = (($$05660) + 11)|0;
             _CS_InsertEntry($0,$92,$93);
             $94 = HEAP32[$5>>2]|0;
             $95 = ((($94)) + 8|0);
             $96 = HEAP32[$95>>2]|0;
             $97 = (($96) + 1)|0;
             $98 = (_MakeHexArg($97)|0);
             $99 = HEAP32[$5>>2]|0;
             $100 = ((($99)) + 36|0);
             $101 = HEAP32[$100>>2]|0;
             $102 = (_NewCodeEntry(42,2,$98,0,$101)|0);
             $103 = (($$05660) + 12)|0;
             _CS_InsertEntry($0,$102,$103);
             $104 = HEAP32[$6>>2]|0;
             $105 = ((($104)) + 36|0);
             $106 = HEAP32[$105>>2]|0;
             $107 = (_NewCodeEntry(0,10,36898,0,$106)|0);
             $108 = (($$05660) + 13)|0;
             _CS_InsertEntry($0,$107,$108);
             $109 = HEAP32[$6>>2]|0;
             $110 = ((($109)) + 36|0);
             $111 = HEAP32[$110>>2]|0;
             $112 = (_NewCodeEntry(62,10,36898,0,$111)|0);
             $113 = (($$05660) + 14)|0;
             _CS_InsertEntry($0,$112,$113);
             _CS_DelEntries($0,$$05660,4);
             $114 = (($$061) + 1)|0;
             $$1 = $114;
            } else {
             $$1 = $$061;
            }
           } else {
            $$1 = $$061;
           }
          } else {
           $$1 = $$061;
          }
         }
        } else {
         $$1 = $$061;
        }
       } else {
        $$1 = $$061;
       }
      } else {
       $$1 = $$061;
      }
     }
    } else {
     $$1 = $$061;
    }
   }
  } else {
   $$1 = $$061;
  }
  $115 = (($$05660) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $116 = ($115>>>0)<($$idx$val$i>>>0);
  if ($116) {
   $$05660 = $115;$$061 = $$1;$7 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 18;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 18) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptAdd3($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03438 = 0, $$039 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i37 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i37 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i37|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $$03438 = 0;$$039 = 0;$8 = $$idx$val$i37;
 while(1) {
  $9 = ($8>>>0)>($$03438>>>0);
  if (!($9)) {
   label = 4;
   break;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($$03438<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$1>>2] = $14;
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(37);
  if ($16) {
   $17 = ((($14)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_strcmp($18,35341)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = (($$03438) + 1)|0;
    $22 = (_CS_GetEntries($0,$4,$21,4)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $$1 = $$039;
    } else {
     $24 = (_CS_RangeHasLabel($0,$21,3)|0);
     $25 = ($24|0)==(0);
     if ($25) {
      $26 = HEAP32[$4>>2]|0;
      $27 = HEAP8[$26>>0]|0;
      $28 = ($27<<24>>24)==(41);
      if ($28) {
       $29 = (_CE_IsKnownImm($26,0)|0);
       $30 = ($29|0)==(0);
       if ($30) {
        $$1 = $$039;
       } else {
        $31 = HEAP32[$5>>2]|0;
        $32 = HEAP8[$31>>0]|0;
        $33 = ($32<<24>>24)==(40);
        if ($33) {
         $34 = HEAP32[$6>>2]|0;
         $35 = HEAP8[$34>>0]|0;
         $36 = ($35<<24>>24)==(37);
         if ($36) {
          $37 = ((($34)) + 4|0);
          $38 = HEAP32[$37>>2]|0;
          $39 = (_strcmp($38,35520)|0);
          $40 = ($39|0)==(0);
          if ($40) {
           $41 = ((($34)) + 36|0);
           $42 = HEAP32[$41>>2]|0;
           $43 = (_NewCodeEntry(14,0,0,0,$42)|0);
           $44 = (($$03438) + 4)|0;
           _CS_InsertEntry($0,$43,$44);
           $45 = HEAP32[$5>>2]|0;
           $46 = ((($45)) + 1|0);
           $47 = HEAP8[$46>>0]|0;
           $48 = $47&255;
           $49 = ((($45)) + 4|0);
           $50 = HEAP32[$49>>2]|0;
           $51 = HEAP32[$6>>2]|0;
           $52 = ((($51)) + 36|0);
           $53 = HEAP32[$52>>2]|0;
           $54 = (_NewCodeEntry(0,$48,$50,0,$53)|0);
           $55 = (($$03438) + 5)|0;
           _CS_InsertEntry($0,$54,$55);
           $56 = HEAP32[$7>>2]|0;
           $57 = (_CS_GenLabel($0,$56)|0);
           $58 = ((($57)) + 4|0);
           $59 = HEAP32[$58>>2]|0;
           $60 = HEAP32[$6>>2]|0;
           $61 = ((($60)) + 36|0);
           $62 = HEAP32[$61>>2]|0;
           $63 = (_NewCodeEntry(3,12,$59,$57,$62)|0);
           $64 = (($$03438) + 6)|0;
           _CS_InsertEntry($0,$63,$64);
           $65 = HEAP32[$6>>2]|0;
           $66 = ((($65)) + 36|0);
           $67 = HEAP32[$66>>2]|0;
           $68 = (_NewCodeEntry(28,0,0,0,$67)|0);
           $69 = (($$03438) + 7)|0;
           _CS_InsertEntry($0,$68,$69);
           _CS_DelEntries($0,$$03438,4);
           $70 = (($$039) + 1)|0;
           $$1 = $70;
          } else {
           $$1 = $$039;
          }
         } else {
          $$1 = $$039;
         }
        } else {
         $$1 = $$039;
        }
       }
      } else {
       $$1 = $$039;
      }
     } else {
      $$1 = $$039;
     }
    }
   } else {
    $$1 = $$039;
   }
  } else {
   $$1 = $$039;
  }
  $71 = (($$03438) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $72 = ($71>>>0)<($$idx$val$i>>>0);
  if ($72) {
   $$03438 = $71;$$039 = $$1;$8 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptAdd4($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03842 = 0, $$044 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i41 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i41 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i41|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $$03842 = 0;$$044 = 0;$7 = $$idx$val$i41;
 while(1) {
  $8 = ($7>>>0)>($$03842>>>0);
  if (!($8)) {
   label = 4;
   break;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($$03842<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(37);
  L7: do {
   if ($15) {
    $16 = ((($13)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (_strcmp($17,35341)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = (($$03842) + 1)|0;
     $21 = (_CS_GetEntries($0,$4,$20,3)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      $$1 = $$044;
     } else {
      $23 = (_CS_RangeHasLabel($0,$20,3)|0);
      $24 = ($23|0)==(0);
      if ($24) {
       $25 = HEAP32[$4>>2]|0;
       $26 = HEAP16[$25>>1]|0;
       $27 = $26&255;
       $28 = ($27<<24>>24)==(40);
       if ($28) {
        $29 = ($26&65535) >>> 8;
        $30 = $29&255;
        switch ($30<<24>>24) {
        case 3: case 6:  {
         break;
        }
        default: {
         $$1 = $$044;
         break L7;
        }
        }
        $31 = HEAP32[$5>>2]|0;
        $32 = HEAP16[$31>>1]|0;
        $33 = $32&255;
        $34 = ($33<<24>>24)==(41);
        if ($34) {
         $35 = ($32&65535) >>> 8;
         $36 = $35&255;
         switch ($36<<24>>24) {
         case 3: case 6:  {
          break;
         }
         default: {
          $$1 = $$044;
          break L7;
         }
         }
         $37 = HEAP32[$6>>2]|0;
         $38 = HEAP8[$37>>0]|0;
         $39 = ($38<<24>>24)==(37);
         if ($39) {
          $40 = ((($37)) + 4|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = (_strcmp($41,35520)|0);
          $43 = ($42|0)==(0);
          if ($43) {
           $44 = ((($37)) + 36|0);
           $45 = HEAP32[$44>>2]|0;
           $46 = (_NewCodeEntry(14,0,0,0,$45)|0);
           $47 = (($$03842) + 4)|0;
           _CS_InsertEntry($0,$46,$47);
           $48 = HEAP32[$4>>2]|0;
           $49 = ((($48)) + 1|0);
           $50 = HEAP8[$49>>0]|0;
           $51 = $50&255;
           $52 = ((($48)) + 4|0);
           $53 = HEAP32[$52>>2]|0;
           $54 = HEAP32[$6>>2]|0;
           $55 = ((($54)) + 36|0);
           $56 = HEAP32[$55>>2]|0;
           $57 = (_NewCodeEntry(0,$51,$53,0,$56)|0);
           $58 = (($$03842) + 5)|0;
           _CS_InsertEntry($0,$57,$58);
           $59 = HEAP32[$6>>2]|0;
           $60 = ((($59)) + 36|0);
           $61 = HEAP32[$60>>2]|0;
           $62 = (_NewCodeEntry(46,0,0,0,$61)|0);
           $63 = (($$03842) + 6)|0;
           _CS_InsertEntry($0,$62,$63);
           $64 = HEAP32[$6>>2]|0;
           $65 = ((($64)) + 36|0);
           $66 = HEAP32[$65>>2]|0;
           $67 = (_NewCodeEntry(71,0,0,0,$66)|0);
           $68 = (($$03842) + 7)|0;
           _CS_InsertEntry($0,$67,$68);
           $69 = HEAP32[$5>>2]|0;
           $70 = ((($69)) + 1|0);
           $71 = HEAP8[$70>>0]|0;
           $72 = $71&255;
           $73 = ((($69)) + 4|0);
           $74 = HEAP32[$73>>2]|0;
           $75 = HEAP32[$6>>2]|0;
           $76 = ((($75)) + 36|0);
           $77 = HEAP32[$76>>2]|0;
           $78 = (_NewCodeEntry(0,$72,$74,0,$77)|0);
           $79 = (($$03842) + 8)|0;
           _CS_InsertEntry($0,$78,$79);
           $80 = HEAP32[$6>>2]|0;
           $81 = ((($80)) + 36|0);
           $82 = HEAP32[$81>>2]|0;
           $83 = (_NewCodeEntry(66,0,0,0,$82)|0);
           $84 = (($$03842) + 9)|0;
           _CS_InsertEntry($0,$83,$84);
           $85 = HEAP32[$6>>2]|0;
           $86 = ((($85)) + 36|0);
           $87 = HEAP32[$86>>2]|0;
           $88 = (_NewCodeEntry(50,0,0,0,$87)|0);
           $89 = (($$03842) + 10)|0;
           _CS_InsertEntry($0,$88,$89);
           _CS_DelEntries($0,$$03842,4);
           $90 = (($$044) + 1)|0;
           $$1 = $90;
          } else {
           $$1 = $$044;
          }
         } else {
          $$1 = $$044;
         }
        } else {
         $$1 = $$044;
        }
       } else {
        $$1 = $$044;
       }
      } else {
       $$1 = $$044;
      }
     }
    } else {
     $$1 = $$044;
    }
   } else {
    $$1 = $$044;
   }
  } while(0);
  $91 = (($$03842) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $92 = ($91>>>0)<($$idx$val$i>>>0);
  if ($92) {
   $$03842 = $91;$$044 = $$1;$7 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 17;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptAdd5($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03335 = 0, $$036 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i34 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i34|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03335 = 0;$$036 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$03335<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strncmp($9,31413,5)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($9)) + 5|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = (_IsDigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$1 = $$036;
    } else {
     $16 = HEAP32[$8>>2]|0;
     $17 = ((($16)) + 6|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $20 = (($$03335) + 1)|0;
      $21 = (_RegXUsed($0,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       $23 = ((($5)) + 36|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (_NewCodeEntry(14,0,0,0,$24)|0);
       _CS_InsertEntry($0,$25,$20);
       $26 = HEAP32[$8>>2]|0;
       $27 = ((($26)) + 5|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28 << 24 >> 24;
       $30 = (($29) + -48)|0;
       $31 = (_MakeHexArg($30)|0);
       $32 = HEAP32[$23>>2]|0;
       $33 = (_NewCodeEntry(0,2,$31,0,$32)|0);
       $34 = (($$03335) + 2)|0;
       _CS_InsertEntry($0,$33,$34);
       _CS_DelEntry($0,$$03335);
       $35 = (($$036) + 1)|0;
       $$1 = $35;
      } else {
       $$1 = $$036;
      }
     } else {
      $$1 = $$036;
     }
    }
   } else {
    $$1 = $$036;
   }
  } else {
   $$1 = $$036;
  }
  $36 = (($$03335) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $37 = ($36>>>0)<($$idx$val$i>>>0);
  if ($37) {
   $$03335 = $36;$$036 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptAdd6($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$01825 = 0, $$027 = 0, $$1 = 0, $$idx$i = 0, $$idx$i19 = 0, $$idx$i21 = 0, $$idx$val$i = 0, $$idx$val$i20 = 0, $$idx$val$i22 = 0, $$idx$val$i24 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i24 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i24|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$01825 = 0;$$027 = 0;$6 = $$idx$val$i24;
 while(1) {
  $7 = ($6>>>0)>($$01825>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$01825<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(0);
  $15 = (($$01825) + 1)|0;
  L7: do {
   if ($14) {
    $16 = (_CS_GetEntries($0,$1,$15,3)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $$1 = $$027;
    } else {
     $18 = HEAP32[$1>>2]|0;
     $19 = HEAP8[$18>>0]|0;
     switch ($19<<24>>24) {
     case 30: case 3:  {
      break;
     }
     default: {
      $$1 = $$027;
      break L7;
     }
     }
     $20 = ((($18)) + 20|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      $$1 = $$027;
     } else {
      $$idx$i21 = ((($18)) + 24|0);
      $$idx$val$i22 = HEAP32[$$idx$i21>>2]|0;
      $23 = ($$idx$val$i22|0)==(0);
      if ($23) {
       $24 = HEAP32[$4>>2]|0;
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(28);
       if ($26) {
        $$idx$i19 = ((($24)) + 24|0);
        $$idx$val$i20 = HEAP32[$$idx$i19>>2]|0;
        $27 = ($$idx$val$i20|0)==(0);
        if ($27) {
         $28 = ((($21)) + 12|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = HEAP32[$5>>2]|0;
         $31 = ($29|0)==($30|0);
         if ($31) {
          $32 = (($$01825) + 3)|0;
          $33 = (_RegXUsed($0,$32)|0);
          $34 = ($33|0)==(0);
          if ($34) {
           $35 = (($$027) + 1)|0;
           _CS_DelEntries($0,$15,2);
           $$1 = $35;
          } else {
           $$1 = $$027;
          }
         } else {
          $$1 = $$027;
         }
        } else {
         $$1 = $$027;
        }
       } else {
        $$1 = $$027;
       }
      } else {
       $$1 = $$027;
      }
     }
    }
   } else {
    $$1 = $$027;
   }
  } while(0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $36 = ($15>>>0)<($$idx$val$i>>>0);
  if ($36) {
   $$01825 = $15;$$027 = $$1;$6 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _Statement($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i24 = 0, $$0$i30 = 0, $$idx = 0, $$idx$val = 0, $$idx11$val = 0, $$idx12$val = 0, $$lobit$i = 0, $$lobit$i13 = 0, $$pr = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0;
 var $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0;
 $vararg_buffer28 = sp + 304|0;
 $vararg_buffer26 = sp + 296|0;
 $vararg_buffer24 = sp + 288|0;
 $vararg_buffer22 = sp + 280|0;
 $vararg_buffer20 = sp + 272|0;
 $vararg_buffer18 = sp + 264|0;
 $vararg_buffer16 = sp + 256|0;
 $vararg_buffer14 = sp + 248|0;
 $vararg_buffer12 = sp + 240|0;
 $vararg_buffer10 = sp + 232|0;
 $vararg_buffer7 = sp + 224|0;
 $vararg_buffer5 = sp + 216|0;
 $vararg_buffer3 = sp + 208|0;
 $vararg_buffer1 = sp + 200|0;
 $vararg_buffer = sp + 192|0;
 $1 = sp + 128|0;
 $2 = sp + 64|0;
 $3 = sp + 352|0;
 $4 = sp + 344|0;
 $5 = sp + 336|0;
 $6 = sp + 328|0;
 $7 = sp;
 $8 = sp + 320|0;
 $9 = sp + 312|0;
 $10 = ($0|0)==(0|0);
 if (!($10)) {
  HEAP32[$0>>2] = 0;
 }
 $$pr = HEAP32[11156]|0;
 $11 = $$pr;
 while(1) {
  $12 = ($11|0)==(40);
  $13 = HEAP32[11180]|0;
  $14 = ($13|0)==(84);
  $15 = $12 & $14;
  if (!($15)) {
   break;
  }
  _DoLabel();
  $16 = HEAP32[11156]|0;
  $17 = ($16|0)==(55);
  if ($17) {
   label = 6;
   break;
  } else {
   $11 = $16;
  }
 }
 if ((label|0) == 6) {
  _Error(31419,$vararg_buffer);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  switch ($11|0) {
  case 46:  {
   _NextToken();
   $18 = HEAP32[11252]|0;
   _EnterBlockLevel();
   _DeclareLocals();
   $$0$i30 = 0;
   L32: while(1) {
    $19 = HEAP32[11156]|0;
    switch ($19|0) {
    case 1: case 55:  {
     break L32;
     break;
    }
    default: {
    }
    }
    $20 = (_Statement(0)|0);
    $$0$i30 = $20;
   }
   $21 = ($$0$i30|0)==(0);
   if ($21) {
    $22 = HEAP32[11252]|0;
    $23 = (($22) - ($18))|0;
    _g_space($23);
   }
   HEAP32[11252] = $18;
   _EmitExternals();
   _LeaveBlockLevel();
   $24 = HEAP32[11156]|0;
   $25 = ($24|0)==(55);
   if (!($25)) {
    HEAP32[$vararg_buffer1>>2] = 31454;
    _Error(32813,$vararg_buffer1);
    $$0 = $$0$i30;
    STACKTOP = sp;return ($$0|0);
   }
   if ($10) {
    _NextToken();
    $$0 = $$0$i30;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$0>>2] = 1;
    $$0 = $$0$i30;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 28:  {
   _NextToken();
   $26 = (_GetLocalLabel()|0);
   $27 = (_TestInParens($26,0)|0);
   $28 = (_Statement(0)|0);
   $29 = HEAP32[11156]|0;
   $30 = ($29|0)==(37);
   if (!($30)) {
    _g_defcodelabel($26);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $31 = (_GetLocalLabel()|0);
   _g_jump($31);
   _NextToken();
   $32 = ($27|0)==(1);
   if ($32) {
    _Warning(32902,$vararg_buffer3);
   }
   _g_defcodelabel($26);
   $33 = (_Statement(0)|0);
   $34 = $33 & $28;
   _g_defcodelabel($31);
   $$0 = $34;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 31:  {
   $35 = (_GetLocalLabel()|0);
   $36 = (_GetLocalLabel()|0);
   $37 = (_GetLocalLabel()|0);
   _NextToken();
   (_AddLoop($36,$37)|0);
   _g_jump($37);
   _GetCodePos($2);
   _g_defcodelabel($37);
   (_TestInParens($35,1)|0);
   _GetCodePos($3);
   _g_defcodelabel($35);
   (_Statement($1)|0);
   _GetCodePos($4);
   _MoveCode($2,$3,$4);
   _g_defcodelabel($36);
   $38 = HEAP32[$1>>2]|0;
   $39 = ($38|0)==(0);
   if (!($39)) {
    _NextToken();
   }
   _DelLoop();
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 25:  {
   $40 = (_GetLocalLabel()|0);
   $41 = (_GetLocalLabel()|0);
   $42 = (_GetLocalLabel()|0);
   _NextToken();
   (_AddLoop($41,$42)|0);
   _g_defcodelabel($40);
   (_Statement(0)|0);
   _g_defcodelabel($42);
   (_Consume(31,31467)|0);
   (_TestInParens($40,1)|0);
   (_ConsumeSemi()|0);
   _g_defcodelabel($41);
   _DelLoop();
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 30:  {
   _SwitchStatement();
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 29:  {
   _NextToken();
   $43 = HEAP32[11156]|0;
   $44 = ($43|0)==(41);
   do {
    if ($44) {
     $50 = HEAP32[11507]|0;
     $51 = (_F_HasVoidReturn($50)|0);
     $52 = ($51|0)==(0);
     if ($52) {
      $53 = HEAP32[11507]|0;
      $54 = (_F_HasOldStyleIntRet($53)|0);
      $55 = ($54|0)==(0);
      if ($55) {
       $56 = HEAP32[11507]|0;
       $57 = (_F_GetFuncName($56)|0);
       HEAP32[$vararg_buffer7>>2] = $57;
       _Error(31536,$vararg_buffer7);
      }
     }
    } else {
     _hie0($1);
     $45 = HEAP32[11507]|0;
     $46 = (_F_HasVoidReturn($45)|0);
     $47 = ($46|0)==(0);
     if ($47) {
      $48 = HEAP32[11507]|0;
      $49 = (_F_GetReturnType($48)|0);
      _TypeConversion($1,$49);
      _LoadExpr(0,$1);
      break;
     } else {
      _Error(31484,$vararg_buffer5);
      break;
     }
    }
   } while(0);
   $58 = HEAP32[11507]|0;
   _F_ReturnFound($58);
   $59 = HEAP32[11252]|0;
   $60 = HEAP32[11507]|0;
   $61 = (_F_GetTopLevelSP($60)|0);
   $62 = (($59) - ($61))|0;
   _g_space($62);
   $63 = HEAP32[11507]|0;
   $64 = (_F_GetRetLab($63)|0);
   _g_jump($64);
   $65 = HEAP32[11156]|0;
   $66 = ($65|0)==(41);
   L76: do {
    if (!($66)) {
     _Error(31570,$vararg_buffer10);
     $67 = HEAP32[11156]|0;
     switch ($67|0) {
     case 52: case 84:  {
      break L76;
      break;
     }
     default: {
      $$0 = 1;
     }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   if ($10) {
    _NextToken();
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$0>>2] = 1;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 35:  {
   _NextToken();
   $68 = (_CurrentLoop()|0);
   $69 = ($68|0)==(0|0);
   if ($69) {
    _Error(31583,$vararg_buffer12);
   } else {
    $70 = HEAP32[11252]|0;
    $71 = ((($68)) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) - ($72))|0;
    _g_space($73);
    $74 = ((($68)) + 8|0);
    $75 = HEAP32[$74>>2]|0;
    _g_jump($75);
   }
   $76 = HEAP32[11156]|0;
   $77 = ($76|0)==(41);
   L90: do {
    if (!($77)) {
     _Error(31570,$vararg_buffer14);
     $78 = HEAP32[11156]|0;
     switch ($78|0) {
     case 52: case 84:  {
      break L90;
      break;
     }
     default: {
      $$0 = 1;
     }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   if ($10) {
    _NextToken();
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$0>>2] = 1;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 36:  {
   _NextToken();
   $79 = (_CurrentLoop()|0);
   $80 = ($79|0)==(0|0);
   L100: do {
    if ($80) {
     label = 51;
    } else {
     $$0$i24 = $79;
     while(1) {
      $81 = ((($$0$i24)) + 12|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)==(0);
      if (!($83)) {
       break;
      }
      $84 = HEAP32[$$0$i24>>2]|0;
      $85 = ($84|0)==(0|0);
      if ($85) {
       label = 51;
       break L100;
      } else {
       $$0$i24 = $84;
      }
     }
     $86 = HEAP32[11252]|0;
     $87 = ((($$0$i24)) + 4|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (($86) - ($88))|0;
     _g_space($89);
     $90 = HEAP32[$81>>2]|0;
     _g_jump($90);
    }
   } while(0);
   if ((label|0) == 51) {
    _Error(31627,$vararg_buffer16);
   }
   $91 = HEAP32[11156]|0;
   $92 = ($91|0)==(41);
   L108: do {
    if (!($92)) {
     _Error(31570,$vararg_buffer18);
     $93 = HEAP32[11156]|0;
     switch ($93|0) {
     case 52: case 84:  {
      break L108;
      break;
     }
     default: {
      $$0 = 1;
     }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   if ($10) {
    _NextToken();
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$0>>2] = 1;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 26:  {
   $94 = (_GetLocalLabel()|0);
   $95 = (_GetLocalLabel()|0);
   $96 = (_GetLocalLabel()|0);
   $97 = (_GetLocalLabel()|0);
   _NextToken();
   (_AddLoop($95,$96)|0);
   (_ConsumeLParen()|0);
   $98 = HEAP32[11156]|0;
   $99 = ($98|0)==(41);
   if (!($99)) {
    _Expression0($1);
   }
   (_ConsumeSemi()|0);
   _g_defcodelabel($94);
   $100 = HEAP32[11156]|0;
   $101 = ($100|0)==(41);
   if ($101) {
    _g_jump($97);
   } else {
    (_Test($97,1)|0);
    _g_jump($95);
   }
   (_ConsumeSemi()|0);
   _GetCodePos($3);
   _g_defcodelabel($96);
   $102 = HEAP32[11156]|0;
   $103 = ($102|0)==(85);
   if ($103) {
    _g_jump($94);
    _GetCodePos($4);
    (_ConsumeRParen()|0);
    _g_defcodelabel($97);
    (_Statement($5)|0);
    _g_jump($96);
   } else {
    _Expression0($2);
    _g_jump($94);
    _GetCodePos($4);
    (_ConsumeRParen()|0);
    _g_defcodelabel($97);
    (_Statement($5)|0);
    _GetCodePos($6);
    _MoveCode($3,$4,$6);
   }
   $104 = HEAP32[$5>>2]|0;
   $105 = ($104|0)==(0);
   if (!($105)) {
    _NextToken();
   }
   _g_defcodelabel($95);
   _DelLoop();
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 27:  {
   _GotoStatement();
   $106 = HEAP32[11156]|0;
   $107 = ($106|0)==(41);
   L134: do {
    if (!($107)) {
     _Error(31570,$vararg_buffer20);
     $108 = HEAP32[11156]|0;
     switch ($108|0) {
     case 52: case 84:  {
      break L134;
      break;
     }
     default: {
      $$0 = 1;
     }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   if ($10) {
    _NextToken();
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$0>>2] = 1;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 41:  {
   if ($10) {
    _NextToken();
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$0>>2] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 99:  {
   _DoPragma();
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 33:  {
   _CaseLabel();
   $109 = HEAP32[11156]|0;
   $110 = ($109|0)==(55);
   if (!($110)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   _Error(31419,$vararg_buffer22);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 34:  {
   _DefaultLabel();
   $111 = HEAP32[11156]|0;
   $112 = ($111|0)==(55);
   if (!($112)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   _Error(31419,$vararg_buffer24);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  default: {
   _GetCodePos($8);
   _ExprWithCheck(4,$7);
   $$idx = ((($7)) + 8|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$lobit$i13 = $$idx$val & 256;
   $113 = ($$lobit$i13|0)==(0);
   if (!($113)) {
    $114 = ((($7)) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $$idx11$val = HEAP32[$115>>2]|0;
    $$lobit$i = $$idx11$val & 4096;
    $116 = ($$lobit$i|0)==(0);
    if (!($116)) {
     _LoadExpr(0,$7);
    }
   }
   _GetCodePos($9);
   $117 = (_CodeRangeIsEmpty($8,$9)|0);
   $118 = ($117|0)==(0);
   if (!($118)) {
    $119 = ((($7)) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $$idx12$val = HEAP32[$120>>2]|0;
    $121 = $$idx12$val & 15;
    $122 = ($121|0)==(9);
    if (!($122)) {
     $123 = (_IS_Get(12992)|0);
     $124 = ($123|0)==(0);
     if (!($124)) {
      _Warning(31666,$vararg_buffer26);
     }
    }
   }
   $125 = HEAP32[11156]|0;
   $126 = ($125|0)==(41);
   L22: do {
    if (!($126)) {
     _Error(31570,$vararg_buffer28);
     $127 = HEAP32[11156]|0;
     switch ($127|0) {
     case 52: case 84:  {
      break L22;
      break;
     }
     default: {
      $$0 = 0;
     }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   if ($10) {
    _NextToken();
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    HEAP32[$0>>2] = 1;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
  }
 } while(0);
 return (0)|0;
}
function _GetLocalLabel() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[11485]|0;
 $1 = ($0>>>0)>(65534);
 if ($1) {
  _Internal(31690,$vararg_buffer);
  // unreachable;
 } else {
  $2 = (($0) + 1)|0;
  HEAP32[11485] = $2;
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _LocalLabelName($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 (_sprintf(46898,34219,$vararg_buffer)|0);
 STACKTOP = sp;return (46898|0);
}
function _IsLocalLabelName($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(76);
 if (!($2)) {
  return 0;
 }
 $3 = (_strlen($0)|0);
 $4 = ($3|0)==(5);
 if (!($4)) {
  return 0;
 }
 $5 = ((($0)) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (_IsXDigit($6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  return 0;
 }
 $9 = ((($0)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (_IsXDigit($10)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  return 0;
 }
 $13 = ((($0)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = (_IsXDigit($14)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  return 0;
 } else {
  $17 = ((($0)) + 4|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = (_IsXDigit($18)|0);
  $not$ = ($19|0)!=(0);
  $$ = $not$&1;
  return ($$|0);
 }
 return (0)|0;
}
function _DeclareLocals() {
 var $$0$i = 0, $$0$i$i = 0, $$0$i7$i = 0, $$055$i$i = 0, $$1$i$i = 0, $$3$i$i = 0, $$idx = 0, $$idx$val = 0, $$idx$val$i$i = 0, $$idx$val$i4$i = 0, $$idx$val$i6$i = 0, $$lobit$i$i$i = 0, $$pre$i = 0, $$pre10$i = 0, $$pre8$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $or$cond6 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0;
 $vararg_buffer13 = sp + 112|0;
 $vararg_buffer10 = sp + 104|0;
 $vararg_buffer8 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $0 = sp;
 $1 = sp + 368|0;
 $2 = sp + 120|0;
 $3 = HEAP32[11252]|0;
 $4 = ((($2)) + 244|0);
 $$idx = ((($2)) + 4|0);
 $5 = ((($1)) + 244|0);
 $6 = ((($1)) + 4|0);
 $7 = ((($0)) + 8|0);
 $8 = ((($0)) + 16|0);
 L1: while(1) {
  _ParseDeclSpec($2,1,275);
  $9 = HEAP32[$4>>2]|0;
  $10 = $9 & 3;
  $11 = ($10|0)==(3);
  if ($11) {
   $$idx$val = HEAP32[$$idx>>2]|0;
   $12 = $$idx$val & 260096;
   $13 = ($12|0)==(0);
   if ($13) {
    break;
   }
  }
  $14 = HEAP32[11156]|0;
  $15 = ($14|0)==(41);
  if ($15) {
   _CheckEmptyDecl($2);
   _NextToken();
   continue;
  }
  while(1) {
   _ParseDecl($2,$1,0);
   $16 = HEAP32[$1>>2]|0;
   $17 = $16 & 256;
   $18 = ($17|0)==(0);
   if ($18) {
    $162 = $16;
   } else {
    $19 = $16 & 8;
    $20 = ($19|0)==(0);
    if ($20) {
     _Warning(31711,$vararg_buffer);
     $$pre$i = HEAP32[$1>>2]|0;
     $22 = $$pre$i;
    } else {
     $22 = $16;
    }
    $21 = $22 | 8;
    HEAP32[$1>>2] = $21;
    $162 = $21;
   }
   $23 = HEAP8[$5>>0]|0;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    (_AnonName($5,31735)|0);
    $$pre8$i = HEAP32[$1>>2]|0;
    $26 = $$pre8$i;
   } else {
    $26 = $162;
   }
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   $28 = $26 | 4096;
   if ($27) {
    HEAP32[$1>>2] = $28;
    $30 = $28;
   } else {
    $30 = $26;
   }
   $29 = $30 & 256;
   $31 = ($29|0)!=(0);
   $32 = $30 & 16399;
   $33 = ($32|0)==(16389);
   $or$cond$i = $31 | $33;
   do {
    if ($or$cond$i) {
     (_AddLocalSym($5,$6,$30,0)|0);
    } else {
     $34 = $30 & 2;
     $35 = ($34|0)==(0);
     if ($35) {
      $$0$i = 0;$43 = $30;
     } else {
      $36 = HEAP32[11507]|0;
      $37 = (_F_AllocRegVar($36,$6)|0);
      $38 = ($37|0)<(0);
      $39 = HEAP32[$1>>2]|0;
      $40 = $39 & -4;
      $41 = $40 | 1;
      if ($38) {
       HEAP32[$1>>2] = $41;
       $$0$i = $37;$43 = $41;
      } else {
       $$0$i = $37;$43 = $39;
      }
     }
     $42 = $43 & 2;
     $44 = ($42|0)==(0);
     if (!($44)) {
      $$idx$val$i$i = HEAP32[$6>>2]|0;
      $45 = (_SizeOf($6)|0);
      $46 = HEAP32[11507]|0;
      _F_AllocLocalSpace($46);
      _g_save_regvars($$0$i,$45);
      $47 = HEAP32[$1>>2]|0;
      $48 = (_AddLocalSym($5,$6,$47,$$0$i)|0);
      $49 = HEAP32[11156]|0;
      $50 = ($49|0)==(70);
      if ($50) {
       $51 = $$idx$val$i$i & 112;
       $52 = ($51|0)==(64);
       $53 = $$idx$val$i$i & 15;
       $54 = ($53|0)==(12);
       $55 = $52 | $54;
       _NextToken();
       if ($55) {
        _g_userodata();
        $56 = (_GetLocalLabel()|0);
        _g_defdatalabel($56);
        $57 = ((($48)) + 24|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = (_ParseInit($58)|0);
        $60 = ($59|0)==($45|0);
        if (!($60)) {
         _Error(31741,$vararg_buffer1);
        }
        _g_initregister($56,$$0$i,$45);
       } else {
        _hie1($0);
        $61 = ((($48)) + 24|0);
        $62 = HEAP32[$61>>2]|0;
        _TypeConversion($0,$62);
        _LoadExpr(0,$0);
        $63 = HEAP32[$61>>2]|0;
        $64 = (_TypeOf($63)|0);
        $65 = $64 | 32768;
        _g_putstatic($65,$$0$i,0);
       }
       $66 = ((($48)) + 20|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = $67 | 8192;
       HEAP32[$66>>2] = $68;
      }
      $69 = ($45|0)==(0);
      if (!($69)) {
       break;
      }
      HEAP32[$vararg_buffer3>>2] = $5;
      _Error(31810,$vararg_buffer3);
      break;
     }
     $70 = $43 & 1;
     $71 = ($70|0)==(0);
     if ($71) {
      $132 = $43 & 8;
      $133 = ($132|0)==(0);
      if (!($133)) {
       $134 = HEAP32[11156]|0;
       $135 = ($134|0)==(70);
       if ($135) {
        _Error(31841,$vararg_buffer8);
        $$pre10$i = HEAP32[$1>>2]|0;
        $136 = $$pre10$i;
       } else {
        $136 = $43;
       }
       (_AddLocalSym($5,$6,$136,0)|0);
       break;
      }
      $137 = $43 & 4;
      $138 = ($137|0)==(0);
      if ($138) {
       label = 60;
       break L1;
      }
      $139 = (_GetLocalLabel()|0);
      $140 = HEAP32[$1>>2]|0;
      $141 = (_AddLocalSym($5,$6,$140,$139)|0);
      $142 = HEAP32[11156]|0;
      $143 = ($142|0)==(70);
      if ($143) {
       $144 = ((($141)) + 24|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (_GetBaseElementType($145)|0);
       $$idx$val$i6$i = HEAP32[$146>>2]|0;
       $$lobit$i$i$i = $$idx$val$i6$i & 2048;
       $147 = ($$lobit$i$i$i|0)==(0);
       if ($147) {
        _g_usedata();
       } else {
        _g_userodata();
       }
       _g_defdatalabel($139);
       _NextToken();
       $148 = HEAP32[$144>>2]|0;
       $149 = (_ParseInit($148)|0);
       $150 = ((($141)) + 20|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = $151 | 8192;
       HEAP32[$150>>2] = $152;
       $$0$i7$i = $149;
      } else {
       $153 = (_SizeOf($6)|0);
       _g_usebss();
       _g_defdatalabel($139);
       _g_res($153);
       $$0$i7$i = $153;
      }
      $154 = ($$0$i7$i|0)==(0);
      if (!($154)) {
       break;
      }
      HEAP32[$vararg_buffer10>>2] = $5;
      _Error(31810,$vararg_buffer10);
      break;
     }
     $$idx$val$i4$i = HEAP32[$6>>2]|0;
     $72 = $$idx$val$i4$i & 112;
     $73 = ($72|0)==(64);
     $74 = $$idx$val$i4$i & 15;
     $75 = ($74|0)==(12);
     $76 = $73 | $75;
     $77 = (_SizeOf($6)|0);
     $78 = (_IS_Get(8444)|0);
     $79 = ($78|0)==(0);
     $80 = HEAP32[$1>>2]|0;
     do {
      if ($79) {
       $81 = HEAP32[11507]|0;
       $82 = (_F_GetStackPtr($81)|0);
       $83 = (($82) - ($77))|0;
       $84 = (_AddLocalSym($5,$6,$80,$83)|0);
       $85 = HEAP32[11156]|0;
       $86 = ($85|0)==(70);
       if (!($86)) {
        $112 = HEAP32[11507]|0;
        (_F_ReserveLocalSpace($112,$77)|0);
        $$3$i$i = $77;
        break;
       }
       _NextToken();
       if ($76) {
        _g_userodata();
        $87 = (_GetLocalLabel()|0);
        _g_defdatalabel($87);
        $88 = ((($84)) + 24|0);
        $89 = HEAP32[$88>>2]|0;
        $90 = (_ParseInit($89)|0);
        $91 = HEAP32[11507]|0;
        $92 = (_F_ReserveLocalSpace($91,$90)|0);
        $93 = ((($84)) + 36|0);
        HEAP32[$93>>2] = $92;
        $94 = HEAP32[11507]|0;
        _F_AllocLocalSpace($94);
        _g_initauto($87,$90);
        $$055$i$i = $90;
       } else {
        $95 = HEAP32[11507]|0;
        _F_AllocLocalSpace($95);
        $96 = ($77|0)==(1);
        $97 = $96 ? 512 : 0;
        _hie1($0);
        $98 = ((($84)) + 24|0);
        $99 = HEAP32[$98>>2]|0;
        _TypeConversion($0,$99);
        $100 = (_ED_IsConstAbsInt($0)|0);
        $101 = ($100|0)==(0);
        if ($101) {
         _LoadExpr(0,$0);
         $103 = HEAP32[$7>>2]|0;
         $104 = $103 & -257;
         HEAP32[$7>>2] = $104;
         $$0$i$i = $97;
        } else {
         $102 = $97 | 32;
         $$0$i$i = $102;
        }
        $105 = HEAP32[$98>>2]|0;
        $106 = (_TypeOf($105)|0);
        $107 = $106 | $$0$i$i;
        $108 = HEAP32[$8>>2]|0;
        _g_push($107,$108);
        $$055$i$i = $77;
       }
       $109 = ((($84)) + 20|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = $110 | 8192;
       HEAP32[$109>>2] = $111;
       $$3$i$i = $$055$i$i;
      } else {
       $113 = $80 & -6;
       $114 = $113 | 4;
       HEAP32[$1>>2] = $114;
       $115 = (_GetLocalLabel()|0);
       $116 = HEAP32[$1>>2]|0;
       $117 = (_AddLocalSym($5,$6,$116,$115)|0);
       $118 = HEAP32[11156]|0;
       $119 = ($118|0)==(70);
       if (!($119)) {
        _g_usebss();
        _g_defdatalabel($115);
        _g_res($77);
        $$3$i$i = $77;
        break;
       }
       _NextToken();
       if ($76) {
        _g_userodata();
        $120 = (_GetLocalLabel()|0);
        _g_defdatalabel($120);
        $121 = ((($117)) + 24|0);
        $122 = HEAP32[$121>>2]|0;
        $123 = (_ParseInit($122)|0);
        _g_usebss();
        _g_defdatalabel($115);
        _g_res($123);
        _g_initstatic($120,$115,$123);
        $$1$i$i = $123;
       } else {
        _g_usebss();
        _g_defdatalabel($115);
        _g_res($77);
        _hie1($0);
        $124 = ((($117)) + 24|0);
        $125 = HEAP32[$124>>2]|0;
        _TypeConversion($0,$125);
        _LoadExpr(0,$0);
        $126 = HEAP32[$124>>2]|0;
        $127 = (_TypeOf($126)|0);
        _g_putstatic($127,$115,0);
        $$1$i$i = $77;
       }
       $128 = ((($117)) + 20|0);
       $129 = HEAP32[$128>>2]|0;
       $130 = $129 | 8192;
       HEAP32[$128>>2] = $130;
       $$3$i$i = $$1$i$i;
      }
     } while(0);
     $131 = ($$3$i$i|0)==(0);
     if ($131) {
      HEAP32[$vararg_buffer5>>2] = $5;
      _Error(31810,$vararg_buffer5);
     }
    }
   } while(0);
   $155 = HEAP32[11156]|0;
   $156 = ($155|0)==(52);
   if (!($156)) {
    break;
   }
   _NextToken();
  }
  (_ConsumeSemi()|0);
 }
 if ((label|0) == 60) {
  HEAP32[$vararg_buffer13>>2] = $43;
  _Internal(31869,$vararg_buffer13);
  // unreachable;
 }
 $157 = HEAP32[11507]|0;
 _F_AllocLocalSpace($157);
 $158 = (_IS_Get(8516)|0);
 $159 = ($158|0)==(0);
 $160 = HEAP32[11252]|0;
 $161 = ($3|0)==($160|0);
 $or$cond6 = $159 | $161;
 if ($or$cond6) {
  STACKTOP = sp;return;
 }
 _g_cstackcheck();
 STACKTOP = sp;return;
}
function _Assignment($0) {
 $0 = $0|0;
 var $$063$ph = 0, $$06371 = 0, $$073 = 0, $$idx = 0, $$idx$val = 0, $$idx64$val = 0, $$idx65$val = 0, $$idx66 = 0, $$idx66$val = 0, $$idx67$val = 0, $$lobit$i = 0, $$lobit$i68 = 0, $$lobit$i69 = 0, $$lobit$i70 = 0, $$pre = 0, $$unshifted = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $1 = sp;
 $2 = sp + 104|0;
 $3 = sp + 96|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $$idx = ((($0)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$lobit$i = $$idx$val & 256;
 $6 = ($$lobit$i|0)==(0);
 if ($6) {
  _Error(37983,$vararg_buffer);
 }
 $$idx64$val = HEAP32[$5>>2]|0;
 $$lobit$i70 = $$idx64$val & 2048;
 $7 = ($$lobit$i70|0)==(0);
 if (!($7)) {
  _Error(38012,$vararg_buffer1);
 }
 _NextToken();
 $$idx65$val = HEAP32[$5>>2]|0;
 $8 = $$idx65$val & 112;
 $9 = ($8|0)==(64);
 if (!($9)) {
  $$idx67$val = HEAP32[$$idx>>2]|0;
  $$lobit$i68 = $$idx67$val & 512;
  $20 = ($$lobit$i68|0)==(0);
  if ($20) {
   _PushAddr($0);
   _hie1($1);
   _TypeConversion($1,$5);
   _LoadExpr(0,$1);
   _Store($0,0);
   (_ED_MakeRValExpr($0)|0);
   STACKTOP = sp;return;
  }
  $21 = ((($0)) + 36|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ((($0)) + 40|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($22) + -1)|0;
  $26 = (($25) + ($24))|0;
  $$unshifted = $26 ^ $22;
  $27 = ($$unshifted>>>0)<(8);
  if ($27) {
   HEAP32[$4>>2] = 10924;
   $28 = 10924;
  } else {
   $$pre = HEAP32[$4>>2]|0;
   $28 = $$pre;
  }
  $29 = (_TypeOf($28)|0);
  _PushAddr($0);
  $30 = HEAP32[$$idx>>2]|0;
  $31 = $30 & -513;
  HEAP32[$$idx>>2] = $31;
  _LoadExpr(0,$0);
  $32 = HEAP32[$23>>2]|0;
  $33 = 1 << $32;
  $34 = (($33) + -1)|0;
  _GetCodePos($2);
  $35 = $29 | 32;
  $36 = HEAP32[$21>>2]|0;
  $37 = $34 << $36;
  $38 = $37 ^ -1;
  _g_and($35,$38);
  _GetCodePos($3);
  _g_push($29,0);
  _MarkedExprWithCheck(3,$1);
  _TypeConversion($1,$5);
  $39 = (_ED_IsConstAbsInt($1)|0);
  $40 = ($39|0)==(0);
  if ($40) {
   label = 29;
  } else {
   $41 = (_ED_CodeRangeIsEmpty($1)|0);
   $42 = ($41|0)==(0);
   if ($42) {
    label = 29;
   } else {
    $43 = ((($1)) + 16|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $44 & $34;
    _RemoveCode($3);
    $46 = ($45|0)==($34|0);
    if ($46) {
     _RemoveCode($2);
    }
    $47 = HEAP32[$21>>2]|0;
    $48 = $45 << $47;
    _g_or($35,$48);
   }
  }
  if ((label|0) == 29) {
   _LoadExpr(0,$1);
   _g_and($35,$34);
   $49 = HEAP32[$21>>2]|0;
   _g_asl($35,$49);
   _g_or($29,0);
  }
  _Store($0,0);
  HEAP32[$4>>2] = $5;
  (_ED_MakeRValExpr($0)|0);
  STACKTOP = sp;return;
 }
 $10 = (_SizeOf($5)|0);
 switch ($10|0) {
 case 1:  {
  $$063$ph = 10924;
  label = 9;
  break;
 }
 case 2:  {
  $$063$ph = 10956;
  label = 9;
  break;
 }
 case 4:  {
  $$063$ph = 10988;
  label = 9;
  break;
 }
 default: {
  $11 = HEAP32[$$idx>>2]|0;
  $12 = $11 & -257;
  HEAP32[$$idx>>2] = $12;
  _LoadExpr(0,$0);
  _g_push(9,0);
  $$06371 = $5;$$073 = 0;
 }
 }
 if ((label|0) == 9) {
  _PushAddr($0);
  $$06371 = $$063$ph;$$073 = 1;
 }
 _hie1($1);
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_TypeCmp($5,$14)|0);
 $16 = ($15>>>0)<(3);
 if ($16) {
  _Error(38888,$vararg_buffer3);
 }
 $$idx66 = ((($1)) + 8|0);
 $$idx66$val = HEAP32[$$idx66>>2]|0;
 $$lobit$i69 = $$idx66$val & 256;
 $17 = ($$lobit$i69|0)==(0);
 if ($17) {
  if ($$073) {
   _Store($0,$$06371);
   (_ED_MakeRValExpr($0)|0);
   STACKTOP = sp;return;
  } else {
   _Error(31913,$vararg_buffer5);
   (_pop(1)|0);
   (_ED_MakeRValExpr($0)|0);
   STACKTOP = sp;return;
  }
 } else {
  if ($$073) {
   HEAP32[$13>>2] = $$06371;
   _LoadExpr(512,$1);
   _Store($0,$$06371);
   (_ED_MakeRValExpr($0)|0);
   STACKTOP = sp;return;
  } else {
   $18 = $$idx66$val & -257;
   HEAP32[$$idx66>>2] = $18;
   _LoadExpr(0,$1);
   _g_push(9,0);
   $19 = (_CheckedSizeOf($5)|0);
   _g_getimmed(41,$19,0);
   _g_call(256,27646,4);
   (_ED_MakeRValExpr($0)|0);
   STACKTOP = sp;return;
  }
 }
}
function _FreeCaseNode($0) {
 $0 = $0|0;
 var $$0$i4 = 0, $$idx$val$i = 0, $$idx$val$i3 = 0, $$idx5$i = 0, $$idx5$val$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _xfree($0);
  return;
 }
 $$idx$val$i3 = HEAP32[$2>>2]|0;
 $4 = ($$idx$val$i3|0)==(0);
 if (!($4)) {
  $$idx5$i = ((($2)) + 8|0);
  $$0$i4 = 0;
  while(1) {
   $$idx5$val$i = HEAP32[$$idx5$i>>2]|0;
   $5 = (($$idx5$val$i) + ($$0$i4<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   _FreeCaseNode($6);
   $7 = (($$0$i4) + 1)|0;
   $$idx$val$i = HEAP32[$2>>2]|0;
   $8 = ($7>>>0)<($$idx$val$i>>>0);
   if ($8) {
    $$0$i4 = $7;
   } else {
    break;
   }
  }
 }
 _FreeCollection($2);
 _xfree($0);
 return;
}
function _FreeCaseNodeColl($0) {
 $0 = $0|0;
 var $$07 = 0, $$idx$val = 0, $$idx$val6 = 0, $$idx5 = 0, $$idx5$val = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val6 = HEAP32[$0>>2]|0;
 $1 = ($$idx$val6|0)==(0);
 if ($1) {
  _FreeCollection($0);
  return;
 }
 $$idx5 = ((($0)) + 8|0);
 $$07 = 0;
 while(1) {
  $$idx5$val = HEAP32[$$idx5>>2]|0;
  $2 = (($$idx5$val) + ($$07<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  _FreeCaseNode($3);
  $4 = (($$07) + 1)|0;
  $$idx$val = HEAP32[$0>>2]|0;
  $5 = ($4>>>0)<($$idx$val>>>0);
  if ($5) {
   $$07 = $4;
  } else {
   break;
  }
 }
 _FreeCollection($0);
 return;
}
function _InsertCaseValue($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0$i = 0, $$$026$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i22 = 0, $$0$ph39$i = 0, $$019 = 0, $$024$ph38$i = 0, $$026$ph$lcssa32$i = 0, $$026$ph37$i = 0, $$033 = 0, $$033$i = 0, $$idx$val$i = 0, $$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = (_GetLocalLabel()|0);
 $4 = ($2|0)==(0);
 if ($4) {
  STACKTOP = sp;return ($3|0);
 } else {
  $$033 = $0;$$in = $2;
 }
 L3: while(1) {
  $5 = (($$in) + -1)|0;
  $6 = $5 << 3;
  $7 = $1 >>> $6;
  $8 = $7&255;
  $$idx$val$i = HEAP32[$$033>>2]|0;
  $9 = (($$idx$val$i) + -1)|0;
  $10 = ($9|0)<(0);
  if ($10) {
   $$0$lcssa$i22 = 0;
   label = 11;
  } else {
   $11 = ((($$033)) + 8|0);
   $$0$ph39$i = 0;$$024$ph38$i = $9;$$026$ph37$i = 0;
   L7: while(1) {
    $$033$i = $$0$ph39$i;
    while(1) {
     $12 = (($$033$i) + ($$024$ph38$i))|0;
     $13 = (($12|0) / 2)&-1;
     $14 = ($$idx$val$i>>>0)>($13>>>0);
     if (!($14)) {
      label = 6;
      break L3;
     }
     $17 = HEAP32[$11>>2]|0;
     $18 = (($17) + ($13<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20&255)<($8&255);
     if (!($21)) {
      break;
     }
     $22 = (($13) + 1)|0;
     $23 = ($13|0)<($$024$ph38$i|0);
     if ($23) {
      $$033$i = $22;
     } else {
      $$0$lcssa$i = $22;$$026$ph$lcssa32$i = $$026$ph37$i;
      break L7;
     }
    }
    $24 = (($13) + -1)|0;
    $25 = ($20<<24>>24)==($8<<24>>24);
    $$$026$i = $25 ? 1 : $$026$ph37$i;
    $$$0$i = $25 ? $13 : $$033$i;
    $26 = ($$$0$i|0)<($13|0);
    if ($26) {
     $$0$ph39$i = $$$0$i;$$024$ph38$i = $24;$$026$ph37$i = $$$026$i;
    } else {
     $$0$lcssa$i = $$$0$i;$$026$ph$lcssa32$i = $$$026$i;
     break;
    }
   }
   $27 = ($$026$ph$lcssa32$i|0)==(0);
   if ($27) {
    $$0$lcssa$i22 = $$0$lcssa$i;
    label = 11;
   } else {
    $33 = ($$idx$val$i>>>0)>($$0$lcssa$i>>>0);
    if (!($33)) {
     label = 15;
     break;
    }
    $36 = (($17) + ($$0$lcssa$i<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($5|0)==(0);
    if ($38) {
     label = 17;
     break;
    } else {
     $$019 = $37;
    }
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $28 = (_xmalloc(12)|0);
   HEAP8[$28>>0] = $8;
   $29 = ((($28)) + 4|0);
   HEAP32[$29>>2] = 0;
   $30 = ((($28)) + 8|0);
   HEAP32[$30>>2] = 0;
   _CollInsert($$033,$28,$$0$lcssa$i22);
   $31 = ($5|0)==(0);
   if ($31) {
    label = 13;
    break;
   }
   $32 = (_NewCollection()|0);
   HEAP32[$30>>2] = $32;
   $$019 = $28;
  }
  $39 = ((($$019)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $$033 = $40;$$in = $5;
 }
 if ((label|0) == 6) {
  $15 = HEAP32[3332]|0;
  $16 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$15 & 1]($16,40922,40950,155);
  // unreachable;
 }
 else if ((label|0) == 13) {
  HEAP32[$29>>2] = $3;
  STACKTOP = sp;return ($3|0);
 }
 else if ((label|0) == 15) {
  $34 = HEAP32[3332]|0;
  $35 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$34 & 1]($35,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 17) {
  _Error(31952,$vararg_buffer);
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function _Preprocess() {
 var $$0$i29 = 0, $$0$ph = 0, $$04$i = 0, $$1 = 0, $$2 = 0, $$3 = 0, $$idx = 0, $$idx$i = 0, $$idx$i42 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i31 = 0, $$idx$val$i43 = 0, $$idx1$val$i = 0, $$idx1$val$i41 = 0, $$idx18$val = 0, $$idx19 = 0, $$idx19$val = 0, $$lcssa$i = 0, $$pr = 0;
 var $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond$i = 0, $or$cond19$us$i = 0, $or$cond21$i = 0, $or$cond21$us$i = 0, $or$cond6$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $vararg_buffer44 = sp + 176|0;
 $vararg_buffer42 = sp + 168|0;
 $vararg_buffer40 = sp + 160|0;
 $vararg_buffer38 = sp + 152|0;
 $vararg_buffer35 = sp + 144|0;
 $vararg_buffer33 = sp + 136|0;
 $vararg_buffer31 = sp + 128|0;
 $vararg_buffer29 = sp + 120|0;
 $vararg_buffer27 = sp + 112|0;
 $vararg_buffer25 = sp + 104|0;
 $vararg_buffer23 = sp + 96|0;
 $vararg_buffer21 = sp + 88|0;
 $vararg_buffer19 = sp + 80|0;
 $vararg_buffer17 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 192|0;
 $1 = sp + 257|0;
 $2 = HEAP32[11486]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_NewStrBuf()|0);
  HEAP32[11486] = $4;
 }
 $5 = HEAP8[46896]|0;
 $6 = (_IsSpace($5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  while(1) {
   _NextChar();
   $8 = HEAP8[46896]|0;
   $9 = (_IsSpace($8)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    break;
   }
  }
 }
 $$0$ph = 0;
 L8: while(1) {
  $$pr = HEAP8[46896]|0;
  $11 = ($$0$ph|0)==(0);
  L10: do {
   if ($11) {
    $22 = $$pr;
    while(1) {
     switch ($22<<24>>24) {
     case 0:  {
      $$3 = 0;
      break L10;
      break;
     }
     case 35:  {
      break;
     }
     default: {
      label = 143;
      break L8;
     }
     }
     _NextChar();
     $23 = HEAP8[46896]|0;
     $24 = (_IsSpace($23)|0);
     $25 = ($24|0)==(0);
     if (!($25)) {
      while(1) {
       _NextChar();
       $26 = HEAP8[46896]|0;
       $27 = (_IsSpace($26)|0);
       $28 = ($27|0)==(0);
       if ($28) {
        break;
       }
      }
     }
     $29 = HEAP8[46896]|0;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $22 = 0;
     } else {
      label = 15;
      break L10;
     }
    }
   } else {
    $12 = $$pr;
    while(1) {
     $13 = ($12<<24>>24)==(35);
     if (!($13)) {
      $$3 = $$0$ph;
      break L10;
     }
     _NextChar();
     $14 = HEAP8[46896]|0;
     $15 = (_IsSpace($14)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      while(1) {
       _NextChar();
       $17 = HEAP8[46896]|0;
       $18 = (_IsSpace($17)|0);
       $19 = ($18|0)==(0);
       if ($19) {
        break;
       }
      }
     }
     $20 = HEAP8[46896]|0;
     $21 = ($20<<24>>24)==(0);
     if ($21) {
      $12 = 0;
     } else {
      label = 15;
      break;
     }
    }
   }
  } while(0);
  L25: do {
   if ((label|0) == 15) {
    label = 0;
    $31 = (_IsSym($1)|0);
    $32 = ($31|0)==(0);
    if ($32) {
     _PPError(31973,$vararg_buffer);
     _ClearLine();
     $$3 = $$0$ph;
     break;
    }
    $33 = (_bsearch($1,8152,13,8,9)|0);
    $34 = ($33|0)==(0|0);
    L30: do {
     if (!($34)) {
      $35 = ((($33)) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      do {
       switch ($36|0) {
       case 0:  {
        if (!($11)) {
         $$3 = $$0$ph;
         break L25;
        }
        $37 = HEAP8[46896]|0;
        $38 = (_IsSpace($37)|0);
        $39 = ($38|0)==(0);
        if (!($39)) {
         while(1) {
          _NextChar();
          $40 = HEAP8[46896]|0;
          $41 = (_IsSpace($40)|0);
          $42 = ($41|0)==(0);
          if ($42) {
           break;
          }
         }
        }
        $43 = (_IsSym($0)|0);
        $44 = ($43|0)==(0);
        L39: do {
         if ($44) {
          _PPError(37770,$vararg_buffer1);
          _ClearLine();
         } else {
          $45 = (_IS_Get(8668)|0);
          $46 = (_FindMacro($0)|0);
          $47 = (_NewMacro($0)|0);
          $48 = HEAP8[46896]|0;
          $49 = ($48<<24>>24)==(40);
          if ($49) {
           $50 = ($45|0)==(0);
           _NextChar();
           $51 = ((($47)) + 8|0);
           HEAP32[$51>>2] = 0;
           $52 = ((($47)) + 44|0);
           L44: do {
            if ($50) {
             while(1) {
              $78 = HEAP8[46896]|0;
              $79 = (_IsSpace($78)|0);
              $80 = ($79|0)==(0);
              if (!($80)) {
               while(1) {
                _NextChar();
                $81 = HEAP8[46896]|0;
                $82 = (_IsSpace($81)|0);
                $83 = ($82|0)==(0);
                if ($83) {
                 break;
                }
               }
              }
              $84 = HEAP8[46896]|0;
              $85 = ($84<<24>>24)==(41);
              if ($85) {
               break L44;
              }
              $86 = (_IsSym($0)|0);
              $87 = ($86|0)==(0);
              if ($87) {
               label = 44;
               break L44;
              }
              _AddMacroArg($47,$0);
              $88 = HEAP8[46896]|0;
              $89 = (_IsSpace($88)|0);
              $90 = ($89|0)==(0);
              if (!($90)) {
               while(1) {
                _NextChar();
                $91 = HEAP8[46896]|0;
                $92 = (_IsSpace($91)|0);
                $93 = ($92|0)==(0);
                if ($93) {
                 break;
                }
               }
              }
              $94 = HEAP8[$52>>0]|0;
              $95 = ($94<<24>>24)==(0);
              $96 = HEAP8[46896]|0;
              $97 = ($96<<24>>24)==(44);
              $or$cond21$i = $95 & $97;
              if (!($or$cond21$i)) {
               $$lcssa$i = $96;
               label = 49;
               break L44;
              }
              _NextChar();
             }
            } else {
             L58: while(1) {
              $53 = HEAP8[46896]|0;
              $54 = (_IsSpace($53)|0);
              $55 = ($54|0)==(0);
              if (!($55)) {
               while(1) {
                _NextChar();
                $56 = HEAP8[46896]|0;
                $57 = (_IsSpace($56)|0);
                $58 = ($57|0)==(0);
                if ($58) {
                 break;
                }
               }
              }
              $59 = HEAP8[46896]|0;
              switch ($59<<24>>24) {
              case 41:  {
               break L44;
               break;
              }
              case 46:  {
               _NextChar();
               $64 = HEAP8[46896]|0;
               $65 = ($64<<24>>24)==(46);
               $66 = HEAP8[46897]|0;
               $67 = ($66<<24>>24)==(46);
               $or$cond19$us$i = $65 & $67;
               if (!($or$cond19$us$i)) {
                break L58;
               }
               _NextChar();
               _NextChar();
               _AddMacroArg($47,32005);
               HEAP8[$52>>0] = 1;
               break;
              }
              default: {
               $60 = (_IsSym($0)|0);
               $61 = ($60|0)==(0);
               if ($61) {
                label = 44;
                break L44;
               }
               $62 = (_strcmp($0,32005)|0);
               $63 = ($62|0)==(0);
               if ($63) {
                _PPWarning(32017,$vararg_buffer3);
               }
               _AddMacroArg($47,$0);
              }
              }
              $75 = HEAP8[46896]|0;
              $76 = (_IsSpace($75)|0);
              $77 = ($76|0)==(0);
              if (!($77)) {
               while(1) {
                _NextChar();
                $68 = HEAP8[46896]|0;
                $69 = (_IsSpace($68)|0);
                $70 = ($69|0)==(0);
                if ($70) {
                 break;
                }
               }
              }
              $71 = HEAP8[$52>>0]|0;
              $72 = ($71<<24>>24)==(0);
              $73 = HEAP8[46896]|0;
              $74 = ($73<<24>>24)==(44);
              $or$cond21$us$i = $72 & $74;
              if (!($or$cond21$us$i)) {
               $$lcssa$i = $73;
               label = 49;
               break L44;
              }
              _NextChar();
             }
             _PPError(32088,$vararg_buffer5);
             _ClearLine();
             break L39;
            }
           } while(0);
           if ((label|0) == 44) {
            label = 0;
            _PPError(37770,$vararg_buffer7);
            _ClearLine();
            break;
           }
           if ((label|0) == 49) {
            label = 0;
            $98 = ($$lcssa$i<<24>>24)==(41);
            if (!($98)) {
             _PPError(32103,$vararg_buffer9);
             _ClearLine();
             break;
            }
           }
           _NextChar();
           $$pre$i = HEAP8[46896]|0;
           $99 = $$pre$i;
          } else {
           $99 = $48;
          }
          $100 = (_IsSpace($99)|0);
          $101 = ($100|0)==(0);
          if (!($101)) {
           while(1) {
            _NextChar();
            $102 = HEAP8[46896]|0;
            $103 = (_IsSpace($102)|0);
            $104 = ($103|0)==(0);
            if ($104) {
             break;
            }
           }
          }
          _InsertMacro($47);
          $105 = HEAP32[11473]|0;
          $106 = ((($47)) + 28|0);
          (_Pass1($105,$106)|0);
          $107 = ((($47)) + 32|0);
          while(1) {
           $108 = HEAP32[$107>>2]|0;
           $109 = ($108|0)==(0);
           if ($109) {
            $114 = 0;
           } else {
            $110 = (($108) + -1)|0;
            $111 = HEAP32[$106>>2]|0;
            $112 = (($111) + ($110)|0);
            $113 = HEAP8[$112>>0]|0;
            $114 = $113;
           }
           $115 = (_IsSpace($114)|0);
           $116 = ($115|0)==(0);
           if ($116) {
            break;
           }
           _SB_Drop($106,1);
          }
          $117 = ($46|0)==(0|0);
          if (!($117)) {
           $118 = (_MacroCmp($47,$46)|0);
           $119 = ($118|0)==(0);
           if (!($119)) {
            _PPError(32116,$vararg_buffer11);
           }
          }
         }
        } while(0);
        $$3 = 0;
        break L25;
        break;
       }
       case 1:  {
        $120 = HEAP32[2064]|0;
        $121 = ($120|0)>(-1);
        if (!($121)) {
         _PPError(32174,$vararg_buffer15);
         $$3 = $$0$ph;
         break L25;
        }
        $122 = (46963 + ($120)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123&255;
        $125 = $124 & 2;
        $126 = ($125|0)==(0);
        if ($126) {
         $127 = $124 & 1;
         $128 = ($127|0)==(0);
         $129 = $11&1;
         $$1 = $128 ? $129 : $$0$ph;
         $130 = $124 | 2;
         $131 = $130&255;
         HEAP8[$122>>0] = $131;
         $132 = (_DoIf($$1)|0);
         $133 = HEAP32[2064]|0;
         $134 = (46963 + ($133)|0);
         $135 = HEAP8[$134>>0]|0;
         $136 = $135&255;
         $137 = $136 & 251;
         $138 = $137&255;
         HEAP8[$134>>0] = $138;
         $$3 = $132;
         break L25;
        } else {
         _PPError(32152,$vararg_buffer13);
         $$3 = $$0$ph;
         break L25;
        }
        break;
       }
       case 2:  {
        $139 = HEAP32[2064]|0;
        $140 = ($139|0)>(-1);
        if (!($140)) {
         _PPError(32207,$vararg_buffer19);
         $$3 = $$0$ph;
         break L25;
        }
        $141 = (46963 + ($139)|0);
        $142 = HEAP8[$141>>0]|0;
        $143 = $142&255;
        $144 = $143 & 2;
        $145 = ($144|0)==(0);
        if ($145) {
         $146 = $143 & 1;
         $147 = ($146|0)==(0);
         $148 = $11&1;
         $$2 = $147 ? $148 : $$0$ph;
         $149 = $143 | 2;
         $150 = $149&255;
         HEAP8[$141>>0] = $150;
         $$3 = $$2;
         break L25;
        } else {
         _PPError(32191,$vararg_buffer17);
         $$3 = $$0$ph;
         break L25;
        }
        break;
       }
       case 3:  {
        $151 = HEAP32[2064]|0;
        $152 = ($151|0)>(-1);
        if ($152) {
         $154 = $151;
        } else {
         _PPError(32254,$vararg_buffer21);
         $$3 = $$0$ph;
         break L25;
        }
        while(1) {
         $153 = (46963 + ($154)|0);
         $155 = HEAP8[$153>>0]|0;
         $156 = $155 & 4;
         $157 = ($156<<24>>24)==(0);
         if (!($157)) {
          $160 = $154;
          break;
         }
         $158 = (($154) + -1)|0;
         HEAP32[2064] = $158;
         $159 = ($154|0)>(0);
         if ($159) {
          $154 = $158;
         } else {
          $160 = $158;
          break;
         }
        }
        $161 = ($160|0)>(-1);
        if (!($161)) {
         label = 77;
         break L8;
        }
        $164 = (($160) + -1)|0;
        HEAP32[2064] = $164;
        $165 = (46963 + ($160)|0);
        $166 = HEAP8[$165>>0]|0;
        $167 = $166 & 1;
        $168 = $167&255;
        $$3 = $168;
        break L25;
        break;
       }
       case 4:  {
        if (!($11)) {
         $$3 = $$0$ph;
         break L25;
        }
        $169 = HEAP8[46896]|0;
        $170 = (_IsSpace($169)|0);
        $171 = ($170|0)==(0);
        if (!($171)) {
         while(1) {
          _NextChar();
          $172 = HEAP8[46896]|0;
          $173 = (_IsSpace($172)|0);
          $174 = ($173|0)==(0);
          if ($174) {
           break;
          }
         }
        }
        $175 = HEAP8[46896]|0;
        $176 = ($175<<24>>24)==(0);
        if ($176) {
         _PPError(32274,$vararg_buffer23);
        } else {
         $177 = HEAP32[11473]|0;
         $$idx1$val$i = HEAP32[$177>>2]|0;
         $$idx$i = ((($177)) + 8|0);
         $$idx$val$i = HEAP32[$$idx$i>>2]|0;
         $178 = (($$idx1$val$i) + ($$idx$val$i)|0);
         HEAP32[$vararg_buffer25>>2] = $178;
         _PPError(32299,$vararg_buffer25);
        }
        _ClearLine();
        $$3 = 0;
        break L25;
        break;
       }
       case 5:  {
        $179 = (_DoIf($$0$ph)|0);
        $$3 = $179;
        break L25;
        break;
       }
       case 6:  {
        $180 = (_DoIfDef($$0$ph,1)|0);
        $$3 = $180;
        break L25;
        break;
       }
       case 7:  {
        $181 = (_DoIfDef($$0$ph,0)|0);
        $$3 = $181;
        break L25;
        break;
       }
       case 8:  {
        if (!($11)) {
         $$3 = $$0$ph;
         break L25;
        }
        ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
        $182 = HEAP32[11486]|0;
        $183 = ((($182)) + 8|0);
        HEAP32[$183>>2] = 0;
        $184 = ((($182)) + 4|0);
        HEAP32[$184>>2] = 0;
        $185 = HEAP32[11473]|0;
        $186 = (_Pass1($185,$182)|0);
        $187 = ($186|0)==(0);
        if (!($187)) {
         $188 = HEAP32[11486]|0;
         $189 = (_InitLine($188)|0);
         HEAP32[11486] = $189;
         $190 = HEAP32[11473]|0;
         $191 = ((($190)) + 8|0);
         HEAP32[$191>>2] = 0;
         $192 = ((($189)) + 8|0);
         HEAP32[$192>>2] = 0;
         $193 = ((($189)) + 4|0);
         HEAP32[$193>>2] = 0;
         _MacroReplacement($190,$189);
        }
        $194 = HEAP32[11486]|0;
        $195 = ((($194)) + 8|0);
        HEAP32[$195>>2] = 0;
        $196 = (_InitLine($194)|0);
        HEAP32[11486] = $196;
        $197 = HEAP8[46896]|0;
        $198 = (_IsSpace($197)|0);
        $199 = ($198|0)==(0);
        if (!($199)) {
         while(1) {
          _NextChar();
          $200 = HEAP8[46896]|0;
          $201 = (_IsSpace($200)|0);
          $202 = ($201|0)==(0);
          if ($202) {
           break;
          }
         }
        }
        $203 = HEAP8[46896]|0;
        $204 = $203 << 24 >> 24;
        switch ($204|0) {
        case 34:  {
         $$0$i29 = 4;$$04$i = 34;
         label = 98;
         break;
        }
        case 60:  {
         $$0$i29 = 2;$$04$i = 62;
         label = 98;
         break;
        }
        default: {
         _PPError(32310,$vararg_buffer27);
        }
        }
        do {
         if ((label|0) == 98) {
          label = 0;
          _NextChar();
          $205 = HEAP8[46896]|0;
          $206 = $205 << 24 >> 24;
          $207 = ($205<<24>>24)==(0);
          $208 = ($206|0)==($$04$i|0);
          $or$cond6$i = $207 | $208;
          if (!($or$cond6$i)) {
           $209 = $206;
           while(1) {
            _SB_AppendChar($0,$209);
            _NextChar();
            $210 = HEAP8[46896]|0;
            $211 = $210 << 24 >> 24;
            $212 = ($210<<24>>24)==(0);
            $213 = ($211|0)==($$04$i|0);
            $or$cond$i = $212 | $213;
            if ($or$cond$i) {
             break;
            } else {
             $209 = $211;
            }
           }
          }
          _SB_Terminate($0);
          $214 = HEAP8[46896]|0;
          $215 = $214 << 24 >> 24;
          $216 = ($215|0)==($$04$i|0);
          if ($216) {
           $$idx$val$i31 = HEAP32[$0>>2]|0;
           _OpenIncludeFile($$idx$val$i31,$$0$i29);
           break;
          }
          $217 = ($214<<24>>24)==(0);
          if ($217) {
           _PPError(32330,$vararg_buffer29);
          }
         }
        } while(0);
        _SB_Done($0);
        _ClearLine();
        $$3 = 0;
        break L25;
        break;
       }
       case 9:  {
        if (!($11)) {
         $$3 = $$0$ph;
         break L25;
        }
        _ClearLine();
        $$3 = 0;
        break L25;
        break;
       }
       case 10:  {
        if ($11) {
         label = 108;
         break L8;
        } else {
         $$3 = $$0$ph;
         break L25;
        }
        break;
       }
       case 11:  {
        if (!($11)) {
         $$3 = $$0$ph;
         break L25;
        }
        $249 = HEAP8[46896]|0;
        $250 = (_IsSpace($249)|0);
        $251 = ($250|0)==(0);
        if (!($251)) {
         while(1) {
          _NextChar();
          $252 = HEAP8[46896]|0;
          $253 = (_IsSpace($252)|0);
          $254 = ($253|0)==(0);
          if ($254) {
           break;
          }
         }
        }
        $255 = (_IsSym($0)|0);
        $256 = ($255|0)==(0);
        if ($256) {
         _PPError(37770,$vararg_buffer31);
         _ClearLine();
        } else {
         (_UndefineMacro($0)|0);
        }
        $$3 = 0;
        break L25;
        break;
       }
       case 12:  {
        $257 = (_IS_Get(8668)|0);
        $258 = ($257|0)>(1);
        $259 = ($$0$ph|0)!=(0);
        if (!($258)) {
         if (!($259)) {
          _PPError(31973,$vararg_buffer38);
         }
         _ClearLine();
         $$3 = $$0$ph;
         break L25;
        }
        if ($259) {
         $$3 = $$0$ph;
         break L25;
        }
        $260 = HEAP8[46896]|0;
        $261 = (_IsSpace($260)|0);
        $262 = ($261|0)==(0);
        if (!($262)) {
         while(1) {
          _NextChar();
          $263 = HEAP8[46896]|0;
          $264 = (_IsSpace($263)|0);
          $265 = ($264|0)==(0);
          if ($265) {
           break;
          }
         }
        }
        $266 = HEAP8[46896]|0;
        $267 = ($266<<24>>24)==(0);
        if ($267) {
         _PPError(32382,$vararg_buffer33);
        } else {
         $268 = HEAP32[11473]|0;
         $$idx1$val$i41 = HEAP32[$268>>2]|0;
         $$idx$i42 = ((($268)) + 8|0);
         $$idx$val$i43 = HEAP32[$$idx$i42>>2]|0;
         $269 = (($$idx1$val$i41) + ($$idx$val$i43)|0);
         HEAP32[$vararg_buffer35>>2] = $269;
         _PPWarning(32409,$vararg_buffer35);
        }
        _ClearLine();
        $$3 = 0;
        break L25;
        break;
       }
       default: {
        break L30;
       }
       }
      } while(0);
     }
    } while(0);
    if ($11) {
     _PPError(31973,$vararg_buffer40);
    }
    _ClearLine();
    $$3 = $$0$ph;
   }
  } while(0);
  $270 = (_NextLine()|0);
  $271 = ($270|0)==(0);
  if ($271) {
   label = 140;
   break;
  }
  $272 = HEAP8[46896]|0;
  $273 = (_IsSpace($272)|0);
  $274 = ($273|0)==(0);
  if ($274) {
   $$0$ph = $$3;
   continue;
  }
  while(1) {
   _NextChar();
   $277 = HEAP8[46896]|0;
   $278 = (_IsSpace($277)|0);
   $279 = ($278|0)==(0);
   if ($279) {
    $$0$ph = $$3;
    continue L8;
   }
  }
 }
 if ((label|0) == 77) {
  $162 = HEAP32[3332]|0;
  $163 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$162 & 1]($163,32226,32239,1312);
  // unreachable;
 }
 else if ((label|0) == 108) {
  $218 = HEAP8[46896]|0;
  $219 = (_IsSpace($218)|0);
  $220 = ($219|0)==(0);
  if (!($220)) {
   while(1) {
    _NextChar();
    $221 = HEAP8[46896]|0;
    $222 = (_IsSpace($221)|0);
    $223 = ($222|0)==(0);
    if ($223) {
     break;
    }
   }
  }
  $224 = HEAP32[11486]|0;
  $225 = ((($224)) + 8|0);
  HEAP32[$225>>2] = 0;
  $226 = ((($224)) + 4|0);
  HEAP32[$226>>2] = 0;
  $227 = HEAP32[11473]|0;
  (_Pass1($227,$224)|0);
  $228 = HEAP32[11473]|0;
  _SB_CopyBuf($228,32372,9);
  $229 = HEAP32[11486]|0;
  $230 = ((($229)) + 8|0);
  HEAP32[$230>>2] = 0;
  $231 = HEAP32[11473]|0;
  _SB_AppendChar($231,34);
  $232 = HEAP32[$230>>2]|0;
  $233 = ((($229)) + 4|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = ($232>>>0)<($234>>>0);
  L210: do {
   if ($235) {
    $237 = $232;
    while(1) {
     $236 = (($237) + 1)|0;
     HEAP32[$230>>2] = $236;
     $238 = HEAP32[$229>>2]|0;
     $239 = (($238) + ($237)|0);
     $240 = HEAP8[$239>>0]|0;
     $241 = $240 << 24 >> 24;
     $242 = ($240<<24>>24)==(0);
     if ($242) {
      break L210;
     }
     switch ($241|0) {
     case 92: case 34:  {
      _SB_AppendChar($231,92);
      break;
     }
     default: {
     }
     }
     _SB_AppendChar($231,$241);
     $243 = HEAP32[$230>>2]|0;
     $244 = HEAP32[$233>>2]|0;
     $245 = ($243>>>0)<($244>>>0);
     if ($245) {
      $237 = $243;
     } else {
      break L210;
     }
    }
   }
  } while(0);
  _SB_AppendChar($231,34);
  $246 = HEAP32[11473]|0;
  _SB_AppendChar($246,41);
  $247 = HEAP32[11473]|0;
  $248 = ((($247)) + 8|0);
  HEAP32[$248>>2] = 0;
  (_InitLine($247)|0);
 }
 else if ((label|0) == 140) {
  $275 = HEAP32[2064]|0;
  $276 = ($275|0)>(-1);
  if (!($276)) {
   STACKTOP = sp;return;
  }
  _PPError(32422,$vararg_buffer42);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 143) {
  $280 = HEAP32[11486]|0;
  $281 = ((($280)) + 8|0);
  HEAP32[$281>>2] = 0;
  $282 = ((($280)) + 4|0);
  HEAP32[$282>>2] = 0;
  $283 = HEAP32[11473]|0;
  $284 = (_Pass1($283,$280)|0);
  $285 = ($284|0)==(0);
  if (!($285)) {
   $286 = HEAP32[11486]|0;
   $287 = (_InitLine($286)|0);
   HEAP32[11486] = $287;
   $288 = HEAP32[11473]|0;
   $289 = ((($288)) + 8|0);
   HEAP32[$289>>2] = 0;
   $290 = ((($287)) + 8|0);
   HEAP32[$290>>2] = 0;
   $291 = ((($287)) + 4|0);
   HEAP32[$291>>2] = 0;
   _MacroReplacement($288,$287);
  }
  $292 = HEAP32[11486]|0;
  $293 = ((($292)) + 8|0);
  HEAP32[$293>>2] = 0;
  $294 = (_InitLine($292)|0);
  HEAP32[11486] = $294;
 }
 $295 = HEAP8[47050]|0;
 $296 = ($295&255)>(1);
 if (!($296)) {
  STACKTOP = sp;return;
 }
 $297 = HEAP32[11473]|0;
 $$idx = ((($297)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $298 = ($$idx$val|0)==(0);
 if ($298) {
  STACKTOP = sp;return;
 }
 $299 = (_GetCurrentFile()|0);
 $300 = (_GetCurrentLine()|0);
 $301 = HEAP32[11473]|0;
 $$idx19 = ((($301)) + 4|0);
 $$idx19$val = HEAP32[$$idx19>>2]|0;
 $$idx18$val = HEAP32[$301>>2]|0;
 HEAP32[$vararg_buffer44>>2] = $299;
 $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
 HEAP32[$vararg_ptr47>>2] = $300;
 $vararg_ptr48 = ((($vararg_buffer44)) + 8|0);
 HEAP32[$vararg_ptr48>>2] = $$idx19$val;
 $vararg_ptr49 = ((($vararg_buffer44)) + 12|0);
 HEAP32[$vararg_ptr49>>2] = $$idx18$val;
 (_printf(32440,$vararg_buffer44)|0);
 STACKTOP = sp;return;
}
function _CmpToken($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strcmp($0,$2)|0);
 return ($3|0);
}
function _Pass1($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$ph$be = 0, $$0$ph$lcssa = 0, $$0$ph44 = 0, $$020 = 0, $$pr = 0, $$pr43 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, $or$cond23 = 0, $or$cond25 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 12|0;
 $3 = (_InitLine($0)|0);
 $$pr43 = HEAP8[46896]|0;
 $4 = ($$pr43<<24>>24)==(0);
 if ($4) {
  $$0$ph$lcssa = 0;
  (_InitLine($3)|0);
  STACKTOP = sp;return ($$0$ph$lcssa|0);
 }
 $5 = ((($1)) + 4|0);
 $$0$ph44 = 0;$6 = $$pr43;
 L4: while(1) {
  $7 = (_IsSpace($6)|0);
  $8 = ($7|0)==(0);
  do {
   if ($8) {
    $21 = (_IsSym($2)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $57 = HEAP8[46896]|0;
     $58 = (_IsQuote($57)|0);
     $59 = ($58|0)==(0);
     if (!($59)) {
      _CopyQuotedString($1);
      $$0$ph$be = $$0$ph44;
      break;
     }
     $60 = HEAP8[46896]|0;
     $61 = ($60<<24>>24)==(47);
     $62 = HEAP8[46897]|0;
     $63 = ($62<<24>>24)==(42);
     $or$cond = $61 & $63;
     if ($or$cond) {
      $64 = HEAP32[$5>>2]|0;
      $65 = ($64|0)==(0);
      if ($65) {
       $70 = 0;
      } else {
       $66 = (($64) + -1)|0;
       $67 = HEAP32[$1>>2]|0;
       $68 = (($67) + ($66)|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = $69;
      }
      $71 = (_IsSpace($70)|0);
      $72 = ($71|0)==(0);
      if ($72) {
       _SB_AppendChar($1,32);
      }
      _OldStyleComment();
      $$0$ph$be = $$0$ph44;
      break;
     }
     $73 = (_IS_Get(8668)|0);
     $74 = ($73|0)>(0);
     $75 = HEAP8[46896]|0;
     $76 = ($75<<24>>24)==(47);
     $or$cond23 = $74 & $76;
     $77 = HEAP8[46897]|0;
     $78 = ($77<<24>>24)==(47);
     $or$cond25 = $or$cond23 & $78;
     if (!($or$cond25)) {
      $90 = $75 << 24 >> 24;
      _SB_AppendChar($1,$90);
      _NextChar();
      $$0$ph$be = $$0$ph44;
      break;
     }
     $79 = HEAP32[$5>>2]|0;
     $80 = ($79|0)==(0);
     if ($80) {
      $85 = 0;
     } else {
      $81 = (($79) + -1)|0;
      $82 = HEAP32[$1>>2]|0;
      $83 = (($82) + ($81)|0);
      $84 = HEAP8[$83>>0]|0;
      $85 = $84;
     }
     $86 = (_IsSpace($85)|0);
     $87 = ($86|0)==(0);
     if ($87) {
      _SB_AppendChar($1,32);
     }
     L30: while(1) {
      _NextChar();
      $88 = HEAP8[46896]|0;
      switch ($88<<24>>24) {
      case 0:  {
       $$0$ph$lcssa = $$0$ph44;
       label = 43;
       break L4;
       break;
      }
      case 10:  {
       break L30;
       break;
      }
      default: {
      }
      }
     }
     _NextChar();
     $$0$ph$be = $$0$ph44;
     break;
    } else {
     $23 = HEAP8[46962]|0;
     $24 = ($23<<24>>24)==(0);
     if (!($24)) {
      $25 = (_strcmp($2,32682)|0);
      $26 = ($25|0)==(0);
      if ($26) {
       $27 = HEAP8[46896]|0;
       $28 = (_IsSpace($27)|0);
       $29 = ($28|0)==(0);
       if (!($29)) {
        while(1) {
         _NextChar();
         $30 = HEAP8[46896]|0;
         $31 = (_IsSpace($30)|0);
         $32 = ($31|0)==(0);
         if ($32) {
          break;
         }
        }
       }
       $33 = HEAP8[46896]|0;
       $34 = ($33<<24>>24)==(40);
       if ($34) {
        _NextChar();
        $35 = HEAP8[46896]|0;
        $36 = (_IsSpace($35)|0);
        $37 = ($36|0)==(0);
        if ($37) {
         $$020 = 1;
        } else {
         while(1) {
          _NextChar();
          $38 = HEAP8[46896]|0;
          $39 = (_IsSpace($38)|0);
          $40 = ($39|0)==(0);
          if ($40) {
           $$020 = 1;
           break;
          }
         }
        }
       } else {
        $$020 = 0;
       }
       $41 = (_IsSym($2)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        _PPError(37770,$vararg_buffer1);
        _SB_AppendChar($1,48);
        $$0$ph$be = $$0$ph44;
        break;
       }
       $43 = (_FindMacro($2)|0);
       $44 = ($43|0)!=(0|0);
       $45 = $44 ? 49 : 48;
       _SB_AppendChar($1,$45);
       $46 = ($$020|0)==(0);
       if ($46) {
        $$0$ph$be = $$0$ph44;
        break;
       }
       $47 = HEAP8[46896]|0;
       $48 = (_IsSpace($47)|0);
       $49 = ($48|0)==(0);
       if (!($49)) {
        while(1) {
         _NextChar();
         $50 = HEAP8[46896]|0;
         $51 = (_IsSpace($50)|0);
         $52 = ($51|0)==(0);
         if ($52) {
          break;
         }
        }
       }
       $53 = HEAP8[46896]|0;
       $54 = ($53<<24>>24)==(41);
       if ($54) {
        _NextChar();
        $$0$ph$be = $$0$ph44;
        break;
       } else {
        _PPError(32103,$vararg_buffer);
        $$0$ph$be = $$0$ph44;
        break;
       }
      }
     }
     $55 = (($$0$ph44) + 1)|0;
     $56 = (_strlen($2)|0);
     _SB_AppendBuf($1,$2,$56);
     $$0$ph$be = $55;
     break;
    }
   } else {
    while(1) {
     _NextChar();
     $9 = HEAP8[46896]|0;
     $10 = (_IsSpace($9)|0);
     $11 = ($10|0)==(0);
     if ($11) {
      break;
     }
    }
    $12 = HEAP32[$5>>2]|0;
    $13 = ($12|0)==(0);
    if ($13) {
     $18 = 0;
    } else {
     $14 = (($12) + -1)|0;
     $15 = HEAP32[$1>>2]|0;
     $16 = (($15) + ($14)|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17;
    }
    $19 = (_IsSpace($18)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     _SB_AppendChar($1,32);
     $$0$ph$be = $$0$ph44;
    } else {
     $$0$ph$be = $$0$ph44;
    }
   }
  } while(0);
  $$pr = HEAP8[46896]|0;
  $89 = ($$pr<<24>>24)==(0);
  if ($89) {
   $$0$ph$lcssa = $$0$ph$be;
   label = 43;
   break;
  } else {
   $$0$ph44 = $$0$ph$be;$6 = $$pr;
  }
 }
 if ((label|0) == 43) {
  (_InitLine($3)|0);
  STACKTOP = sp;return ($$0$ph$lcssa|0);
 }
 return (0)|0;
}
function _DoIf($0) {
 $0 = $0|0;
 var $$0$i = 0, $$sroa$0 = 0, $$sroa$011 = 0, $$sroa$4$0$copyload = 0, $$sroa$415$0$copyload = 0, $$sroa$6$0$copyload25 = 0, $$sroa$619$0$copyload24 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $vararg_buffer = sp + 240|0;
 $1 = sp + 176|0;
 $$sroa$011 = sp + 88|0;
 $$sroa$0 = sp;
 dest=$$sroa$011; src=44624; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$sroa$415$0$copyload = HEAP32[(44712)>>2]|0;
 $$sroa$619$0$copyload24 = HEAP32[(44716)>>2]|0;
 dest=$$sroa$0; src=44720; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$sroa$4$0$copyload = HEAP32[(44808)>>2]|0;
 $$sroa$6$0$copyload25 = HEAP32[(44812)>>2]|0;
 $2 = ($$sroa$415$0$copyload|0)==(0|0);
 if (!($2)) {
  (_UseLineInfo($$sroa$415$0$copyload)|0);
 }
 $3 = ($$sroa$4$0$copyload|0)==(0|0);
 if (!($3)) {
  (_UseLineInfo($$sroa$4$0$copyload)|0);
 }
 HEAP8[46962] = 1;
 $4 = HEAP32[11486]|0;
 $5 = ((($4)) + 8|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($4)) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[11473]|0;
 $8 = (_Pass1($7,$4)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = HEAP32[11486]|0;
  $11 = (_InitLine($10)|0);
  HEAP32[11486] = $11;
  $12 = HEAP32[11473]|0;
  $13 = ((($12)) + 8|0);
  HEAP32[$13>>2] = 0;
  $14 = ((($11)) + 8|0);
  HEAP32[$14>>2] = 0;
  $15 = ((($11)) + 4|0);
  HEAP32[$15>>2] = 0;
  _MacroReplacement($12,$11);
 }
 $16 = HEAP32[11486]|0;
 $17 = ((($16)) + 8|0);
 HEAP32[$17>>2] = 0;
 $18 = (_InitLine($16)|0);
 HEAP32[11486] = $18;
 $19 = HEAP32[11473]|0;
 _SB_AppendBuf($19,32679,2);
 $20 = HEAP32[11473]|0;
 _SB_Terminate($20);
 _NextToken();
 _NextToken();
 _ConstExpr(3,$1);
 HEAP8[46962] = 0;
 dest=44624; src=$$sroa$011; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(44712)>>2] = $$sroa$415$0$copyload;
 HEAP32[(44716)>>2] = $$sroa$619$0$copyload24;
 dest=44720; src=$$sroa$0; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[(44808)>>2] = $$sroa$4$0$copyload;
 HEAP32[(44812)>>2] = $$sroa$6$0$copyload25;
 $21 = ((($1)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 $24 = HEAP32[2064]|0;
 $25 = ($24|0)>(62);
 if ($25) {
  _PPError(32651,$vararg_buffer);
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $26 = (($24) + 1)|0;
 HEAP32[2064] = $26;
 $27 = ($0|0)==(0);
 $28 = (46963 + ($26)|0);
 if ($27) {
  HEAP8[$28>>0] = 4;
  $29 = $23&1;
  $$0$i = $29;
  STACKTOP = sp;return ($$0$i|0);
 } else {
  HEAP8[$28>>0] = 5;
  $$0$i = 1;
  STACKTOP = sp;return ($$0$i|0);
 }
 return (0)|0;
}
function _DoIfDef($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $2 = sp + 4|0;
 $3 = HEAP8[46896]|0;
 $4 = (_IsSpace($3)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  while(1) {
   _NextChar();
   $6 = HEAP8[46896]|0;
   $7 = (_IsSpace($6)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
  }
 }
 $9 = (_MacName($2)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_FindMacro($2)|0);
 $12 = ($11|0)!=(0|0);
 $13 = $12&1;
 $14 = HEAP32[2064]|0;
 $15 = ($14|0)>(62);
 if ($15) {
  _PPError(32651,$vararg_buffer);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $16 = (($14) + 1)|0;
 HEAP32[2064] = $16;
 $17 = ($0|0)==(0);
 $18 = (46963 + ($16)|0);
 if ($17) {
  HEAP8[$18>>0] = 4;
  $19 = $13 ^ $1;
  $$0 = $19;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP8[$18>>0] = 5;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _MacroReplacement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$us$i$i = 0, $$08$i$i = 0, $$idx$val$i$i = 0, $$idx$val7$i$i = 0, $$idx6$i$i = 0, $$idx6$val$i$i = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $2 = sp;
 $3 = sp + 32|0;
 $4 = (_InitLine($0)|0);
 $5 = HEAP8[46896]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  (_InitLine($4)|0);
  STACKTOP = sp;return;
 }
 $7 = ((($1)) + 4|0);
 $8 = ((($2)) + 12|0);
 $9 = ((($2)) + 28|0);
 $$idx6$i$i = ((($2)) + 8|0);
 while(1) {
  $10 = (_IsSym($3)|0);
  $11 = ($10|0)==(0);
  do {
   if ($11) {
    $38 = HEAP8[46896]|0;
    $39 = (_IsQuote($38)|0);
    $40 = ($39|0)==(0);
    if (!($40)) {
     _CopyQuotedString($1);
     break;
    }
    $43 = HEAP8[46896]|0;
    $44 = (_IsSpace($43)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $57 = HEAP8[46896]|0;
     $58 = $57 << 24 >> 24;
     _SB_AppendChar($1,$58);
     _NextChar();
     break;
    }
    $46 = HEAP32[$7>>2]|0;
    $47 = ($46|0)==(0);
    if ($47) {
     $52 = 0;
    } else {
     $48 = (($46) + -1)|0;
     $49 = HEAP32[$1>>2]|0;
     $50 = (($49) + ($48)|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = $51;
    }
    $53 = (_IsSpace($52)|0);
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = HEAP8[46896]|0;
     $56 = $55 << 24 >> 24;
     _SB_AppendChar($1,$56);
    }
    _NextChar();
   } else {
    $12 = (_FindMacro($3)|0);
    $13 = ($12|0)==(0|0);
    if (!($13)) {
     $14 = ((($12)) + 4|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0);
     if ($16) {
      $17 = ((($12)) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = ($18|0)>(-1);
      if ($19) {
       $$0$us$i$i = 0;
      } else {
       (_InitCollection($2)|0);
       ;HEAP32[$8>>2]=HEAP32[46076>>2]|0;HEAP32[$8+4>>2]=HEAP32[46076+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[46076+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[46076+12>>2]|0;
       HEAP32[$9>>2] = $12;
       _MacroArgSubst($2);
       HEAP32[$14>>2] = 1;
       _MacroReplacement($8,$1);
       HEAP32[$14>>2] = 0;
       $$idx$val7$i$i = HEAP32[$2>>2]|0;
       $32 = ($$idx$val7$i$i|0)==(0);
       if (!($32)) {
        $$08$i$i = 0;
        while(1) {
         $$idx6$val$i$i = HEAP32[$$idx6$i$i>>2]|0;
         $33 = (($$idx6$val$i$i) + ($$08$i$i<<2)|0);
         $34 = HEAP32[$33>>2]|0;
         _FreeStrBuf($34);
         $35 = (($$08$i$i) + 1)|0;
         $$idx$val$i$i = HEAP32[$2>>2]|0;
         $36 = ($35>>>0)<($$idx$val$i$i>>>0);
         if ($36) {
          $$08$i$i = $35;
         } else {
          break;
         }
        }
       }
       _DoneCollection($2);
       _SB_Done($8);
       break;
      }
      while(1) {
       $20 = HEAP8[46896]|0;
       $21 = (_IsSpace($20)|0);
       $22 = ($21|0)==(0);
       if (!($22)) {
        _NextChar();
        $$0$us$i$i = 1;
        continue;
       }
       $23 = HEAP8[46896]|0;
       $24 = ($23<<24>>24)==(0);
       if (!($24)) {
        $27 = $23;
        break;
       }
       $25 = (_NextLine()|0);
       $26 = ($25|0)==(0);
       if ($26) {
        label = 11;
        break;
       } else {
        $$0$us$i$i = 1;
       }
      }
      if ((label|0) == 11) {
       label = 0;
       $$pr = HEAP8[46896]|0;
       $27 = $$pr;
      }
      $28 = ($27<<24>>24)==(40);
      if ($28) {
       _MacroCall($1,$12);
       break;
      }
      $29 = ((($12)) + 45|0);
      $30 = (_strlen($29)|0);
      _SB_AppendBuf($1,$29,$30);
      $31 = ($$0$us$i$i|0)==(0);
      if ($31) {
       break;
      }
      _SB_AppendChar($1,32);
      break;
     }
    }
    $37 = (_strlen($3)|0);
    _SB_AppendBuf($1,$3,$37);
   }
  } while(0);
  $41 = HEAP8[46896]|0;
  $42 = ($41<<24>>24)==(0);
  if ($42) {
   break;
  }
 }
 (_InitLine($4)|0);
 STACKTOP = sp;return;
}
function _MacroCall($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$0$i = 0, $$0$ph$i = 0, $$0$ph$i$phi = 0, $$0$us$i$i = 0, $$08$i = 0, $$idx$i = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i9 = 0, $$idx$val16 = 0, $$idx$val7$i = 0, $$idx12$val$i = 0, $$idx13$val$i = 0, $$idx14$val$i = 0, $$idx6$i = 0, $$idx6$val = 0, $$idx6$val$i = 0, $$pr$i = 0, $$pre$i = 0;
 var $$pre37$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $or$cond$i = 0, $or$cond11$i = 0, $or$cond30$i = 0, $or$cond9$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = sp + 16|0;
 _NextChar();
 (_InitCollection($3)|0);
 $4 = ((($3)) + 12|0);
 ;HEAP32[$4>>2]=HEAP32[46076>>2]|0;HEAP32[$4+4>>2]=HEAP32[46076+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[46076+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[46076+12>>2]|0;
 $5 = ((($3)) + 28|0);
 HEAP32[$5>>2] = $1;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $$idx$i = ((($2)) + 4|0);
 $6 = ((($2)) + 8|0);
 $$0$ph$i = 0;
 L1: while(1) {
  $$pr$i = HEAP8[46896]|0;
  $7 = ($$pr$i<<24>>24)==(40);
  if ($7) {
   _SB_AppendChar($2,40);
   _NextChar();
   $10 = (($$0$ph$i) + 1)|0;
   $$0$ph$i = $10;
   continue;
  }
  $8 = (_IsQuote($$pr$i)|0);
  $9 = ($8|0)==(0);
  L6: do {
   if ($9) {
    L7: while(1) {
     $13 = HEAP8[46896]|0;
     switch ($13<<24>>24) {
     case 41: case 44:  {
      label = 8;
      break L7;
      break;
     }
     default: {
      $$0$us$i$i = 0;$46 = $13;
     }
     }
     while(1) {
      $47 = (_IsSpace($46)|0);
      $48 = ($47|0)==(0);
      if ($48) {
       $49 = HEAP8[46896]|0;
       $50 = ($49<<24>>24)==(0);
       if (!($50)) {
        break;
       }
       $51 = (_NextLine()|0);
       $52 = ($51|0)==(0);
       if ($52) {
        break;
       }
      } else {
       _NextChar();
      }
      $$pre37$i = HEAP8[46896]|0;
      $$0$us$i$i = 1;$46 = $$pre37$i;
     }
     $53 = ($$0$us$i$i|0)==(0);
     if (!($53)) {
      label = 29;
      break;
     }
     $55 = HEAP8[46896]|0;
     $56 = ($55<<24>>24)==(47);
     $57 = HEAP8[46897]|0;
     $58 = ($57<<24>>24)==(42);
     $or$cond$i = $56 & $58;
     if ($or$cond$i) {
      label = 32;
      break;
     }
     $60 = (_IS_Get(8668)|0);
     $61 = ($60|0)>(0);
     $62 = HEAP8[46896]|0;
     $63 = ($62<<24>>24)==(47);
     $or$cond9$i = $61 & $63;
     $64 = HEAP8[46897]|0;
     $65 = ($64<<24>>24)==(47);
     $or$cond11$i = $or$cond9$i & $65;
     if (!($or$cond11$i)) {
      label = 40;
      break;
     }
     $$idx$val$i = HEAP32[$$idx$i>>2]|0;
     $66 = ($$idx$val$i|0)==(0);
     if (!($66)) {
      _SB_AppendChar($2,32);
     }
     L22: while(1) {
      _NextChar();
      $67 = HEAP8[46896]|0;
      switch ($67<<24>>24) {
      case 10:  {
       label = 39;
       break L7;
       break;
      }
      case 0:  {
       break L22;
       break;
      }
      default: {
      }
      }
     }
     $11 = (_IsQuote(0)|0);
     $12 = ($11|0)==(0);
     if (!($12)) {
      break L6;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $14 = ($$0$ph$i|0)==(0);
     if (!($14)) {
      $15 = ($13<<24>>24)==(41);
      $16 = $15 << 31 >> 31;
      $$$0$i = (($16) + ($$0$ph$i))|0;
      $17 = $13 << 24 >> 24;
      _SB_AppendChar($2,$17);
      _NextChar();
      $$0$ph$i = $$$0$i;
      continue L1;
     }
     $18 = ($13<<24>>24)==(44);
     if ($18) {
      $19 = HEAP32[$5>>2]|0;
      $20 = ((($19)) + 44|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = ((($19)) + 8|0);
       $24 = HEAP32[$23>>2]|0;
       $$idx$val$i$i = HEAP32[$3>>2]|0;
       $25 = (($$idx$val$i$i) + 1)|0;
       $26 = ($24|0)==($25|0);
       if ($26) {
        _SB_AppendChar($2,44);
        _NextChar();
        $$0$ph$i = 0;
        continue L1;
       }
      }
     }
     while(1) {
      $27 = HEAP32[$$idx$i>>2]|0;
      $28 = ($27|0)==(0);
      if ($28) {
       $33 = 0;
      } else {
       $29 = (($27) + -1)|0;
       $30 = HEAP32[$2>>2]|0;
       $31 = (($30) + ($29)|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32;
      }
      $34 = (_IsSpace($33)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       break;
      }
      _SB_Drop($2,1);
     }
     $36 = HEAP8[46896]|0;
     $37 = ($36<<24>>24)==(41);
     $$idx14$val$i = HEAP32[$$idx$i>>2]|0;
     $38 = ($$idx14$val$i|0)==(0);
     $or$cond30$i = $37 & $38;
     if ($or$cond30$i) {
      $39 = HEAP32[$5>>2]|0;
      $40 = ((($39)) + 8|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($41|0)>(0);
      if (!($42)) {
       label = 20;
       break L1;
      }
     }
     $43 = (_NewStrBuf()|0);
     _SB_Move($43,$2);
     $44 = HEAP32[$3>>2]|0;
     _CollInsert($3,$43,$44);
     $$pre$i = HEAP8[46896]|0;
     $45 = ($$pre$i<<24>>24)==(41);
     _NextChar();
     if ($45) {
      break L1;
     }
     HEAP32[$6>>2] = 0;
     HEAP32[$$idx$i>>2] = 0;
     $$0$ph$i = 0;
     continue L1;
    }
    else if ((label|0) == 29) {
     label = 0;
     $$idx13$val$i = HEAP32[$$idx$i>>2]|0;
     $54 = ($$idx13$val$i|0)==(0);
     if ($54) {
      $$0$ph$i$phi = $$0$ph$i;$$0$ph$i = $$0$ph$i$phi;
      continue L1;
     }
     _SB_AppendChar($2,32);
     $$0$ph$i$phi = $$0$ph$i;$$0$ph$i = $$0$ph$i$phi;
     continue L1;
    }
    else if ((label|0) == 32) {
     label = 0;
     $$idx12$val$i = HEAP32[$$idx$i>>2]|0;
     $59 = ($$idx12$val$i|0)==(0);
     if (!($59)) {
      _SB_AppendChar($2,32);
     }
     _OldStyleComment();
     $$0$ph$i$phi = $$0$ph$i;$$0$ph$i = $$0$ph$i$phi;
     continue L1;
    }
    else if ((label|0) == 39) {
     label = 0;
     _NextChar();
     $$0$ph$i$phi = $$0$ph$i;$$0$ph$i = $$0$ph$i$phi;
     continue L1;
    }
    else if ((label|0) == 40) {
     label = 0;
     $68 = ($62<<24>>24)==(0);
     if ($68) {
      label = 41;
      break L1;
     }
     $71 = $62 << 24 >> 24;
     _SB_AppendChar($2,$71);
     _NextChar();
     $$0$ph$i$phi = $$0$ph$i;$$0$ph$i = $$0$ph$i$phi;
     continue L1;
    }
   }
  } while(0);
  _CopyQuotedString($2);
  $$0$ph$i$phi = $$0$ph$i;$$0$ph$i = $$0$ph$i$phi;
 }
 if ((label|0) == 20) {
  _NextChar();
 }
 else if ((label|0) == 41) {
  $69 = HEAP32[$5>>2]|0;
  $70 = ((($69)) + 45|0);
  HEAP32[$vararg_buffer>>2] = $70;
  _PPError(32495,$vararg_buffer);
  _ClearLine();
 }
 _SB_Done($2);
 $$idx6$val = HEAP32[$3>>2]|0;
 $72 = ((($1)) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($$idx6$val|0)==($73|0);
 if (!($74)) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  _PPError(32542,$vararg_buffer1);
  $$idx$val16 = HEAP32[$3>>2]|0;
  $75 = HEAP32[$72>>2]|0;
  $76 = ($$idx$val16>>>0)<($75>>>0);
  if ($76) {
   while(1) {
    $77 = (_NewStrBuf()|0);
    _SB_Move($77,$2);
    $78 = HEAP32[$3>>2]|0;
    _CollInsert($3,$77,$78);
    $$idx$val = HEAP32[$3>>2]|0;
    $79 = HEAP32[$72>>2]|0;
    $80 = ($$idx$val>>>0)<($79>>>0);
    if (!($80)) {
     break;
    }
   }
  }
 }
 _MacroArgSubst($3);
 $81 = ((($1)) + 4|0);
 HEAP32[$81>>2] = 1;
 _MacroReplacement($4,$0);
 HEAP32[$81>>2] = 0;
 $$idx$val7$i = HEAP32[$3>>2]|0;
 $82 = ($$idx$val7$i|0)==(0);
 if ($82) {
  _DoneCollection($3);
  _SB_Done($4);
  STACKTOP = sp;return;
 }
 $$idx6$i = ((($3)) + 8|0);
 $$08$i = 0;
 while(1) {
  $$idx6$val$i = HEAP32[$$idx6$i>>2]|0;
  $83 = (($$idx6$val$i) + ($$08$i<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  _FreeStrBuf($84);
  $85 = (($$08$i) + 1)|0;
  $$idx$val$i9 = HEAP32[$3>>2]|0;
  $86 = ($85>>>0)<($$idx$val$i9>>>0);
  if ($86) {
   $$08$i = $85;
  } else {
   break;
  }
 }
 _DoneCollection($3);
 _SB_Done($4);
 STACKTOP = sp;return;
}
function _MacroArgSubst($0) {
 $0 = $0|0;
 var $$0$i$lcssa = 0, $$idx = 0, $$idx$val = 0, $$idx41$val = 0, $$idx42 = 0, $$idx42$val = 0, $$idx43$val = 0, $$idx44 = 0, $$idx44$val = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $or$cond40 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $$idx = ((($3)) + 36|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 HEAP32[$$idx>>2] = 0;
 $4 = ((($3)) + 28|0);
 $5 = (_InitLine($4)|0);
 $6 = HEAP8[46896]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  (_InitLine($5)|0);
  $111 = HEAP32[$2>>2]|0;
  $112 = ((($111)) + 36|0);
  HEAP32[$112>>2] = $$idx$val;
  STACKTOP = sp;return;
 }
 $8 = ((($0)) + 12|0);
 $9 = ((($0)) + 16|0);
 $10 = ((($0)) + 8|0);
 L4: while(1) {
  $11 = (_IsSym($1)|0);
  $12 = ($11|0)==(0);
  do {
   if ($12) {
    $36 = HEAP8[46896]|0;
    $37 = ($36<<24>>24)==(35);
    $38 = HEAP8[46897]|0;
    $39 = ($38<<24>>24)==(35);
    $or$cond40 = $37 & $39;
    if ($or$cond40) {
     _NextChar();
     _NextChar();
     $40 = HEAP8[46896]|0;
     $41 = (_IsSpace($40)|0);
     $42 = ($41|0)==(0);
     if (!($42)) {
      while(1) {
       _NextChar();
       $43 = HEAP8[46896]|0;
       $44 = (_IsSpace($43)|0);
       $45 = ($44|0)==(0);
       if ($45) {
        break;
       }
      }
     }
     while(1) {
      $46 = HEAP32[$9>>2]|0;
      $47 = ($46|0)==(0);
      if ($47) {
       $52 = 0;
      } else {
       $48 = (($46) + -1)|0;
       $49 = HEAP32[$8>>2]|0;
       $50 = (($49) + ($48)|0);
       $51 = HEAP8[$50>>0]|0;
       $52 = $51;
      }
      $53 = (_IsSpace($52)|0);
      $54 = ($53|0)==(0);
      if ($54) {
       break;
      }
      _SB_Drop($8,1);
     }
     $55 = (_IsSym($1)|0);
     $56 = ($55|0)==(0);
     if ($56) {
      break;
     }
     $57 = HEAP32[$2>>2]|0;
     $58 = (_FindMacroArg($57,$1)|0);
     $59 = ($58|0)>(-1);
     if (!($59)) {
      $69 = (_strlen($1)|0);
      _SB_AppendBuf($8,$1,$69);
      break;
     }
     $60 = HEAP32[$0>>2]|0;
     $61 = ($60>>>0)>($58>>>0);
     if (!($61)) {
      label = 24;
      break L4;
     }
     $64 = HEAP32[$10>>2]|0;
     $65 = (($64) + ($58<<2)|0);
     $66 = HEAP32[$65>>2]|0;
     $$idx41$val = HEAP32[$66>>2]|0;
     $$idx42 = ((($66)) + 4|0);
     $$idx42$val = HEAP32[$$idx42>>2]|0;
     _SB_AppendBuf($8,$$idx41$val,$$idx42$val);
     break;
    }
    if ($37) {
     $70 = HEAP32[$2>>2]|0;
     $71 = ((($70)) + 8|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)>(-1);
     if ($73) {
      _NextChar();
      $74 = HEAP8[46896]|0;
      $75 = (_IsSpace($74)|0);
      $76 = ($75|0)==(0);
      if (!($76)) {
       while(1) {
        _NextChar();
        $77 = HEAP8[46896]|0;
        $78 = (_IsSpace($77)|0);
        $79 = ($78|0)==(0);
        if ($79) {
         break;
        }
       }
      }
      $80 = (_IsSym($1)|0);
      $81 = ($80|0)==(0);
      if (!($81)) {
       $82 = HEAP32[$2>>2]|0;
       $83 = (_FindMacroArg($82,$1)|0);
       $84 = ($83|0)<(0);
       if (!($84)) {
        $85 = HEAP32[$0>>2]|0;
        $86 = ($85>>>0)>($83>>>0);
        if (!($86)) {
         label = 36;
         break L4;
        }
        $89 = HEAP32[$10>>2]|0;
        $90 = (($89) + ($83<<2)|0);
        $91 = HEAP32[$90>>2]|0;
        $92 = ((($91)) + 8|0);
        HEAP32[$92>>2] = 0;
        _SB_AppendChar($8,34);
        $93 = HEAP32[$92>>2]|0;
        $94 = ((($91)) + 4|0);
        $95 = HEAP32[$94>>2]|0;
        $96 = ($93>>>0)<($95>>>0);
        L37: do {
         if ($96) {
          $98 = $93;
          while(1) {
           $97 = (($98) + 1)|0;
           HEAP32[$92>>2] = $97;
           $99 = HEAP32[$91>>2]|0;
           $100 = (($99) + ($98)|0);
           $101 = HEAP8[$100>>0]|0;
           $102 = $101 << 24 >> 24;
           $103 = ($101<<24>>24)==(0);
           if ($103) {
            break L37;
           }
           switch ($102|0) {
           case 92: case 34:  {
            _SB_AppendChar($8,92);
            break;
           }
           default: {
           }
           }
           _SB_AppendChar($8,$102);
           $104 = HEAP32[$92>>2]|0;
           $105 = HEAP32[$94>>2]|0;
           $106 = ($104>>>0)<($105>>>0);
           if ($106) {
            $98 = $104;
           } else {
            break L37;
           }
          }
         }
        } while(0);
        _SB_AppendChar($8,34);
        break;
       }
      }
      _PPError(32454,$vararg_buffer);
      break;
     }
    }
    $107 = (_IsQuote($36)|0);
    $108 = ($107|0)==(0);
    if ($108) {
     $109 = HEAP8[46896]|0;
     $110 = $109 << 24 >> 24;
     _SB_AppendChar($8,$110);
     _NextChar();
     break;
    } else {
     _CopyQuotedString($8);
     break;
    }
   } else {
    $13 = HEAP32[$2>>2]|0;
    $14 = (_FindMacroArg($13,$1)|0);
    $15 = ($14|0)>(-1);
    if (!($15)) {
     $35 = (_strlen($1)|0);
     _SB_AppendBuf($8,$1,$35);
     break;
    }
    $16 = HEAP32[$0>>2]|0;
    $17 = ($16>>>0)>($14>>>0);
    if (!($17)) {
     label = 6;
     break L4;
    }
    $20 = HEAP32[$10>>2]|0;
    $21 = (($20) + ($14<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP8[46896]|0;
    $24 = (_IsSpace($23)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     $$0$i$lcssa = 0;
    } else {
     while(1) {
      _NextChar();
      $26 = HEAP8[46896]|0;
      $27 = (_IsSpace($26)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       $$0$i$lcssa = 1;
       break;
      }
     }
    }
    $29 = HEAP8[46896]|0;
    $30 = ($29<<24>>24)==(35);
    $31 = HEAP8[46897]|0;
    $32 = ($31<<24>>24)==(35);
    $or$cond = $30 & $32;
    if ($or$cond) {
     $$idx43$val = HEAP32[$22>>2]|0;
     $$idx44 = ((($22)) + 4|0);
     $$idx44$val = HEAP32[$$idx44>>2]|0;
     _SB_AppendBuf($8,$$idx43$val,$$idx44$val);
     break;
    }
    $33 = ((($22)) + 8|0);
    HEAP32[$33>>2] = 0;
    _MacroReplacement($22,$8);
    $34 = ($$0$i$lcssa|0)==(0);
    if (!($34)) {
     _SB_AppendChar($8,32);
    }
   }
  } while(0);
  $67 = HEAP8[46896]|0;
  $68 = ($67<<24>>24)==(0);
  if ($68) {
   label = 47;
   break;
  }
 }
 if ((label|0) == 6) {
  $18 = HEAP32[3332]|0;
  $19 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$18 & 1]($19,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $62 = HEAP32[3332]|0;
  $63 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$62 & 1]($63,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 36) {
  $87 = HEAP32[3332]|0;
  $88 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$87 & 1]($88,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 47) {
  (_InitLine($5)|0);
  $111 = HEAP32[$2>>2]|0;
  $112 = ((($111)) + 36|0);
  HEAP32[$112>>2] = $$idx$val;
  STACKTOP = sp;return;
 }
}
function _CopyQuotedString($0) {
 $0 = $0|0;
 var $$ = 0, $$6 = 0, $$lcssa = 0, $$lcssa4 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $not$ = 0, $not$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[46896]|0;
 $2 = $1 << 24 >> 24;
 _SB_AppendChar($0,$2);
 _NextChar();
 $3 = HEAP8[46896]|0;
 $4 = ($3<<24>>24)==(0);
 $5 = ($3<<24>>24)!=($1<<24>>24);
 $not$5 = $4 ^ 1;
 $$6 = $5 & $not$5;
 $6 = $3 << 24 >> 24;
 if ($$6) {
  $7 = $3;$9 = $6;
  while(1) {
   $8 = ($7<<24>>24)==(92);
   if ($8) {
    _SB_AppendChar($0,$9);
    _NextChar();
    $$pre = HEAP8[46896]|0;
    $11 = $$pre;
   } else {
    $11 = $7;
   }
   $10 = $11 << 24 >> 24;
   _SB_AppendChar($0,$10);
   _NextChar();
   $12 = HEAP8[46896]|0;
   $13 = ($12<<24>>24)==(0);
   $14 = ($12<<24>>24)!=($1<<24>>24);
   $not$ = $13 ^ 1;
   $$ = $14 & $not$;
   $15 = $12 << 24 >> 24;
   if ($$) {
    $7 = $12;$9 = $15;
   } else {
    $$lcssa = $15;$$lcssa4 = $13;
    break;
   }
  }
 } else {
  $$lcssa = $6;$$lcssa4 = $4;
 }
 if ($$lcssa4) {
  return;
 }
 _SB_AppendChar($0,$$lcssa);
 _NextChar();
 return;
}
function _OldStyleComment() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = (_GetCurrentLine()|0);
 _NextChar();
 _NextChar();
 $1 = HEAP8[46896]|0;
 $2 = ($1<<24>>24)==(42);
 $3 = HEAP8[46897]|0;
 $4 = ($3<<24>>24)==(47);
 $or$cond3 = $2 & $4;
 L1: do {
  if (!($or$cond3)) {
   $12 = $3;$5 = $1;
   L2: while(1) {
    switch ($5<<24>>24) {
    case 0:  {
     $6 = (_NextLine()|0);
     $7 = ($6|0)==(0);
     if ($7) {
      break L2;
     }
     break;
    }
    case 47:  {
     $13 = ($12<<24>>24)==(42);
     if ($13) {
      _PPWarning(32623,$vararg_buffer1);
      label = 8;
     } else {
      label = 8;
     }
     break;
    }
    default: {
     label = 8;
    }
    }
    if ((label|0) == 8) {
     label = 0;
     _NextChar();
    }
    $8 = HEAP8[46896]|0;
    $9 = ($8<<24>>24)==(42);
    $10 = HEAP8[46897]|0;
    $11 = ($10<<24>>24)==(47);
    $or$cond = $9 & $11;
    if ($or$cond) {
     break L1;
    } else {
     $12 = $10;$5 = $8;
    }
   }
   HEAP32[$vararg_buffer>>2] = $0;
   _PPError(32572,$vararg_buffer);
   STACKTOP = sp;return;
  }
 } while(0);
 _NextChar();
 _NextChar();
 STACKTOP = sp;return;
}
function _MacName($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_IsSym($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _PPError(37770,$vararg_buffer);
  _ClearLine();
  $$0 = 0;
 } else {
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ED_Init($0) {
 $0 = $0|0;
 var $$sroa$0$0$$sroa_idx = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 $1 = (+_FP_D_Make(0.0));
 $$sroa$0$0$$sroa_idx = ((($0)) + 24|0);
 HEAPF64[$$sroa$0$0$$sroa_idx>>3] = $1;
 $2 = ((($0)) + 32|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 36|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 40|0);
 HEAP32[$4>>2] = 0;
 return ($0|0);
}
function _ED_MakeBitField($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 | 512;
 HEAP32[$3>>2] = $5;
 $6 = ((($0)) + 36|0);
 HEAP32[$6>>2] = $1;
 $7 = ((($0)) + 40|0);
 HEAP32[$7>>2] = $2;
 return;
}
function _ED_SetCodeRange($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 | 4096;
 HEAP32[$3>>2] = $5;
 $6 = ((($0)) + 44|0);
 $7 = $1;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = ((($0)) + 52|0);
 $18 = $2;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $17;
 $25 = $24;
 HEAP32[$25>>2] = $20;
 $26 = (($24) + 4)|0;
 $27 = $26;
 HEAP32[$27>>2] = $23;
 return;
}
function _ED_CodeRangeIsEmpty($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 4096;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,32763,32790,98);
  // unreachable;
 } else {
  $7 = ((($0)) + 44|0);
  $8 = ((($0)) + 52|0);
  $9 = (_CodeRangeIsEmpty($7,$8)|0);
  return ($9|0);
 }
 return (0)|0;
}
function _ED_GetLabelName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx12 = 0, $$idx12$val = 0, $$idx13 = 0, $$idx13$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $trunc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr14 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer18 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 $$idx12 = ((($0)) + 8|0);
 $$idx12$val = HEAP32[$$idx12>>2]|0;
 $trunc = $$idx12$val&255;
 switch ($trunc<<24>>24) {
 case 1:  {
  $5 = $4 & 65535;
  HEAP32[$vararg_buffer>>2] = $5;
  _SB_Printf(45948,34414,$vararg_buffer);
  $17 = HEAP32[11487]|0;
  STACKTOP = sp;return ($17|0);
  break;
 }
 case 4: case 2:  {
  $6 = ($4|0)==(0);
  $7 = HEAP32[$0>>2]|0;
  $$idx13 = ((($7)) + 32|0);
  $$idx13$val = HEAP32[$$idx13>>2]|0;
  if ($6) {
   HEAP32[$vararg_buffer5>>2] = $$idx13$val;
   _SB_Printf(45948,32813,$vararg_buffer5);
   $17 = HEAP32[11487]|0;
   STACKTOP = sp;return ($17|0);
  } else {
   HEAP32[$vararg_buffer1>>2] = $$idx13$val;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $4;
   _SB_Printf(45948,32806,$vararg_buffer1);
   $17 = HEAP32[11487]|0;
   STACKTOP = sp;return ($17|0);
  }
  break;
 }
 case 8:  {
  $8 = ((($0)) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($4))|0;
  $11 = $10 & 65535;
  HEAP32[$vararg_buffer8>>2] = $11;
  _SB_Printf(45948,32816,$vararg_buffer8);
  $17 = HEAP32[11487]|0;
  STACKTOP = sp;return ($17|0);
  break;
 }
 case -128:  {
  $12 = ($4|0)==(0);
  $13 = ((($0)) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (_LocalLabelName($14)|0);
  if ($12) {
   HEAP32[$vararg_buffer15>>2] = $15;
   _SB_Printf(45948,32813,$vararg_buffer15);
   $17 = HEAP32[11487]|0;
   STACKTOP = sp;return ($17|0);
  } else {
   HEAP32[$vararg_buffer11>>2] = $15;
   $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
   HEAP32[$vararg_ptr14>>2] = $4;
   _SB_Printf(45948,32806,$vararg_buffer11);
   $17 = HEAP32[11487]|0;
   STACKTOP = sp;return ($17|0);
  }
  break;
 }
 default: {
  $16 = $$idx12$val & 255;
  HEAP32[$vararg_buffer18>>2] = $16;
  _Internal(32827,$vararg_buffer18);
  // unreachable;
 }
 }
 return (0)|0;
}
function _ED_GetStackOffs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $2 = $$idx$val & 255;
 $3 = ($2|0)==(16);
 if (!($3)) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,32871,32790,163);
  // unreachable;
 }
 $6 = ((($0)) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[11252]|0;
 $9 = (($7) - ($8))|0;
 $10 = (($9) + ($1))|0;
 $11 = ($10|0)>(-1);
 if ($11) {
  return ($10|0);
 } else {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,32892,32790,165);
  // unreachable;
 }
 return (0)|0;
}
function _ED_MakeConstAbs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sroa$0$0$$sroa_idx = 0, $10 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $3 = ((($0)) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 4096;
 $7 = $6 | 1;
 HEAP32[$4>>2] = $7;
 $8 = ((($0)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 16|0);
 HEAP32[$9>>2] = $1;
 $10 = (+_FP_D_Make(0.0));
 $$sroa$0$0$$sroa_idx = ((($0)) + 24|0);
 HEAPF64[$$sroa$0$0$$sroa_idx>>3] = $10;
 return ($0|0);
}
function _ED_MakeConstAbsInt($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sroa$0$0$$sroa_idx = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 10940;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4096;
 $6 = $5 | 1;
 HEAP32[$3>>2] = $6;
 $7 = ((($0)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($0)) + 16|0);
 HEAP32[$8>>2] = $1;
 $9 = (+_FP_D_Make(0.0));
 $$sroa$0$0$$sroa_idx = ((($0)) + 24|0);
 HEAPF64[$$sroa$0$0$$sroa_idx>>3] = $9;
 return ($0|0);
}
function _ED_MakeRValExpr($0) {
 $0 = $0|0;
 var $$sroa$0$0$$sroa_idx = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -4096;
 $4 = $3 | 64;
 HEAP32[$1>>2] = $4;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = (+_FP_D_Make(0.0));
 $$sroa$0$0$$sroa_idx = ((($0)) + 24|0);
 HEAPF64[$$sroa$0$0$$sroa_idx>>3] = $7;
 return ($0|0);
}
function _ED_MakeLValExpr($0) {
 $0 = $0|0;
 var $$sroa$0$0$$sroa_idx = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -4096;
 $4 = $3 | 320;
 HEAP32[$1>>2] = $4;
 $5 = ((($0)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = (+_FP_D_Make(0.0));
 $$sroa$0$0$$sroa_idx = ((($0)) + 24|0);
 HEAPF64[$$sroa$0$0$$sroa_idx>>3] = $7;
 return ($0|0);
}
function _ED_IsConst($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, $$lobit$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$lobit$i = $$idx$val & 256;
 $1 = ($$lobit$i|0)==(0);
 $2 = $$idx$val & 143;
 $3 = ($2|0)!=(0);
 $4 = $1 & $3;
 $5 = $4&1;
 return ($5|0);
}
function _ED_IsConstAbsInt($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 511;
 $4 = ($3|0)==(1);
 if (!($4)) {
  $10 = 0;
  $9 = $10&1;
  return ($9|0);
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $$idx$val = HEAP32[$6>>2]|0;
 $7 = $$idx$val & 112;
 $8 = ($7|0)==(16);
 $10 = $8;
 $9 = $10&1;
 return ($9|0);
}
function _ED_IsNullPtr($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1023;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = ((($0)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = ((($0)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $$idx$val = HEAP32[$9>>2]|0;
   $10 = $$idx$val & 112;
   $11 = ($10|0)==(16);
   $13 = $11;
  } else {
   $13 = 0;
  }
 } else {
  $13 = 0;
 }
 $12 = $13&1;
 return ($12|0);
}
function _ED_IsBool($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $$idx$val = HEAP32[$2>>2]|0;
 $3 = $$idx$val & 112;
 $trunc = $3&255;
 $trunc$clear = $trunc & 127;
 switch ($trunc$clear<<24>>24) {
 case 48: case 32: case 16:  {
  $4 = 1;
  return ($4|0);
  break;
 }
 default: {
 }
 }
 $4 = 0;
 return ($4|0);
}
function _ReplaceType($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_TypeDup($1)|0);
 HEAP32[$2>>2] = $4;
 return ($3|0);
}
function _Test($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$lobit$i = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond10 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp + 64|0;
 $2 = sp;
 _BoolExpr(4,$2);
 $$idx = ((($2)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $3 = $$idx$val & 511;
 $4 = ($3|0)==(1);
 do {
  if ($4) {
   $5 = ((($2)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)!=(0);
   $8 = $7&1;
   $9 = $6 | $1;
   $10 = ($9|0)==(0);
   if ($10) {
    _g_jump($0);
    _Warning(32902,$vararg_buffer);
    $$0 = $8;
    break;
   }
   $$not = ($1|0)==(0);
   $11 = ($6|0)==(0);
   $or$cond10 = $$not | $11;
   if ($or$cond10) {
    $$0 = $8;
   } else {
    _g_jump($0);
    $$0 = $8;
   }
  } else {
   $$lobit$i = $$idx$val & 2048;
   $12 = ($$lobit$i|0)==(0);
   if ($12) {
    $13 = $$idx$val | 1024;
    HEAP32[$$idx>>2] = $13;
   }
   _LoadExpr(512,$2);
   $14 = ($1|0)==(0);
   if ($14) {
    _g_falsejump(0,$0);
    $$0 = 0;
    break;
   } else {
    _g_truejump(0,$0);
    $$0 = 0;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _TestInParens($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_ConsumeLParen()|0);
 $2 = (_Test($0,$1)|0);
 (_ConsumeRParen()|0);
 return ($2|0);
}
function _OptPush1($0) {
 $0 = $0|0;
 var $$034$lcssa = 0, $$03439 = 0, $$040 = 0, $$1 = 0, $$idx$i = 0, $$idx$i36 = 0, $$idx$val$i = 0, $$idx$val$i37 = 0, $$idx$val$i38 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i38 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i38|0)==(0);
 if ($1) {
  $$034$lcssa = 0;
  return ($$034$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03439 = 0;$$040 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$040<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strcmp($9,36890)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($5)) + 40|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ((($13)) + 4|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = ($15&65535)<(254);
    if ($16) {
     $17 = (_CS_GetNextEntry($0,$$040)|0);
     $18 = ($17|0)==(0|0);
     if ($18) {
      $$1 = $$03439;
     } else {
      $$idx$i36 = ((($17)) + 24|0);
      $$idx$val$i37 = HEAP32[$$idx$i36>>2]|0;
      $19 = ($$idx$val$i37|0)==(0);
      if ($19) {
       $20 = HEAP8[$17>>0]|0;
       $21 = ($20<<24>>24)==(37);
       if ($21) {
        $22 = ((($17)) + 4|0);
        $23 = HEAP32[$22>>2]|0;
        $24 = (_strcmp($23,35341)|0);
        $25 = ($24|0)==(0);
        if ($25) {
         $26 = (($$040) + 2)|0;
         $27 = (_RegAXUsed($0,$26)|0);
         $28 = ($27|0)==(0);
         if ($28) {
          $29 = HEAP32[$12>>2]|0;
          $30 = ((($29)) + 4|0);
          $31 = HEAP16[$30>>1]|0;
          $32 = $31 << 16 >> 16;
          $33 = (($32) + 2)|0;
          $34 = (_MakeHexArg($33)|0);
          $35 = ((($5)) + 36|0);
          $36 = HEAP32[$35>>2]|0;
          $37 = (_NewCodeEntry(42,2,$34,0,$36)|0);
          _CS_InsertEntry($0,$37,$26);
          $38 = ((($17)) + 36|0);
          $39 = HEAP32[$38>>2]|0;
          $40 = (_NewCodeEntry(37,6,35467,0,$39)|0);
          $41 = (($$040) + 3)|0;
          _CS_InsertEntry($0,$40,$41);
          _CS_DelEntries($0,$$040,2);
          $42 = (($$03439) + 1)|0;
          $$1 = $42;
         } else {
          $$1 = $$03439;
         }
        } else {
         $$1 = $$03439;
        }
       } else {
        $$1 = $$03439;
       }
      } else {
       $$1 = $$03439;
      }
     }
    } else {
     $$1 = $$03439;
    }
   } else {
    $$1 = $$03439;
   }
  } else {
   $$1 = $$03439;
  }
  $43 = (($$040) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $44 = ($43>>>0)<($$idx$val$i>>>0);
  if ($44) {
   $$03439 = $$1;$$040 = $43;
  } else {
   $$034$lcssa = $$1;
   break;
  }
 }
 return ($$034$lcssa|0);
}
function _OptPush2($0) {
 $0 = $0|0;
 var $$022$lcssa = 0, $$02227 = 0, $$028 = 0, $$1 = 0, $$idx$i = 0, $$idx$i24 = 0, $$idx$val$i = 0, $$idx$val$i25 = 0, $$idx$val$i26 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i26 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i26|0)==(0);
 if ($1) {
  $$022$lcssa = 0;
  return ($$022$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02227 = 0;$$028 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$028<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strcmp($9,35199)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (_CS_GetNextEntry($0,$$028)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$1 = $$02227;
    } else {
     $$idx$i24 = ((($12)) + 24|0);
     $$idx$val$i25 = HEAP32[$$idx$i24>>2]|0;
     $14 = ($$idx$val$i25|0)==(0);
     if ($14) {
      $15 = HEAP8[$12>>0]|0;
      $16 = ($15<<24>>24)==(37);
      if ($16) {
       $17 = ((($12)) + 4|0);
       $18 = HEAP32[$17>>2]|0;
       $19 = (_strcmp($18,35341)|0);
       $20 = ($19|0)==(0);
       if ($20) {
        $21 = (($$02227) + 1)|0;
        $22 = (($$028) + 2)|0;
        $23 = ((($12)) + 36|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (_NewCodeEntry(37,6,35452,0,$24)|0);
        _CS_InsertEntry($0,$25,$22);
        _CS_DelEntries($0,$$028,2);
        $$1 = $21;
       } else {
        $$1 = $$02227;
       }
      } else {
       $$1 = $$02227;
      }
     } else {
      $$1 = $$02227;
     }
    }
   } else {
    $$1 = $$02227;
   }
  } else {
   $$1 = $$02227;
  }
  $26 = (($$028) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $27 = ($26>>>0)<($$idx$val$i>>>0);
  if ($27) {
   $$02227 = $$1;$$028 = $26;
  } else {
   $$022$lcssa = $$1;
   break;
  }
 }
 return ($$022$lcssa|0);
}
function _OptTest1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03037 = 0, $$038 = 0, $$1 = 0, $$idx$i = 0, $$idx$i31 = 0, $$idx$i33 = 0, $$idx$val$i = 0, $$idx$val$i32 = 0, $$idx$val$i34 = 0, $$idx$val$i36 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i36 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i36|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$03037 = 0;$$038 = 0;$6 = $$idx$val$i36;
 while(1) {
  $7 = ($6>>>0)>($$03037>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$03037<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(63);
  $15 = (($$03037) + 1)|0;
  do {
   if ($14) {
    $16 = (_CS_GetEntries($0,$4,$15,2)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $$1 = $$038;
    } else {
     $18 = HEAP32[$4>>2]|0;
     $$idx$i33 = ((($18)) + 24|0);
     $$idx$val$i34 = HEAP32[$$idx$i33>>2]|0;
     $19 = ($$idx$val$i34|0)==(0);
     if ($19) {
      $20 = HEAP8[$18>>0]|0;
      $21 = ($20<<24>>24)==(45);
      if ($21) {
       $22 = HEAP32[$1>>2]|0;
       $23 = ((($22)) + 4|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ((($18)) + 4|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (_strcmp($24,$26)|0);
       $28 = ($27|0)==(0);
       if ($28) {
        $29 = HEAP32[$5>>2]|0;
        $$idx$i31 = ((($29)) + 24|0);
        $$idx$val$i32 = HEAP32[$$idx$i31>>2]|0;
        $30 = ($$idx$val$i32|0)==(0);
        if ($30) {
         $31 = ((($29)) + 12|0);
         $32 = HEAP16[$31>>1]|0;
         $33 = $32 & 4;
         $34 = ($33<<16>>16)==(0);
         if ($34) {
          $$1 = $$038;
         } else {
          $35 = ((($22)) + 40|0);
          $36 = HEAP32[$35>>2]|0;
          $37 = ((($36)) + 2|0);
          $38 = HEAP16[$37>>1]|0;
          $39 = ($38<<16>>16)==(0);
          if ($39) {
           $40 = ((($22)) + 36|0);
           $41 = HEAP32[$40>>2]|0;
           $42 = (_NewCodeEntry(18,2,34449,0,$41)|0);
           $43 = (($$03037) + 2)|0;
           _CS_InsertEntry($0,$42,$43);
           _CS_DelEntry($0,$15);
           _CS_DelEntry($0,$$03037);
           $44 = (($$038) + 1)|0;
           $$1 = $44;
           break;
          }
          $45 = ((($18)) + 40|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = HEAP16[$46>>1]|0;
          $48 = ($47<<16>>16)==(0);
          if ($48) {
           $49 = ((($18)) + 36|0);
           $50 = HEAP32[$49>>2]|0;
           $51 = (_NewCodeEntry(71,0,0,0,$50)|0);
           $52 = (($$03037) + 2)|0;
           _CS_InsertEntry($0,$51,$52);
           _CS_DelEntry($0,$15);
           _CS_DelEntry($0,$$03037);
           $53 = (($$038) + 1)|0;
           $$1 = $53;
          } else {
           $$1 = $$038;
          }
         }
        } else {
         $$1 = $$038;
        }
       } else {
        $$1 = $$038;
       }
      } else {
       $$1 = $$038;
      }
     } else {
      $$1 = $$038;
     }
    }
   } else {
    $$1 = $$038;
   }
  } while(0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $54 = ($15>>>0)<($$idx$val$i>>>0);
  if ($54) {
   $$03037 = $15;$$038 = $$1;$6 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 17;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptTest2($0) {
 $0 = $0|0;
 var $$015$lcssa = 0, $$01520 = 0, $$021 = 0, $$1 = 0, $$idx$i = 0, $$idx$i16 = 0, $$idx$val$i = 0, $$idx$val$i17 = 0, $$idx$val$i19 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i19 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i19|0)==(0);
 if ($2) {
  $$015$lcssa = 0;
  STACKTOP = sp;return ($$015$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$01520 = 0;$$021 = 0;$6 = $$idx$val$i19;
 while(1) {
  $7 = ($6>>>0)>($$021>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$021<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP8[$12>>0]|0;
  switch ($13<<24>>24) {
  case 22: case 27:  {
   $14 = (($$021) + 1)|0;
   $15 = (_CS_GetEntries($0,$4,$14,2)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$1 = $$01520;$$pre$phiZ2D = $14;
   } else {
    $17 = HEAP32[$4>>2]|0;
    $$idx$i16 = ((($17)) + 24|0);
    $$idx$val$i17 = HEAP32[$$idx$i16>>2]|0;
    $18 = ($$idx$val$i17|0)==(0);
    if ($18) {
     $19 = ((($17)) + 12|0);
     $20 = HEAP16[$19>>1]|0;
     $21 = $20 & 64;
     $22 = ($21<<16>>16)==(0);
     if ($22) {
      $$1 = $$01520;$$pre$phiZ2D = $14;
     } else {
      $23 = HEAP32[$5>>2]|0;
      $24 = ((($23)) + 12|0);
      $25 = HEAP16[$24>>1]|0;
      $26 = $25 & 8;
      $27 = ($26<<16>>16)==(0);
      if ($27) {
       $$1 = $$01520;$$pre$phiZ2D = $14;
      } else {
       $28 = ((($17)) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = HEAP32[$1>>2]|0;
       $31 = ((($30)) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = ($29<<24>>24)==($32<<24>>24);
       if ($33) {
        $34 = ((($30)) + 4|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = ((($17)) + 4|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = (_strcmp($35,$37)|0);
        $39 = ($38|0)==(0);
        if ($39) {
         $40 = (($$021) + 2)|0;
         $41 = ((($17)) + 16|0);
         $42 = HEAP16[$41>>1]|0;
         $43 = $42&65535;
         $44 = (_GetRegInfo($0,$40,$43)|0);
         $45 = HEAP32[$4>>2]|0;
         $46 = ((($45)) + 16|0);
         $47 = HEAP16[$46>>1]|0;
         $48 = $47&65535;
         $49 = $48 & $44;
         $50 = ($49|0)==(0);
         if ($50) {
          $51 = (($$01520) + 1)|0;
          _CS_DelEntry($0,$14);
          $$1 = $51;$$pre$phiZ2D = $14;
         } else {
          $$1 = $$01520;$$pre$phiZ2D = $14;
         }
        } else {
         $$1 = $$01520;$$pre$phiZ2D = $14;
        }
       } else {
        $$1 = $$01520;$$pre$phiZ2D = $14;
       }
      }
     }
    } else {
     $$1 = $$01520;$$pre$phiZ2D = $14;
    }
   }
   break;
  }
  default: {
   $$pre = (($$021) + 1)|0;
   $$1 = $$01520;$$pre$phiZ2D = $$pre;
  }
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $52 = ($$pre$phiZ2D>>>0)<($$idx$val$i>>>0);
  if ($52) {
   $$01520 = $$1;$$021 = $$pre$phiZ2D;$6 = $$idx$val$i;
  } else {
   $$015$lcssa = $$1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return ($$015$lcssa|0);
 }
 return (0)|0;
}
function _NewFuncDesc() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xmalloc(24)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;HEAP32[$0+20>>2]=0|0;
 return ($0|0);
}
function _OptBoolTrans($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$027 = 0, $$02830 = 0, $$031 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i29 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i29|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02830 = 0;$$031 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02830<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_FindBoolCmpCond($9)|0);
   $11 = ($10|0)==(-1);
   if ($11) {
    $$1 = $$031;
   } else {
    $12 = (_CS_GetNextEntry($0,$$02830)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$1 = $$031;
    } else {
     $14 = ((($12)) + 12|0);
     $15 = HEAP16[$14>>1]|0;
     $16 = $15 & 4;
     $17 = ($16<<16>>16)==(0);
     if ($17) {
      $$1 = $$031;
     } else {
      $18 = HEAP8[$12>>0]|0;
      $19 = $18&255;
      $20 = (_GetBranchCond($19)|0);
      $21 = ($20|0)==(2);
      if ($21) {
       $22 = (32919 + ($10)|0);
       $23 = HEAP8[$22>>0]|0;
       $24 = $23&255;
       $$027 = $24;
      } else {
       $$027 = $10;
      }
      $25 = (($$02830) + 1)|0;
      _ReplaceCmp($0,$25,$$027);
      _CS_DelEntry($0,$$02830);
      $26 = (($$031) + 1)|0;
      $$1 = $26;
     }
    }
   }
  } else {
   $$1 = $$031;
  }
  $27 = (($$02830) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $28 = ($27>>>0)<($$idx$val$i>>>0);
  if ($28) {
   $$02830 = $27;$$031 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _ReplaceCmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)>($1>>>0);
 if (!($5)) {
  $6 = HEAP32[3332]|0;
  $7 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$6 & 1]($7,40922,40950,129);
  // unreachable;
 }
 $8 = ((($0)) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($1<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 do {
  switch ($2|0) {
  case 0:  {
   _CE_ReplaceOPC($11,32);
   STACKTOP = sp;return;
   break;
  }
  case 1:  {
   _CE_ReplaceOPC($11,35);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $12 = (_CS_GetNextEntry($0,$1)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    _Internal(32929,$vararg_buffer);
    // unreachable;
   }
   $14 = (_CS_GenLabel($0,$12)|0);
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($11)) + 36|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_NewCodeEntry(5,12,$16,$14,$18)|0);
   _CS_InsertEntry($0,$19,$1);
   _CE_ReplaceOPC($11,36);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   _CE_ReplaceOPC($11,36);
   STACKTOP = sp;return;
   break;
  }
  case 4:  {
   _CE_ReplaceOPC($11,33);
   STACKTOP = sp;return;
   break;
  }
  case 5:  {
   _CE_ReplaceOPC($11,33);
   $20 = ((($11)) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($21)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($11)) + 36|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_NewCodeEntry(32,12,$23,$21,$25)|0);
   $27 = (($1) + 1)|0;
   _CS_InsertEntry($0,$26,$27);
   STACKTOP = sp;return;
   break;
  }
  case 6:  {
   $28 = (_CS_GetNextEntry($0,$1)|0);
   $29 = ($28|0)==(0|0);
   if ($29) {
    _Internal(32929,$vararg_buffer1);
    // unreachable;
   }
   $30 = (_CS_GenLabel($0,$28)|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ((($11)) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (_NewCodeEntry(5,12,$32,$30,$34)|0);
   _CS_InsertEntry($0,$35,$1);
   _CE_ReplaceOPC($11,31);
   STACKTOP = sp;return;
   break;
  }
  case 7:  {
   _CE_ReplaceOPC($11,31);
   STACKTOP = sp;return;
   break;
  }
  case 8:  {
   _CE_ReplaceOPC($11,30);
   STACKTOP = sp;return;
   break;
  }
  case 9:  {
   _CE_ReplaceOPC($11,30);
   $36 = ((($11)) + 20|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($37)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ((($11)) + 36|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (_NewCodeEntry(32,12,$39,$37,$41)|0);
   $43 = (($1) + 1)|0;
   _CS_InsertEntry($0,$42,$43);
   STACKTOP = sp;return;
   break;
  }
  default: {
   HEAP32[$vararg_buffer3>>2] = $2;
   _Internal(32950,$vararg_buffer3);
   // unreachable;
  }
  }
 } while(0);
}
function _OptCmp1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02023 = 0, $$024 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i22 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i22 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i22|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$02023 = 0;$$024 = 0;$6 = $$idx$val$i22;
 while(1) {
  $7 = ($6>>>0)>($$02023>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$02023<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(41);
  $15 = (($$02023) + 1)|0;
  if ($14) {
   $16 = (_CS_RangeHasLabel($0,$15,2)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = (_CS_GetEntries($0,$4,$15,2)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $$1 = $$024;
    } else {
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP8[$20>>0]|0;
     $22 = ($21<<24>>24)==(63);
     if ($22) {
      $23 = ((($20)) + 4|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (_strcmp($24,34681)|0);
      $26 = ($25|0)==(0);
      if ($26) {
       $27 = HEAP32[$5>>2]|0;
       $28 = HEAP8[$27>>0]|0;
       $29 = ($28<<24>>24)==(45);
       if ($29) {
        $30 = ((($27)) + 4|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = (_strcmp($31,34681)|0);
        $33 = ($32|0)==(0);
        if ($33) {
         $34 = HEAP32[$1>>2]|0;
         $35 = ((($34)) + 1|0);
         $36 = HEAP8[$35>>0]|0;
         $37 = $36&255;
         $38 = ((($34)) + 4|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ((($34)) + 36|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = (_NewCodeEntry(45,$37,$39,0,$41)|0);
         _CS_InsertEntry($0,$42,$$02023);
         _CS_DelEntries($0,$15,3);
         $43 = (($$024) + 1)|0;
         $$1 = $43;
        } else {
         $$1 = $$024;
        }
       } else {
        $$1 = $$024;
       }
      } else {
       $$1 = $$024;
      }
     } else {
      $$1 = $$024;
     }
    }
   } else {
    $$1 = $$024;
   }
  } else {
   $$1 = $$024;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $44 = ($15>>>0)<($$idx$val$i>>>0);
  if ($44) {
   $$02023 = $15;$$024 = $$1;$6 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptCmp2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02326 = 0, $$027 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i25 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i25 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i25|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $$02326 = 0;$$027 = 0;$5 = $$idx$val$i25;
 while(1) {
  $6 = ($5>>>0)>($$02326>>>0);
  if (!($6)) {
   label = 4;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($$02326<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(63);
  $14 = (($$02326) + 1)|0;
  if ($13) {
   $15 = (_CS_RangeHasLabel($0,$14,2)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $17 = (_CS_GetEntries($0,$1,$14,2)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $$1 = $$027;
    } else {
     $19 = HEAP32[$1>>2]|0;
     $20 = HEAP8[$19>>0]|0;
     $21 = ($20<<24>>24)==(63);
     if ($21) {
      $22 = ((($19)) + 4|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = (_strcmp($23,34681)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       $26 = HEAP32[$4>>2]|0;
       $27 = HEAP8[$26>>0]|0;
       $28 = ($27<<24>>24)==(45);
       if ($28) {
        $29 = ((($26)) + 4|0);
        $30 = HEAP32[$29>>2]|0;
        $31 = (_strcmp($30,34681)|0);
        $32 = ($31|0)==(0);
        if ($32) {
         _CS_DelEntries($0,$14,2);
         $33 = ((($11)) + 1|0);
         $34 = HEAP8[$33>>0]|0;
         $35 = $34&255;
         $36 = ((($11)) + 4|0);
         $37 = HEAP32[$36>>2]|0;
         $38 = ((($11)) + 36|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = (_NewCodeEntry(45,$35,$37,0,$39)|0);
         _CS_InsertEntry($0,$40,$14);
         $41 = (($$027) + 1)|0;
         $$1 = $41;
        } else {
         $$1 = $$027;
        }
       } else {
        $$1 = $$027;
       }
      } else {
       $$1 = $$027;
      }
     } else {
      $$1 = $$027;
     }
    }
   } else {
    $$1 = $$027;
   }
  } else {
   $$1 = $$027;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $42 = ($14>>>0)<($$idx$val$i>>>0);
  if ($42) {
   $$02326 = $14;$$027 = $$1;$5 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptCmp3($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03035 = 0, $$037 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i34 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i34 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i34|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$03035 = 0;$$037 = 0;$6 = $$idx$val$i34;
 while(1) {
  $7 = ($6>>>0)>($$03035>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$03035<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP8[$12>>0]|0;
  L7: do {
   switch ($13<<24>>24) {
   case 73: case 71: case 58: case 50: case 45: case 43: case 40: case 26: case 25: case 21: case 2: case 1: case 0:  {
    $14 = (($$03035) + 1)|0;
    $15 = (_CS_RangeHasLabel($0,$14,2)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = (_CS_GetEntries($0,$4,$14,2)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      $$2 = $$037;$$pre$phiZ2D = $14;
     } else {
      $19 = HEAP32[$4>>2]|0;
      $20 = HEAP8[$19>>0]|0;
      $21 = ($20<<24>>24)==(18);
      if ($21) {
       $22 = (_CE_IsKnownImm($19,0)|0);
       $23 = ($22|0)==(0);
       if ($23) {
        $$2 = $$037;$$pre$phiZ2D = $14;
       } else {
        $24 = HEAP32[$5>>2]|0;
        $25 = HEAP8[$24>>0]|0;
        $26 = ($25<<24>>24)==(37);
        L14: do {
         if ($26) {
          $27 = ((($24)) + 4|0);
          $28 = HEAP32[$27>>2]|0;
          $29 = (_FindBoolCmpCond($28)|0);
          $switch = ($29>>>0)<(6);
          if (!($switch)) {
           $$2 = $$037;$$pre$phiZ2D = $14;
           break L7;
          }
         } else {
          $30 = ((($24)) + 12|0);
          $31 = HEAP16[$30>>1]|0;
          $32 = $31 & 8;
          $33 = ($32<<16>>16)==(0);
          if ($33) {
           $$2 = $$037;$$pre$phiZ2D = $14;
           break L7;
          }
          $34 = (($$03035) + 2)|0;
          $35 = (_CS_GetNextEntry($0,$34)|0);
          $36 = ($35|0)==(0|0);
          if ($36) {
           $$2 = $$037;$$pre$phiZ2D = $14;
           break L7;
          }
          $37 = HEAP32[$5>>2]|0;
          $38 = ((($37)) + 20|0);
          $39 = HEAP32[$38>>2]|0;
          $40 = ($39|0)==(0|0);
          if ($40) {
           $$2 = $$037;$$pre$phiZ2D = $14;
           break L7;
          }
          $41 = ((($39)) + 12|0);
          $42 = HEAP32[$41>>2]|0;
          $43 = ($42|0)==(0|0);
          if ($43) {
           $$2 = $$037;$$pre$phiZ2D = $14;
           break L7;
          }
          $44 = HEAP8[$42>>0]|0;
          switch ($44<<24>>24) {
          case 31: case 30: case 4: case 3:  {
           $$2 = $$037;$$pre$phiZ2D = $14;
           break L7;
           break;
          }
          case 37:  {
           break;
          }
          default: {
           break L14;
          }
          }
          $45 = ((($42)) + 4|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = (_FindBoolCmpCond($46)|0);
          $48 = ($47|0)==(-1);
          if (!($48)) {
           $$2 = $$037;$$pre$phiZ2D = $14;
           break L7;
          }
         }
        } while(0);
        $49 = (($$037) + 1)|0;
        _CS_DelEntry($0,$14);
        $$2 = $49;$$pre$phiZ2D = $14;
       }
      } else {
       $$2 = $$037;$$pre$phiZ2D = $14;
      }
     }
    } else {
     $$2 = $$037;$$pre$phiZ2D = $14;
    }
    break;
   }
   default: {
    $$pre = (($$03035) + 1)|0;
    $$2 = $$037;$$pre$phiZ2D = $$pre;
   }
   }
  } while(0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $50 = ($$pre$phiZ2D>>>0)<($$idx$val$i>>>0);
  if ($50) {
   $$03035 = $$pre$phiZ2D;$$037 = $$2;$6 = $$idx$val$i;
  } else {
   $$0$lcssa = $$2;
   label = 21;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 21) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptCmp4($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02431 = 0, $$034 = 0, $$1 = 0, $$demorgan = 0, $$idx$i = 0, $$idx$i$i = 0, $$idx$i17$i = 0, $$idx$i25 = 0, $$idx$i27 = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i18$i = 0, $$idx$val$i26 = 0, $$idx$val$i28 = 0, $$idx$val$i30 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i30 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i30|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($0)) + 8|0);
 $$02431 = 0;$$034 = 0;$9 = $$idx$val$i30;
 while(1) {
  $10 = ($9>>>0)>($$02431>>>0);
  if (!($10)) {
   label = 4;
   break;
  }
  $13 = HEAP32[$3>>2]|0;
  $14 = (($13) + ($$02431<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(40);
  $18 = (($$02431) + 1)|0;
  L7: do {
   if ($17) {
    $19 = (_CS_GetEntries($0,$1,$18,5)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $$1 = $$034;
    } else {
     $21 = HEAP32[$1>>2]|0;
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(41);
     if ($23) {
      $$idx$i27 = ((($21)) + 24|0);
      $$idx$val$i28 = HEAP32[$$idx$i27>>2]|0;
      $24 = ($$idx$val$i28|0)==(0);
      if ($24) {
       $25 = HEAP32[$4>>2]|0;
       $26 = HEAP32[$25>>2]|0;
       $27 = $26 & 33619967;
       $28 = ($27|0)==(33554963);
       if ($28) {
        $$idx$i$i = ((($25)) + 24|0);
        $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
        $29 = ($$idx$val$i$i|0)==(0);
        if ($29) {
         $30 = HEAP32[$5>>2]|0;
         $31 = HEAP8[$30>>0]|0;
         switch ($31<<24>>24) {
         case 8: case 35:  {
          break;
         }
         default: {
          $$1 = $$034;
          break L7;
         }
         }
         $32 = ((($30)) + 20|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = ($33|0)==(0|0);
         if ($34) {
          $$1 = $$034;
         } else {
          $$idx$i17$i = ((($30)) + 24|0);
          $$idx$val$i18$i = HEAP32[$$idx$i17$i>>2]|0;
          $35 = ($$idx$val$i18$i|0)==(0);
          if ($35) {
           $36 = HEAP32[$6>>2]|0;
           $37 = HEAP32[$36>>2]|0;
           $38 = $37 & 33619967;
           $39 = ($38|0)==(33554962);
           if ($39) {
            $40 = HEAP32[$7>>2]|0;
            $41 = ((($40)) + 12|0);
            $42 = HEAP16[$41>>1]|0;
            $43 = $42 & 2;
            $44 = ($43<<16>>16)==(0);
            if ($44) {
             $$1 = $$034;
            } else {
             $45 = ((($40)) + 20|0);
             $46 = HEAP32[$45>>2]|0;
             $47 = ($46|0)==(0|0);
             if ($47) {
              $$1 = $$034;
             } else {
              $48 = ((($33)) + 12|0);
              $49 = HEAP32[$48>>2]|0;
              $50 = ($49|0)==($40|0);
              $51 = ($33|0)==($46|0);
              $$demorgan = $51 | $50;
              if ($$demorgan) {
               $52 = (($$02431) + 6)|0;
               $53 = (_RegAXUsed($0,$52)|0);
               $54 = ($53|0)==(0);
               if ($54) {
                $55 = HEAP32[$7>>2]|0;
                $56 = ((($55)) + 12|0);
                $57 = HEAP16[$56>>1]|0;
                $58 = $57 & 8;
                $59 = ($58<<16>>16)==(0);
                do {
                 if ($59) {
                  label = 23;
                 } else {
                  $60 = HEAP32[$4>>2]|0;
                  $61 = ((($60)) + 8|0);
                  $62 = HEAP32[$61>>2]|0;
                  $63 = ($62|0)==(0);
                  if ($63) {
                   $64 = HEAP32[$6>>2]|0;
                   $65 = ((($64)) + 8|0);
                   $66 = HEAP32[$65>>2]|0;
                   $67 = ($66|0)==(0);
                   if (!($67)) {
                    label = 23;
                    break;
                   }
                   $68 = HEAP32[$1>>2]|0;
                   _CE_ReplaceOPC($68,45);
                   $69 = (($$02431) + 2)|0;
                   _CS_DelEntries($0,$69,3);
                  } else {
                   label = 23;
                  }
                 }
                } while(0);
                if ((label|0) == 23) {
                 label = 0;
                 $70 = (($$02431) + 4)|0;
                 _CollMove($8,$$02431,$70);
                 $71 = HEAP32[$1>>2]|0;
                 _CE_ReplaceOPC($71,40);
                 $72 = HEAP32[$4>>2]|0;
                 _CE_ReplaceOPC($72,18);
                 $$idx$i25 = ((($15)) + 24|0);
                 $$idx$val$i26 = HEAP32[$$idx$i25>>2]|0;
                 $73 = ($$idx$val$i26|0)==(0);
                 if (!($73)) {
                  $74 = HEAP32[$1>>2]|0;
                  _CS_MoveLabels($0,$15,$74);
                 }
                }
                $75 = (($$034) + 1)|0;
                $$1 = $75;
               } else {
                $$1 = $$034;
               }
              } else {
               $$1 = $$034;
              }
             }
            }
           } else {
            $$1 = $$034;
           }
          } else {
           $$1 = $$034;
          }
         }
        } else {
         $$1 = $$034;
        }
       } else {
        $$1 = $$034;
       }
      } else {
       $$1 = $$034;
      }
     } else {
      $$1 = $$034;
     }
    }
   } else {
    $$1 = $$034;
   }
  } while(0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $76 = ($18>>>0)<($$idx$val$i>>>0);
  if ($76) {
   $$02431 = $18;$$034 = $$1;$9 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 27;
   break;
  }
 }
 if ((label|0) == 4) {
  $11 = HEAP32[3332]|0;
  $12 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$11 & 1]($12,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 27) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptCmp5($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04853 = 0, $$056 = 0, $$1 = 0, $$demorgan = 0, $$idx$i = 0, $$idx$i$i = 0, $$idx$i17$i = 0, $$idx$i49 = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i18$i = 0, $$idx$val$i50 = 0, $$idx$val$i52 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = sp + 40|0;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i52 = HEAP32[$$idx$i>>2]|0;
 $3 = ($$idx$val$i52|0)==(0);
 if ($3) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $4 = ((($0)) + 16|0);
 $5 = ((($1)) + 4|0);
 $6 = ((($1)) + 8|0);
 $7 = ((($1)) + 12|0);
 $8 = ((($1)) + 16|0);
 $9 = ((($1)) + 20|0);
 $$04853 = 0;$$056 = 0;$10 = $$idx$val$i52;
 while(1) {
  $11 = ($10>>>0)>($$04853>>>0);
  if (!($11)) {
   label = 4;
   break;
  }
  $14 = HEAP32[$4>>2]|0;
  $15 = (($14) + ($$04853<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$1>>2] = $16;
  $17 = HEAP8[$16>>0]|0;
  $18 = ($17<<24>>24)==(42);
  L7: do {
   if ($18) {
    $19 = (_CE_IsConstImm($16)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $$1 = $$056;
    } else {
     $21 = (($$04853) + 1)|0;
     $22 = (_CS_GetEntries($0,$5,$21,5)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$1 = $$056;
     } else {
      $24 = HEAP32[$5>>2]|0;
      $$idx$i49 = ((($24)) + 24|0);
      $$idx$val$i50 = HEAP32[$$idx$i49>>2]|0;
      $25 = ($$idx$val$i50|0)==(0);
      if ($25) {
       $26 = HEAP8[$24>>0]|0;
       $27 = ($26<<24>>24)==(37);
       if ($27) {
        $28 = ((($24)) + 4|0);
        $29 = HEAP32[$28>>2]|0;
        $30 = (_strcmp($29,36890)|0);
        $31 = ($30|0)==(0);
        if ($31) {
         $32 = HEAP32[$6>>2]|0;
         $33 = HEAP32[$32>>2]|0;
         $34 = $33 & 33619967;
         $35 = ($34|0)==(33554963);
         if ($35) {
          $$idx$i$i = ((($32)) + 24|0);
          $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
          $36 = ($$idx$val$i$i|0)==(0);
          if ($36) {
           $37 = HEAP32[$7>>2]|0;
           $38 = HEAP8[$37>>0]|0;
           switch ($38<<24>>24) {
           case 8: case 35:  {
            break;
           }
           default: {
            $$1 = $$056;
            break L7;
           }
           }
           $39 = ((($37)) + 20|0);
           $40 = HEAP32[$39>>2]|0;
           $41 = ($40|0)==(0|0);
           if ($41) {
            $$1 = $$056;
           } else {
            $$idx$i17$i = ((($37)) + 24|0);
            $$idx$val$i18$i = HEAP32[$$idx$i17$i>>2]|0;
            $42 = ($$idx$val$i18$i|0)==(0);
            if ($42) {
             $43 = HEAP32[$8>>2]|0;
             $44 = HEAP32[$43>>2]|0;
             $45 = $44 & 33619967;
             $46 = ($45|0)==(33554962);
             if ($46) {
              $47 = HEAP32[$9>>2]|0;
              $48 = ((($47)) + 12|0);
              $49 = HEAP16[$48>>1]|0;
              $50 = $49 & 2;
              $51 = ($50<<16>>16)==(0);
              if ($51) {
               $$1 = $$056;
              } else {
               $52 = ((($47)) + 20|0);
               $53 = HEAP32[$52>>2]|0;
               $54 = ($53|0)==(0|0);
               if ($54) {
                $$1 = $$056;
               } else {
                $55 = ((($40)) + 12|0);
                $56 = HEAP32[$55>>2]|0;
                $57 = ($56|0)==($47|0);
                $58 = ($40|0)==($53|0);
                $$demorgan = $58 | $57;
                if ($$demorgan) {
                 $59 = $49 & 8;
                 $60 = ($59<<16>>16)==(0);
                 do {
                  if ($60) {
                   label = 24;
                  } else {
                   $61 = ((($32)) + 8|0);
                   $62 = HEAP32[$61>>2]|0;
                   $63 = ($62|0)==(0);
                   if (!($63)) {
                    label = 24;
                    break;
                   }
                   $64 = ((($43)) + 8|0);
                   $65 = HEAP32[$64>>2]|0;
                   $66 = ($65|0)==(0);
                   if (!($66)) {
                    label = 24;
                    break;
                   }
                   $67 = HEAP32[$1>>2]|0;
                   $68 = ((($67)) + 8|0);
                   $69 = HEAP32[$68>>2]|0;
                   $70 = (($69) + -1)|0;
                   HEAP32[$vararg_buffer>>2] = $70;
                   (_sprintf($2,36910,$vararg_buffer)|0);
                   $71 = HEAP32[$1>>2]|0;
                   $72 = ((($71)) + 36|0);
                   $73 = HEAP32[$72>>2]|0;
                   $74 = (_NewCodeEntry(42,2,$2,0,$73)|0);
                   _CS_InsertEntry($0,$74,$21);
                   $75 = HEAP32[$5>>2]|0;
                   $76 = ((($75)) + 36|0);
                   $77 = HEAP32[$76>>2]|0;
                   $78 = (_NewCodeEntry(40,10,36898,0,$77)|0);
                   $79 = (($$04853) + 2)|0;
                   _CS_InsertEntry($0,$78,$79);
                   $80 = HEAP32[$1>>2]|0;
                   $81 = ((($80)) + 4|0);
                   $82 = HEAP32[$81>>2]|0;
                   $83 = ((($80)) + 36|0);
                   $84 = HEAP32[$83>>2]|0;
                   $85 = (_NewCodeEntry(42,2,$82,0,$84)|0);
                   $86 = (($$04853) + 3)|0;
                   _CS_InsertEntry($0,$85,$86);
                   $87 = HEAP32[$5>>2]|0;
                   $88 = ((($87)) + 36|0);
                   $89 = HEAP32[$88>>2]|0;
                   $90 = (_NewCodeEntry(45,10,36898,0,$89)|0);
                   $91 = (($$04853) + 4)|0;
                   _CS_InsertEntry($0,$90,$91);
                   $92 = (($$04853) + 5)|0;
                   _CS_DelEntries($0,$92,3);
                   _CS_DelEntry($0,$$04853);
                  }
                 } while(0);
                 if ((label|0) == 24) {
                  label = 0;
                  $93 = HEAP32[$1>>2]|0;
                  $94 = ((($93)) + 4|0);
                  $95 = HEAP32[$94>>2]|0;
                  $96 = ((($93)) + 36|0);
                  $97 = HEAP32[$96>>2]|0;
                  $98 = (_NewCodeEntry(42,2,$95,0,$97)|0);
                  $99 = (($$04853) + 3)|0;
                  _CS_InsertEntry($0,$98,$99);
                  $100 = HEAP32[$5>>2]|0;
                  $101 = ((($100)) + 36|0);
                  $102 = HEAP32[$101>>2]|0;
                  $103 = (_NewCodeEntry(40,10,36898,0,$102)|0);
                  $104 = (($$04853) + 4)|0;
                  _CS_InsertEntry($0,$103,$104);
                  $105 = HEAP32[$6>>2]|0;
                  $106 = ((($105)) + 1|0);
                  $107 = HEAP8[$106>>0]|0;
                  $108 = $107&255;
                  $109 = ((($105)) + 4|0);
                  $110 = HEAP32[$109>>2]|0;
                  $111 = ((($105)) + 36|0);
                  $112 = HEAP32[$111>>2]|0;
                  $113 = (_NewCodeEntry(18,$108,$110,0,$112)|0);
                  $114 = (($$04853) + 5)|0;
                  _CS_InsertEntry($0,$113,$114);
                  $115 = HEAP32[$1>>2]|0;
                  $116 = ((($115)) + 8|0);
                  $117 = HEAP32[$116>>2]|0;
                  $118 = (($117) + -1)|0;
                  HEAP32[$vararg_buffer1>>2] = $118;
                  (_sprintf($2,36910,$vararg_buffer1)|0);
                  $119 = HEAP32[$1>>2]|0;
                  $120 = ((($119)) + 36|0);
                  $121 = HEAP32[$120>>2]|0;
                  $122 = (_NewCodeEntry(42,2,$2,0,$121)|0);
                  $123 = (($$04853) + 7)|0;
                  _CS_InsertEntry($0,$122,$123);
                  $124 = HEAP32[$5>>2]|0;
                  $125 = ((($124)) + 36|0);
                  $126 = HEAP32[$125>>2]|0;
                  $127 = (_NewCodeEntry(40,10,36898,0,$126)|0);
                  $128 = (($$04853) + 8)|0;
                  _CS_InsertEntry($0,$127,$128);
                  _CS_DelEntries($0,$$04853,3);
                 }
                 $129 = (($$056) + 1)|0;
                 $$1 = $129;
                } else {
                 $$1 = $$056;
                }
               }
              }
             } else {
              $$1 = $$056;
             }
            } else {
             $$1 = $$056;
            }
           }
          } else {
           $$1 = $$056;
          }
         } else {
          $$1 = $$056;
         }
        } else {
         $$1 = $$056;
        }
       } else {
        $$1 = $$056;
       }
      } else {
       $$1 = $$056;
      }
     }
    }
   } else {
    $$1 = $$056;
   }
  } while(0);
  $130 = (($$04853) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $131 = ($130>>>0)<($$idx$val$i>>>0);
  if ($131) {
   $$04853 = $130;$$056 = $$1;$10 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 27;
   break;
  }
 }
 if ((label|0) == 4) {
  $12 = HEAP32[3332]|0;
  $13 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$12 & 1]($13,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 27) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptCmp6($0) {
 $0 = $0|0;
 var $$0 = 0, $$032$lcssa = 0, $$03239 = 0, $$03337 = 0, $$1 = 0, $$idx$i = 0, $$idx$i34 = 0, $$idx$val$i = 0, $$idx$val$i35 = 0, $$idx$val$i36 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i36 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i36|0)==(0);
 if ($1) {
  $$032$lcssa = 0;
  return ($$032$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03239 = 0;$$03337 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$03337<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_FindTosCmpCond($9)|0);
   $11 = ($10|0)==(-1);
   if ($11) {
    $$1 = $$03239;
   } else {
    $12 = (_CS_GetNextEntry($0,$$03337)|0);
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$1 = $$03239;
    } else {
     $14 = ((($12)) + 12|0);
     $15 = HEAP16[$14>>1]|0;
     $16 = $15 & 4;
     $17 = ($16<<16>>16)==(0);
     if ($17) {
      $$1 = $$03239;
     } else {
      $$idx$i34 = ((($12)) + 24|0);
      $$idx$val$i35 = HEAP32[$$idx$i34>>2]|0;
      $18 = ($$idx$val$i35|0)==(0);
      if ($18) {
       $19 = HEAP8[$12>>0]|0;
       $20 = $19&255;
       $21 = (_GetBranchCond($20)|0);
       $22 = ($21|0)==(2);
       if ($22) {
        $23 = (32919 + ($10)|0);
        $24 = HEAP8[$23>>0]|0;
        $25 = $24&255;
        $$0 = $25;
       } else {
        $$0 = $10;
       }
       $26 = ((($5)) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (_NewCodeEntry(37,6,35706,0,$27)|0);
       $29 = (($$03337) + 1)|0;
       _CS_InsertEntry($0,$28,$29);
       _CS_DelEntry($0,$$03337);
       _ReplaceCmp($0,$29,$$0);
       $30 = (($$03239) + 1)|0;
       $$1 = $30;
      } else {
       $$1 = $$03239;
      }
     }
    }
   }
  } else {
   $$1 = $$03239;
  }
  $31 = (($$03337) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $32 = ($31>>>0)<($$idx$val$i>>>0);
  if ($32) {
   $$03239 = $$1;$$03337 = $31;
  } else {
   $$032$lcssa = $$1;
   break;
  }
 }
 return ($$032$lcssa|0);
}
function _OptCmp7($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$01825 = 0, $$026 = 0, $$1 = 0, $$idx$i = 0, $$idx$i19 = 0, $$idx$i21 = 0, $$idx$val$i = 0, $$idx$val$i20 = 0, $$idx$val$i22 = 0, $$idx$val$i24 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i24 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i24|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $$01825 = 0;$$026 = 0;$5 = $$idx$val$i24;
 while(1) {
  $6 = ($5>>>0)>($$01825>>>0);
  if (!($6)) {
   label = 4;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($$01825<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(41);
  $14 = (($$01825) + 1)|0;
  if ($13) {
   $15 = (_CS_GetEntries($0,$1,$14,2)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$1 = $$026;
   } else {
    $17 = HEAP32[$1>>2]|0;
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(71);
    if ($19) {
     $$idx$i21 = ((($17)) + 24|0);
     $$idx$val$i22 = HEAP32[$$idx$i21>>2]|0;
     $20 = ($$idx$val$i22|0)==(0);
     if ($20) {
      $21 = HEAP32[$4>>2]|0;
      $22 = ((($21)) + 12|0);
      $23 = HEAP16[$22>>1]|0;
      $24 = $23 & 8;
      $25 = ($24<<16>>16)==(0);
      if ($25) {
       $$1 = $$026;
      } else {
       $$idx$i19 = ((($21)) + 24|0);
       $$idx$val$i20 = HEAP32[$$idx$i19>>2]|0;
       $26 = ($$idx$val$i20|0)==(0);
       if ($26) {
        $27 = (($$01825) + 3)|0;
        $28 = (_RegAUsed($0,$27)|0);
        $29 = ($28|0)==(0);
        if ($29) {
         $30 = (($$026) + 1)|0;
         _CS_DelEntry($0,$14);
         $$1 = $30;
        } else {
         $$1 = $$026;
        }
       } else {
        $$1 = $$026;
       }
      }
     } else {
      $$1 = $$026;
     }
    } else {
     $$1 = $$026;
    }
   }
  } else {
   $$1 = $$026;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $31 = ($14>>>0)<($$idx$val$i>>>0);
  if ($31) {
   $$01825 = $14;$$026 = $$1;$5 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptCmp8($0) {
 $0 = $0|0;
 var $$0$i = 0, $$066$lcssa = 0, $$06694 = 0, $$06792 = 0, $$068$lcssa = 0, $$06882 = 0, $$070 = 0, $$1$lcssa = 0, $$183 = 0, $$4 = 0, $$idx$i = 0, $$idx$i74 = 0, $$idx$val$i = 0, $$idx$val$i75 = 0, $$idx$val$i91 = 0, $$in = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $sext71 = 0;
 var $sext72 = 0, $sext73 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i91 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i91|0)==(0);
 if ($1) {
  $$066$lcssa = 0;
  STACKTOP = sp;return ($$066$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$06694 = 0;$$06792 = 0;
 L4: while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$06792<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 4096;
  $9 = ($8<<16>>16)==(0);
  L6: do {
   if ($9) {
    $$4 = $$06694;
   } else {
    $10 = HEAP8[$5>>0]|0;
    switch ($10<<24>>24) {
    case 18:  {
     $11 = ((($5)) + 40|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = HEAP16[$12>>1]|0;
     $14 = $13 << 16 >> 16;
     $$0$i = $14;
     break;
    }
    case 19:  {
     $15 = ((($5)) + 40|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ((($16)) + 2|0);
     $18 = HEAP16[$17>>1]|0;
     $19 = $18 << 16 >> 16;
     $$0$i = $19;
     break;
    }
    case 20:  {
     $20 = ((($5)) + 40|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ((($21)) + 4|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = $23 << 16 >> 16;
     $$0$i = $24;
     break;
    }
    default: {
     label = 8;
     break L4;
    }
    }
    $25 = ($$0$i|0)>(-1);
    if ($25) {
     $26 = (_CE_IsConstImm($5)|0);
     $27 = ($26|0)==(0);
     if ($27) {
      $$4 = $$06694;
     } else {
      $28 = (_CS_GetNextEntry($0,$$06792)|0);
      $29 = ($28|0)==(0|0);
      if ($29) {
       $$4 = $$06694;
      } else {
       $30 = $$0$i & 255;
       $31 = ((($5)) + 8|0);
       $32 = (($$06792) + 1)|0;
       $33 = (($$06792) + 2)|0;
       $sext72 = $$0$i << 24;
       $$06882 = 0;$$183 = $$06694;$35 = $28;
       while(1) {
        $34 = ((($35)) + 12|0);
        $36 = HEAP16[$34>>1]|0;
        $37 = $36 & 2;
        $38 = ($37<<16>>16)==(0);
        if ($38) {
         $$068$lcssa = $$06882;$$1$lcssa = $$183;
         break;
        }
        $$idx$i74 = ((($35)) + 24|0);
        $$idx$val$i75 = HEAP32[$$idx$i74>>2]|0;
        $39 = ($$idx$val$i75|0)==(0);
        if (!($39)) {
         $$068$lcssa = $$06882;$$1$lcssa = $$183;
         break;
        }
        $40 = HEAP8[$35>>0]|0;
        $41 = $40&255;
        $42 = (_GetBranchCond($41)|0);
        switch ($42|0) {
        case 7: case 6:  {
         $$4 = $$183;
         break L6;
         break;
        }
        case 0:  {
         $43 = HEAP32[$31>>2]|0;
         $44 = $43 & 255;
         $45 = ($30>>>0)<($44>>>0);
         $46 = $45&1;
         $$070 = $46;
         break;
        }
        case 1:  {
         $47 = HEAP32[$31>>2]|0;
         $48 = $47 & 255;
         $49 = ($30>>>0)>=($48>>>0);
         $50 = $49&1;
         $$070 = $50;
         break;
        }
        case 2:  {
         $51 = HEAP32[$31>>2]|0;
         $52 = $51 ^ $$0$i;
         $53 = $52 & 255;
         $54 = ($53|0)==(0);
         $55 = $54&1;
         $$070 = $55;
         break;
        }
        case 3:  {
         $56 = HEAP32[$31>>2]|0;
         $sext73 = $56 << 24;
         $57 = ($sext72|0)<($sext73|0);
         $58 = $57&1;
         $$070 = $58;
         break;
        }
        case 4:  {
         $59 = HEAP32[$31>>2]|0;
         $60 = $59 ^ $$0$i;
         $61 = $60 & 255;
         $62 = ($61|0)!=(0);
         $63 = $62&1;
         $$070 = $63;
         break;
        }
        case 5:  {
         $64 = HEAP32[$31>>2]|0;
         $sext71 = $64 << 24;
         $65 = ($sext72|0)>=($sext71|0);
         $66 = $65&1;
         $$070 = $66;
         break;
        }
        default: {
         label = 22;
         break L4;
        }
        }
        $67 = ($$070|0)==(0);
        if ($67) {
         _CS_DelEntry($0,$32);
        } else {
         $68 = ((($35)) + 20|0);
         $69 = HEAP32[$68>>2]|0;
         $70 = ($69|0)==(0|0);
         $71 = ((($69)) + 4|0);
         $72 = ((($35)) + 4|0);
         $$in = $70 ? $72 : $71;
         $73 = HEAP32[$$in>>2]|0;
         $74 = ((($35)) + 36|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = (_NewCodeEntry(34,12,$73,$69,$75)|0);
         _CS_InsertEntry($0,$76,$33);
         _CS_DelEntry($0,$32);
        }
        $77 = (($$06882) + 1)|0;
        $78 = (($$183) + 1)|0;
        $79 = (_CS_GetNextEntry($0,$$06792)|0);
        $80 = ($79|0)==(0|0);
        if ($80) {
         $$068$lcssa = $77;$$1$lcssa = $78;
         break;
        } else {
         $$06882 = $77;$$183 = $78;$35 = $79;
        }
       }
       $81 = ($$068$lcssa|0)==(0);
       if ($81) {
        $$4 = $$1$lcssa;
       } else {
        _CS_DelEntry($0,$$06792);
        $$4 = $$1$lcssa;
       }
      }
     }
    } else {
     $$4 = $$06694;
    }
   }
  } while(0);
  $82 = (($$06792) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $83 = ($82>>>0)<($$idx$val$i>>>0);
  if ($83) {
   $$06694 = $$4;$$06792 = $82;
  } else {
   $$066$lcssa = $$4;
   label = 30;
   break;
  }
 }
 if ((label|0) == 8) {
  _Internal(32977,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 22) {
  _Internal(33008,$vararg_buffer1);
  // unreachable;
 }
 else if ((label|0) == 30) {
  STACKTOP = sp;return ($$066$lcssa|0);
 }
 return (0)|0;
}
function _OptCmp9($0) {
 $0 = $0|0;
 var $$016$lcssa = 0, $$01623 = 0, $$024 = 0, $$1 = 0, $$117 = 0, $$idx$i = 0, $$idx$i18 = 0, $$idx$val$i = 0, $$idx$val$i19 = 0, $$idx$val$i22 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $switch = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $1 = sp + 4|0;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i22 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i22|0)==(0);
 if ($2) {
  $$016$lcssa = 0;
  STACKTOP = sp;return ($$016$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 12|0);
 $6 = ((($1)) + 8|0);
 $7 = ((($1)) + 16|0);
 $$01623 = 0;$$024 = 0;$8 = $$idx$val$i22;
 L4: while(1) {
  $9 = ($8>>>0)>($$024>>>0);
  if (!($9)) {
   label = 4;
   break;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($$024<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$1>>2] = $14;
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(58);
  L7: do {
   if ($16) {
    $17 = (($$024) + 1)|0;
    $18 = (_CS_GetEntries($0,$4,$17,4)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $$1 = $$024;$$117 = $$01623;
    } else {
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP8[$20>>0]|0;
     $22 = $21 & -2;
     $switch = ($22<<24>>24)==(12);
     if ($switch) {
      $23 = ((($20)) + 20|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if ($25) {
       $$1 = $$024;$$117 = $$01623;
      } else {
       $26 = ((($24)) + 12|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = HEAP32[$5>>2]|0;
       $29 = ($27|0)==($28|0);
       if ($29) {
        $30 = HEAP32[$6>>2]|0;
        $31 = HEAP8[$30>>0]|0;
        $32 = ($31<<24>>24)==(25);
        if ($32) {
         $33 = (_CE_IsKnownImm($30,128)|0);
         $34 = ($33|0)==(0);
         if ($34) {
          $$1 = $$024;$$117 = $$01623;
         } else {
          $35 = HEAP32[$5>>2]|0;
          $36 = HEAP16[$35>>1]|0;
          $37 = ($36<<16>>16)==(258);
          if ($37) {
           $38 = HEAP32[$7>>2]|0;
           $39 = HEAP8[$38>>0]|0;
           switch ($39<<24>>24) {
           case 31: case 30: case 4: case 3:  {
            break;
           }
           default: {
            $$1 = $$024;$$117 = $$01623;
            break L7;
           }
           }
           $$idx$i18 = ((($38)) + 24|0);
           $$idx$val$i19 = HEAP32[$$idx$i18>>2]|0;
           $40 = ($$idx$val$i19|0)==(0);
           if ($40) {
            $41 = (($$024) + 4)|0;
            $42 = (_RegAUsed($0,$41)|0);
            $43 = ($42|0)==(0);
            if ($43) {
             $44 = HEAP32[$7>>2]|0;
             $45 = HEAP8[$44>>0]|0;
             $46 = $45&255;
             $47 = (_GetBranchCond($46)|0);
             switch ($47|0) {
             case 0:  {
              $48 = HEAP32[$7>>2]|0;
              _CE_ReplaceOPC($48,36);
              break;
             }
             case 1:  {
              $49 = HEAP32[$7>>2]|0;
              _CE_ReplaceOPC($49,33);
              break;
             }
             default: {
              label = 19;
              break L4;
             }
             }
             $50 = (($$024) + 3)|0;
             _CS_DelEntry($0,$50);
             $51 = (($$01623) + 1)|0;
             $$1 = $50;$$117 = $51;
            } else {
             $$1 = $$024;$$117 = $$01623;
            }
           } else {
            $$1 = $$024;$$117 = $$01623;
           }
          } else {
           $$1 = $$024;$$117 = $$01623;
          }
         }
        } else {
         $$1 = $$024;$$117 = $$01623;
        }
       } else {
        $$1 = $$024;$$117 = $$01623;
       }
      }
     } else {
      $$1 = $$024;$$117 = $$01623;
     }
    }
   } else {
    $$1 = $$024;$$117 = $$01623;
   }
  } while(0);
  $52 = (($$1) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $53 = ($52>>>0)<($$idx$val$i>>>0);
  if ($53) {
   $$01623 = $$117;$$024 = $52;$8 = $$idx$val$i;
  } else {
   $$016$lcssa = $$117;
   label = 22;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 19) {
  _Internal(33033,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return ($$016$lcssa|0);
 }
 return (0)|0;
}
function _NewCodeSeg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $2 = (_xmalloc(156)|0);
 $3 = (_xstrdup($0)|0);
 HEAP32[$2>>2] = $3;
 $4 = ((($2)) + 4|0);
 HEAP32[$4>>2] = $1;
 $5 = ((($2)) + 8|0);
 (_InitCollection($5)|0);
 $6 = ((($2)) + 20|0);
 (_InitCollection($6)|0);
 $7 = ((($2)) + 32|0);
 dest=$7; stop=dest+116|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $8 = HEAP32[$4>>2]|0;
 $9 = ($8|0)==(0|0);
 do {
  if ($9) {
   label = 6;
  } else {
   $10 = ((($1)) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_GetFuncReturn($11)|0);
   $$idx$val = HEAP32[$12>>2]|0;
   $13 = $$idx$val & 15;
   $14 = ($13|0)==(9);
   if ($14) {
    label = 6;
   } else {
    $15 = (_SizeOf($12)|0);
    $16 = (_SizeOf(10972)|0);
    $17 = ($15|0)==($16|0);
    $18 = ((($2)) + 148|0);
    if ($17) {
     HEAP16[$18>>1] = 771;
     break;
    } else {
     HEAP16[$18>>1] = 3;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $19 = ((($2)) + 148|0);
  HEAP16[$19>>1] = 0;
 }
 $20 = (_IS_Get(8552)|0);
 $21 = $20&255;
 $22 = ((($2)) + 150|0);
 HEAP8[$22>>0] = $21;
 $23 = (_IS_Get(8588)|0);
 $24 = ((($2)) + 152|0);
 HEAP32[$24>>2] = $23;
 return ($2|0);
}
function _CS_AddVLine($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i = 0, $$0$i = 0, $$0$i$i = 0, $$0$i109$i = 0, $$0$i111$i = 0, $$0$i114$i = 0, $$0$i63$i = 0, $$0$i75$i = 0, $$0$i87$i = 0, $$0$i89$i = 0, $$0$i91$i = 0, $$0$i93$i = 0, $$0$i95$i = 0, $$0$i97$i = 0, $$014$i4$i = 0, $$021$lcssa$i = 0, $$021$lcssa$i$i = 0, $$021$lcssa$i107$i = 0, $$021$lcssa$i73$i = 0, $$021$lcssa$i85$i = 0;
 var $$0213$i = 0, $$0213$i$i = 0, $$0213$i101$i = 0, $$0213$i67$i = 0, $$0213$i79$i = 0, $$022$lcssa$i$i = 0, $$022$lcssa$i106$i = 0, $$022$lcssa$i72$i = 0, $$022$lcssa$i84$i = 0, $$0222$i = 0, $$0222$i$i = 0, $$0222$i102$i = 0, $$0222$i68$i = 0, $$0222$i80$i = 0, $$04$i = 0, $$04$i$i = 0, $$04$i100$i = 0, $$04$i66$i = 0, $$04$i78$i = 0, $$059$i = 0;
 var $$060$i = 0, $$07$i$i = 0, $$08$i$i = 0, $$1$i = 0, $$1$i$i = 0, $$1$i105$i = 0, $$1$i13 = 0, $$1$i71$i = 0, $$1$i83$i = 0, $$161115$i = 0, $$62$i = 0, $$idx$i$i = 0, $$idx$val = 0, $$idx$val$i$i = 0, $$lobit$i = 0, $$pre$i$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $memchr = 0, $memchr$i = 0, $memchr116$i = 0, $memchr117$i = 0, $memchr118$i = 0, $sext$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $vararg_buffer35 = sp + 136|0;
 $vararg_buffer33 = sp + 128|0;
 $vararg_buffer31 = sp + 120|0;
 $vararg_buffer28 = sp + 112|0;
 $vararg_buffer26 = sp + 104|0;
 $vararg_buffer24 = sp + 96|0;
 $vararg_buffer22 = sp + 88|0;
 $vararg_buffer20 = sp + 80|0;
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer16 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer12 = sp + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 310|0;
 $5 = sp + 235|0;
 $6 = sp + 160|0;
 $7 = sp + 144|0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 _SB_VPrintf($7,$2,$3);
 $$idx$val = HEAP32[$7>>2]|0;
 $$0$i = $$idx$val;
 while(1) {
  $8 = HEAP8[$$0$i>>0]|0;
  $9 = (_IsSpace($8)|0);
  $10 = ($9|0)==(0);
  $11 = ((($$0$i)) + 1|0);
  if ($10) {
   break;
  } else {
   $$0$i = $11;
  }
 }
 $12 = HEAP8[$$0$i>>0]|0;
 $13 = $12 << 24 >> 24;
 switch ($13|0) {
 case 46:  {
  $14 = ($12<<24>>24)==(0);
  L167: do {
   if ($14) {
    $$021$lcssa$i = 0;
   } else {
    $$0213$i = 0;$$0222$i = $$0$i;$$04$i = 0;$16 = 46;$20 = $12;
    while(1) {
     $15 = ($$04$i|0)==(0);
     if ($15) {
      $memchr = (_memchr(33069,$16,3)|0);
      $17 = ($memchr|0)==(0|0);
      if (!($17)) {
       $$021$lcssa$i = $$0213$i;
       break L167;
      }
     }
     $18 = ($$0213$i>>>0)<(74);
     if ($18) {
      $19 = (($6) + ($$0213$i)|0);
      HEAP8[$19>>0] = $20;
     } else {
      $21 = ($$0213$i|0)==(74);
      if ($21) {
       _Error(33072,$vararg_buffer);
      }
     }
     $22 = (($$0213$i) + 1)|0;
     $23 = HEAP8[$$0222$i>>0]|0;
     switch ($23<<24>>24) {
     case 41:  {
      $24 = (($$04$i) + -1)|0;
      $$1$i = $24;
      break;
     }
     case 40:  {
      $25 = (($$04$i) + 1)|0;
      $$1$i = $25;
      break;
     }
     default: {
      $$1$i = $$04$i;
     }
     }
     $26 = ((($$0222$i)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $27 << 24 >> 24;
     $29 = ($27<<24>>24)==(0);
     if ($29) {
      $$021$lcssa$i = $22;
      break L167;
     } else {
      $$0213$i = $22;$$0222$i = $26;$$04$i = $$1$i;$16 = $28;$20 = $27;
     }
    }
   }
  } while(0);
  $30 = (($6) + ($$021$lcssa$i)|0);
  HEAP8[$30>>0] = 0;
  HEAP32[$vararg_buffer1>>2] = $6;
  _Error(33101,$vararg_buffer1);
  _SB_Done($7);
  STACKTOP = sp;return;
  break;
 }
 case 59: case 0:  {
  _SB_Done($7);
  STACKTOP = sp;return;
  break;
 }
 default: {
  $31 = ($12<<24>>24)==(0);
  L6: do {
   if ($31) {
    $$021$lcssa$i$i = 0;$$022$lcssa$i$i = $$0$i;
   } else {
    $$0213$i$i = 0;$$0222$i$i = $$0$i;$$04$i$i = 0;$33 = $13;$37 = $12;
    while(1) {
     $32 = ($$04$i$i|0)==(0);
     if ($32) {
      $memchr118$i = (_memchr(33155,$33,4)|0);
      $34 = ($memchr118$i|0)==(0|0);
      if (!($34)) {
       $$021$lcssa$i$i = $$0213$i$i;$$022$lcssa$i$i = $$0222$i$i;
       break L6;
      }
     }
     $35 = ($$0213$i$i>>>0)<(74);
     if ($35) {
      $36 = (($4) + ($$0213$i$i)|0);
      HEAP8[$36>>0] = $37;
     } else {
      $38 = ($$0213$i$i|0)==(74);
      if ($38) {
       _Error(33072,$vararg_buffer3);
      }
     }
     $39 = (($$0213$i$i) + 1)|0;
     $40 = HEAP8[$$0222$i$i>>0]|0;
     switch ($40<<24>>24) {
     case 41:  {
      $41 = (($$04$i$i) + -1)|0;
      $$1$i$i = $41;
      break;
     }
     case 40:  {
      $42 = (($$04$i$i) + 1)|0;
      $$1$i$i = $42;
      break;
     }
     default: {
      $$1$i$i = $$04$i$i;
     }
     }
     $43 = ((($$0222$i$i)) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = ($44<<24>>24)==(0);
     if ($46) {
      $$021$lcssa$i$i = $39;$$022$lcssa$i$i = $43;
      break L6;
     } else {
      $$0213$i$i = $39;$$0222$i$i = $43;$$04$i$i = $$1$i$i;$33 = $45;$37 = $44;
     }
    }
   }
  } while(0);
  $47 = (($4) + ($$021$lcssa$i$i)|0);
  HEAP8[$47>>0] = 0;
  $$0$i$i = $$022$lcssa$i$i;
  while(1) {
   $48 = HEAP8[$$0$i$i>>0]|0;
   $49 = (_IsSpace($48)|0);
   $50 = ($49|0)==(0);
   $51 = ((($$0$i$i)) + 1|0);
   if ($50) {
    break;
   } else {
    $$0$i$i = $51;
   }
  }
  $52 = HEAP8[$$0$i$i>>0]|0;
  $53 = ($52<<24>>24)==(58);
  if ($53) {
   $$0$i63$i = $51;
   while(1) {
    $54 = HEAP8[$$0$i63$i>>0]|0;
    $55 = (_IsSpace($54)|0);
    $56 = ($55|0)==(0);
    $57 = ((($$0$i63$i)) + 1|0);
    if ($56) {
     break;
    } else {
     $$0$i63$i = $57;
    }
   }
   (_CS_AddLabel($0,$4)|0);
   $58 = HEAP8[$$0$i63$i>>0]|0;
   $59 = ($58<<24>>24)==(0);
   if (!($59)) {
    $60 = $58 << 24 >> 24;
    $$0213$i67$i = 0;$$0222$i68$i = $$0$i63$i;$$04$i66$i = 0;$62 = $60;$66 = $58;
    while(1) {
     $61 = ($$04$i66$i|0)==(0);
     if ($61) {
      $memchr117$i = (_memchr(33069,$62,3)|0);
      $63 = ($memchr117$i|0)==(0|0);
      if (!($63)) {
       $$021$lcssa$i73$i = $$0213$i67$i;$$022$lcssa$i72$i = $$0222$i68$i;
       break;
      }
     }
     $64 = ($$0213$i67$i>>>0)<(74);
     if ($64) {
      $65 = (($4) + ($$0213$i67$i)|0);
      HEAP8[$65>>0] = $66;
     } else {
      $67 = ($$0213$i67$i|0)==(74);
      if ($67) {
       _Error(33072,$vararg_buffer5);
      }
     }
     $68 = (($$0213$i67$i) + 1)|0;
     $69 = HEAP8[$$0222$i68$i>>0]|0;
     switch ($69<<24>>24) {
     case 41:  {
      $70 = (($$04$i66$i) + -1)|0;
      $$1$i71$i = $70;
      break;
     }
     case 40:  {
      $71 = (($$04$i66$i) + 1)|0;
      $$1$i71$i = $71;
      break;
     }
     default: {
      $$1$i71$i = $$04$i66$i;
     }
     }
     $72 = ((($$0222$i68$i)) + 1|0);
     $73 = HEAP8[$72>>0]|0;
     $74 = $73 << 24 >> 24;
     $75 = ($73<<24>>24)==(0);
     if ($75) {
      $$021$lcssa$i73$i = $68;$$022$lcssa$i72$i = $72;
      break;
     } else {
      $$0213$i67$i = $68;$$0222$i68$i = $72;$$04$i66$i = $$1$i71$i;$62 = $74;$66 = $73;
     }
    }
    $76 = (($4) + ($$021$lcssa$i73$i)|0);
    HEAP8[$76>>0] = 0;
    $$0$i75$i = $$022$lcssa$i72$i;
    while(1) {
     $77 = HEAP8[$$0$i75$i>>0]|0;
     $78 = (_IsSpace($77)|0);
     $79 = ($78|0)==(0);
     $80 = ((($$0$i75$i)) + 1|0);
     if ($79) {
      $$059$i = $$0$i75$i;
      label = 45;
      break;
     } else {
      $$0$i75$i = $80;
     }
    }
   }
  } else {
   $$059$i = $$0$i$i;
   label = 45;
  }
  L47: do {
   if ((label|0) == 45) {
    $81 = (_FindOP65($4)|0);
    $82 = ($81|0)==(0|0);
    if ($82) {
     HEAP32[$vararg_buffer7>>2] = $4;
     _Error(33159,$vararg_buffer7);
     break;
    }
    HEAP8[$5>>0] = 0;
    $83 = HEAP8[$$059$i>>0]|0;
    $84 = $83 << 24 >> 24;
    L52: do {
     switch ($84|0) {
     case 0:  {
      $85 = ((($81)) + 18|0);
      $86 = HEAP16[$85>>1]|0;
      $87 = ($86&65535) >>> 13;
      $$lobit$i = $87 & 1;
      $$$i = $$lobit$i&65535;
      $$1$i13 = 0;$$161115$i = $$$i;
      break;
     }
     case 35:  {
      $88 = ((($$059$i)) + 1|0);
      (_StrCopy($5,75,$88)|0);
      $$1$i13 = 0;$$161115$i = 2;
      break;
     }
     case 40:  {
      $89 = ((($$059$i)) + 1|0);
      $90 = HEAP8[$89>>0]|0;
      $91 = ($90<<24>>24)==(0);
      L56: do {
       if ($91) {
        $$021$lcssa$i85$i = 0;$$022$lcssa$i84$i = $89;
       } else {
        $92 = $90 << 24 >> 24;
        $$0213$i79$i = 0;$$0222$i80$i = $89;$$04$i78$i = 0;$94 = $92;$98 = $90;
        while(1) {
         $93 = ($$04$i78$i|0)==(0);
         if ($93) {
          $memchr116$i = (_memchr(33202,$94,3)|0);
          $95 = ($memchr116$i|0)==(0|0);
          if (!($95)) {
           $$021$lcssa$i85$i = $$0213$i79$i;$$022$lcssa$i84$i = $$0222$i80$i;
           break L56;
          }
         }
         $96 = ($$0213$i79$i>>>0)<(74);
         if ($96) {
          $97 = (($5) + ($$0213$i79$i)|0);
          HEAP8[$97>>0] = $98;
         } else {
          $99 = ($$0213$i79$i|0)==(74);
          if ($99) {
           _Error(33072,$vararg_buffer10);
          }
         }
         $100 = (($$0213$i79$i) + 1)|0;
         $101 = HEAP8[$$0222$i80$i>>0]|0;
         switch ($101<<24>>24) {
         case 41:  {
          $102 = (($$04$i78$i) + -1)|0;
          $$1$i83$i = $102;
          break;
         }
         case 40:  {
          $103 = (($$04$i78$i) + 1)|0;
          $$1$i83$i = $103;
          break;
         }
         default: {
          $$1$i83$i = $$04$i78$i;
         }
         }
         $104 = ((($$0222$i80$i)) + 1|0);
         $105 = HEAP8[$104>>0]|0;
         $106 = $105 << 24 >> 24;
         $107 = ($105<<24>>24)==(0);
         if ($107) {
          $$021$lcssa$i85$i = $100;$$022$lcssa$i84$i = $104;
          break L56;
         } else {
          $$0213$i79$i = $100;$$0222$i80$i = $104;$$04$i78$i = $$1$i83$i;$94 = $106;$98 = $105;
         }
        }
       }
      } while(0);
      $108 = (($5) + ($$021$lcssa$i85$i)|0);
      HEAP8[$108>>0] = 0;
      $109 = HEAP8[$$022$lcssa$i84$i>>0]|0;
      switch ($109<<24>>24) {
      case 0:  {
       _Error(33072,$vararg_buffer12);
       break L47;
       break;
      }
      case 44:  {
       $110 = ((($$022$lcssa$i84$i)) + 1|0);
       $$0$i87$i = $110;
       while(1) {
        $111 = HEAP8[$$0$i87$i>>0]|0;
        $112 = (_IsSpace($111)|0);
        $113 = ($112|0)==(0);
        $114 = ((($$0$i87$i)) + 1|0);
        if ($113) {
         break;
        } else {
         $$0$i87$i = $114;
        }
       }
       $115 = HEAP8[$$0$i87$i>>0]|0;
       $116 = $115 << 24 >> 24;
       $117 = (_toupper($116)|0);
       $118 = ($117|0)==(88);
       if ($118) {
        $$0$i89$i = $114;
       } else {
        _Error(33205,$vararg_buffer14);
        break L47;
       }
       while(1) {
        $119 = HEAP8[$$0$i89$i>>0]|0;
        $120 = (_IsSpace($119)|0);
        $121 = ($120|0)==(0);
        $122 = ((($$0$i89$i)) + 1|0);
        if ($121) {
         break;
        } else {
         $$0$i89$i = $122;
        }
       }
       $123 = HEAP8[$$0$i89$i>>0]|0;
       $124 = ($123<<24>>24)==(41);
       if ($124) {
        $$0$i91$i = $122;
       } else {
        _Error(33234,$vararg_buffer16);
        break L47;
       }
       while(1) {
        $125 = HEAP8[$$0$i91$i>>0]|0;
        $126 = (_IsSpace($125)|0);
        $127 = ($126|0)==(0);
        $128 = ((($$0$i91$i)) + 1|0);
        if ($127) {
         break;
        } else {
         $$0$i91$i = $128;
        }
       }
       $129 = HEAP8[$$0$i91$i>>0]|0;
       $130 = ($129<<24>>24)==(0);
       if ($130) {
        $$1$i13 = 0;$$161115$i = 9;
        break L52;
       }
       _Error(33072,$vararg_buffer18);
       break L47;
       break;
      }
      case 41:  {
       $131 = ((($$022$lcssa$i84$i)) + 1|0);
       $$0$i93$i = $131;
       while(1) {
        $132 = HEAP8[$$0$i93$i>>0]|0;
        $133 = (_IsSpace($132)|0);
        $134 = ($133|0)==(0);
        $135 = ((($$0$i93$i)) + 1|0);
        if ($134) {
         break;
        } else {
         $$0$i93$i = $135;
        }
       }
       $136 = HEAP8[$$0$i93$i>>0]|0;
       switch ($136<<24>>24) {
       case 0:  {
        $$1$i13 = 0;$$161115$i = 11;
        break L52;
        break;
       }
       case 44:  {
        $$0$i95$i = $135;
        break;
       }
       default: {
        _Error(33072,$vararg_buffer24);
        break L47;
       }
       }
       while(1) {
        $137 = HEAP8[$$0$i95$i>>0]|0;
        $138 = (_IsSpace($137)|0);
        $139 = ($138|0)==(0);
        $140 = ((($$0$i95$i)) + 1|0);
        if ($139) {
         break;
        } else {
         $$0$i95$i = $140;
        }
       }
       $141 = HEAP8[$$0$i95$i>>0]|0;
       $142 = $141 << 24 >> 24;
       $143 = (_toupper($142)|0);
       $144 = ($143|0)==(89);
       if ($144) {
        $$0$i97$i = $140;
       } else {
        _Error(33263,$vararg_buffer20);
        break L47;
       }
       while(1) {
        $145 = HEAP8[$$0$i97$i>>0]|0;
        $146 = (_IsSpace($145)|0);
        $147 = ($146|0)==(0);
        $148 = ((($$0$i97$i)) + 1|0);
        if ($147) {
         break;
        } else {
         $$0$i97$i = $148;
        }
       }
       $149 = HEAP8[$$0$i97$i>>0]|0;
       $150 = ($149<<24>>24)==(0);
       if ($150) {
        $$1$i13 = 0;$$161115$i = 10;
        break L52;
       }
       _Error(33072,$vararg_buffer22);
       break L47;
       break;
      }
      default: {
       $$1$i13 = 0;$$161115$i = 0;
       break L52;
      }
      }
      break;
     }
     case 65: case 97:  {
      $151 = ((($$059$i)) + 1|0);
      $152 = HEAP8[$151>>0]|0;
      $153 = ($152<<24>>24)==(0);
      if ($153) {
       $$1$i13 = 0;$$161115$i = 1;
      } else {
       label = 85;
      }
      break;
     }
     default: {
      label = 85;
     }
     }
    } while(0);
    L106: do {
     if ((label|0) == 85) {
      $154 = ($83<<24>>24)==(0);
      L108: do {
       if ($154) {
        $$021$lcssa$i107$i = 0;$$022$lcssa$i106$i = $$059$i;
       } else {
        $$0213$i101$i = 0;$$0222$i102$i = $$059$i;$$04$i100$i = 0;$156 = $84;$160 = $83;
        while(1) {
         $155 = ($$04$i100$i|0)==(0);
         if ($155) {
          $memchr$i = (_memchr(33292,$156,2)|0);
          $157 = ($memchr$i|0)==(0|0);
          if (!($157)) {
           $$021$lcssa$i107$i = $$0213$i101$i;$$022$lcssa$i106$i = $$0222$i102$i;
           break L108;
          }
         }
         $158 = ($$0213$i101$i>>>0)<(74);
         if ($158) {
          $159 = (($5) + ($$0213$i101$i)|0);
          HEAP8[$159>>0] = $160;
         } else {
          $161 = ($$0213$i101$i|0)==(74);
          if ($161) {
           _Error(33072,$vararg_buffer26);
          }
         }
         $162 = (($$0213$i101$i) + 1)|0;
         $163 = HEAP8[$$0222$i102$i>>0]|0;
         switch ($163<<24>>24) {
         case 41:  {
          $164 = (($$04$i100$i) + -1)|0;
          $$1$i105$i = $164;
          break;
         }
         case 40:  {
          $165 = (($$04$i100$i) + 1)|0;
          $$1$i105$i = $165;
          break;
         }
         default: {
          $$1$i105$i = $$04$i100$i;
         }
         }
         $166 = ((($$0222$i102$i)) + 1|0);
         $167 = HEAP8[$166>>0]|0;
         $168 = $167 << 24 >> 24;
         $169 = ($167<<24>>24)==(0);
         if ($169) {
          $$021$lcssa$i107$i = $162;$$022$lcssa$i106$i = $166;
          break L108;
         } else {
          $$0213$i101$i = $162;$$0222$i102$i = $166;$$04$i100$i = $$1$i105$i;$156 = $168;$160 = $167;
         }
        }
       }
      } while(0);
      $170 = (($5) + ($$021$lcssa$i107$i)|0);
      HEAP8[$170>>0] = 0;
      $171 = HEAP8[$$022$lcssa$i106$i>>0]|0;
      switch ($171<<24>>24) {
      case 0:  {
       $172 = ((($81)) + 18|0);
       $173 = HEAP16[$172>>1]|0;
       $174 = $173 & 3;
       $175 = ($174<<16>>16)==(0);
       if ($175) {
        $176 = (_GetZPInfo($5)|0);
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1$i13 = 0;$$161115$i = 3;
         break L106;
        }
        $178 = HEAP16[$172>>1]|0;
        $179 = $178 & 512;
        $180 = ($179<<16>>16)==(0);
        if ($180) {
         $$1$i13 = 0;$$161115$i = 6;
         break L106;
        }
        $181 = (_IsLocalLabelName($5)|0);
        $182 = ($181|0)==(0);
        if ($182) {
         $$1$i13 = 0;$$161115$i = 6;
         break L106;
        }
        HEAP32[$vararg_buffer28>>2] = $5;
        _Error(33294,$vararg_buffer28);
        $$1$i13 = 0;$$161115$i = 6;
        break L106;
       } else {
        $201 = (_HashStr($5)|0);
        $202 = (($201>>>0) % 29)&-1;
        $203 = (((($0)) + 32|0) + ($202<<2)|0);
        $$07$i$i = HEAP32[$203>>2]|0;
        $204 = ($$07$i$i|0)==(0|0);
        if (!($204)) {
         $$08$i$i = $$07$i$i;
         while(1) {
          $205 = ((($$08$i$i)) + 4|0);
          $206 = HEAP32[$205>>2]|0;
          $207 = (_strcmp($5,$206)|0);
          $208 = ($207|0)==(0);
          if ($208) {
           $$1$i13 = $$08$i$i;$$161115$i = 12;
           break L106;
          }
          $$0$i114$i = HEAP32[$$08$i$i>>2]|0;
          $209 = ($$0$i114$i|0)==(0|0);
          if ($209) {
           break;
          } else {
           $$08$i$i = $$0$i114$i;
          }
         }
        }
        $210 = (_NewCodeLabel($5,$202)|0);
        $211 = ((($210)) + 8|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = (((($0)) + 32|0) + ($212<<2)|0);
        $214 = HEAP32[$213>>2]|0;
        HEAP32[$210>>2] = $214;
        HEAP32[$213>>2] = $210;
        $$1$i13 = $210;$$161115$i = 12;
        break L106;
       }
       break;
      }
      case 44:  {
       break;
      }
      default: {
       $$1$i13 = 0;$$161115$i = 0;
       break L106;
      }
      }
      $183 = ((($$022$lcssa$i106$i)) + 1|0);
      $$0$i109$i = $183;
      while(1) {
       $184 = HEAP8[$$0$i109$i>>0]|0;
       $185 = (_IsSpace($184)|0);
       $186 = ($185|0)==(0);
       $187 = ((($$0$i109$i)) + 1|0);
       if ($186) {
        break;
       } else {
        $$0$i109$i = $187;
       }
      }
      $188 = HEAP8[$$0$i109$i>>0]|0;
      $189 = ($188<<24>>24)==(0);
      if ($189) {
       _Error(33072,$vararg_buffer31);
       break L47;
      }
      $190 = $188 << 24 >> 24;
      $191 = (_toupper($190)|0);
      $$0$i111$i = $187;
      while(1) {
       $192 = HEAP8[$$0$i111$i>>0]|0;
       $193 = (_IsSpace($192)|0);
       $194 = ($193|0)==(0);
       $195 = ((($$0$i111$i)) + 1|0);
       if ($194) {
        break;
       } else {
        $$0$i111$i = $195;
       }
      }
      $sext$i = $191 << 24;
      $196 = $sext$i >> 24;
      switch ($196|0) {
      case 88:  {
       $197 = (_GetZPInfo($5)|0);
       $198 = ($197|0)==(0|0);
       $$62$i = $198 ? 7 : 4;
       $$060$i = $$62$i;
       break;
      }
      case 89:  {
       $$060$i = 8;
       break;
      }
      default: {
       _Error(33072,$vararg_buffer33);
       break L47;
      }
      }
      $199 = HEAP8[$$0$i111$i>>0]|0;
      $200 = ($199<<24>>24)==(0);
      if ($200) {
       $$1$i13 = 0;$$161115$i = $$060$i;
      } else {
       _Error(33072,$vararg_buffer35);
       break L47;
      }
     }
    } while(0);
    $215 = HEAP32[$81>>2]|0;
    $216 = (_NewCodeEntry($215,$$161115$i,$5,$$1$i13,$1)|0);
    $217 = ($216|0)==(0|0);
    if ($217) {
     _SB_Done($7);
     STACKTOP = sp;return;
    }
    $$idx$i$i = ((($0)) + 20|0);
    $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
    $218 = ($$idx$val$i$i|0)==(0);
    L156: do {
     if (!($218)) {
      $219 = ((($0)) + 28|0);
      $$014$i4$i = 0;
      while(1) {
       $222 = HEAP32[$219>>2]|0;
       $223 = (($222) + ($$014$i4$i<<2)|0);
       $224 = HEAP32[$223>>2]|0;
       _CE_AttachLabel($216,$224);
       $225 = (($$014$i4$i) + 1)|0;
       $226 = ($225>>>0)<($$idx$val$i$i>>>0);
       if (!($226)) {
        break L156;
       }
       $$pre$i$i = HEAP32[$$idx$i$i>>2]|0;
       $227 = ($$pre$i$i>>>0)>($225>>>0);
       if ($227) {
        $$014$i4$i = $225;
       } else {
        break;
       }
      }
      $220 = HEAP32[3332]|0;
      $221 = HEAP32[3330]|0;
      FUNCTION_TABLE_viiii[$220 & 1]($221,40922,40950,129);
      // unreachable;
     }
    } while(0);
    HEAP32[$$idx$i$i>>2] = 0;
    $228 = ((($0)) + 8|0);
    $229 = HEAP32[$228>>2]|0;
    _CollInsert($228,$216,$229);
    _SB_Done($7);
    STACKTOP = sp;return;
   }
  } while(0);
  _SB_Done($7);
  STACKTOP = sp;return;
 }
 }
}
function _CS_AddLabel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$021 = 0, $$07$i = 0, $$08$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = (_HashStr($1)|0);
 $3 = (($2>>>0) % 29)&-1;
 $4 = (((($0)) + 32|0) + ($3<<2)|0);
 $$07$i = HEAP32[$4>>2]|0;
 $5 = ($$07$i|0)==(0|0);
 L1: do {
  if ($5) {
   label = 6;
  } else {
   $$08$i = $$07$i;
   while(1) {
    $6 = ((($$08$i)) + 4|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (_strcmp($1,$7)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     break;
    }
    $$0$i = HEAP32[$$08$i>>2]|0;
    $10 = ($$0$i|0)==(0|0);
    if ($10) {
     label = 6;
     break L1;
    } else {
     $$08$i = $$0$i;
    }
   }
   $11 = ((($$08$i)) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$0 = $$08$i;
   } else {
    HEAP32[$vararg_buffer>>2] = $1;
    _Error(33357,$vararg_buffer);
    $$021 = $$08$i;
    STACKTOP = sp;return ($$021|0);
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $14 = (_NewCodeLabel($1,$3)|0);
  $15 = ((($14)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (((($0)) + 32|0) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$14>>2] = $18;
  HEAP32[$17>>2] = $14;
  $$0 = $14;
 }
 $19 = ((($0)) + 20|0);
 $20 = (_CollIndex($19,$$0)|0);
 $21 = ($20|0)>(-1);
 if ($21) {
  HEAP32[$vararg_buffer1>>2] = $1;
  _Error(33357,$vararg_buffer1);
  $$021 = $$0;
  STACKTOP = sp;return ($$021|0);
 } else {
  $22 = HEAP32[$19>>2]|0;
  _CollInsert($19,$$0,$22);
  $$021 = $$0;
  STACKTOP = sp;return ($$021|0);
 }
 return (0)|0;
}
function _CS_InsertEntry($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 8|0);
 _CollInsert($3,$1,$2);
 return;
}
function _CS_DelEntry($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i24 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if (!($4)) {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,40922,40950,129);
  // unreachable;
 }
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $$idx$i = ((($10)) + 24|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $11 = ($$idx$val$i|0)==(0);
 do {
  if (!($11)) {
   $12 = (($3) + -1)|0;
   $13 = ($12|0)==($1|0);
   if (!($13)) {
    $28 = (($1) + 1)|0;
    $29 = ($3>>>0)>($28>>>0);
    if ($29) {
     $32 = (($8) + ($28<<2)|0);
     $33 = HEAP32[$32>>2]|0;
     _CS_MoveLabels($0,$10,$33);
     break;
    } else {
     $30 = HEAP32[3332]|0;
     $31 = HEAP32[3330]|0;
     FUNCTION_TABLE_viiii[$30 & 1]($31,40922,40950,129);
     // unreachable;
    }
   }
   $14 = ((($10)) + 32|0);
   $15 = ((($0)) + 20|0);
   $16 = (($$idx$val$i) + -1)|0;
   $21 = $16;
   while(1) {
    $19 = HEAP32[$14>>2]|0;
    $20 = (($19) + ($21<<2)|0);
    $22 = HEAP32[$20>>2]|0;
    $23 = ((($22)) + 12|0);
    HEAP32[$23>>2] = 0;
    $24 = HEAP32[$15>>2]|0;
    _CollInsert($15,$22,$24);
    $25 = ($21|0)==(0);
    if ($25) {
     label = 9;
     break;
    }
    $$pre$i = HEAP32[$$idx$i>>2]|0;
    $26 = (($21) + -1)|0;
    $27 = ($$pre$i>>>0)>($26>>>0);
    if ($27) {
     $21 = $26;
    } else {
     label = 6;
     break;
    }
   }
   if ((label|0) == 6) {
    $17 = HEAP32[3332]|0;
    $18 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$17 & 1]($18,40922,40950,129);
    // unreachable;
   }
   else if ((label|0) == 9) {
    HEAP32[$$idx$i>>2] = 0;
    break;
   }
  }
 } while(0);
 $34 = ((($10)) + 20|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0|0);
 if ($36) {
  $39 = ((($0)) + 8|0);
  _CollDelete($39,$1);
  _FreeCodeEntry($10);
  return;
 }
 $37 = ((($35)) + 16|0);
 _CollDeleteItem($37,$10);
 _CE_ClearJumpTo($10);
 $$idx$val$i24 = HEAP32[$37>>2]|0;
 $38 = ($$idx$val$i24|0)==(0);
 if (!($38)) {
  $39 = ((($0)) + 8|0);
  _CollDelete($39,$1);
  _FreeCodeEntry($10);
  return;
 }
 _CS_DelLabel($0,$35);
 $39 = ((($0)) + 8|0);
 _CollDelete($39,$1);
 _FreeCodeEntry($10);
 return;
}
function _CS_MoveLabels($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx$i = 0, $$idx$i18 = 0, $$idx$val$i = 0, $$idx$val$i19 = 0, $$pre = 0, $$pre26 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($1)) + 24|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $$idx$i18 = ((($2)) + 24|0);
 $$idx$val$i19 = HEAP32[$$idx$i18>>2]|0;
 $3 = ($$idx$val$i19|0)==(0);
 if ($3) {
  $4 = ($$idx$val$i|0)==(0);
  if ($4) {
   return;
  }
  $5 = ((($1)) + 32|0);
  $6 = (($$idx$val$i) + -1)|0;
  $26 = $6;
  while(1) {
   $24 = HEAP32[$5>>2]|0;
   $25 = (($24) + ($26<<2)|0);
   $27 = HEAP32[$25>>2]|0;
   _CE_MoveLabel($27,$2);
   $28 = ($26|0)==(0);
   if ($28) {
    label = 12;
    break;
   }
   $$pre26 = HEAP32[$$idx$i>>2]|0;
   $29 = (($26) + -1)|0;
   $30 = ($$pre26>>>0)>($29>>>0);
   if ($30) {
    $26 = $29;
   } else {
    label = 9;
    break;
   }
  }
  if ((label|0) == 9) {
   $22 = HEAP32[3332]|0;
   $23 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$22 & 1]($23,40922,40950,129);
   // unreachable;
  }
  else if ((label|0) == 12) {
   return;
  }
 } else {
  $7 = ((($2)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($$idx$val$i|0)==(0);
  if ($10) {
   return;
  }
  $11 = ((($1)) + 32|0);
  $12 = (($$idx$val$i) + -1)|0;
  $17 = $12;
  while(1) {
   $15 = HEAP32[$11>>2]|0;
   $16 = (($15) + ($17<<2)|0);
   $18 = HEAP32[$16>>2]|0;
   _CL_MoveRefs($18,$9);
   _CS_DelLabel($0,$18);
   $19 = ($17|0)==(0);
   if ($19) {
    label = 12;
    break;
   }
   $$pre = HEAP32[$$idx$i>>2]|0;
   $20 = (($17) + -1)|0;
   $21 = ($$pre>>>0)>($20>>>0);
   if ($21) {
    $17 = $20;
   } else {
    label = 6;
    break;
   }
  }
  if ((label|0) == 6) {
   $13 = HEAP32[3332]|0;
   $14 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$13 & 1]($14,40922,40950,129);
   // unreachable;
  }
  else if ((label|0) == 12) {
   return;
  }
 }
}
function _CS_DelLabel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$02024 = 0, $$idx = 0, $$idx$val = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (((($0)) + 32|0) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,33391,33401,165);
  // unreachable;
 }
 $9 = ($5|0)==($1|0);
 do {
  if ($9) {
   $10 = HEAP32[$1>>2]|0;
   HEAP32[$4>>2] = $10;
  } else {
   $$0$i = $5;
   while(1) {
    $11 = HEAP32[$$0$i>>2]|0;
    $12 = ($11|0)==($1|0);
    if ($12) {
     label = 8;
     break;
    }
    $13 = ($11|0)==(0|0);
    if ($13) {
     label = 7;
     break;
    } else {
     $$0$i = $11;
    }
   }
   if ((label|0) == 7) {
    $14 = HEAP32[3332]|0;
    $15 = HEAP32[3331]|0;
    FUNCTION_TABLE_viiii[$14 & 1]($15,33416,33401,175);
    // unreachable;
   }
   else if ((label|0) == 8) {
    $16 = HEAP32[$1>>2]|0;
    HEAP32[$$0$i>>2] = $16;
    break;
   }
  }
 } while(0);
 $$idx = ((($1)) + 16|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $17 = ($$idx$val|0)==(0);
 L13: do {
  if (!($17)) {
   $18 = ((($1)) + 24|0);
   $$02024 = 0;
   while(1) {
    $21 = HEAP32[$18>>2]|0;
    $22 = (($21) + ($$02024<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    _CE_ClearJumpTo($23);
    $24 = (($$02024) + 1)|0;
    $25 = ($24>>>0)<($$idx$val>>>0);
    if (!($25)) {
     break L13;
    }
    $$pre = HEAP32[$$idx>>2]|0;
    $26 = ($$pre>>>0)>($24>>>0);
    if ($26) {
     $$02024 = $24;
    } else {
     break;
    }
   }
   $19 = HEAP32[3332]|0;
   $20 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$19 & 1]($20,40922,40950,129);
   // unreachable;
  }
 } while(0);
 HEAP32[$$idx>>2] = 0;
 $27 = ((($1)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  _FreeCodeLabel($1);
  return;
 }
 $30 = ((($28)) + 24|0);
 _CollDeleteItem($30,$1);
 _FreeCodeLabel($1);
 return;
}
function _CS_DelEntries($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$in = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 } else {
  $$in = $2;
 }
 while(1) {
  $4 = (($$in) + -1)|0;
  $5 = (($4) + ($1))|0;
  _CS_DelEntry($0,$5);
  $6 = ($4|0)==(0);
  if ($6) {
   break;
  } else {
   $$in = $4;
  }
 }
 return;
}
function _CS_MoveEntries($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$014$i12 = 0, $$idx$i = 0, $$idx$i9 = 0, $$idx$val$i = 0, $$idx$val$i10 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($2|0)==(0);
 if ($4) {
  return;
 }
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $5 = ($$idx$val$i|0)==($3|0);
 if ($5) {
  $6 = ($3>>>0)>($1>>>0);
  if (!($6)) {
   $7 = HEAP32[3332]|0;
   $8 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
   // unreachable;
  }
  $9 = ((($0)) + 16|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($1<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $$idx$i9 = ((($0)) + 20|0);
  $$idx$val$i10 = HEAP32[$$idx$i9>>2]|0;
  $13 = ($$idx$val$i10|0)==(0);
  L9: do {
   if (!($13)) {
    $14 = ((($0)) + 28|0);
    $$014$i12 = 0;
    while(1) {
     $17 = HEAP32[$14>>2]|0;
     $18 = (($17) + ($$014$i12<<2)|0);
     $19 = HEAP32[$18>>2]|0;
     _CE_AttachLabel($12,$19);
     $20 = (($$014$i12) + 1)|0;
     $21 = ($20>>>0)<($$idx$val$i10>>>0);
     if (!($21)) {
      break L9;
     }
     $$pre$i = HEAP32[$$idx$i9>>2]|0;
     $22 = ($$pre$i>>>0)>($20>>>0);
     if ($22) {
      $$014$i12 = $20;
     } else {
      break;
     }
    }
    $15 = HEAP32[3332]|0;
    $16 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$15 & 1]($16,40922,40950,129);
    // unreachable;
   }
  } while(0);
  HEAP32[$$idx$i9>>2] = 0;
 }
 $23 = ((($0)) + 8|0);
 _CollMoveMultiple($23,$1,$2,$3);
 return;
}
function _CS_GetPrevEntry($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $$idx = ((($0)) + 16|0);
 $3 = (($1) + -1)|0;
 $$idx$val = HEAP32[$$idx>>2]|0;
 $4 = (($$idx$val) + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $$0 = $5;
 return ($$0|0);
}
function _CS_GetNextEntry($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$idx = 0, $$idx$val = 0, $$idx4 = 0, $$idx4$val = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $2 = (($$idx$val) + -1)|0;
 $3 = ($2>>>0)>($1>>>0);
 if (!($3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $$idx4 = ((($0)) + 16|0);
 $4 = (($1) + 1)|0;
 $$idx4$val = HEAP32[$$idx4>>2]|0;
 $5 = (($$idx4$val) + ($4<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $$0 = $6;
 return ($$0|0);
}
function _CS_GetEntries($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$013 = 0, $$0712 = 0, $$0811 = 0, $$09 = 0, $$idx = 0, $$idx$val = 0, $$idx10 = 0, $$idx10$val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (($3) + ($2))|0;
 $$idx = ((($0)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $5 = ($4>>>0)>($$idx$val>>>0);
 if ($5) {
  $$09 = 0;
  return ($$09|0);
 }
 $6 = ($3|0)==(0);
 if ($6) {
  $$09 = 1;
  return ($$09|0);
 }
 $$idx10 = ((($0)) + 16|0);
 $$013 = $3;$$0712 = $2;$$0811 = $1;
 while(1) {
  $7 = (($$013) + -1)|0;
  $8 = (($$0712) + 1)|0;
  $$idx10$val = HEAP32[$$idx10>>2]|0;
  $9 = (($$idx10$val) + ($$0712<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($$0811)) + 4|0);
  HEAP32[$$0811>>2] = $10;
  $12 = ($7|0)==(0);
  if ($12) {
   $$09 = 1;
   break;
  } else {
   $$013 = $7;$$0712 = $8;$$0811 = $11;
  }
 }
 return ($$09|0);
}
function _CS_GetEntryIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = (_CollIndex($2,$1)|0);
 $4 = ($3|0)>(-1);
 if ($4) {
  return ($3|0);
 } else {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,40939,33401,734);
  // unreachable;
 }
 return (0)|0;
}
function _CS_RangeHasLabel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$017 = 0, $$018 = 0, $$2 = 0, $$idx = 0, $$idx$i = 0, $$idx$i20 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i21 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $3 = ($$idx$val$i>>>0)>($1>>>0);
 if (!($3)) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,33439,33401,749);
  // unreachable;
 }
 $6 = (($2) + ($1))|0;
 $7 = ($6>>>0)>($$idx$val$i>>>0);
 $8 = (($$idx$val$i) - ($1))|0;
 $$ = $7 ? $8 : $2;
 $$idx = ((($0)) + 16|0);
 $$017 = $1;$$018 = $$;
 while(1) {
  $9 = ($$018|0)==(0);
  if ($9) {
   $$2 = 0;
   label = 6;
   break;
  }
  $10 = (($$018) + -1)|0;
  $11 = (($$017) + 1)|0;
  $$idx$val = HEAP32[$$idx>>2]|0;
  $12 = (($$idx$val) + ($$017<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $$idx$i20 = ((($13)) + 24|0);
  $$idx$val$i21 = HEAP32[$$idx$i20>>2]|0;
  $14 = ($$idx$val$i21|0)==(0);
  if ($14) {
   $$017 = $11;$$018 = $10;
  } else {
   $$2 = 1;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  return ($$2|0);
 }
 return (0)|0;
}
function _CS_GenLabel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$idx$i = 0, $$idx$val$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($1)) + 24|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i|0)==(0);
 if ($2) {
  $6 = (_GetLocalLabel()|0);
  $7 = (_LocalLabelName($6)|0);
  $8 = (_HashStr($7)|0);
  $9 = (($8>>>0) % 29)&-1;
  $10 = (_NewCodeLabel($7,$9)|0);
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (((($0)) + 32|0) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$10>>2] = $14;
  HEAP32[$13>>2] = $10;
  _CE_AttachLabel($1,$10);
  $$0 = $10;
  return ($$0|0);
 } else {
  $3 = ((($1)) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $$0 = $5;
  return ($$0|0);
 }
 return (0)|0;
}
function _CS_MergeLabels($0) {
 $0 = $0|0;
 var $$05873 = 0, $$059$ph77 = 0, $$060 = 0, $$06067 = 0, $$0606886 = 0, $$078 = 0, $$170 = 0, $$idx = 0, $$idx$i = 0, $$idx$i61 = 0, $$idx$i63 = 0, $$idx$val = 0, $$idx$val$i62 = 0, $$idx$val$i6269 = 0, $$idx$val$i64 = 0, $$idx$val$i72 = 0, $$pre = 0, $$pre81 = 0, $1 = 0, $10 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $$078 = 0;
 while(1) {
  $3 = (((($0)) + 32|0) + ($$078<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  L3: do {
   if (!($5)) {
    $$059$ph77 = $3;$46 = $4;
    while(1) {
     $7 = $46;
     while(1) {
      $6 = ((($7)) + 12|0);
      $8 = HEAP32[$6>>2]|0;
      $9 = ($8|0)==(0|0);
      if (!($9)) {
       break;
      }
      $10 = HEAP32[$7>>2]|0;
      HEAP32[$$059$ph77>>2] = $10;
      $$idx$i = ((($7)) + 16|0);
      $$idx$val$i72 = HEAP32[$$idx$i>>2]|0;
      $11 = ($$idx$val$i72|0)==(0);
      if (!($11)) {
       $12 = ((($7)) + 24|0);
       $$pre = HEAP32[$12>>2]|0;
       $$05873 = 0;
       while(1) {
        $13 = (($$pre) + ($$05873<<2)|0);
        $14 = HEAP32[$13>>2]|0;
        $15 = ((($14)) + 20|0);
        HEAP32[$15>>2] = 0;
        $16 = (($$05873) + 1)|0;
        $17 = ($16>>>0)<($$idx$val$i72>>>0);
        if ($17) {
         $$05873 = $16;
        } else {
         break;
        }
       }
      }
      $18 = HEAP8[47051]|0;
      $19 = ($18<<24>>24)==(0);
      if (!($19)) {
       $20 = ((($7)) + 4|0);
       $21 = HEAP32[$20>>2]|0;
       HEAP32[$vararg_buffer>>2] = $21;
       (_printf(33458,$vararg_buffer)|0);
      }
      _FreeCodeLabel($7);
      $22 = HEAP32[$$059$ph77>>2]|0;
      $23 = ($22|0)==(0|0);
      if ($23) {
       break L3;
      } else {
       $7 = $22;
      }
     }
     $24 = HEAP32[$7>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      break;
     } else {
      $$059$ph77 = $7;$46 = $24;
     }
    }
   }
  } while(0);
  $26 = (($$078) + 1)|0;
  $exitcond = ($26|0)==(29);
  if ($exitcond) {
   break;
  } else {
   $$078 = $26;
  }
 }
 $$idx$i61 = ((($0)) + 8|0);
 $$idx$val$i6269 = HEAP32[$$idx$i61>>2]|0;
 $1 = ($$idx$val$i6269|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ((($0)) + 16|0);
 $$170 = 0;
 L23: while(1) {
  $27 = HEAP32[$2>>2]|0;
  $28 = (($27) + ($$170<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $$idx$i63 = ((($29)) + 24|0);
  $$idx$val$i64 = HEAP32[$$idx$i63>>2]|0;
  $30 = ($$idx$val$i64|0)==(0);
  if (!($30)) {
   $31 = ((($29)) + 32|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $$06067 = (($$idx$val$i64) + -1)|0;
   $34 = ($$06067|0)==(0);
   L27: do {
    if (!($34)) {
     $35 = ($$idx$val$i64|0)==(0);
     if ($35) {
      label = 18;
      break L23;
     } else {
      $$0606886 = $$06067;
     }
     while(1) {
      $38 = HEAP32[$31>>2]|0;
      $39 = (($38) + ($$0606886<<2)|0);
      $40 = HEAP32[$39>>2]|0;
      _CL_MoveRefs($40,$33);
      _CS_DelLabel($0,$40);
      $$060 = (($$0606886) + -1)|0;
      $41 = ($$060|0)==(0);
      if ($41) {
       break L27;
      }
      $$pre81 = HEAP32[$$idx$i63>>2]|0;
      $42 = ($$pre81>>>0)>($$060>>>0);
      if ($42) {
       $$0606886 = $$060;
      } else {
       label = 18;
       break L23;
      }
     }
    }
   } while(0);
   $$idx = ((($33)) + 16|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $43 = ($$idx$val|0)==(0);
   if ($43) {
    _CS_DelLabel($0,$33);
   }
  }
  $44 = (($$170) + 1)|0;
  $$idx$val$i62 = HEAP32[$$idx$i61>>2]|0;
  $45 = ($44>>>0)<($$idx$val$i62>>>0);
  if ($45) {
   $$170 = $44;
  } else {
   label = 24;
   break;
  }
 }
 if ((label|0) == 18) {
  $36 = HEAP32[3332]|0;
  $37 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$36 & 1]($37,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function _CS_MoveLabelRef($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx$val$i = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = HEAP32[3332]|0;
  $7 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$6 & 1]($7,33492,33401,1047);
  // unreachable;
 }
 $8 = ((($4)) + 16|0);
 _CollDeleteItem($8,$1);
 _CE_ClearJumpTo($1);
 $$idx$val$i = HEAP32[$8>>2]|0;
 $9 = ($$idx$val$i|0)==(0);
 if (!($9)) {
  _CL_AddRef($2,$1);
  return;
 }
 _CS_DelLabel($0,$4);
 _CL_AddRef($2,$1);
 return;
}
function _CS_DelCodeAfter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$i = 0, $$idx$i40 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i38 = 0, $$idx$val$i41 = 0, $$in = 0, $$pre = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i>>>0)>($1>>>0);
 if (!($2)) {
  return;
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($0)) + 20|0);
 $5 = ($$idx$val$i|0)==(0);
 if ($5) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 $6 = (($$idx$val$i) + -1)|0;
 $14 = $6;
 while(1) {
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($14<<2)|0);
  $15 = HEAP32[$13>>2]|0;
  $16 = ((($15)) + 20|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   $22 = (_CollIndex($4,$17)|0);
   $23 = ($22|0)>(-1);
   if ($23) {
    $$idx = ((($17)) + 16|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $24 = ($$idx$val|0)==(1);
    if ($24) {
     _CollDelete($4,$22);
    }
   }
   $25 = HEAP32[$16>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    label = 14;
    break;
   }
   $29 = ((($25)) + 16|0);
   _CollDeleteItem($29,$15);
   _CE_ClearJumpTo($15);
   $$idx$val$i38 = HEAP32[$29>>2]|0;
   $30 = ($$idx$val$i38|0)==(0);
   if ($30) {
    _CS_DelLabel($0,$25);
   }
  }
  $19 = ($14>>>0)>($1>>>0);
  if (!($19)) {
   label = 4;
   break;
  }
  $$pre = HEAP32[$$idx$i>>2]|0;
  $20 = (($14) + -1)|0;
  $21 = ($$pre>>>0)>($20>>>0);
  if ($21) {
   $14 = $20;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 4) {
  if (!($2)) {
   return;
  }
  $7 = ((($0)) + 16|0);
  $8 = ((($0)) + 8|0);
  $9 = ((($0)) + 20|0);
  $$in = $$idx$val$i;
  L25: while(1) {
   $31 = (($$in) + -1)|0;
   $32 = HEAP32[$$idx$i>>2]|0;
   $33 = ($32>>>0)>($31>>>0);
   if (!($33)) {
    label = 18;
    break;
   }
   $36 = HEAP32[$7>>2]|0;
   $37 = (($36) + ($31<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $$idx$i40 = ((($38)) + 24|0);
   $$idx$val$i41 = HEAP32[$$idx$i40>>2]|0;
   $39 = ($$idx$val$i41|0)==(0);
   if (!($39)) {
    $40 = ((($38)) + 32|0);
    $41 = (($$idx$val$i41) + -1)|0;
    $46 = $41;
    while(1) {
     $44 = HEAP32[$40>>2]|0;
     $45 = (($44) + ($46<<2)|0);
     $47 = HEAP32[$45>>2]|0;
     $48 = ((($47)) + 12|0);
     HEAP32[$48>>2] = 0;
     $49 = HEAP32[$9>>2]|0;
     _CollInsert($9,$47,$49);
     $50 = ($46|0)==(0);
     if ($50) {
      break;
     }
     $$pre$i = HEAP32[$$idx$i40>>2]|0;
     $51 = (($46) + -1)|0;
     $52 = ($$pre$i>>>0)>($51>>>0);
     if ($52) {
      $46 = $51;
     } else {
      label = 21;
      break L25;
     }
    }
    HEAP32[$$idx$i40>>2] = 0;
   }
   _CollDelete($8,$31);
   _FreeCodeEntry($38);
   $53 = ($31>>>0)>($1>>>0);
   if ($53) {
    $$in = $31;
   } else {
    label = 26;
    break;
   }
  }
  if ((label|0) == 18) {
   $34 = HEAP32[3332]|0;
   $35 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$34 & 1]($35,40922,40950,129);
   // unreachable;
  }
  else if ((label|0) == 21) {
   $42 = HEAP32[3332]|0;
   $43 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$42 & 1]($43,40922,40950,129);
   // unreachable;
  }
  else if ((label|0) == 26) {
   return;
  }
 }
 else if ((label|0) == 6) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $27 = HEAP32[3332]|0;
  $28 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$27 & 1]($28,33432,33401,1021);
  // unreachable;
 }
}
function _CS_IsBasicBlock($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03$i = 0, $$03$i86 = 0, $$03$i94 = 0, $$078115 = 0, $$083120 = 0, $$084123 = 0, $$281114 = 0, $$8 = 0, $$idx = 0, $$idx$i = 0, $$idx$i89 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i90 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>($2>>>0);
 if ($3) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,33506,33401,1218);
  // unreachable;
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 16|0);
 $$03$i = $1;
 while(1) {
  $9 = ($7>>>0)>($$03$i>>>0);
  if (!($9)) {
   label = 5;
   break;
  }
  $12 = (($$03$i) + 1)|0;
  $13 = HEAP32[$8>>2]|0;
  $14 = (($13) + ($$03$i<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15)) + 3|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = $18 & 254;
  $20 = $19&255;
  HEAP8[$16>>0] = $20;
  $21 = ($12>>>0)>($2>>>0);
  if ($21) {
   break;
  } else {
   $$03$i = $12;
  }
 }
 if ((label|0) == 5) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 $22 = (($1) + 1)|0;
 $23 = ($22>>>0)>($2>>>0);
 L10: do {
  if ($23) {
   $$281114 = $1;
  } else {
   $25 = $22;
   L11: while(1) {
    $27 = ($7>>>0)>($25>>>0);
    if (!($27)) {
     label = 10;
     break;
    }
    $30 = (($13) + ($25<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $$idx$i = ((($31)) + 24|0);
    $$idx$val$i = HEAP32[$$idx$i>>2]|0;
    $32 = ($$idx$val$i|0)==(0);
    if (!($32)) {
     $33 = ((($31)) + 32|0);
     $$084123 = 0;
     while(1) {
      $34 = ($$idx$val$i>>>0)>($$084123>>>0);
      if (!($34)) {
       label = 14;
       break L11;
      }
      $37 = HEAP32[$33>>2]|0;
      $38 = (($37) + ($$084123<<2)|0);
      $39 = HEAP32[$38>>2]|0;
      $$idx$i89 = ((($39)) + 16|0);
      $$idx$val$i90 = HEAP32[$$idx$i89>>2]|0;
      $40 = ($$idx$val$i90|0)==(0);
      if (!($40)) {
       $41 = ((($39)) + 24|0);
       $$083120 = 0;
       while(1) {
        $42 = ($$idx$val$i90>>>0)>($$083120>>>0);
        if (!($42)) {
         label = 18;
         break L11;
        }
        $45 = HEAP32[$41>>2]|0;
        $46 = (($45) + ($$083120<<2)|0);
        $47 = HEAP32[$46>>2]|0;
        $$078115 = $1;
        while(1) {
         $50 = ($7>>>0)>($$078115>>>0);
         if (!($50)) {
          label = 22;
          break L11;
         }
         $53 = (($13) + ($$078115<<2)|0);
         $54 = HEAP32[$53>>2]|0;
         $55 = ($47|0)==($54|0);
         $48 = (($$078115) + 1)|0;
         if ($55) {
          break;
         }
         $49 = ($48>>>0)>($2>>>0);
         if ($49) {
          $$03$i94 = $1;
          label = 24;
          break L11;
         } else {
          $$078115 = $48;
         }
        }
        $68 = ((($47)) + 3|0);
        $69 = HEAP8[$68>>0]|0;
        $70 = $69&255;
        $71 = $70 | 1;
        $72 = $71&255;
        HEAP8[$68>>0] = $72;
        $73 = (($$083120) + 1)|0;
        $74 = ($73>>>0)<($$idx$val$i90>>>0);
        if ($74) {
         $$083120 = $73;
        } else {
         break;
        }
       }
      }
      $75 = (($$084123) + 1)|0;
      $76 = ($75>>>0)<($$idx$val$i>>>0);
      if ($76) {
       $$084123 = $75;
      } else {
       break;
      }
     }
    }
    $24 = (($25) + 1)|0;
    $26 = ($24>>>0)>($2>>>0);
    if ($26) {
     $$281114 = $1;
     break L10;
    } else {
     $25 = $24;
    }
   }
   if ((label|0) == 10) {
    $28 = HEAP32[3332]|0;
    $29 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$28 & 1]($29,40922,40950,129);
    // unreachable;
   }
   else if ((label|0) == 14) {
    $35 = HEAP32[3332]|0;
    $36 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$35 & 1]($36,40922,40950,129);
    // unreachable;
   }
   else if ((label|0) == 18) {
    $43 = HEAP32[3332]|0;
    $44 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$43 & 1]($44,40922,40950,129);
    // unreachable;
   }
   else if ((label|0) == 22) {
    $51 = HEAP32[3332]|0;
    $52 = HEAP32[3330]|0;
    FUNCTION_TABLE_viiii[$51 & 1]($52,40922,40950,129);
    // unreachable;
   }
   else if ((label|0) == 24) {
    while(1) {
     label = 0;
     $56 = ($7>>>0)>($$03$i94>>>0);
     if (!($56)) {
      label = 25;
      break;
     }
     $59 = (($$03$i94) + 1)|0;
     $60 = (($13) + ($$03$i94<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ((($61)) + 3|0);
     $63 = HEAP8[$62>>0]|0;
     $64 = $63&255;
     $65 = $64 & 254;
     $66 = $65&255;
     HEAP8[$62>>0] = $66;
     $67 = ($59>>>0)>($2>>>0);
     if ($67) {
      $$8 = 0;
      label = 39;
      break;
     } else {
      $$03$i94 = $59;
      label = 24;
     }
    }
    if ((label|0) == 25) {
     $57 = HEAP32[3332]|0;
     $58 = HEAP32[3330]|0;
     FUNCTION_TABLE_viiii[$57 & 1]($58,40922,40950,129);
     // unreachable;
    }
    else if ((label|0) == 39) {
     return ($$8|0);
    }
   }
  }
 } while(0);
 while(1) {
  $77 = ($7>>>0)>($$281114>>>0);
  if (!($77)) {
   label = 30;
   break;
  }
  $80 = (($13) + ($$281114<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ((($81)) + 12|0);
  $83 = HEAP16[$82>>1]|0;
  $84 = $83 & 3;
  $85 = ($84<<16>>16)==(0);
  if (!($85)) {
   $$idx = ((($81)) + 3|0);
   $$idx$val = HEAP8[$$idx>>0]|0;
   $86 = $$idx$val & 1;
   $87 = ($86<<24>>24)==(0);
   if ($87) {
    label = 33;
    break;
   }
   $102 = $$idx$val&255;
   $103 = $102 & 254;
   $104 = $103&255;
   HEAP8[$$idx>>0] = $104;
  }
  $105 = (($$281114) + 1)|0;
  $106 = ($105>>>0)>($2>>>0);
  if ($106) {
   $$8 = 1;
   label = 39;
   break;
  } else {
   $$281114 = $105;
  }
 }
 if ((label|0) == 30) {
  $78 = HEAP32[3332]|0;
  $79 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$78 & 1]($79,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 33) {
  $88 = (($$281114) + 1)|0;
  $89 = ($88>>>0)>($2>>>0);
  if ($89) {
   $$8 = 0;
   return ($$8|0);
  } else {
   $$03$i86 = $88;
  }
  while(1) {
   $90 = ($7>>>0)>($$03$i86>>>0);
   if (!($90)) {
    label = 35;
    break;
   }
   $93 = (($$03$i86) + 1)|0;
   $94 = (($13) + ($$03$i86<<2)|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ((($95)) + 3|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = $98 & 254;
   $100 = $99&255;
   HEAP8[$96>>0] = $100;
   $101 = ($93>>>0)>($2>>>0);
   if ($101) {
    $$8 = 0;
    label = 39;
    break;
   } else {
    $$03$i86 = $93;
   }
  }
  if ((label|0) == 35) {
   $91 = HEAP32[3332]|0;
   $92 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$91 & 1]($92,40922,40950,129);
   // unreachable;
  }
  else if ((label|0) == 39) {
   return ($$8|0);
  }
 }
 else if ((label|0) == 39) {
  return ($$8|0);
 }
 return (0)|0;
}
function _CS_OutputPrologue($0) {
 $0 = $0|0;
 var $$idx8$val = 0, $$lobit$i = 0, $$lobit$i10 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0;
 var $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer10 = sp + 40|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 (_WriteOutput(33520,$vararg_buffer)|0);
 $4 = HEAP32[11251]|0;
 $5 = ((($2)) + 48|0);
 $6 = ((($2)) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 _PrintFuncSig($4,$5,$7);
 (_WriteOutput(33589,$vararg_buffer1)|0);
 $8 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $8;
 $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $5;
 (_WriteOutput(33658,$vararg_buffer3)|0);
 $9 = HEAP32[$6>>2]|0;
 $$idx8$val = HEAP32[$9>>2]|0;
 $$lobit$i = $$idx8$val & 16384;
 $10 = ($$lobit$i|0)==(0);
 if ($10) {
  $$lobit$i10 = $$idx8$val & 32768;
  $11 = ($$lobit$i10|0)==(0);
  if (!($11)) {
   (_WriteOutput(33690,$vararg_buffer8)|0);
  }
 } else {
  (_WriteOutput(33683,$vararg_buffer6)|0);
 }
 (_WriteOutput(33696,$vararg_buffer10)|0);
 STACKTOP = sp;return;
}
function _CS_OutputEpilogue($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 (_WriteOutput(33699,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _CS_Output($0) {
 $0 = $0|0;
 var $$03641 = 0, $$03742 = 0, $$043 = 0, $$06$i = 0, $$138 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i5$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr15 = 0, $vararg_ptr6 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _CS_GenRegInfo($0);
 $2 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 (_WriteOutput(33711,$vararg_buffer)|0);
 $3 = ((($0)) + 16|0);
 $$03742 = 0;$$043 = 0;
 while(1) {
  $4 = HEAP32[$$idx$i>>2]|0;
  $5 = ($4>>>0)>($$043>>>0);
  if (!($5)) {
   label = 4;
   break;
  }
  $8 = HEAP32[$3>>2]|0;
  $9 = (($8) + ($$043<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==($$03742|0);
  if ($13) {
   $$138 = $$03742;
  } else {
   $14 = HEAP8[47027]|0;
   $15 = ($14<<24>>24)==(0);
   if (!($15)) {
    $16 = ((($12)) + 12|0);
    (_WriteOutput(33727,$vararg_buffer1)|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(0);
    L11: do {
     if (!($18)) {
      $$03641 = $16;
      while(1) {
       $19 = (_strchr($$03641,10)|0);
       $20 = ($19|0)==(0|0);
       if ($20) {
        break;
       }
       $21 = $19;
       $22 = $$03641;
       $23 = (($21) - ($22))|0;
       HEAP32[$vararg_buffer3>>2] = $23;
       $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
       HEAP32[$vararg_ptr6>>2] = $$03641;
       (_WriteOutput(33732,$vararg_buffer3)|0);
       $24 = ((($19)) + 1|0);
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(0);
       if ($26) {
        break L11;
       } else {
        $$03641 = $24;
       }
      }
      HEAP32[$vararg_buffer7>>2] = $$03641;
      (_WriteOutput(39411,$vararg_buffer7)|0);
     }
    } while(0);
    (_WriteOutput(33740,$vararg_buffer10)|0);
   }
   $27 = HEAP8[47029]|0;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $$138 = $12;
   } else {
    $29 = (_GetInputName($12)|0);
    $30 = (_GetInputLine($12)|0);
    HEAP32[$vararg_buffer12>>2] = $29;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = $30;
    (_WriteOutput(33743,$vararg_buffer12)|0);
    $$138 = $12;
   }
  }
  _CE_Output($10);
  $31 = (($$043) + 1)|0;
  $32 = ($31>>>0)<($$idx$val$i>>>0);
  if ($32) {
   $$03742 = $$138;$$043 = $31;
  } else {
   break;
  }
 }
 if ((label|0) == 4) {
  $6 = HEAP32[3332]|0;
  $7 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$6 & 1]($7,40922,40950,155);
  // unreachable;
 }
 $33 = HEAP8[47029]|0;
 $34 = ($33<<24>>24)==(0);
 if (!($34)) {
  (_WriteOutput(33765,$vararg_buffer16)|0);
 }
 $$idx$val$i5$i = HEAP32[$$idx$i>>2]|0;
 $35 = ($$idx$val$i5$i|0)==(0);
 if ($35) {
  STACKTOP = sp;return;
 }
 $36 = ((($0)) + 16|0);
 $$06$i = 0;
 while(1) {
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($$06$i<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  _CE_FreeRegInfo($39);
  $40 = (($$06$i) + 1)|0;
  $$idx$val$i$i = HEAP32[$$idx$i>>2]|0;
  $41 = ($40>>>0)<($$idx$val$i$i>>>0);
  if ($41) {
   $$06$i = $40;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _CS_GenRegInfo($0) {
 $0 = $0|0;
 var $$0106 = 0, $$06$i = 0, $$086105 = 0, $$087104 = 0, $$088$ph = 0, $$088101 = 0, $$090103 = 0, $$1 = 0, $$4 = 0, $$idx$i$i = 0, $$idx$i94$pre$phiZZZ2D = 0, $$idx$i97 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i102 = 0, $$idx$val$i5$i = 0, $$idx$val$i93 = 0, $$idx$val$i95100 = 0, $$idx$val$i98 = 0;
 var $$pre = 0, $$pre108 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i$i = ((($0)) + 8|0);
 $$idx$val$i5$i = HEAP32[$$idx$i$i>>2]|0;
 $2 = ($$idx$val$i5$i|0)==(0);
 $$pre108 = ((($0)) + 16|0);
 if (!($2)) {
  $$06$i = 0;
  while(1) {
   $3 = HEAP32[$$pre108>>2]|0;
   $4 = (($3) + ($$06$i<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   _CE_FreeRegInfo($5);
   $6 = (($$06$i) + 1)|0;
   $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
   $7 = ($6>>>0)<($$idx$val$i$i>>>0);
   if ($7) {
    $$06$i = $6;
   } else {
    break;
   }
  }
 }
 $8 = ((($1)) + 2|0);
 $9 = ((($1)) + 4|0);
 $10 = ((($1)) + 6|0);
 $11 = ((($1)) + 8|0);
 $12 = ((($1)) + 14|0);
 L5: while(1) {
  _RC_Invalidate($1);
  $$idx$val$i102 = HEAP32[$$idx$i$i>>2]|0;
  $13 = ($$idx$val$i102|0)==(0);
  if ($13) {
   label = 62;
   break;
  } else {
   $$0106 = 0;$$086105 = $1;$$087104 = 0;$$090103 = 1;
  }
  while(1) {
   $$idx$val = HEAP32[$$pre108>>2]|0;
   $14 = (($$idx$val) + ($$0106<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $$idx$i97 = ((($15)) + 24|0);
   $$idx$val$i98 = HEAP32[$$idx$i97>>2]|0;
   $16 = ($$idx$val$i98|0)==(0);
   L9: do {
    if ($16) {
     $$1 = $$086105;$$4 = $$090103;
    } else {
     $17 = ((($15)) + 32|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = HEAP32[$18>>2]|0;
     $20 = ($$087104|0)==(0);
     do {
      if ($20) {
       ;HEAP16[$1>>1]=HEAP16[$$086105>>1]|0;HEAP16[$1+2>>1]=HEAP16[$$086105+2>>1]|0;HEAP16[$1+4>>1]=HEAP16[$$086105+4>>1]|0;HEAP16[$1+6>>1]=HEAP16[$$086105+6>>1]|0;HEAP16[$1+8>>1]=HEAP16[$$086105+8>>1]|0;HEAP16[$1+10>>1]=HEAP16[$$086105+10>>1]|0;HEAP16[$1+12>>1]=HEAP16[$$086105+12>>1]|0;HEAP16[$1+14>>1]=HEAP16[$$086105+14>>1]|0;
       $$pre = ((($19)) + 16|0);
       $$088$ph = 0;$$idx$i94$pre$phiZZZ2D = $$pre;
      } else {
       $21 = ((($19)) + 16|0);
       $22 = HEAP32[$21>>2]|0;
       $23 = ($22|0)==(0);
       if ($23) {
        label = 8;
        break L5;
       }
       $26 = ((($19)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = HEAP32[$27>>2]|0;
       $29 = ((($28)) + 40|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0|0);
       if ($31) {
        _RC_Invalidate($1);
        $$088$ph = 1;$$idx$i94$pre$phiZZZ2D = $21;
        break;
       } else {
        $32 = ((($30)) + 32|0);
        ;HEAP16[$1>>1]=HEAP16[$32>>1]|0;HEAP16[$1+2>>1]=HEAP16[$32+2>>1]|0;HEAP16[$1+4>>1]=HEAP16[$32+4>>1]|0;HEAP16[$1+6>>1]=HEAP16[$32+6>>1]|0;HEAP16[$1+8>>1]=HEAP16[$32+8>>1]|0;HEAP16[$1+10>>1]=HEAP16[$32+10>>1]|0;HEAP16[$1+12>>1]=HEAP16[$32+12>>1]|0;HEAP16[$1+14>>1]=HEAP16[$32+14>>1]|0;
        $$088$ph = 1;$$idx$i94$pre$phiZZZ2D = $21;
        break;
       }
      }
     } while(0);
     $$idx$val$i95100 = HEAP32[$$idx$i94$pre$phiZZZ2D>>2]|0;
     $33 = ($$088$ph>>>0)<($$idx$val$i95100>>>0);
     if ($33) {
      $34 = ((($19)) + 24|0);
      $35 = HEAP32[$34>>2]|0;
      $$088101 = $$088$ph;
      while(1) {
       $36 = (($35) + ($$088101<<2)|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ((($37)) + 40|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)==(0|0);
       if ($40) {
        break;
       }
       $41 = ((($39)) + 32|0);
       $42 = HEAP16[$41>>1]|0;
       $43 = HEAP16[$1>>1]|0;
       $44 = ($42<<16>>16)==($43<<16>>16);
       if (!($44)) {
        HEAP16[$1>>1] = -1;
       }
       $45 = ((($39)) + 34|0);
       $46 = HEAP16[$45>>1]|0;
       $47 = HEAP16[$8>>1]|0;
       $48 = ($46<<16>>16)==($47<<16>>16);
       if (!($48)) {
        HEAP16[$8>>1] = -1;
       }
       $49 = ((($39)) + 36|0);
       $50 = HEAP16[$49>>1]|0;
       $51 = HEAP16[$9>>1]|0;
       $52 = ($50<<16>>16)==($51<<16>>16);
       if (!($52)) {
        HEAP16[$9>>1] = -1;
       }
       $53 = ((($39)) + 38|0);
       $54 = HEAP16[$53>>1]|0;
       $55 = HEAP16[$10>>1]|0;
       $56 = ($54<<16>>16)==($55<<16>>16);
       if (!($56)) {
        HEAP16[$10>>1] = -1;
       }
       $57 = ((($39)) + 40|0);
       $58 = HEAP16[$57>>1]|0;
       $59 = HEAP16[$11>>1]|0;
       $60 = ($58<<16>>16)==($59<<16>>16);
       if (!($60)) {
        HEAP16[$11>>1] = -1;
       }
       $61 = ((($39)) + 46|0);
       $62 = HEAP16[$61>>1]|0;
       $63 = HEAP16[$12>>1]|0;
       $64 = ($62<<16>>16)==($63<<16>>16);
       if (!($64)) {
        HEAP16[$12>>1] = -1;
       }
       $65 = (($$088101) + 1)|0;
       $66 = ($65>>>0)<($$idx$val$i95100>>>0);
       if ($66) {
        $$088101 = $65;
       } else {
        $$1 = $1;$$4 = $$090103;
        break L9;
       }
      }
      _RC_Invalidate($1);
      $$1 = $1;$$4 = 0;
     } else {
      $$1 = $1;$$4 = $$090103;
     }
    }
   } while(0);
   _CE_GenRegInfo($15,$$1);
   $67 = ((($15)) + 12|0);
   $68 = HEAP16[$67>>1]|0;
   $69 = $68&65535;
   $70 = $69 & 1;
   $71 = ((($15)) + 40|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 16|0);
   $74 = $69 & 4;
   $75 = ($74|0)==(0);
   $76 = ($$0106|0)==(0);
   $or$cond = $76 | $75;
   L43: do {
    if (!($or$cond)) {
     $77 = (($$0106) + -1)|0;
     $$idx$val$i93 = HEAP32[$$pre108>>2]|0;
     $78 = (($$idx$val$i93) + ($77<<2)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==(0|0);
     if (!($80)) {
      $81 = HEAP8[$15>>0]|0;
      $82 = $81&255;
      $83 = (_GetBranchCond($82)|0);
      $84 = HEAP8[$79>>0]|0;
      switch ($84<<24>>24) {
      case 58: case 50: case 45: case 40: case 26: case 25: case 21: case 1: case 0:  {
       $85 = ($83|0)==(2);
       $86 = HEAP32[$71>>2]|0;
       if ($85) {
        $87 = ((($86)) + 32|0);
        HEAP16[$87>>1] = 0;
        break L43;
       } else {
        $88 = ((($86)) + 16|0);
        HEAP16[$88>>1] = 0;
        break L43;
       }
       break;
      }
      case 18:  {
       $89 = (_CE_IsConstImm($79)|0);
       $90 = ($89|0)==(0);
       if ($90) {
        break L43;
       }
       $91 = ($83|0)==(2);
       $92 = ((($79)) + 8|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = $93&65535;
       $95 = $94 & 255;
       $96 = HEAP32[$71>>2]|0;
       if ($91) {
        $97 = ((($96)) + 32|0);
        HEAP16[$97>>1] = $95;
        break L43;
       } else {
        $98 = ((($96)) + 16|0);
        HEAP16[$98>>1] = $95;
        break L43;
       }
       break;
      }
      case 19:  {
       $99 = (_CE_IsConstImm($79)|0);
       $100 = ($99|0)==(0);
       if ($100) {
        break L43;
       }
       $101 = ($83|0)==(2);
       $102 = ((($79)) + 8|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = $103&65535;
       $105 = $104 & 255;
       $106 = HEAP32[$71>>2]|0;
       if ($101) {
        $107 = ((($106)) + 34|0);
        HEAP16[$107>>1] = $105;
        break L43;
       } else {
        $108 = ((($106)) + 18|0);
        HEAP16[$108>>1] = $105;
        break L43;
       }
       break;
      }
      case 20:  {
       $109 = (_CE_IsConstImm($79)|0);
       $110 = ($109|0)==(0);
       if ($110) {
        break L43;
       }
       $111 = ($83|0)==(2);
       $112 = ((($79)) + 8|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = $113&65535;
       $115 = $114 & 255;
       $116 = HEAP32[$71>>2]|0;
       if ($111) {
        $117 = ((($116)) + 36|0);
        HEAP16[$117>>1] = $115;
        break L43;
       } else {
        $118 = ((($116)) + 20|0);
        HEAP16[$118>>1] = $115;
        break L43;
       }
       break;
      }
      case 52: case 41: case 28: case 23:  {
       $119 = ($83|0)==(2);
       $120 = HEAP32[$71>>2]|0;
       if ($119) {
        $121 = ((($120)) + 34|0);
        HEAP16[$121>>1] = 0;
        break L43;
       } else {
        $122 = ((($120)) + 18|0);
        HEAP16[$122>>1] = 0;
        break L43;
       }
       break;
      }
      case 53: case 42: case 29: case 24:  {
       $123 = ($83|0)==(2);
       $124 = HEAP32[$71>>2]|0;
       if ($123) {
        $125 = ((($124)) + 36|0);
        HEAP16[$125>>1] = 0;
        break L43;
       } else {
        $126 = ((($124)) + 20|0);
        HEAP16[$126>>1] = 0;
        break L43;
       }
       break;
      }
      case 71: case 66:  {
       $127 = ($83|0)==(2);
       $128 = HEAP32[$71>>2]|0;
       if ($127) {
        $129 = ((($128)) + 34|0);
        HEAP16[$129>>1] = 0;
        $130 = ((($128)) + 32|0);
        HEAP16[$130>>1] = 0;
        break L43;
       } else {
        $131 = ((($128)) + 18|0);
        HEAP16[$131>>1] = 0;
        $132 = ((($128)) + 16|0);
        HEAP16[$132>>1] = 0;
        break L43;
       }
       break;
      }
      case 73: case 67:  {
       $133 = ($83|0)==(2);
       $134 = HEAP32[$71>>2]|0;
       if ($133) {
        $135 = ((($134)) + 36|0);
        HEAP16[$135>>1] = 0;
        $136 = ((($134)) + 32|0);
        HEAP16[$136>>1] = 0;
        break L43;
       } else {
        $137 = ((($134)) + 20|0);
        HEAP16[$137>>1] = 0;
        $138 = ((($134)) + 16|0);
        HEAP16[$138>>1] = 0;
        break L43;
       }
       break;
      }
      default: {
       break L43;
      }
      }
     }
    }
   } while(0);
   $139 = (($$0106) + 1)|0;
   $$idx$val$i = HEAP32[$$idx$i$i>>2]|0;
   $140 = ($139>>>0)<($$idx$val$i>>>0);
   if ($140) {
    $$0106 = $139;$$086105 = $73;$$087104 = $70;$$090103 = $$4;
   } else {
    break;
   }
  }
  $141 = ($$4|0)==(0);
  if (!($141)) {
   label = 62;
   break;
  }
 }
 if ((label|0) == 8) {
  $24 = HEAP32[3332]|0;
  $25 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$24 & 1]($25,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 62) {
  STACKTOP = sp;return;
 }
}
function _CS_FreeRegInfo($0) {
 $0 = $0|0;
 var $$06 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i5 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i5 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i5|0)==(0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 16|0);
 $$06 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$06<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  _CE_FreeRegInfo($5);
  $6 = (($$06) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $7 = ($6>>>0)<($$idx$val$i>>>0);
  if ($7) {
   $$06 = $6;
  } else {
   break;
  }
 }
 return;
}
function _MakeHexArg($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = $0 & 255;
 HEAP32[$vararg_buffer>>2] = $1;
 (_xsprintf(47032,16,36910,$vararg_buffer)|0);
 STACKTOP = sp;return (47032|0);
}
function _NewCodeEntry($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$$i = 0, $$0$i = 0, $$0$i29 = 0, $$012$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $5 = sp;
 $6 = (11404 + (($0*20)|0)|0);
 $7 = (_xmalloc(44)|0);
 $8 = HEAP32[$6>>2]|0;
 $9 = $8&255;
 HEAP8[$7>>0] = $9;
 $10 = $1&255;
 $11 = ((($7)) + 1|0);
 HEAP8[$11>>0] = $10;
 $12 = $8 & 255;
 $13 = $1 & 255;
 $14 = (_GetInsnSize($12,$13)|0);
 $15 = $14&255;
 $16 = ((($7)) + 2|0);
 HEAP8[$16>>0] = $15;
 $17 = ($2|0)==(0|0);
 if ($17) {
  $$0$i = 47048;
 } else {
  $18 = HEAP8[$2>>0]|0;
  $19 = ($18<<24>>24)==(0);
  if ($19) {
   $$0$i = 47048;
  } else {
   $20 = (_xstrdup($2)|0);
   $$0$i = $20;
  }
 }
 $21 = ((($7)) + 4|0);
 HEAP32[$21>>2] = $$0$i;
 $22 = ((($7)) + 8|0);
 $23 = HEAP8[$$0$i>>0]|0;
 switch ($23<<24>>24) {
 case 36:  {
  $24 = ((($$0$i)) + 1|0);
  $$0$i29 = 16;$$012$i = $24;
  break;
 }
 case 37:  {
  $25 = ((($$0$i)) + 1|0);
  $$0$i29 = 2;$$012$i = $25;
  break;
 }
 default: {
  $$0$i29 = 10;$$012$i = $$0$i;
 }
 }
 $26 = (_strtoul($$012$i,$5,$$0$i29)|0);
 $27 = HEAP32[$5>>2]|0;
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)==(0);
 $$$i = $29 ? $26 : 0;
 HEAP32[$22>>2] = $$$i;
 $30 = $29 ? 2 : 0;
 $31 = ((($7)) + 3|0);
 HEAP8[$31>>0] = $30;
 $32 = (((11404 + (($0*20)|0)|0)) + 18|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = ((($7)) + 12|0);
 HEAP16[$34>>1] = $33;
 $35 = ((($7)) + 20|0);
 HEAP32[$35>>2] = $3;
 $36 = (_UseLineInfo($4)|0);
 $37 = ((($7)) + 36|0);
 HEAP32[$37>>2] = $36;
 $38 = ((($7)) + 40|0);
 HEAP32[$38>>2] = 0;
 _SetUseChgInfo($7,$6);
 $39 = ((($7)) + 24|0);
 (_InitCollection($39)|0);
 $40 = ($3|0)==(0|0);
 if ($40) {
  STACKTOP = sp;return ($7|0);
 }
 $41 = ((($3)) + 16|0);
 $42 = HEAP32[$41>>2]|0;
 _CollInsert($41,$7,$42);
 STACKTOP = sp;return ($7|0);
}
function _SetUseChgInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 513;
 $5 = ($4<<16>>16)==(0);
 if (!($5)) {
  $6 = ((($0)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($0)) + 14|0);
   $12 = ((($0)) + 16|0);
   _GetFuncInfo($10,$11,$12);
   return;
  }
 }
 $13 = ((($1)) + 14|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $16 = ((($0)) + 1|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = (_GetAMUseInfo($18)|0);
 $20 = $19&255;
 $21 = $20 | $15;
 $22 = $21&65535;
 $23 = ((($0)) + 14|0);
 HEAP16[$23>>1] = $22;
 $24 = ((($1)) + 16|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = ((($0)) + 16|0);
 HEAP16[$26>>1] = $25;
 $27 = HEAP8[$16>>0]|0;
 switch ($27<<24>>24) {
 case 1:  {
  $28 = HEAP8[$0>>0]|0;
  switch ($28<<24>>24) {
  case 55: case 54: case 43: case 27: case 22: case 2:  {
   break;
  }
  default: {
   return;
  }
  }
  $29 = $25&65535;
  $30 = $29 | 1;
  $31 = $30&65535;
  HEAP16[$26>>1] = $31;
  return;
  break;
 }
 case 8: case 7: case 4: case 6: case 3:  {
  $32 = ((($0)) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (_GetZPInfo($33)|0);
  $35 = ($34|0)==(0|0);
  if ($35) {
   return;
  }
  $36 = ((($34)) + 12|0);
  $37 = HEAP16[$36>>1]|0;
  $38 = ($37<<16>>16)==(0);
  if ($38) {
   return;
  }
  $39 = HEAP8[$0>>0]|0;
  switch ($39<<24>>24) {
  case 69: case 68: case 55: case 54: case 43: case 27: case 22: case 2:  {
   $40 = HEAP16[$26>>1]|0;
   $41 = $40 | $37;
   HEAP16[$26>>1] = $41;
   $42 = HEAP16[$23>>1]|0;
   $43 = $42 | $37;
   HEAP16[$23>>1] = $43;
   return;
   break;
  }
  default: {
  }
  }
  $44 = HEAP32[$2>>2]|0;
  $45 = $44 & 128;
  $46 = ($45|0)==(0);
  if ($46) {
   $49 = $44 >>> 16;
   $50 = $49&65535;
   $51 = $50 | $37;
   HEAP16[$23>>1] = $51;
   return;
  } else {
   $47 = HEAP16[$26>>1]|0;
   $48 = $47 | $37;
   HEAP16[$26>>1] = $48;
   return;
  }
  break;
 }
 case 11: case 10: case 9:  {
  $52 = ((($0)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (_GetZPInfo($53)|0);
  $55 = ($54|0)==(0|0);
  if ($55) {
   return;
  }
  $56 = ((($54)) + 12|0);
  $57 = HEAP16[$56>>1]|0;
  $58 = ($57<<16>>16)==(0);
  if ($58) {
   return;
  }
  $59 = ((($54)) + 14|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = HEAP16[$23>>1]|0;
  $62 = $61 | $60;
  HEAP16[$23>>1] = $62;
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _FreeCodeEntry($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(47048|0);
 if (!($3)) {
  _xfree($2);
 }
 $4 = ((($0)) + 24|0);
 _DoneCollection($4);
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 _ReleaseLineInfo($6);
 $7 = ((($0)) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  _xfree($0);
  return;
 }
 _FreeRegInfo($8);
 HEAP32[$7>>2] = 0;
 _xfree($0);
 return;
}
function _CE_FreeRegInfo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 _FreeRegInfo($2);
 HEAP32[$1>>2] = 0;
 return;
}
function _CE_ReplaceOPC($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (11404 + (($1*20)|0)|0);
 $3 = $1&255;
 HEAP8[$0>>0] = $3;
 $4 = (((11404 + (($1*20)|0)|0)) + 18|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ((($0)) + 12|0);
 HEAP16[$6>>1] = $5;
 $7 = $1 & 255;
 $8 = ((($0)) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (_GetInsnSize($7,$10)|0);
 $12 = $11&255;
 $13 = ((($0)) + 2|0);
 HEAP8[$13>>0] = $12;
 _SetUseChgInfo($0,$2);
 return;
}
function _CodeEntriesAreEqual($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP16[$0>>1]|0;
 $3 = $2&255;
 $4 = HEAP16[$1>>1]|0;
 $5 = $4&255;
 $6 = ($3<<24>>24)==($5<<24>>24);
 if (!($6)) {
  $19 = 0;
  $18 = $19&1;
  return ($18|0);
 }
 $7 = ($4&65535) >>> 8;
 $8 = $7&255;
 $9 = ($2&65535) >>> 8;
 $10 = $9&255;
 $11 = ($10<<24>>24)==($8<<24>>24);
 if (!($11)) {
  $19 = 0;
  $18 = $19&1;
  return ($18|0);
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($1)) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_strcmp($13,$15)|0);
 $17 = ($16|0)==(0);
 $19 = $17;
 $18 = $19&1;
 return ($18|0);
}
function _CE_AttachLabel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 _CollInsert($2,$1,$3);
 $4 = ((($1)) + 12|0);
 HEAP32[$4>>2] = $0;
 return;
}
function _CE_ClearJumpTo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(47048|0);
 if (!($4)) {
  _xfree($3);
 }
 HEAP32[$2>>2] = 47048;
 return;
}
function _CE_MoveLabel($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 24|0);
 _CollDeleteItem($4,$0);
 $5 = ((($1)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 _CollInsert($5,$0,$6);
 HEAP32[$2>>2] = $1;
 return;
}
function _CE_SetArg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(47048|0);
 if (!($4)) {
  _xfree($3);
 }
 $5 = ($1|0)==(0|0);
 if ($5) {
  $$0$i = 47048;
 } else {
  $6 = HEAP8[$1>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $$0$i = 47048;
  } else {
   $8 = (_xstrdup($1)|0);
   $$0$i = $8;
  }
 }
 HEAP32[$2>>2] = $$0$i;
 return;
}
function _CE_SetNumArg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = ((($0)) + 3|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 2;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,33777,33799,375);
  // unreachable;
 }
 $9 = ((($0)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 switch ($10<<24>>24) {
 case 2:  {
  $11 = $1 & 255;
  HEAP32[$vararg_buffer>>2] = $11;
  (_xsprintf($2,16,36910,$vararg_buffer)|0);
  $$0 = $11;
  break;
 }
 case 3:  {
  $12 = $1 & 65535;
  HEAP32[$vararg_buffer1>>2] = $12;
  (_xsprintf($2,16,34414,$vararg_buffer1)|0);
  $$0 = $12;
  break;
 }
 default: {
  _Internal(33814,$vararg_buffer4);
  // unreachable;
 }
 }
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(47048|0);
 if (!($15)) {
  _xfree($14);
 }
 $16 = HEAP8[$2>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $$0$i$i = 47048;
  HEAP32[$13>>2] = $$0$i$i;
  $19 = ((($0)) + 8|0);
  HEAP32[$19>>2] = $$0;
  STACKTOP = sp;return;
 }
 $18 = (_xstrdup($2)|0);
 $$0$i$i = $18;
 HEAP32[$13>>2] = $$0$i$i;
 $19 = ((($0)) + 8|0);
 HEAP32[$19>>2] = $$0;
 STACKTOP = sp;return;
}
function _CE_IsConstImm($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, $$lobit$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(2);
 if (!($3)) {
  $6 = 0;
  $5 = $6&1;
  return ($5|0);
 }
 $$idx = ((($0)) + 3|0);
 $$idx$val = HEAP8[$$idx>>0]|0;
 $$lobit$i = $$idx$val & 2;
 $4 = ($$lobit$i<<24>>24)!=(0);
 $6 = $4;
 $5 = $6&1;
 return ($5|0);
}
function _CE_IsKnownImm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $$lobit$i = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(2);
 if (!($4)) {
  $10 = 0;
  $9 = $10&1;
  return ($9|0);
 }
 $$idx = ((($0)) + 3|0);
 $$idx$val = HEAP8[$$idx>>0]|0;
 $$lobit$i = $$idx$val & 2;
 $5 = ($$lobit$i<<24>>24)==(0);
 if ($5) {
  $10 = 0;
  $9 = $10&1;
  return ($9|0);
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==($1|0);
 $10 = $8;
 $9 = $10&1;
 return ($9|0);
}
function _CE_UseLoadFlags($0) {
 $0 = $0|0;
 var $$01014 = 0, $$1 = 0, $$112 = 0, $$phi$trans$insert = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 12|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 1;
 $5 = ($4<<16>>16)==(0);
 do {
  if ($5) {
   $$1 = $0;$22 = $3;
  } else {
   ;HEAP32[$1>>2]=HEAP32[46064>>2]|0;HEAP32[$1+4>>2]=HEAP32[46064+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[46064+8>>2]|0;
   $$01014 = $0;
   while(1) {
    $6 = HEAP32[$1>>2]|0;
    _CollInsert($1,$$01014,$6);
    $7 = ((($$01014)) + 20|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = ($8|0)==(0|0);
    if ($9) {
     break;
    }
    $10 = ((($8)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (_CollIndex($1,$11)|0);
    $13 = ($12|0)>(-1);
    if ($13) {
     break;
    }
    $14 = HEAP32[$7>>2]|0;
    $15 = ((($14)) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 12|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = $18 & 1;
    $20 = ($19<<16>>16)==(0);
    if ($20) {
     label = 7;
     break;
    } else {
     $$01014 = $16;
    }
   }
   if ((label|0) == 7) {
    _DoneCollection($1);
    $$phi$trans$insert = ((($16)) + 12|0);
    $$pre = HEAP16[$$phi$trans$insert>>1]|0;
    $$1 = $16;$22 = $$pre;
    break;
   }
   _DoneCollection($1);
   $$112 = 0;
   STACKTOP = sp;return ($$112|0);
  }
 } while(0);
 $21 = $22 & 8;
 $23 = ($21<<16>>16)==(0);
 if (!($23)) {
  $$112 = 1;
  STACKTOP = sp;return ($$112|0);
 }
 $24 = HEAP8[$$1>>0]|0;
 $25 = ($24<<24>>24)==(37);
 if (!($25)) {
  $$112 = 0;
  STACKTOP = sp;return ($$112|0);
 }
 $26 = ((($$1)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (_FindBoolCmpCond($27)|0);
 switch ($28|0) {
 case 9: case 6: case 5: case 4: case 3: case 2: case 1: case 0:  {
  $$112 = 1;
  STACKTOP = sp;return ($$112|0);
  break;
 }
 default: {
 }
 }
 $$112 = 0;
 STACKTOP = sp;return ($$112|0);
}
function _CE_GenRegInfo($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$lobit$i$i = 0, $$lobit$i$i401$lobit = 0, $$lobit$i$i408$lobit = 0, $$lobit$i$i412$lobit = 0, $$lobit$i$i416$lobit = 0, $$lobit$i$i434$lobit = 0, $$lobit$i$i450 = 0, $$lobit$i$i454$lobit = 0, $$not = 0, $$not470 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond472 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp + 2|0;
 $3 = sp;
 $4 = ((($0)) + 40|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (_NewRegInfo($1)|0);
  HEAP32[$4>>2] = $7;
  $13 = $7;
 } else {
  $8 = ($1|0)==(0|0);
  if ($8) {
   _RC_Invalidate($5);
  } else {
   ;HEAP16[$5>>1]=HEAP16[$1>>1]|0;HEAP16[$5+2>>1]=HEAP16[$1+2>>1]|0;HEAP16[$5+4>>1]=HEAP16[$1+4>>1]|0;HEAP16[$5+6>>1]=HEAP16[$1+6>>1]|0;HEAP16[$5+8>>1]=HEAP16[$1+8>>1]|0;HEAP16[$5+10>>1]=HEAP16[$1+10>>1]|0;HEAP16[$5+12>>1]=HEAP16[$1+12>>1]|0;HEAP16[$5+14>>1]=HEAP16[$1+14>>1]|0;
  }
  $9 = HEAP32[$4>>2]|0;
  $10 = ((($9)) + 32|0);
  $11 = ((($9)) + 16|0);
  ;HEAP16[$11>>1]=HEAP16[$9>>1]|0;HEAP16[$11+2>>1]=HEAP16[$9+2>>1]|0;HEAP16[$11+4>>1]=HEAP16[$9+4>>1]|0;HEAP16[$11+6>>1]=HEAP16[$9+6>>1]|0;HEAP16[$11+8>>1]=HEAP16[$9+8>>1]|0;HEAP16[$11+10>>1]=HEAP16[$9+10>>1]|0;HEAP16[$11+12>>1]=HEAP16[$9+12>>1]|0;HEAP16[$11+14>>1]=HEAP16[$9+14>>1]|0;
  ;HEAP16[$10>>1]=HEAP16[$9>>1]|0;HEAP16[$10+2>>1]=HEAP16[$9+2>>1]|0;HEAP16[$10+4>>1]=HEAP16[$9+4>>1]|0;HEAP16[$10+6>>1]=HEAP16[$9+6>>1]|0;HEAP16[$10+8>>1]=HEAP16[$9+8>>1]|0;HEAP16[$10+10>>1]=HEAP16[$9+10>>1]|0;HEAP16[$10+12>>1]=HEAP16[$9+12>>1]|0;HEAP16[$10+14>>1]=HEAP16[$9+14>>1]|0;
  $$pre = HEAP32[$4>>2]|0;
  $13 = $$pre;
 }
 $12 = ((($13)) + 16|0);
 $14 = HEAP16[$0>>1]|0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15&65535;
 $17 = $15&255;
 $18 = ($16&65535) >>> 8;
 $19 = $18&255;
 $20 = $15 >>> 24;
 $21 = $20&255;
 $22 = ($14&65535) >>> 8;
 $23 = $22&255;
 L9: do {
  switch ($17<<24>>24) {
  case 0:  {
   HEAP16[$12>>1] = -1;
   break;
  }
  case 1:  {
   $24 = HEAP16[$13>>1]|0;
   $25 = ($24<<16>>16)<(0);
   $26 = ((($0)) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = ($27<<24>>24)==(2);
   if ($25) {
    $$not = $28 ^ 1;
    $$lobit$i$i450 = $21 & 2;
    $61 = ($$lobit$i$i450<<24>>24)==(0);
    $or$cond = $61 | $$not;
    if ($or$cond) {
     break L9;
    }
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0);
    if (!($64)) {
     break L9;
    }
    HEAP16[$12>>1] = 0;
    break L9;
   }
   if ($28) {
    $$lobit$i$i454$lobit = $21 & 2;
    $29 = ($$lobit$i$i454$lobit<<24>>24)==(0);
    if (!($29)) {
     $30 = $24&65535;
     $31 = ((($0)) + 8|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $30 & $32;
     $34 = $33&65535;
     HEAP16[$12>>1] = $34;
     break L9;
    }
   } else {
    $35 = ($27<<24>>24)==(3);
    if ($35) {
     $36 = ((($0)) + 14|0);
     $37 = HEAP16[$36>>1]|0;
     $38 = $37&65535;
     $39 = $38 & 65528;
     $40 = (_GetKnownReg($39,$13)|0);
     switch ($40|0) {
     case 8:  {
      $41 = HEAP16[$13>>1]|0;
      $42 = ((($13)) + 14|0);
      $43 = HEAP16[$42>>1]|0;
      $44 = $43 & $41;
      HEAP16[$12>>1] = $44;
      break L9;
      break;
     }
     case 16:  {
      $45 = HEAP16[$13>>1]|0;
      $46 = ((($13)) + 10|0);
      $47 = HEAP16[$46>>1]|0;
      $48 = $47 & $45;
      HEAP16[$12>>1] = $48;
      break L9;
      break;
     }
     case 32:  {
      $49 = HEAP16[$13>>1]|0;
      $50 = ((($13)) + 12|0);
      $51 = HEAP16[$50>>1]|0;
      $52 = $51 & $49;
      HEAP16[$12>>1] = $52;
      break L9;
      break;
     }
     case 256:  {
      $53 = HEAP16[$13>>1]|0;
      $54 = ((($13)) + 6|0);
      $55 = HEAP16[$54>>1]|0;
      $56 = $55 & $53;
      HEAP16[$12>>1] = $56;
      break L9;
      break;
     }
     case 512:  {
      $57 = HEAP16[$13>>1]|0;
      $58 = ((($13)) + 8|0);
      $59 = HEAP16[$58>>1]|0;
      $60 = $59 & $57;
      HEAP16[$12>>1] = $60;
      break L9;
      break;
     }
     default: {
      HEAP16[$12>>1] = -1;
      break L9;
     }
     }
    }
   }
   HEAP16[$12>>1] = -1;
   break;
  }
  case 2:  {
   $65 = ((($0)) + 1|0);
   $66 = HEAP8[$65>>0]|0;
   switch ($66<<24>>24) {
   case 1:  {
    $67 = HEAP16[$13>>1]|0;
    $68 = ($67<<16>>16)<(0);
    if ($68) {
     break L9;
    }
    $69 = $67 << 16 >> 16;
    $70 = $69 << 1;
    $71 = $70 & 254;
    $72 = $71&65535;
    HEAP16[$12>>1] = $72;
    break L9;
    break;
   }
   case 3:  {
    $73 = ((($0)) + 16|0);
    $74 = HEAP16[$73>>1]|0;
    $75 = $74&65535;
    $76 = $75 & 65528;
    $77 = (_GetKnownReg($76,$13)|0);
    switch ($77|0) {
    case 8:  {
     $78 = ((($13)) + 14|0);
     $79 = HEAP16[$78>>1]|0;
     $80 = $79 << 16 >> 16;
     $81 = $80 << 1;
     $82 = $81 & 254;
     $83 = $82&65535;
     $84 = ((($13)) + 30|0);
     HEAP16[$84>>1] = $83;
     break L9;
     break;
    }
    case 16:  {
     $85 = ((($13)) + 10|0);
     $86 = HEAP16[$85>>1]|0;
     $87 = $86 << 16 >> 16;
     $88 = $87 << 1;
     $89 = $88 & 254;
     $90 = $89&65535;
     $91 = ((($13)) + 26|0);
     HEAP16[$91>>1] = $90;
     break L9;
     break;
    }
    case 32:  {
     $92 = ((($13)) + 12|0);
     $93 = HEAP16[$92>>1]|0;
     $94 = $93 << 16 >> 16;
     $95 = $94 << 1;
     $96 = $95 & 254;
     $97 = $96&65535;
     $98 = ((($13)) + 28|0);
     HEAP16[$98>>1] = $97;
     break L9;
     break;
    }
    case 256:  {
     $99 = ((($13)) + 6|0);
     $100 = HEAP16[$99>>1]|0;
     $101 = $100 << 16 >> 16;
     $102 = $101 << 1;
     $103 = $102 & 254;
     $104 = $103&65535;
     $105 = ((($13)) + 22|0);
     HEAP16[$105>>1] = $104;
     break L9;
     break;
    }
    case 512:  {
     $106 = ((($13)) + 8|0);
     $107 = HEAP16[$106>>1]|0;
     $108 = $107 << 16 >> 16;
     $109 = $108 << 1;
     $110 = $109 & 254;
     $111 = $110&65535;
     $112 = ((($13)) + 24|0);
     HEAP16[$112>>1] = $111;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 73:  {
   $713 = ((($13)) + 4|0);
   $714 = HEAP16[$713>>1]|0;
   HEAP16[$12>>1] = $714;
   break;
  }
  case 71:  {
   $711 = ((($13)) + 2|0);
   $712 = HEAP16[$711>>1]|0;
   HEAP16[$12>>1] = $712;
   break;
  }
  case 70:  {
   $710 = ((($13)) + 18|0);
   HEAP16[$710>>1] = -1;
   break;
  }
  case 69:  {
   $676 = ((($0)) + 1|0);
   $677 = HEAP8[$676>>0]|0;
   switch ($677<<24>>24) {
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   case 3:  {
    break;
   }
   default: {
    break L9;
   }
   }
   $678 = HEAP16[$13>>1]|0;
   $679 = ($678<<16>>16)<(0);
   $680 = ((($0)) + 16|0);
   $681 = HEAP16[$680>>1]|0;
   $682 = $681&65535;
   $683 = $682 & 65528;
   $684 = (_GetKnownReg($683,$13)|0);
   if ($679) {
    switch ($684|0) {
    case 8:  {
     $705 = ((($13)) + 30|0);
     HEAP16[$705>>1] = -1;
     break L9;
     break;
    }
    case 16:  {
     $706 = ((($13)) + 26|0);
     HEAP16[$706>>1] = -1;
     break L9;
     break;
    }
    case 32:  {
     $707 = ((($13)) + 28|0);
     HEAP16[$707>>1] = -1;
     break L9;
     break;
    }
    case 256:  {
     $708 = ((($13)) + 22|0);
     HEAP16[$708>>1] = -1;
     break L9;
     break;
    }
    case 512:  {
     $709 = ((($13)) + 24|0);
     HEAP16[$709>>1] = -1;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
   } else {
    switch ($684|0) {
    case 8:  {
     $685 = HEAP16[$13>>1]|0;
     $686 = ((($13)) + 30|0);
     $687 = HEAP16[$686>>1]|0;
     $688 = $687 | $685;
     HEAP16[$686>>1] = $688;
     break L9;
     break;
    }
    case 16:  {
     $689 = HEAP16[$13>>1]|0;
     $690 = ((($13)) + 26|0);
     $691 = HEAP16[$690>>1]|0;
     $692 = $691 | $689;
     HEAP16[$690>>1] = $692;
     break L9;
     break;
    }
    case 32:  {
     $693 = HEAP16[$13>>1]|0;
     $694 = ((($13)) + 28|0);
     $695 = HEAP16[$694>>1]|0;
     $696 = $695 | $693;
     HEAP16[$694>>1] = $696;
     break L9;
     break;
    }
    case 256:  {
     $697 = HEAP16[$13>>1]|0;
     $698 = ((($13)) + 22|0);
     $699 = HEAP16[$698>>1]|0;
     $700 = $699 | $697;
     HEAP16[$698>>1] = $700;
     break L9;
     break;
    }
    case 512:  {
     $701 = HEAP16[$13>>1]|0;
     $702 = ((($13)) + 24|0);
     $703 = HEAP16[$702>>1]|0;
     $704 = $703 | $701;
     HEAP16[$702>>1] = $704;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
   }
   break;
  }
  case 68:  {
   $622 = ((($0)) + 1|0);
   $623 = HEAP8[$622>>0]|0;
   switch ($623<<24>>24) {
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   case 3:  {
    break;
   }
   default: {
    break L9;
   }
   }
   $624 = HEAP16[$13>>1]|0;
   $625 = ($624<<16>>16)<(0);
   $626 = ((($0)) + 16|0);
   $627 = HEAP16[$626>>1]|0;
   $628 = $627&65535;
   $629 = $628 & 65528;
   $630 = (_GetKnownReg($629,$13)|0);
   if ($625) {
    switch ($630|0) {
    case 8:  {
     $671 = ((($13)) + 30|0);
     HEAP16[$671>>1] = -1;
     break L9;
     break;
    }
    case 16:  {
     $672 = ((($13)) + 26|0);
     HEAP16[$672>>1] = -1;
     break L9;
     break;
    }
    case 32:  {
     $673 = ((($13)) + 28|0);
     HEAP16[$673>>1] = -1;
     break L9;
     break;
    }
    case 256:  {
     $674 = ((($13)) + 22|0);
     HEAP16[$674>>1] = -1;
     break L9;
     break;
    }
    case 512:  {
     $675 = ((($13)) + 24|0);
     HEAP16[$675>>1] = -1;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
   } else {
    switch ($630|0) {
    case 8:  {
     $631 = HEAP16[$13>>1]|0;
     $632 = $631&65535;
     $633 = $632 ^ 65535;
     $634 = ((($13)) + 30|0);
     $635 = HEAP16[$634>>1]|0;
     $636 = $635&65535;
     $637 = $636 & $633;
     $638 = $637&65535;
     HEAP16[$634>>1] = $638;
     break L9;
     break;
    }
    case 16:  {
     $639 = HEAP16[$13>>1]|0;
     $640 = $639&65535;
     $641 = $640 ^ 65535;
     $642 = ((($13)) + 26|0);
     $643 = HEAP16[$642>>1]|0;
     $644 = $643&65535;
     $645 = $644 & $641;
     $646 = $645&65535;
     HEAP16[$642>>1] = $646;
     break L9;
     break;
    }
    case 32:  {
     $647 = HEAP16[$13>>1]|0;
     $648 = $647&65535;
     $649 = $648 ^ 65535;
     $650 = ((($13)) + 28|0);
     $651 = HEAP16[$650>>1]|0;
     $652 = $651&65535;
     $653 = $652 & $649;
     $654 = $653&65535;
     HEAP16[$650>>1] = $654;
     break L9;
     break;
    }
    case 256:  {
     $655 = HEAP16[$13>>1]|0;
     $656 = $655&65535;
     $657 = $656 ^ 65535;
     $658 = ((($13)) + 22|0);
     $659 = HEAP16[$658>>1]|0;
     $660 = $659&65535;
     $661 = $660 & $657;
     $662 = $661&65535;
     HEAP16[$658>>1] = $662;
     break L9;
     break;
    }
    case 512:  {
     $663 = HEAP16[$13>>1]|0;
     $664 = $663&65535;
     $665 = $664 ^ 65535;
     $666 = ((($13)) + 24|0);
     $667 = HEAP16[$666>>1]|0;
     $668 = $667&65535;
     $669 = $668 & $665;
     $670 = $669&65535;
     HEAP16[$666>>1] = $670;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
   }
   break;
  }
  case 67:  {
   $620 = HEAP16[$13>>1]|0;
   $621 = ((($13)) + 20|0);
   HEAP16[$621>>1] = $620;
   break;
  }
  case 66:  {
   $618 = HEAP16[$13>>1]|0;
   $619 = ((($13)) + 18|0);
   HEAP16[$619>>1] = $618;
   break;
  }
  case 65:  {
   $606 = ((($0)) + 1|0);
   $607 = HEAP8[$606>>0]|0;
   switch ($607<<24>>24) {
   case 3:  {
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   $608 = ((($0)) + 16|0);
   $609 = HEAP16[$608>>1]|0;
   $610 = $609&65535;
   $611 = $610 & 65528;
   $612 = (_GetKnownReg($611,0)|0);
   switch ($612|0) {
   case 8:  {
    $613 = ((($13)) + 30|0);
    HEAP16[$613>>1] = 0;
    break L9;
    break;
   }
   case 16:  {
    $614 = ((($13)) + 26|0);
    HEAP16[$614>>1] = 0;
    break L9;
    break;
   }
   case 32:  {
    $615 = ((($13)) + 28|0);
    HEAP16[$615>>1] = 0;
    break L9;
    break;
   }
   case 256:  {
    $616 = ((($13)) + 22|0);
    HEAP16[$616>>1] = 0;
    break L9;
    break;
   }
   case 512:  {
    $617 = ((($13)) + 24|0);
    HEAP16[$617>>1] = 0;
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 64:  {
   $584 = ((($0)) + 1|0);
   $585 = HEAP8[$584>>0]|0;
   switch ($585<<24>>24) {
   case 3:  {
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   $586 = ((($0)) + 16|0);
   $587 = HEAP16[$586>>1]|0;
   $588 = $587&65535;
   $589 = $588 & 65528;
   $590 = (_GetKnownReg($589,0)|0);
   switch ($590|0) {
   case 8:  {
    $591 = ((($13)) + 4|0);
    $592 = HEAP16[$591>>1]|0;
    $593 = ((($13)) + 30|0);
    HEAP16[$593>>1] = $592;
    break L9;
    break;
   }
   case 16:  {
    $594 = ((($13)) + 4|0);
    $595 = HEAP16[$594>>1]|0;
    $596 = ((($13)) + 26|0);
    HEAP16[$596>>1] = $595;
    break L9;
    break;
   }
   case 32:  {
    $597 = ((($13)) + 4|0);
    $598 = HEAP16[$597>>1]|0;
    $599 = ((($13)) + 28|0);
    HEAP16[$599>>1] = $598;
    break L9;
    break;
   }
   case 256:  {
    $600 = ((($13)) + 4|0);
    $601 = HEAP16[$600>>1]|0;
    $602 = ((($13)) + 22|0);
    HEAP16[$602>>1] = $601;
    break L9;
    break;
   }
   case 512:  {
    $603 = ((($13)) + 4|0);
    $604 = HEAP16[$603>>1]|0;
    $605 = ((($13)) + 24|0);
    HEAP16[$605>>1] = $604;
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 63:  {
   $562 = ((($0)) + 1|0);
   $563 = HEAP8[$562>>0]|0;
   switch ($563<<24>>24) {
   case 3:  {
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   $564 = ((($0)) + 16|0);
   $565 = HEAP16[$564>>1]|0;
   $566 = $565&65535;
   $567 = $566 & 65528;
   $568 = (_GetKnownReg($567,0)|0);
   switch ($568|0) {
   case 8:  {
    $569 = ((($13)) + 2|0);
    $570 = HEAP16[$569>>1]|0;
    $571 = ((($13)) + 30|0);
    HEAP16[$571>>1] = $570;
    break L9;
    break;
   }
   case 16:  {
    $572 = ((($13)) + 2|0);
    $573 = HEAP16[$572>>1]|0;
    $574 = ((($13)) + 26|0);
    HEAP16[$574>>1] = $573;
    break L9;
    break;
   }
   case 32:  {
    $575 = ((($13)) + 2|0);
    $576 = HEAP16[$575>>1]|0;
    $577 = ((($13)) + 28|0);
    HEAP16[$577>>1] = $576;
    break L9;
    break;
   }
   case 256:  {
    $578 = ((($13)) + 2|0);
    $579 = HEAP16[$578>>1]|0;
    $580 = ((($13)) + 22|0);
    HEAP16[$580>>1] = $579;
    break L9;
    break;
   }
   case 512:  {
    $581 = ((($13)) + 2|0);
    $582 = HEAP16[$581>>1]|0;
    $583 = ((($13)) + 24|0);
    HEAP16[$583>>1] = $582;
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 62:  {
   $545 = ((($0)) + 1|0);
   $546 = HEAP8[$545>>0]|0;
   switch ($546<<24>>24) {
   case 3:  {
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   $547 = ((($0)) + 16|0);
   $548 = HEAP16[$547>>1]|0;
   $549 = $548&65535;
   $550 = $549 & 65528;
   $551 = (_GetKnownReg($550,0)|0);
   switch ($551|0) {
   case 8:  {
    $552 = HEAP16[$13>>1]|0;
    $553 = ((($13)) + 30|0);
    HEAP16[$553>>1] = $552;
    break L9;
    break;
   }
   case 16:  {
    $554 = HEAP16[$13>>1]|0;
    $555 = ((($13)) + 26|0);
    HEAP16[$555>>1] = $554;
    break L9;
    break;
   }
   case 32:  {
    $556 = HEAP16[$13>>1]|0;
    $557 = ((($13)) + 28|0);
    HEAP16[$557>>1] = $556;
    break L9;
    break;
   }
   case 256:  {
    $558 = HEAP16[$13>>1]|0;
    $559 = ((($13)) + 22|0);
    HEAP16[$559>>1] = $558;
    break L9;
    break;
   }
   case 512:  {
    $560 = HEAP16[$13>>1]|0;
    $561 = ((($13)) + 24|0);
    HEAP16[$561>>1] = $560;
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 58:  {
   HEAP16[$12>>1] = -1;
   break;
  }
  case 55:  {
   $533 = ((($0)) + 1|0);
   $534 = HEAP8[$533>>0]|0;
   switch ($534<<24>>24) {
   case 1:  {
    HEAP16[$12>>1] = -1;
    break L9;
    break;
   }
   case 3:  {
    $535 = ((($0)) + 16|0);
    $536 = HEAP16[$535>>1]|0;
    $537 = $536&65535;
    $538 = $537 & 65528;
    $539 = (_GetKnownReg($538,$13)|0);
    switch ($539|0) {
    case 8:  {
     $540 = ((($13)) + 30|0);
     HEAP16[$540>>1] = -1;
     break L9;
     break;
    }
    case 16:  {
     $541 = ((($13)) + 26|0);
     HEAP16[$541>>1] = -1;
     break L9;
     break;
    }
    case 32:  {
     $542 = ((($13)) + 28|0);
     HEAP16[$542>>1] = -1;
     break L9;
     break;
    }
    case 256:  {
     $543 = ((($13)) + 22|0);
     HEAP16[$543>>1] = -1;
     break L9;
     break;
    }
    case 512:  {
     $544 = ((($13)) + 24|0);
     HEAP16[$544>>1] = -1;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 54:  {
   $521 = ((($0)) + 1|0);
   $522 = HEAP8[$521>>0]|0;
   switch ($522<<24>>24) {
   case 1:  {
    HEAP16[$12>>1] = -1;
    break L9;
    break;
   }
   case 3:  {
    $523 = ((($0)) + 16|0);
    $524 = HEAP16[$523>>1]|0;
    $525 = $524&65535;
    $526 = $525 & 65528;
    $527 = (_GetKnownReg($526,$13)|0);
    switch ($527|0) {
    case 8:  {
     $528 = ((($13)) + 30|0);
     HEAP16[$528>>1] = -1;
     break L9;
     break;
    }
    case 16:  {
     $529 = ((($13)) + 26|0);
     HEAP16[$529>>1] = -1;
     break L9;
     break;
    }
    case 32:  {
     $530 = ((($13)) + 28|0);
     HEAP16[$530>>1] = -1;
     break L9;
     break;
    }
    case 256:  {
     $531 = ((($13)) + 22|0);
     HEAP16[$531>>1] = -1;
     break L9;
     break;
    }
    case 512:  {
     $532 = ((($13)) + 24|0);
     HEAP16[$532>>1] = -1;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 53:  {
   $520 = ((($13)) + 20|0);
   HEAP16[$520>>1] = -1;
   break;
  }
  case 52:  {
   $519 = ((($13)) + 18|0);
   HEAP16[$519>>1] = -1;
   break;
  }
  case 50:  {
   HEAP16[$12>>1] = -1;
   break;
  }
  case 45:  {
   $480 = HEAP16[$13>>1]|0;
   $481 = ($480<<16>>16)<(0);
   $482 = ($23<<24>>24)==(2);
   if ($481) {
    $$not470 = $482 ^ 1;
    $$lobit$i$i = $21 & 2;
    $515 = ($$lobit$i$i<<24>>24)==(0);
    $or$cond472 = $515 | $$not470;
    if ($or$cond472) {
     break L9;
    }
    $516 = ((($0)) + 8|0);
    $517 = HEAP32[$516>>2]|0;
    $518 = ($517|0)==(255);
    if (!($518)) {
     break L9;
    }
    HEAP16[$12>>1] = 255;
    break L9;
   }
   if ($482) {
    $$lobit$i$i401$lobit = $21 & 2;
    $483 = ($$lobit$i$i401$lobit<<24>>24)==(0);
    if (!($483)) {
     $484 = $480&65535;
     $485 = ((($0)) + 8|0);
     $486 = HEAP32[$485>>2]|0;
     $487 = $484 | $486;
     $488 = $487&65535;
     HEAP16[$12>>1] = $488;
     break L9;
    }
   } else {
    $489 = ($23<<24>>24)==(3);
    if ($489) {
     $490 = ((($0)) + 14|0);
     $491 = HEAP16[$490>>1]|0;
     $492 = $491&65535;
     $493 = $492 & 65528;
     $494 = (_GetKnownReg($493,$13)|0);
     switch ($494|0) {
     case 8:  {
      $495 = HEAP16[$13>>1]|0;
      $496 = ((($13)) + 14|0);
      $497 = HEAP16[$496>>1]|0;
      $498 = $497 | $495;
      HEAP16[$12>>1] = $498;
      break L9;
      break;
     }
     case 16:  {
      $499 = HEAP16[$13>>1]|0;
      $500 = ((($13)) + 10|0);
      $501 = HEAP16[$500>>1]|0;
      $502 = $501 | $499;
      HEAP16[$12>>1] = $502;
      break L9;
      break;
     }
     case 32:  {
      $503 = HEAP16[$13>>1]|0;
      $504 = ((($13)) + 12|0);
      $505 = HEAP16[$504>>1]|0;
      $506 = $505 | $503;
      HEAP16[$12>>1] = $506;
      break L9;
      break;
     }
     case 256:  {
      $507 = HEAP16[$13>>1]|0;
      $508 = ((($13)) + 6|0);
      $509 = HEAP16[$508>>1]|0;
      $510 = $509 | $507;
      HEAP16[$12>>1] = $510;
      break L9;
      break;
     }
     case 512:  {
      $511 = HEAP16[$13>>1]|0;
      $512 = ((($13)) + 8|0);
      $513 = HEAP16[$512>>1]|0;
      $514 = $513 | $511;
      HEAP16[$12>>1] = $514;
      break L9;
      break;
     }
     default: {
      HEAP16[$12>>1] = -1;
      break L9;
     }
     }
    }
   }
   HEAP16[$12>>1] = -1;
   break;
  }
  case 21:  {
   $113 = HEAP16[$13>>1]|0;
   $114 = ($113<<16>>16)<(0);
   if (!($114)) {
    $115 = $113&65535;
    $116 = (($115) + 255)|0;
    $117 = $116 & 255;
    $118 = $117&65535;
    HEAP16[$12>>1] = $118;
   }
   break;
  }
  case 22:  {
   switch ($23<<24>>24) {
   case 1:  {
    $119 = HEAP16[$13>>1]|0;
    $120 = ($119<<16>>16)<(0);
    if ($120) {
     break L9;
    }
    $121 = $119&65535;
    $122 = (($121) + 255)|0;
    $123 = $122 & 255;
    $124 = $123&65535;
    HEAP16[$12>>1] = $124;
    break L9;
    break;
   }
   case 3:  {
    $125 = ((($0)) + 16|0);
    $126 = HEAP16[$125>>1]|0;
    $127 = $126&65535;
    $128 = $127 & 65528;
    $129 = (_GetKnownReg($128,$13)|0);
    switch ($129|0) {
    case 8:  {
     $130 = ((($13)) + 14|0);
     $131 = HEAP16[$130>>1]|0;
     $132 = $131&65535;
     $133 = (($132) + 255)|0;
     $134 = $133 & 255;
     $135 = $134&65535;
     $136 = ((($13)) + 30|0);
     HEAP16[$136>>1] = $135;
     break L9;
     break;
    }
    case 16:  {
     $137 = ((($13)) + 10|0);
     $138 = HEAP16[$137>>1]|0;
     $139 = $138&65535;
     $140 = (($139) + 255)|0;
     $141 = $140 & 255;
     $142 = $141&65535;
     $143 = ((($13)) + 26|0);
     HEAP16[$143>>1] = $142;
     break L9;
     break;
    }
    case 32:  {
     $144 = ((($13)) + 12|0);
     $145 = HEAP16[$144>>1]|0;
     $146 = $145&65535;
     $147 = (($146) + 255)|0;
     $148 = $147 & 255;
     $149 = $148&65535;
     $150 = ((($13)) + 28|0);
     HEAP16[$150>>1] = $149;
     break L9;
     break;
    }
    case 256:  {
     $151 = ((($13)) + 6|0);
     $152 = HEAP16[$151>>1]|0;
     $153 = $152&65535;
     $154 = (($153) + 255)|0;
     $155 = $154 & 255;
     $156 = $155&65535;
     $157 = ((($13)) + 22|0);
     HEAP16[$157>>1] = $156;
     break L9;
     break;
    }
    case 512:  {
     $158 = ((($13)) + 8|0);
     $159 = HEAP16[$158>>1]|0;
     $160 = $159&65535;
     $161 = (($160) + 255)|0;
     $162 = $161 & 255;
     $163 = $162&65535;
     $164 = ((($13)) + 24|0);
     HEAP16[$164>>1] = $163;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 23:  {
   $165 = ((($13)) + 2|0);
   $166 = HEAP16[$165>>1]|0;
   $167 = ($166<<16>>16)<(0);
   if (!($167)) {
    $168 = ((($13)) + 18|0);
    $169 = $166&65535;
    $170 = (($169) + 255)|0;
    $171 = $170 & 255;
    $172 = $171&65535;
    HEAP16[$168>>1] = $172;
   }
   break;
  }
  case 24:  {
   $173 = ((($13)) + 4|0);
   $174 = HEAP16[$173>>1]|0;
   $175 = ($174<<16>>16)<(0);
   if (!($175)) {
    $176 = ((($13)) + 20|0);
    $177 = $174&65535;
    $178 = (($177) + 255)|0;
    $179 = $178 & 255;
    $180 = $179&65535;
    HEAP16[$176>>1] = $180;
   }
   break;
  }
  case 25:  {
   $181 = HEAP16[$13>>1]|0;
   $182 = ($181<<16>>16)<(0);
   if (!($182)) {
    switch ($23<<24>>24) {
    case 2:  {
     $$lobit$i$i434$lobit = $21 & 2;
     $183 = ($$lobit$i$i434$lobit<<24>>24)==(0);
     if (!($183)) {
      $184 = $181&65535;
      $185 = ((($0)) + 8|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = $184 ^ $186;
      $188 = $187&65535;
      HEAP16[$12>>1] = $188;
      break L9;
     }
     break;
    }
    case 3:  {
     $189 = ((($0)) + 14|0);
     $190 = HEAP16[$189>>1]|0;
     $191 = $190&65535;
     $192 = $191 & 65528;
     $193 = (_GetKnownReg($192,$13)|0);
     switch ($193|0) {
     case 8:  {
      $194 = HEAP16[$13>>1]|0;
      $195 = ((($13)) + 14|0);
      $196 = HEAP16[$195>>1]|0;
      $197 = $196 ^ $194;
      HEAP16[$12>>1] = $197;
      break L9;
      break;
     }
     case 16:  {
      $198 = HEAP16[$13>>1]|0;
      $199 = ((($13)) + 10|0);
      $200 = HEAP16[$199>>1]|0;
      $201 = $200 ^ $198;
      HEAP16[$12>>1] = $201;
      break L9;
      break;
     }
     case 32:  {
      $202 = HEAP16[$13>>1]|0;
      $203 = ((($13)) + 12|0);
      $204 = HEAP16[$203>>1]|0;
      $205 = $204 ^ $202;
      HEAP16[$12>>1] = $205;
      break L9;
      break;
     }
     case 256:  {
      $206 = HEAP16[$13>>1]|0;
      $207 = ((($13)) + 6|0);
      $208 = HEAP16[$207>>1]|0;
      $209 = $208 ^ $206;
      HEAP16[$12>>1] = $209;
      break L9;
      break;
     }
     case 512:  {
      $210 = HEAP16[$13>>1]|0;
      $211 = ((($13)) + 8|0);
      $212 = HEAP16[$211>>1]|0;
      $213 = $212 ^ $210;
      HEAP16[$12>>1] = $213;
      break L9;
      break;
     }
     default: {
      HEAP16[$12>>1] = -1;
      break L9;
     }
     }
     break;
    }
    default: {
    }
    }
    HEAP16[$12>>1] = -1;
   }
   break;
  }
  case 26:  {
   $214 = HEAP16[$13>>1]|0;
   $215 = ($214<<16>>16)<(0);
   if (!($215)) {
    $216 = $214&65535;
    $217 = (($216) + 1)|0;
    $218 = $217 & 255;
    $219 = $218&65535;
    HEAP16[$12>>1] = $219;
   }
   break;
  }
  case 27:  {
   switch ($23<<24>>24) {
   case 1:  {
    $220 = HEAP16[$13>>1]|0;
    $221 = ($220<<16>>16)<(0);
    if ($221) {
     break L9;
    }
    $222 = $220&65535;
    $223 = (($222) + 1)|0;
    $224 = $223 & 255;
    $225 = $224&65535;
    HEAP16[$12>>1] = $225;
    break L9;
    break;
   }
   case 3:  {
    $226 = ((($0)) + 16|0);
    $227 = HEAP16[$226>>1]|0;
    $228 = $227&65535;
    $229 = $228 & 65528;
    $230 = (_GetKnownReg($229,$13)|0);
    switch ($230|0) {
    case 8:  {
     $231 = ((($13)) + 14|0);
     $232 = HEAP16[$231>>1]|0;
     $233 = $232&65535;
     $234 = (($233) + 1)|0;
     $235 = $234 & 255;
     $236 = $235&65535;
     $237 = ((($13)) + 30|0);
     HEAP16[$237>>1] = $236;
     break L9;
     break;
    }
    case 16:  {
     $238 = ((($13)) + 10|0);
     $239 = HEAP16[$238>>1]|0;
     $240 = $239&65535;
     $241 = (($240) + 1)|0;
     $242 = $241 & 255;
     $243 = $242&65535;
     $244 = ((($13)) + 26|0);
     HEAP16[$244>>1] = $243;
     break L9;
     break;
    }
    case 32:  {
     $245 = ((($13)) + 12|0);
     $246 = HEAP16[$245>>1]|0;
     $247 = $246&65535;
     $248 = (($247) + 1)|0;
     $249 = $248 & 255;
     $250 = $249&65535;
     $251 = ((($13)) + 28|0);
     HEAP16[$251>>1] = $250;
     break L9;
     break;
    }
    case 256:  {
     $252 = ((($13)) + 6|0);
     $253 = HEAP16[$252>>1]|0;
     $254 = $253&65535;
     $255 = (($254) + 1)|0;
     $256 = $255 & 255;
     $257 = $256&65535;
     $258 = ((($13)) + 22|0);
     HEAP16[$258>>1] = $257;
     break L9;
     break;
    }
    case 512:  {
     $259 = ((($13)) + 8|0);
     $260 = HEAP16[$259>>1]|0;
     $261 = $260&65535;
     $262 = (($261) + 1)|0;
     $263 = $262 & 255;
     $264 = $263&65535;
     $265 = ((($13)) + 24|0);
     HEAP16[$265>>1] = $264;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 28:  {
   $266 = ((($13)) + 2|0);
   $267 = HEAP16[$266>>1]|0;
   $268 = ($267<<16>>16)<(0);
   if (!($268)) {
    $269 = ((($13)) + 18|0);
    $270 = $267&65535;
    $271 = (($270) + 1)|0;
    $272 = $271 & 255;
    $273 = $272&65535;
    HEAP16[$269>>1] = $273;
   }
   break;
  }
  case 29:  {
   $274 = ((($13)) + 4|0);
   $275 = HEAP16[$274>>1]|0;
   $276 = ($275<<16>>16)<(0);
   if (!($276)) {
    $277 = ((($13)) + 20|0);
    $278 = $275&65535;
    $279 = (($278) + 1)|0;
    $280 = $279 & 255;
    $281 = $280&65535;
    HEAP16[$277>>1] = $281;
   }
   break;
  }
  case 43:  {
   switch ($23<<24>>24) {
   case 1:  {
    $434 = HEAP16[$13>>1]|0;
    $435 = ($434<<16>>16)<(0);
    if ($435) {
     break L9;
    }
    $436 = $434&65535;
    $437 = $436 >>> 1;
    $438 = $437 & 255;
    $439 = $438&65535;
    HEAP16[$12>>1] = $439;
    break L9;
    break;
   }
   case 3:  {
    $440 = ((($0)) + 16|0);
    $441 = HEAP16[$440>>1]|0;
    $442 = $441&65535;
    $443 = $442 & 65528;
    $444 = (_GetKnownReg($443,$13)|0);
    switch ($444|0) {
    case 8:  {
     $445 = ((($13)) + 14|0);
     $446 = HEAP16[$445>>1]|0;
     $447 = $446&65535;
     $448 = $447 >>> 1;
     $449 = $448 & 255;
     $450 = $449&65535;
     $451 = ((($13)) + 30|0);
     HEAP16[$451>>1] = $450;
     break L9;
     break;
    }
    case 16:  {
     $452 = ((($13)) + 10|0);
     $453 = HEAP16[$452>>1]|0;
     $454 = $453&65535;
     $455 = $454 >>> 1;
     $456 = $455 & 255;
     $457 = $456&65535;
     $458 = ((($13)) + 26|0);
     HEAP16[$458>>1] = $457;
     break L9;
     break;
    }
    case 32:  {
     $459 = ((($13)) + 12|0);
     $460 = HEAP16[$459>>1]|0;
     $461 = $460&65535;
     $462 = $461 >>> 1;
     $463 = $462 & 255;
     $464 = $463&65535;
     $465 = ((($13)) + 28|0);
     HEAP16[$465>>1] = $464;
     break L9;
     break;
    }
    case 256:  {
     $466 = ((($13)) + 6|0);
     $467 = HEAP16[$466>>1]|0;
     $468 = $467&65535;
     $469 = $468 >>> 1;
     $470 = $469 & 255;
     $471 = $470&65535;
     $472 = ((($13)) + 22|0);
     HEAP16[$472>>1] = $471;
     break L9;
     break;
    }
    case 512:  {
     $473 = ((($13)) + 8|0);
     $474 = HEAP16[$473>>1]|0;
     $475 = $474&65535;
     $476 = $475 >>> 1;
     $477 = $476 & 255;
     $478 = $477&65535;
     $479 = ((($13)) + 24|0);
     HEAP16[$479>>1] = $478;
     break L9;
     break;
    }
    default: {
     break L9;
    }
    }
    break;
   }
   case 4:  {
    _RC_InvalidateZP($12);
    break L9;
    break;
   }
   default: {
    break L9;
   }
   }
   break;
  }
  case 42:  {
   switch ($23<<24>>24) {
   case 2:  {
    $$lobit$i$i408$lobit = $21 & 2;
    $406 = ($$lobit$i$i408$lobit<<24>>24)==(0);
    if (!($406)) {
     $407 = ((($0)) + 8|0);
     $408 = HEAP32[$407>>2]|0;
     $409 = $408&65535;
     $410 = $409 & 255;
     $411 = ((($13)) + 20|0);
     HEAP16[$411>>1] = $410;
     break L9;
    }
    break;
   }
   case 3:  {
    $412 = ((($0)) + 14|0);
    $413 = HEAP16[$412>>1]|0;
    $414 = $413&65535;
    $415 = $414 & 65528;
    $416 = (_GetKnownReg($415,$13)|0);
    switch ($416|0) {
    case 8:  {
     $417 = ((($13)) + 14|0);
     $418 = HEAP16[$417>>1]|0;
     $419 = ((($13)) + 20|0);
     HEAP16[$419>>1] = $418;
     break L9;
     break;
    }
    case 16:  {
     $420 = ((($13)) + 10|0);
     $421 = HEAP16[$420>>1]|0;
     $422 = ((($13)) + 20|0);
     HEAP16[$422>>1] = $421;
     break L9;
     break;
    }
    case 32:  {
     $423 = ((($13)) + 12|0);
     $424 = HEAP16[$423>>1]|0;
     $425 = ((($13)) + 20|0);
     HEAP16[$425>>1] = $424;
     break L9;
     break;
    }
    case 256:  {
     $426 = ((($13)) + 6|0);
     $427 = HEAP16[$426>>1]|0;
     $428 = ((($13)) + 20|0);
     HEAP16[$428>>1] = $427;
     break L9;
     break;
    }
    case 512:  {
     $429 = ((($13)) + 8|0);
     $430 = HEAP16[$429>>1]|0;
     $431 = ((($13)) + 20|0);
     HEAP16[$431>>1] = $430;
     break L9;
     break;
    }
    default: {
     $432 = ((($13)) + 20|0);
     HEAP16[$432>>1] = -1;
     break L9;
    }
    }
    break;
   }
   default: {
   }
   }
   $433 = ((($13)) + 20|0);
   HEAP16[$433>>1] = -1;
   break;
  }
  case 41:  {
   switch ($23<<24>>24) {
   case 2:  {
    $$lobit$i$i412$lobit = $21 & 2;
    $378 = ($$lobit$i$i412$lobit<<24>>24)==(0);
    if (!($378)) {
     $379 = ((($0)) + 8|0);
     $380 = HEAP32[$379>>2]|0;
     $381 = $380&65535;
     $382 = $381 & 255;
     $383 = ((($13)) + 18|0);
     HEAP16[$383>>1] = $382;
     break L9;
    }
    break;
   }
   case 3:  {
    $384 = ((($0)) + 14|0);
    $385 = HEAP16[$384>>1]|0;
    $386 = $385&65535;
    $387 = $386 & 65528;
    $388 = (_GetKnownReg($387,$13)|0);
    switch ($388|0) {
    case 8:  {
     $389 = ((($13)) + 14|0);
     $390 = HEAP16[$389>>1]|0;
     $391 = ((($13)) + 18|0);
     HEAP16[$391>>1] = $390;
     break L9;
     break;
    }
    case 16:  {
     $392 = ((($13)) + 10|0);
     $393 = HEAP16[$392>>1]|0;
     $394 = ((($13)) + 18|0);
     HEAP16[$394>>1] = $393;
     break L9;
     break;
    }
    case 32:  {
     $395 = ((($13)) + 12|0);
     $396 = HEAP16[$395>>1]|0;
     $397 = ((($13)) + 18|0);
     HEAP16[$397>>1] = $396;
     break L9;
     break;
    }
    case 256:  {
     $398 = ((($13)) + 6|0);
     $399 = HEAP16[$398>>1]|0;
     $400 = ((($13)) + 18|0);
     HEAP16[$400>>1] = $399;
     break L9;
     break;
    }
    case 512:  {
     $401 = ((($13)) + 8|0);
     $402 = HEAP16[$401>>1]|0;
     $403 = ((($13)) + 18|0);
     HEAP16[$403>>1] = $402;
     break L9;
     break;
    }
    default: {
     $404 = ((($13)) + 18|0);
     HEAP16[$404>>1] = -1;
     break L9;
    }
    }
    break;
   }
   default: {
   }
   }
   $405 = ((($13)) + 18|0);
   HEAP16[$405>>1] = -1;
   break;
  }
  case 40:  {
   $355 = ($19<<24>>24)==(2);
   if ($355) {
    $$lobit$i$i416$lobit = $21 & 2;
    $356 = ($$lobit$i$i416$lobit<<24>>24)==(0);
    if ($356) {
     $361 = $23;
    } else {
     $357 = ((($0)) + 8|0);
     $358 = HEAP32[$357>>2]|0;
     $359 = $358&65535;
     $360 = $359 & 255;
     HEAP16[$12>>1] = $360;
     break L9;
    }
   } else {
    $361 = $19;
   }
   $362 = ($361<<24>>24)==(3);
   if (!($362)) {
    HEAP16[$12>>1] = -1;
    break L9;
   }
   $363 = ((($0)) + 14|0);
   $364 = HEAP16[$363>>1]|0;
   $365 = $364&65535;
   $366 = $365 & 65528;
   $367 = (_GetKnownReg($366,$13)|0);
   switch ($367|0) {
   case 8:  {
    $368 = ((($13)) + 14|0);
    $369 = HEAP16[$368>>1]|0;
    HEAP16[$12>>1] = $369;
    break L9;
    break;
   }
   case 16:  {
    $370 = ((($13)) + 10|0);
    $371 = HEAP16[$370>>1]|0;
    HEAP16[$12>>1] = $371;
    break L9;
    break;
   }
   case 32:  {
    $372 = ((($13)) + 12|0);
    $373 = HEAP16[$372>>1]|0;
    HEAP16[$12>>1] = $373;
    break L9;
    break;
   }
   case 256:  {
    $374 = ((($13)) + 6|0);
    $375 = HEAP16[$374>>1]|0;
    HEAP16[$12>>1] = $375;
    break L9;
    break;
   }
   case 512:  {
    $376 = ((($13)) + 8|0);
    $377 = HEAP16[$376>>1]|0;
    HEAP16[$12>>1] = $377;
    break L9;
    break;
   }
   default: {
    HEAP16[$12>>1] = -1;
    break L9;
   }
   }
   break;
  }
  case 37:  {
   $282 = ((($0)) + 4|0);
   $283 = HEAP32[$282>>2]|0;
   _GetFuncInfo($283,$2,$3);
   $284 = HEAP16[$3>>1]|0;
   $285 = $284 & 1;
   $286 = ($285<<16>>16)==(0);
   if (!($286)) {
    HEAP16[$12>>1] = -1;
   }
   $287 = $284 & 2;
   $288 = ($287<<16>>16)==(0);
   if (!($288)) {
    $289 = ((($13)) + 18|0);
    HEAP16[$289>>1] = -1;
   }
   $290 = $284 & 4;
   $291 = ($290<<16>>16)==(0);
   if (!($291)) {
    $292 = ((($13)) + 20|0);
    HEAP16[$292>>1] = -1;
   }
   $293 = $284 & 8;
   $294 = ($293<<16>>16)==(0);
   if (!($294)) {
    $295 = ((($13)) + 30|0);
    HEAP16[$295>>1] = -1;
   }
   $296 = $284 & 16;
   $297 = ($296<<16>>16)==(0);
   if (!($297)) {
    $298 = ((($13)) + 26|0);
    HEAP16[$298>>1] = -1;
   }
   $299 = $284 & 32;
   $300 = ($299<<16>>16)==(0);
   if (!($300)) {
    $301 = ((($13)) + 28|0);
    HEAP16[$301>>1] = -1;
   }
   $302 = $284 & 256;
   $303 = ($302<<16>>16)==(0);
   if (!($303)) {
    $304 = ((($13)) + 22|0);
    HEAP16[$304>>1] = -1;
   }
   $305 = $284 & 512;
   $306 = ($305<<16>>16)==(0);
   if (!($306)) {
    $307 = ((($13)) + 24|0);
    HEAP16[$307>>1] = -1;
   }
   $308 = HEAP32[$282>>2]|0;
   $309 = (_strcmp($308,34073)|0);
   $310 = ($309|0)==(0);
   if ($310) {
    $311 = HEAP16[$13>>1]|0;
    $312 = ($311<<16>>16)<(0);
    if (!($312)) {
     $313 = $311&65535;
     $314 = $313 ^ 255;
     $315 = $314&65535;
     HEAP16[$12>>1] = $315;
    }
    $316 = ((($13)) + 2|0);
    $317 = HEAP16[$316>>1]|0;
    $318 = ($317<<16>>16)<(0);
    if ($318) {
     break L9;
    }
    $319 = ((($13)) + 18|0);
    $320 = $317&65535;
    $321 = $320 ^ 255;
    $322 = $321&65535;
    HEAP16[$319>>1] = $322;
    break L9;
   }
   $323 = (_strcmp($308,35558)|0);
   $324 = ($323|0)==(0);
   if ($324) {
    $325 = HEAP16[$13>>1]|0;
    $326 = ($325<<16>>16)==(0);
    if ($326) {
     HEAP16[$12>>1] = 0;
    }
    $327 = ((($13)) + 2|0);
    $328 = HEAP16[$327>>1]|0;
    $329 = ($328<<16>>16)==(0);
    if (!($329)) {
     break L9;
    }
    $330 = ((($13)) + 18|0);
    HEAP16[$330>>1] = 0;
    break L9;
   }
   $331 = (_strcmp($308,33855)|0);
   $332 = ($331|0)==(0);
   if ($332) {
    $333 = HEAP16[$13>>1]|0;
    $334 = $333 & -32760;
    $335 = ($334<<16>>16)==(8);
    if (!($335)) {
     break L9;
    }
    (_puts(33864)|0);
    HEAP16[$12>>1] = 0;
    break L9;
   }
   $336 = (_strcmp($308,35863)|0);
   $337 = ($336|0)==(0);
   if ($337) {
    $338 = HEAP16[$13>>1]|0;
    $339 = ($338<<16>>16)==(255);
    if ($339) {
     HEAP16[$12>>1] = 255;
    }
    $340 = ((($13)) + 2|0);
    $341 = HEAP16[$340>>1]|0;
    $342 = ($341<<16>>16)==(255);
    if (!($342)) {
     break L9;
    }
    $343 = ((($13)) + 18|0);
    HEAP16[$343>>1] = 255;
    break L9;
   }
   $344 = (_strcmp($308,33869)|0);
   $345 = ($344|0)==(0);
   if ($345) {
    $346 = HEAP16[$13>>1]|0;
    $347 = $346 & 8;
    $348 = ($347<<16>>16)==(0);
    if ($348) {
     break L9;
    }
    HEAP16[$12>>1] = 0;
    break L9;
   }
   $349 = (_FindBoolCmpCond($308)|0);
   $350 = ($349|0)==(-1);
   if ($350) {
    $351 = HEAP32[$282>>2]|0;
    $352 = (_FindTosCmpCond($351)|0);
    $353 = ($352|0)==(-1);
    if ($353) {
     break L9;
    }
   }
   $354 = ((($13)) + 18|0);
   HEAP16[$354>>1] = 0;
   break;
  }
  default: {
  }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _CE_Output($0) {
 $0 = $0|0;
 var $$054 = 0, $$05657 = 0, $$idx = 0, $$idx$val = 0, $$in = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer15 = 0, $vararg_buffer20 = 0, $vararg_buffer25 = 0, $vararg_buffer30 = 0, $vararg_buffer35 = 0, $vararg_buffer40 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer72 = 0, $vararg_buffer76 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0;
 var $vararg_ptr4 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr75 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $vararg_buffer76 = sp + 360|0;
 $vararg_buffer72 = sp + 352|0;
 $vararg_buffer69 = sp + 344|0;
 $vararg_buffer66 = sp + 336|0;
 $vararg_buffer63 = sp + 328|0;
 $vararg_buffer60 = sp + 320|0;
 $vararg_buffer57 = sp + 312|0;
 $vararg_buffer54 = sp + 304|0;
 $vararg_buffer47 = sp + 272|0;
 $vararg_buffer45 = sp + 264|0;
 $vararg_buffer40 = sp + 248|0;
 $vararg_buffer35 = sp + 232|0;
 $vararg_buffer30 = sp + 216|0;
 $vararg_buffer25 = sp + 200|0;
 $vararg_buffer20 = sp + 184|0;
 $vararg_buffer15 = sp + 168|0;
 $vararg_buffer10 = sp + 152|0;
 $vararg_buffer5 = sp + 136|0;
 $vararg_buffer1 = sp + 128|0;
 $vararg_buffer = sp;
 $1 = sp + 400|0;
 $2 = sp + 368|0;
 $$idx = ((($0)) + 24|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $3 = ($$idx$val|0)==(0);
 L1: do {
  if (!($3)) {
   $4 = ((($0)) + 32|0);
   $$05657 = 0;
   while(1) {
    $7 = HEAP32[$4>>2]|0;
    $8 = (($7) + ($$05657<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    _CL_Output($9);
    $10 = (($$05657) + 1)|0;
    $11 = ($10>>>0)<($$idx$val>>>0);
    if (!($11)) {
     break L1;
    }
    $$pre = HEAP32[$$idx>>2]|0;
    $12 = ($$pre>>>0)>($10>>>0);
    if ($12) {
     $$05657 = $10;
    } else {
     break;
    }
   }
   $5 = HEAP32[3332]|0;
   $6 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$5 & 1]($6,40922,40950,155);
   // unreachable;
  }
 } while(0);
 $13 = HEAP8[$0>>0]|0;
 $14 = $13&255;
 $15 = (((11404 + (($14*20)|0)|0)) + 4|0);
 HEAP32[$vararg_buffer>>2] = $15;
 $16 = (_WriteOutput(33878,$vararg_buffer)|0);
 $17 = (9 - ($16))|0;
 $18 = ((($0)) + 1|0);
 $19 = HEAP8[$18>>0]|0;
 do {
  switch ($19<<24>>24) {
  case 0:  {
   $$054 = $16;
   break;
  }
  case 1:  {
   HEAP32[$vararg_buffer1>>2] = $17;
   $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
   HEAP32[$vararg_ptr4>>2] = 47049;
   $20 = (_WriteOutput(33882,$vararg_buffer1)|0);
   $21 = (($20) + ($16))|0;
   $$054 = $21;
   break;
  }
  case 2:  {
   $22 = ((($0)) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   HEAP32[$vararg_buffer5>>2] = $17;
   $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
   HEAP32[$vararg_ptr8>>2] = 47049;
   $vararg_ptr9 = ((($vararg_buffer5)) + 8|0);
   HEAP32[$vararg_ptr9>>2] = $23;
   $24 = (_WriteOutput(33887,$vararg_buffer5)|0);
   $25 = (($24) + ($16))|0;
   $$054 = $25;
   break;
  }
  case 6: case 3:  {
   $26 = ((($0)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   HEAP32[$vararg_buffer10>>2] = $17;
   $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
   HEAP32[$vararg_ptr13>>2] = 47049;
   $vararg_ptr14 = ((($vararg_buffer10)) + 8|0);
   HEAP32[$vararg_ptr14>>2] = $27;
   $28 = (_WriteOutput(33894,$vararg_buffer10)|0);
   $29 = (($28) + ($16))|0;
   $$054 = $29;
   break;
  }
  case 7: case 4:  {
   $30 = ((($0)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   HEAP32[$vararg_buffer15>>2] = $17;
   $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
   HEAP32[$vararg_ptr18>>2] = 47049;
   $vararg_ptr19 = ((($vararg_buffer15)) + 8|0);
   HEAP32[$vararg_ptr19>>2] = $31;
   $32 = (_WriteOutput(33900,$vararg_buffer15)|0);
   $33 = (($32) + ($16))|0;
   $$054 = $33;
   break;
  }
  case 8:  {
   $34 = ((($0)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer20>>2] = $17;
   $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
   HEAP32[$vararg_ptr23>>2] = 47049;
   $vararg_ptr24 = ((($vararg_buffer20)) + 8|0);
   HEAP32[$vararg_ptr24>>2] = $35;
   $36 = (_WriteOutput(33908,$vararg_buffer20)|0);
   $37 = (($36) + ($16))|0;
   $$054 = $37;
   break;
  }
  case 9:  {
   $38 = ((($0)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$vararg_buffer25>>2] = $17;
   $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
   HEAP32[$vararg_ptr28>>2] = 47049;
   $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
   HEAP32[$vararg_ptr29>>2] = $39;
   $40 = (_WriteOutput(33916,$vararg_buffer25)|0);
   $41 = (($40) + ($16))|0;
   $$054 = $41;
   break;
  }
  case 10:  {
   $42 = ((($0)) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   HEAP32[$vararg_buffer30>>2] = $17;
   $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
   HEAP32[$vararg_ptr33>>2] = 47049;
   $vararg_ptr34 = ((($vararg_buffer30)) + 8|0);
   HEAP32[$vararg_ptr34>>2] = $43;
   $44 = (_WriteOutput(33926,$vararg_buffer30)|0);
   $45 = (($44) + ($16))|0;
   $$054 = $45;
   break;
  }
  case 11:  {
   $46 = ((($0)) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   HEAP32[$vararg_buffer35>>2] = $17;
   $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
   HEAP32[$vararg_ptr38>>2] = 47049;
   $vararg_ptr39 = ((($vararg_buffer35)) + 8|0);
   HEAP32[$vararg_ptr39>>2] = $47;
   $48 = (_WriteOutput(33936,$vararg_buffer35)|0);
   $49 = (($48) + ($16))|0;
   $$054 = $49;
   break;
  }
  case 12:  {
   $50 = ((($0)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   $53 = ((($51)) + 4|0);
   $54 = ((($0)) + 4|0);
   $$in = $52 ? $54 : $53;
   $55 = HEAP32[$$in>>2]|0;
   HEAP32[$vararg_buffer40>>2] = $17;
   $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
   HEAP32[$vararg_ptr43>>2] = 47049;
   $vararg_ptr44 = ((($vararg_buffer40)) + 8|0);
   HEAP32[$vararg_ptr44>>2] = $55;
   $56 = (_WriteOutput(33894,$vararg_buffer40)|0);
   $57 = (($56) + ($16))|0;
   $$054 = $57;
   break;
  }
  default: {
   _Internal(38626,$vararg_buffer45);
   // unreachable;
  }
  }
 } while(0);
 $58 = HEAP8[47051]|0;
 $59 = ($58<<24>>24)==(0);
 if ($59) {
  (_WriteOutput(34038,$vararg_buffer76)|0);
  STACKTOP = sp;return;
 }
 $60 = (30 - ($$054))|0;
 $61 = ((($0)) + 14|0);
 $62 = HEAP16[$61>>1]|0;
 $63 = $62&65535;
 $64 = (_RegInfoDesc($63,$vararg_buffer)|0);
 $65 = ((($0)) + 16|0);
 $66 = HEAP16[$65>>1]|0;
 $67 = $66&65535;
 $68 = (_RegInfoDesc($67,$1)|0);
 $69 = ((($0)) + 2|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 HEAP32[$vararg_buffer47>>2] = $60;
 $vararg_ptr50 = ((($vararg_buffer47)) + 4|0);
 HEAP32[$vararg_ptr50>>2] = 47049;
 $vararg_ptr51 = ((($vararg_buffer47)) + 8|0);
 HEAP32[$vararg_ptr51>>2] = $64;
 $vararg_ptr52 = ((($vararg_buffer47)) + 12|0);
 HEAP32[$vararg_ptr52>>2] = $68;
 $vararg_ptr53 = ((($vararg_buffer47)) + 16|0);
 HEAP32[$vararg_ptr53>>2] = $71;
 (_WriteOutput(33944,$vararg_buffer47)|0);
 $72 = ((($0)) + 40|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)==(0|0);
 if (!($74)) {
  $75 = HEAP16[$73>>1]|0;
  $76 = ($75<<16>>16)>(-1);
  if ($76) {
   $77 = $75 << 16 >> 16;
   HEAP32[$vararg_buffer54>>2] = $77;
   (_sprintf($vararg_buffer47,33986,$vararg_buffer54)|0);
  } else {
   ;HEAP8[$vararg_buffer47>>0]=HEAP8[33980>>0]|0;HEAP8[$vararg_buffer47+1>>0]=HEAP8[33980+1>>0]|0;HEAP8[$vararg_buffer47+2>>0]=HEAP8[33980+2>>0]|0;HEAP8[$vararg_buffer47+3>>0]=HEAP8[33980+3>>0]|0;HEAP8[$vararg_buffer47+4>>0]=HEAP8[33980+4>>0]|0;HEAP8[$vararg_buffer47+5>>0]=HEAP8[33980+5>>0]|0;
  }
  $78 = ((($vararg_buffer47)) + 5|0);
  $79 = ((($73)) + 2|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = ($80<<16>>16)>(-1);
  if ($81) {
   $82 = $80 << 16 >> 16;
   HEAP32[$vararg_buffer57>>2] = $82;
   (_sprintf($78,34000,$vararg_buffer57)|0);
  } else {
   ;HEAP8[$78>>0]=HEAP8[33994>>0]|0;HEAP8[$78+1>>0]=HEAP8[33994+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[33994+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[33994+3>>0]|0;HEAP8[$78+4>>0]=HEAP8[33994+4>>0]|0;HEAP8[$78+5>>0]=HEAP8[33994+5>>0]|0;
  }
  $83 = ((($vararg_buffer47)) + 10|0);
  $84 = ((($73)) + 4|0);
  $85 = HEAP16[$84>>1]|0;
  $86 = ($85<<16>>16)>(-1);
  if ($86) {
   $87 = $85 << 16 >> 16;
   HEAP32[$vararg_buffer60>>2] = $87;
   (_sprintf($83,34013,$vararg_buffer60)|0);
  } else {
   ;HEAP8[$83>>0]=HEAP8[34008>>0]|0;HEAP8[$83+1>>0]=HEAP8[34008+1>>0]|0;HEAP8[$83+2>>0]=HEAP8[34008+2>>0]|0;HEAP8[$83+3>>0]=HEAP8[34008+3>>0]|0;HEAP8[$83+4>>0]=HEAP8[34008+4>>0]|0;
  }
  $88 = HEAP32[$72>>2]|0;
  $89 = ((($88)) + 16|0);
  $90 = HEAP16[$89>>1]|0;
  $91 = ($90<<16>>16)>(-1);
  if ($91) {
   $92 = $90 << 16 >> 16;
   HEAP32[$vararg_buffer63>>2] = $92;
   (_sprintf($2,33986,$vararg_buffer63)|0);
  } else {
   ;HEAP8[$2>>0]=HEAP8[33980>>0]|0;HEAP8[$2+1>>0]=HEAP8[33980+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[33980+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[33980+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[33980+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[33980+5>>0]|0;
  }
  $93 = ((($2)) + 5|0);
  $94 = ((($88)) + 18|0);
  $95 = HEAP16[$94>>1]|0;
  $96 = ($95<<16>>16)>(-1);
  if ($96) {
   $97 = $95 << 16 >> 16;
   HEAP32[$vararg_buffer66>>2] = $97;
   (_sprintf($93,34000,$vararg_buffer66)|0);
  } else {
   ;HEAP8[$93>>0]=HEAP8[33994>>0]|0;HEAP8[$93+1>>0]=HEAP8[33994+1>>0]|0;HEAP8[$93+2>>0]=HEAP8[33994+2>>0]|0;HEAP8[$93+3>>0]=HEAP8[33994+3>>0]|0;HEAP8[$93+4>>0]=HEAP8[33994+4>>0]|0;HEAP8[$93+5>>0]=HEAP8[33994+5>>0]|0;
  }
  $98 = ((($2)) + 10|0);
  $99 = ((($88)) + 20|0);
  $100 = HEAP16[$99>>1]|0;
  $101 = ($100<<16>>16)>(-1);
  if ($101) {
   $102 = $100 << 16 >> 16;
   HEAP32[$vararg_buffer69>>2] = $102;
   (_sprintf($98,34013,$vararg_buffer69)|0);
  } else {
   ;HEAP8[$98>>0]=HEAP8[34008>>0]|0;HEAP8[$98+1>>0]=HEAP8[34008+1>>0]|0;HEAP8[$98+2>>0]=HEAP8[34008+2>>0]|0;HEAP8[$98+3>>0]=HEAP8[34008+3>>0]|0;HEAP8[$98+4>>0]=HEAP8[34008+4>>0]|0;
  }
  HEAP32[$vararg_buffer72>>2] = $vararg_buffer47;
  $vararg_ptr75 = ((($vararg_buffer72)) + 4|0);
  HEAP32[$vararg_ptr75>>2] = $2;
  (_WriteOutput(34020,$vararg_buffer72)|0);
 }
 (_WriteOutput(34038,$vararg_buffer76)|0);
 STACKTOP = sp;return;
}
function _RegInfoDesc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $endptr22 = 0, $endptr24 = 0, $endptr26 = 0, $endptr28 = 0, $endptr30 = 0, $endptr32 = 0, $endptr34 = 0, $endptr36 = 0, $endptr38 = 0;
 var $strlen = 0, $strlen21 = 0, $strlen23 = 0, $strlen25 = 0, $strlen27 = 0, $strlen29 = 0, $strlen31 = 0, $strlen33 = 0, $strlen35 = 0, $strlen37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$1>>0] = 0;
 $2 = $0 & 512;
 $3 = ($2|0)!=(0);
 $strlen = (_strlen($1)|0);
 $endptr = (($1) + ($strlen)|0);
 $4 = $3 ? 72 : 95;
 HEAP8[$endptr>>0]=$4&255;HEAP8[$endptr+1>>0]=$4>>8;
 $5 = $0 & 256;
 $6 = ($5|0)!=(0);
 $strlen21 = (_strlen($1)|0);
 $endptr22 = (($1) + ($strlen21)|0);
 $7 = $6 ? 76 : 95;
 HEAP8[$endptr22>>0]=$7&255;HEAP8[$endptr22+1>>0]=$7>>8;
 $8 = $0 & 1;
 $9 = ($8|0)!=(0);
 $strlen23 = (_strlen($1)|0);
 $endptr24 = (($1) + ($strlen23)|0);
 $10 = $9 ? 65 : 95;
 HEAP8[$endptr24>>0]=$10&255;HEAP8[$endptr24+1>>0]=$10>>8;
 $11 = $0 & 2;
 $12 = ($11|0)!=(0);
 $strlen25 = (_strlen($1)|0);
 $endptr26 = (($1) + ($strlen25)|0);
 $13 = $12 ? 88 : 95;
 HEAP8[$endptr26>>0]=$13&255;HEAP8[$endptr26+1>>0]=$13>>8;
 $14 = $0 & 4;
 $15 = ($14|0)!=(0);
 $strlen27 = (_strlen($1)|0);
 $endptr28 = (($1) + ($strlen27)|0);
 $16 = $15 ? 89 : 95;
 HEAP8[$endptr28>>0]=$16&255;HEAP8[$endptr28+1>>0]=$16>>8;
 $17 = $0 & 8;
 $18 = ($17|0)!=(0);
 $19 = $18 ? 34040 : 34043;
 $strlen29 = (_strlen($1)|0);
 $endptr30 = (($1) + ($strlen29)|0);
 ;HEAP8[$endptr30>>0]=HEAP8[$19>>0]|0;HEAP8[$endptr30+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$endptr30+2>>0]=HEAP8[$19+2>>0]|0;
 $20 = $0 & 48;
 $21 = ($20|0)!=(0);
 $strlen31 = (_strlen($1)|0);
 $endptr32 = (($1) + ($strlen31)|0);
 $22 = $21 ? 49 : 95;
 HEAP8[$endptr32>>0]=$22&255;HEAP8[$endptr32+1>>0]=$22>>8;
 $23 = $0 & 192;
 $24 = ($23|0)!=(0);
 $strlen33 = (_strlen($1)|0);
 $endptr34 = (($1) + ($strlen33)|0);
 $25 = $24 ? 50 : 95;
 HEAP8[$endptr34>>0]=$25&255;HEAP8[$endptr34+1>>0]=$25>>8;
 $26 = $0 & 3072;
 $27 = ($26|0)!=(0);
 $strlen35 = (_strlen($1)|0);
 $endptr36 = (($1) + ($strlen35)|0);
 $28 = $27 ? 86 : 95;
 HEAP8[$endptr36>>0]=$28&255;HEAP8[$endptr36+1>>0]=$28>>8;
 $29 = $0 & 12288;
 $30 = ($29|0)!=(0);
 $strlen37 = (_strlen($1)|0);
 $endptr38 = (($1) + ($strlen37)|0);
 $31 = $30 ? 83 : 95;
 HEAP8[$endptr38>>0]=$31&255;HEAP8[$endptr38+1>>0]=$31>>8;
 return ($1|0);
}
function _OptBNegA1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$01926 = 0, $$027 = 0, $$1 = 0, $$idx$i = 0, $$idx$i20 = 0, $$idx$i22 = 0, $$idx$val$i = 0, $$idx$val$i21 = 0, $$idx$val$i23 = 0, $$idx$val$i25 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i25 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i25|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $$01926 = 0;$$027 = 0;$5 = $$idx$val$i25;
 while(1) {
  $6 = ($5>>>0)>($$01926>>>0);
  if (!($6)) {
   label = 4;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($$01926<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 33619967;
  $14 = ($13|0)==(33554985);
  if ($14) {
   $15 = ((($11)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)==(0);
   if ($17) {
    $18 = (($$01926) + 1)|0;
    $19 = (_CS_GetEntries($0,$1,$18,2)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $$1 = $$027;
    } else {
     $21 = HEAP32[$1>>2]|0;
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(40);
     if ($23) {
      $24 = ((($21)) + 14|0);
      $25 = HEAP16[$24>>1]|0;
      $26 = $25 & 2;
      $27 = ($26<<16>>16)==(0);
      if ($27) {
       $$idx$i22 = ((($21)) + 24|0);
       $$idx$val$i23 = HEAP32[$$idx$i22>>2]|0;
       $28 = ($$idx$val$i23|0)==(0);
       if ($28) {
        $29 = HEAP32[$4>>2]|0;
        $30 = HEAP8[$29>>0]|0;
        $31 = ($30<<24>>24)==(37);
        if ($31) {
         $32 = ((($29)) + 4|0);
         $33 = HEAP32[$32>>2]|0;
         $34 = (_strcmp($33,34046)|0);
         $35 = ($34|0)==(0);
         if ($35) {
          $$idx$i20 = ((($29)) + 24|0);
          $$idx$val$i21 = HEAP32[$$idx$i20>>2]|0;
          $36 = ($$idx$val$i21|0)==(0);
          if ($36) {
           $37 = (($$027) + 1)|0;
           _CS_DelEntry($0,$$01926);
           $$1 = $37;
          } else {
           $$1 = $$027;
          }
         } else {
          $$1 = $$027;
         }
        } else {
         $$1 = $$027;
        }
       } else {
        $$1 = $$027;
       }
      } else {
       $$1 = $$027;
      }
     } else {
      $$1 = $$027;
     }
    }
   } else {
    $$1 = $$027;
   }
  } else {
   $$1 = $$027;
  }
  $38 = (($$01926) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $39 = ($38>>>0)<($$idx$val$i>>>0);
  if ($39) {
   $$01926 = $38;$$027 = $$1;$5 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptBNegA2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02633 = 0, $$034 = 0, $$1 = 0, $$idx$i = 0, $$idx$i27 = 0, $$idx$i29 = 0, $$idx$val$i = 0, $$idx$val$i28 = 0, $$idx$val$i30 = 0, $$idx$val$i32 = 0, $$pre = 0, $$pre$phiZ2D = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i32 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i32|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $$02633 = 0;$$034 = 0;$5 = $$idx$val$i32;
 while(1) {
  $6 = ($5>>>0)>($$02633>>>0);
  if (!($6)) {
   label = 4;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($$02633<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP8[$11>>0]|0;
  switch ($12<<24>>24) {
  case 73: case 71: case 58: case 50: case 45: case 40: case 26: case 25: case 21: case 1: case 0:  {
   $13 = (($$02633) + 1)|0;
   $14 = (_CS_GetEntries($0,$1,$13,2)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $$1 = $$034;$$pre$phiZ2D = $13;
   } else {
    $16 = HEAP32[$1>>2]|0;
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17<<24>>24)==(37);
    if ($18) {
     $19 = ((($16)) + 4|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_strcmp($20,34046)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      $$idx$i29 = ((($16)) + 24|0);
      $$idx$val$i30 = HEAP32[$$idx$i29>>2]|0;
      $23 = ($$idx$val$i30|0)==(0);
      if ($23) {
       $24 = HEAP32[$4>>2]|0;
       $25 = ((($24)) + 12|0);
       $26 = HEAP16[$25>>1]|0;
       $27 = $26 & 4;
       $28 = ($27<<16>>16)==(0);
       if ($28) {
        $$1 = $$034;$$pre$phiZ2D = $13;
       } else {
        $$idx$i27 = ((($24)) + 24|0);
        $$idx$val$i28 = HEAP32[$$idx$i27>>2]|0;
        $29 = ($$idx$val$i28|0)==(0);
        if ($29) {
         $30 = HEAP8[$24>>0]|0;
         $31 = $30&255;
         $32 = (_GetInverseBranch($31)|0);
         _CE_ReplaceOPC($24,$32);
         _CS_DelEntry($0,$13);
         $33 = (($$034) + 1)|0;
         $$1 = $33;$$pre$phiZ2D = $13;
        } else {
         $$1 = $$034;$$pre$phiZ2D = $13;
        }
       }
      } else {
       $$1 = $$034;$$pre$phiZ2D = $13;
      }
     } else {
      $$1 = $$034;$$pre$phiZ2D = $13;
     }
    } else {
     $$1 = $$034;$$pre$phiZ2D = $13;
    }
   }
   break;
  }
  default: {
   $$pre = (($$02633) + 1)|0;
   $$1 = $$034;$$pre$phiZ2D = $$pre;
  }
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $34 = ($$pre$phiZ2D>>>0)<($$idx$val$i>>>0);
  if ($34) {
   $$02633 = $$pre$phiZ2D;$$034 = $$1;$5 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 15;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptBNegAX1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02123 = 0, $$024 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i22 = 0, $$idx$val$i25 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i22 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i22|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02123 = 0;$$024 = 0;$$idx$val$i25 = $$idx$val$i22;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02123<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 2|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==(0);
  if ($10) {
   $11 = HEAP8[$5>>0]|0;
   $12 = ($11<<24>>24)==(37);
   if ($12) {
    $13 = ((($5)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_strcmp($14,34052)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = (($$024) + 1)|0;
     $18 = (($$02123) + 1)|0;
     $19 = ((($5)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_NewCodeEntry(37,6,34046,0,$20)|0);
     _CS_InsertEntry($0,$21,$18);
     _CS_DelEntry($0,$$02123);
     $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
     $$1 = $17;$$idx$val$i = $$idx$val$i$pre;
    } else {
     $$1 = $$024;$$idx$val$i = $$idx$val$i25;
    }
   } else {
    $$1 = $$024;$$idx$val$i = $$idx$val$i25;
   }
  } else {
   $$1 = $$024;$$idx$val$i = $$idx$val$i25;
  }
  $22 = (($$02123) + 1)|0;
  $23 = ($22>>>0)<($$idx$val$i>>>0);
  if ($23) {
   $$02123 = $22;$$024 = $$1;$$idx$val$i25 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptBNegAX2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02630 = 0, $$031 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i29 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i29|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $$02630 = 0;$$031 = 0;$7 = $$idx$val$i29;
 while(1) {
  $8 = ($7>>>0)>($$02630>>>0);
  if (!($8)) {
   label = 4;
   break;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($$02630<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(42);
  if ($15) {
   $16 = (_CE_IsConstImm($13)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = $$031;
   } else {
    $18 = (($$02630) + 1)|0;
    $19 = (_CS_RangeHasLabel($0,$18,3)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = (_CS_GetEntries($0,$4,$18,3)|0);
     $22 = ($21|0)==(0);
     if ($22) {
      $$1 = $$031;
     } else {
      $23 = HEAP32[$4>>2]|0;
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(37);
      if ($25) {
       $26 = ((($23)) + 4|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (_strcmp($27,36890)|0);
       $29 = ($28|0)==(0);
       if ($29) {
        $30 = HEAP32[$5>>2]|0;
        $31 = HEAP8[$30>>0]|0;
        $32 = ($31<<24>>24)==(37);
        if ($32) {
         $33 = ((($30)) + 4|0);
         $34 = HEAP32[$33>>2]|0;
         $35 = (_strcmp($34,34052)|0);
         $36 = ($35|0)==(0);
         if ($36) {
          $37 = HEAP32[$6>>2]|0;
          $38 = ((($37)) + 12|0);
          $39 = HEAP16[$38>>1]|0;
          $40 = $39 & 4;
          $41 = ($40<<16>>16)==(0);
          if ($41) {
           $$1 = $$031;
          } else {
           $42 = ((($23)) + 36|0);
           $43 = HEAP32[$42>>2]|0;
           $44 = (_NewCodeEntry(40,10,36898,0,$43)|0);
           _CS_InsertEntry($0,$44,$18);
           $45 = HEAP32[$4>>2]|0;
           $46 = ((($45)) + 36|0);
           $47 = HEAP32[$46>>2]|0;
           $48 = (_NewCodeEntry(24,0,0,0,$47)|0);
           $49 = (($$02630) + 2)|0;
           _CS_InsertEntry($0,$48,$49);
           $50 = HEAP32[$4>>2]|0;
           $51 = ((($50)) + 36|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = (_NewCodeEntry(45,10,36898,0,$52)|0);
           $54 = (($$02630) + 3)|0;
           _CS_InsertEntry($0,$53,$54);
           $55 = HEAP32[$6>>2]|0;
           $56 = HEAP8[$55>>0]|0;
           $57 = $56&255;
           $58 = (_GetInverseBranch($57)|0);
           _CE_ReplaceOPC($55,$58);
           $59 = (($$02630) + 4)|0;
           _CS_DelEntries($0,$59,2);
           $60 = (($$031) + 1)|0;
           $$1 = $60;
          }
         } else {
          $$1 = $$031;
         }
        } else {
         $$1 = $$031;
        }
       } else {
        $$1 = $$031;
       }
      } else {
       $$1 = $$031;
      }
     }
    } else {
     $$1 = $$031;
    }
   }
  } else {
   $$1 = $$031;
  }
  $61 = (($$02630) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $62 = ($61>>>0)<($$idx$val$i>>>0);
  if ($62) {
   $$02630 = $61;$$031 = $$1;$7 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptBNegAX3($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$01625 = 0, $$026 = 0, $$1 = 0, $$idx$i = 0, $$idx$i17 = 0, $$idx$i19 = 0, $$idx$i21 = 0, $$idx$val$i = 0, $$idx$val$i18 = 0, $$idx$val$i20 = 0, $$idx$val$i22 = 0, $$idx$val$i24 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i24 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i24|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$01625 = 0;$$026 = 0;$6 = $$idx$val$i24;
 while(1) {
  $7 = ($6>>>0)>($$01625>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$01625<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(40);
  $15 = (($$01625) + 1)|0;
  if ($14) {
   $16 = (_CS_GetEntries($0,$1,$15,3)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = $$026;
   } else {
    $18 = HEAP32[$1>>2]|0;
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(41);
    if ($20) {
     $$idx$i21 = ((($18)) + 24|0);
     $$idx$val$i22 = HEAP32[$$idx$i21>>2]|0;
     $21 = ($$idx$val$i22|0)==(0);
     if ($21) {
      $22 = HEAP32[$4>>2]|0;
      $23 = HEAP8[$22>>0]|0;
      $24 = ($23<<24>>24)==(37);
      if ($24) {
       $25 = ((($22)) + 4|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = (_strcmp($26,34052)|0);
       $28 = ($27|0)==(0);
       if ($28) {
        $$idx$i19 = ((($22)) + 24|0);
        $$idx$val$i20 = HEAP32[$$idx$i19>>2]|0;
        $29 = ($$idx$val$i20|0)==(0);
        if ($29) {
         $30 = HEAP32[$5>>2]|0;
         $31 = ((($30)) + 12|0);
         $32 = HEAP16[$31>>1]|0;
         $33 = $32 & 4;
         $34 = ($33<<16>>16)==(0);
         if ($34) {
          $$1 = $$026;
         } else {
          $$idx$i17 = ((($30)) + 24|0);
          $$idx$val$i18 = HEAP32[$$idx$i17>>2]|0;
          $35 = ($$idx$val$i18|0)==(0);
          if ($35) {
           _CE_ReplaceOPC($18,45);
           $36 = HEAP32[$5>>2]|0;
           $37 = HEAP8[$36>>0]|0;
           $38 = $37&255;
           $39 = (_GetInverseBranch($38)|0);
           _CE_ReplaceOPC($36,$39);
           $40 = (($$01625) + 2)|0;
           _CS_DelEntry($0,$40);
           $41 = (($$026) + 1)|0;
           $$1 = $41;
          } else {
           $$1 = $$026;
          }
         }
        } else {
         $$1 = $$026;
        }
       } else {
        $$1 = $$026;
       }
      } else {
       $$1 = $$026;
      }
     } else {
      $$1 = $$026;
     }
    } else {
     $$1 = $$026;
    }
   }
  } else {
   $$1 = $$026;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $42 = ($15>>>0)<($$idx$val$i>>>0);
  if ($42) {
   $$01625 = $15;$$026 = $$1;$6 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptBNegAX4($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03037 = 0, $$038 = 0, $$1 = 0, $$idx$i = 0, $$idx$i31 = 0, $$idx$i33 = 0, $$idx$val$i = 0, $$idx$val$i32 = 0, $$idx$val$i34 = 0, $$idx$val$i36 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i36 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i36|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $$03037 = 0;$$038 = 0;$5 = $$idx$val$i36;
 while(1) {
  $6 = ($5>>>0)>($$03037>>>0);
  if (!($6)) {
   label = 4;
   break;
  }
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + ($$03037<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(37);
  $14 = (($$03037) + 1)|0;
  if ($13) {
   $15 = (_CS_GetEntries($0,$1,$14,2)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$1 = $$038;
   } else {
    $17 = HEAP32[$1>>2]|0;
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(37);
    if ($19) {
     $20 = ((($17)) + 4|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (_strncmp($21,34046,5)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$idx$i33 = ((($17)) + 24|0);
      $$idx$val$i34 = HEAP32[$$idx$i33>>2]|0;
      $24 = ($$idx$val$i34|0)==(0);
      if ($24) {
       $25 = HEAP32[$4>>2]|0;
       $26 = ((($25)) + 12|0);
       $27 = HEAP16[$26>>1]|0;
       $28 = $27 & 4;
       $29 = ($28<<16>>16)==(0);
       if ($29) {
        $$1 = $$038;
       } else {
        $$idx$i31 = ((($25)) + 24|0);
        $$idx$val$i32 = HEAP32[$$idx$i31>>2]|0;
        $30 = ($$idx$val$i32|0)==(0);
        if ($30) {
         $31 = (_strcmp($21,34046)|0);
         $32 = ($31|0)==(0);
         $33 = ((($17)) + 36|0);
         $34 = HEAP32[$33>>2]|0;
         if ($32) {
          $35 = (_NewCodeEntry(66,0,0,0,$34)|0);
          $36 = (($$03037) + 2)|0;
          _CS_InsertEntry($0,$35,$36);
         } else {
          $37 = (_NewCodeEntry(63,3,34681,0,$34)|0);
          $38 = (($$03037) + 2)|0;
          _CS_InsertEntry($0,$37,$38);
          $39 = HEAP32[$1>>2]|0;
          $40 = ((($39)) + 36|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = (_NewCodeEntry(45,3,34681,0,$41)|0);
          $43 = (($$03037) + 3)|0;
          _CS_InsertEntry($0,$42,$43);
         }
         _CS_DelEntry($0,$14);
         $44 = HEAP32[$4>>2]|0;
         $45 = HEAP8[$44>>0]|0;
         $46 = $45&255;
         $47 = (_GetInverseBranch($46)|0);
         _CE_ReplaceOPC($44,$47);
         $48 = (($$038) + 1)|0;
         $$1 = $48;
        } else {
         $$1 = $$038;
        }
       }
      } else {
       $$1 = $$038;
      }
     } else {
      $$1 = $$038;
     }
    } else {
     $$1 = $$038;
    }
   }
  } else {
   $$1 = $$038;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $49 = ($14>>>0)<($$idx$val$i>>>0);
  if ($49) {
   $$03037 = $14;$$038 = $$1;$5 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 17;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 17) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptNegAX1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03134 = 0, $$035 = 0, $$1 = 0, $$132 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i33 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i33 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i33|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03134 = 0;$$035 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$03134<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strcmp($9,34059)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (($$03134) + 1)|0;
    $13 = (_RegXUsed($0,$12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = ((($5)) + 36|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (_NewCodeEntry(25,2,34065,0,$16)|0);
     _CS_InsertEntry($0,$17,$12);
     $18 = HEAP32[$15>>2]|0;
     $19 = (_NewCodeEntry(14,0,0,0,$18)|0);
     $20 = (($$03134) + 2)|0;
     _CS_InsertEntry($0,$19,$20);
     $21 = HEAP32[$15>>2]|0;
     $22 = (_NewCodeEntry(0,2,34069,0,$21)|0);
     $23 = (($$03134) + 3)|0;
     _CS_InsertEntry($0,$22,$23);
     _CS_DelEntry($0,$$03134);
     $24 = (($$035) + 1)|0;
     $$1 = $24;$$132 = $20;
    } else {
     $$1 = $$035;$$132 = $$03134;
    }
   } else {
    $$1 = $$035;$$132 = $$03134;
   }
  } else {
   $$1 = $$035;$$132 = $$03134;
  }
  $25 = (($$132) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $26 = ($25>>>0)<($$idx$val$i>>>0);
  if ($26) {
   $$03134 = $25;$$035 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptNegAX2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$05255 = 0, $$056 = 0, $$1 = 0, $$153 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i54 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i54 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i54|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$05255 = 0;$$056 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$05255<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 2|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = ($9<<16>>16)==(0);
  if ($10) {
   $11 = HEAP8[$5>>0]|0;
   $12 = ($11<<24>>24)==(37);
   if ($12) {
    $13 = ((($5)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_strcmp($14,34059)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = (_CS_GetNextEntry($0,$$05255)|0);
     $18 = ($17|0)==(0|0);
     if ($18) {
      $$1 = $$056;$$153 = $$05255;
     } else {
      $19 = ((($5)) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = (_NewCodeEntry(41,2,34065,0,$20)|0);
      $22 = (($$05255) + 1)|0;
      _CS_InsertEntry($0,$21,$22);
      $23 = HEAP32[$19>>2]|0;
      $24 = (_NewCodeEntry(25,2,34065,0,$23)|0);
      $25 = (($$05255) + 2)|0;
      _CS_InsertEntry($0,$24,$25);
      $26 = HEAP32[$19>>2]|0;
      $27 = (_NewCodeEntry(14,0,0,0,$26)|0);
      $28 = (($$05255) + 3)|0;
      _CS_InsertEntry($0,$27,$28);
      $29 = HEAP32[$19>>2]|0;
      $30 = (_NewCodeEntry(0,2,34069,0,$29)|0);
      $31 = (($$05255) + 4)|0;
      _CS_InsertEntry($0,$30,$31);
      $32 = (_CS_GenLabel($0,$17)|0);
      $33 = ((($32)) + 4|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = HEAP32[$19>>2]|0;
      $36 = (_NewCodeEntry(8,12,$34,$32,$35)|0);
      $37 = (($$05255) + 5)|0;
      _CS_InsertEntry($0,$36,$37);
      $38 = HEAP32[$19>>2]|0;
      $39 = (_NewCodeEntry(28,0,0,0,$38)|0);
      $40 = (($$05255) + 6)|0;
      _CS_InsertEntry($0,$39,$40);
      _CS_DelEntry($0,$$05255);
      $41 = (($$056) + 1)|0;
      $$1 = $41;$$153 = $37;
     }
    } else {
     $$1 = $$056;$$153 = $$05255;
    }
   } else {
    $$1 = $$056;$$153 = $$05255;
   }
  } else {
   $$1 = $$056;$$153 = $$05255;
  }
  $42 = (($$153) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $43 = ($42>>>0)<($$idx$val$i>>>0);
  if ($43) {
   $$05255 = $42;$$056 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptComplAX1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02224 = 0, $$025 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i23 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i23 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i23|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02224 = 0;$$025 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02224<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strcmp($9,34073)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = (($$02224) + 1)|0;
    $13 = (_RegXUsed($0,$12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = (($$025) + 1)|0;
     $16 = ((($5)) + 36|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (_NewCodeEntry(25,2,34065,0,$17)|0);
     _CS_InsertEntry($0,$18,$12);
     _CS_DelEntry($0,$$02224);
     $$1 = $15;
    } else {
     $$1 = $$025;
    }
   } else {
    $$1 = $$025;
   }
  } else {
   $$1 = $$025;
  }
  $19 = (($$02224) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $20 = ($19>>>0)<($$idx$val$i>>>0);
  if ($20) {
   $$02224 = $19;$$025 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _AsmStatement() {
 var $$0$be$i = 0, $$022$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i18$i = 0, $$idx$val$i21$i = 0, $$idx1$i$i = 0, $$idx1$val$i$i = 0, $$idx14$i = 0, $$idx14$val$i = 0, $$idx15$pre$phi$iZZ2D = 0, $$idx15$val$i = 0, $$off$i$i = 0, $$off$i19$i = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $vararg_buffer38 = sp + 176|0;
 $vararg_buffer35 = sp + 168|0;
 $vararg_buffer32 = sp + 160|0;
 $vararg_buffer29 = sp + 152|0;
 $vararg_buffer26 = sp + 144|0;
 $vararg_buffer23 = sp + 136|0;
 $vararg_buffer20 = sp + 128|0;
 $vararg_buffer17 = sp + 120|0;
 $vararg_buffer14 = sp + 112|0;
 $vararg_buffer11 = sp + 104|0;
 $vararg_buffer9 = sp + 96|0;
 $vararg_buffer6 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $0 = sp;
 $1 = sp + 216|0;
 $2 = sp + 200|0;
 $3 = sp + 184|0;
 _NextToken();
 $4 = HEAP32[11156]|0;
 $5 = ($4|0)==(8);
 if ($5) {
  $6 = HEAP32[11209]|0;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 150|0);
  HEAP8[$9>>0] = 0;
  _NextToken();
 }
 $10 = (_ConsumeLParen()|0);
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = HEAP32[11156]|0;
 $13 = ($12|0)==(86);
 if ($13) {
  ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
  $14 = HEAP32[(44640)>>2]|0;
  $15 = (_GetLiteralStrBuf($14)|0);
  $$idx$val$i = HEAP32[$15>>2]|0;
  $$idx14$i = ((($15)) + 4|0);
  $$idx14$val$i = HEAP32[$$idx14$i>>2]|0;
  _SB_AppendBuf($3,$$idx$val$i,$$idx14$val$i);
  _NextToken();
  $16 = ((($3)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($3)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17>>>0)<($19>>>0);
  L9: do {
   if ($20) {
    $21 = ((($2)) + 8|0);
    $22 = ((($2)) + 4|0);
    $23 = ((($0)) + 4|0);
    $24 = ((($0)) + 16|0);
    $25 = ((($0)) + 16|0);
    $26 = ((($0)) + 16|0);
    $27 = ((($0)) + 4|0);
    $28 = ((($0)) + 16|0);
    $$022$i = 0;$30 = $17;$36 = $19;
    L11: while(1) {
     $29 = (($30) + 1)|0;
     HEAP32[$16>>2] = $29;
     $31 = HEAP32[$3>>2]|0;
     $32 = (($31) + ($30)|0);
     $33 = HEAP8[$32>>0]|0;
     L13: do {
      switch ($33<<24>>24) {
      case 0:  {
       $$idx15$pre$phi$iZZ2D = $22;
       label = 51;
       break L9;
       break;
      }
      case 10:  {
       _g_asmcode($2);
       HEAP32[$21>>2] = 0;
       HEAP32[$22>>2] = 0;
       $$0$be$i = $$022$i;
       break;
      }
      case 37:  {
       $34 = (($$022$i) + 1)|0;
       $35 = ($29>>>0)<($36>>>0);
       if ($35) {
        $37 = (($31) + ($29)|0);
        $38 = (($30) + 2)|0;
        HEAP32[$16>>2] = $38;
        $39 = HEAP8[$37>>0]|0;
        $41 = $39;
       } else {
        $41 = 0;
       }
       $40 = $41 << 24 >> 24;
       switch ($40|0) {
       case 37:  {
        _SB_AppendChar($2,37);
        $$0$be$i = $34;
        break L13;
        break;
       }
       case 98:  {
        (_ConsumeComma()|0);
        _ConstAbsIntExpr(3,$0);
        $42 = HEAP32[$23>>2]|0;
        $$idx$val$i18$i = HEAP32[$42>>2]|0;
        $43 = $$idx$val$i18$i & 384;
        $44 = ($43|0)==(128);
        $45 = HEAP32[$24>>2]|0;
        if ($44) {
         $46 = ($45>>>0)>(255);
         if ($46) {
          HEAP32[$vararg_buffer1>>2] = $34;
          _Error(34105,$vararg_buffer1);
          HEAP32[$24>>2] = 0;
          $49 = 0;
         } else {
          $49 = $45;
         }
        } else {
         $$off$i19$i = (($45) + 128)|0;
         $47 = ($$off$i19$i>>>0)>(255);
         if ($47) {
          HEAP32[$vararg_buffer3>>2] = $34;
          _Error(34105,$vararg_buffer3);
          HEAP32[$24>>2] = 0;
          $49 = 0;
         } else {
          $49 = $45;
         }
        }
        $48 = $49 & 255;
        HEAP32[$vararg_buffer6>>2] = $48;
        (_xsprintf($1,16,34132,$vararg_buffer6)|0);
        $50 = (_strlen($1)|0);
        _SB_AppendBuf($2,$1,$50);
        $$0$be$i = $34;
        break L13;
        break;
       }
       case 103:  {
        (_ConsumeComma()|0);
        $51 = HEAP32[11156]|0;
        $52 = ($51|0)==(40);
        if ($52) {
         $53 = (_AddLabelSym((44644),8192)|0);
         $54 = ((($53)) + 36|0);
         $55 = HEAP32[$54>>2]|0;
         $56 = (_LocalLabelName($55)|0);
         $57 = (_strlen($56)|0);
         _SB_AppendBuf($2,$56,$57);
         _NextToken();
         $$0$be$i = $34;
         break L13;
        } else {
         _Error(34139,$vararg_buffer9);
         $$0$be$i = $34;
         break L13;
        }
        break;
       }
       case 108:  {
        (_ConsumeComma()|0);
        _ConstAbsIntExpr(3,$0);
        $58 = HEAP32[$25>>2]|0;
        HEAP32[$vararg_buffer11>>2] = $58;
        (_xsprintf($1,16,34159,$vararg_buffer11)|0);
        $59 = (_strlen($1)|0);
        _SB_AppendBuf($2,$1,$59);
        $$0$be$i = $34;
        break L13;
        break;
       }
       case 111:  {
        $60 = (_AsmGetSym($34,1)|0);
        $61 = ($60|0)==(0|0);
        do {
         if (!($61)) {
          $62 = ((($60)) + 20|0);
          $63 = HEAP32[$62>>2]|0;
          $64 = $63 & 128;
          $65 = ($64|0)==(0);
          if (!($65)) {
           $66 = HEAP32[11507]|0;
           $67 = (_F_IsVariadic($66)|0);
           $68 = ($67|0)==(0);
           if (!($68)) {
            HEAP32[$vararg_buffer14>>2] = $34;
            _Error(34166,$vararg_buffer14);
            _SkipTokens(8660,2);
            break;
           }
          }
          $69 = ((($60)) + 36|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = HEAP32[11252]|0;
          $72 = (($70) - ($71))|0;
          $73 = ($72>>>0)>(255);
          $74 = $73 ? 34414 : 36910;
          HEAP32[$vararg_buffer17>>2] = $72;
          (_xsprintf($1,16,$74,$vararg_buffer17)|0);
          $75 = (_strlen($1)|0);
          _SB_AppendBuf($2,$1,$75);
         }
        } while(0);
        $$0$be$i = $34;
        break L13;
        break;
       }
       case 115:  {
        (_ConsumeComma()|0);
        $76 = HEAP32[11156]|0;
        switch ($76|0) {
        case 40:  {
         $77 = (_strlen((44644))|0);
         _SB_AppendBuf($2,(44644),$77);
         _NextToken();
         break;
        }
        case 86:  {
         $78 = HEAP32[(44640)>>2]|0;
         $79 = (_GetLiteralStrBuf($78)|0);
         $$idx$val$i21$i = HEAP32[$79>>2]|0;
         $$idx1$i$i = ((($79)) + 4|0);
         $$idx1$val$i$i = HEAP32[$$idx1$i$i>>2]|0;
         _SB_AppendBuf($2,$$idx$val$i21$i,$$idx1$val$i$i);
         _NextToken();
         break;
        }
        default: {
         _ConstAbsIntExpr(3,$0);
         $80 = HEAP32[$26>>2]|0;
         HEAP32[$vararg_buffer20>>2] = $80;
         (_xsprintf($1,64,34204,$vararg_buffer20)|0);
         $81 = (_strlen($1)|0);
         _SB_AppendBuf($2,$1,$81);
        }
        }
        $$0$be$i = $34;
        break L13;
        break;
       }
       case 118:  {
        $82 = (_AsmGetSym($34,4)|0);
        $83 = ($82|0)==(0|0);
        if ($83) {
         $$0$be$i = $34;
         break L13;
        }
        $84 = ((($82)) + 20|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = $85 & 1288;
        $87 = ($86|0)==(0);
        if (!($87)) {
         _SB_AppendChar($2,95);
         $88 = ((($82)) + 48|0);
         $89 = (_strlen($88)|0);
         _SB_AppendBuf($2,$88,$89);
         $$0$be$i = $34;
         break L13;
        }
        $90 = $85 & 2;
        $91 = ($90|0)==(0);
        $92 = ((($82)) + 36|0);
        $93 = HEAP32[$92>>2]|0;
        if ($91) {
         HEAP32[$vararg_buffer26>>2] = $93;
         (_xsprintf($1,16,34219,$vararg_buffer26)|0);
         $95 = (_strlen($1)|0);
         _SB_AppendBuf($2,$1,$95);
         $$0$be$i = $34;
         break L13;
        } else {
         HEAP32[$vararg_buffer23>>2] = $93;
         (_xsprintf($0,32,34208,$vararg_buffer23)|0);
         $94 = (_strlen($0)|0);
         _SB_AppendBuf($2,$0,$94);
         $$0$be$i = $34;
         break L13;
        }
        break;
       }
       case 119:  {
        (_ConsumeComma()|0);
        _ConstAbsIntExpr(3,$0);
        $96 = HEAP32[$27>>2]|0;
        $$idx$val$i$i = HEAP32[$96>>2]|0;
        $97 = $$idx$val$i$i & 384;
        $98 = ($97|0)==(128);
        $99 = HEAP32[$28>>2]|0;
        if ($98) {
         $100 = ($99>>>0)>(65535);
         if ($100) {
          HEAP32[$vararg_buffer29>>2] = $34;
          _Error(34105,$vararg_buffer29);
          HEAP32[$28>>2] = 0;
          $103 = 0;
         } else {
          $103 = $99;
         }
        } else {
         $$off$i$i = (($99) + 32768)|0;
         $101 = ($$off$i$i>>>0)>(65535);
         if ($101) {
          HEAP32[$vararg_buffer32>>2] = $34;
          _Error(34105,$vararg_buffer32);
          HEAP32[$28>>2] = 0;
          $103 = 0;
         } else {
          $103 = $99;
         }
        }
        $102 = $103 & 65535;
        HEAP32[$vararg_buffer35>>2] = $102;
        (_xsprintf($1,16,34225,$vararg_buffer35)|0);
        $104 = (_strlen($1)|0);
        _SB_AppendBuf($2,$1,$104);
        $$0$be$i = $34;
        break L13;
        break;
       }
       default: {
        break L11;
       }
       }
       break;
      }
      default: {
       $105 = $33 << 24 >> 24;
       _SB_AppendChar($2,$105);
       $$0$be$i = $$022$i;
      }
      }
     } while(0);
     $106 = HEAP32[$16>>2]|0;
     $107 = HEAP32[$18>>2]|0;
     $108 = ($106>>>0)<($107>>>0);
     if ($108) {
      $$022$i = $$0$be$i;$30 = $106;$36 = $107;
     } else {
      $$idx15$pre$phi$iZZ2D = $22;
      label = 51;
      break L9;
     }
    }
    HEAP32[$vararg_buffer38>>2] = $34;
    _Error(34232,$vararg_buffer38);
    _SkipTokens(8660,2);
   } else {
    $$pre$i = ((($2)) + 4|0);
    $$idx15$pre$phi$iZZ2D = $$pre$i;
    label = 51;
   }
  } while(0);
  if ((label|0) == 51) {
   $$idx15$val$i = HEAP32[$$idx15$pre$phi$iZZ2D>>2]|0;
   $109 = ($$idx15$val$i|0)==(0);
   if (!($109)) {
    _g_asmcode($2);
   }
  }
  _SB_Done($3);
  _SB_Done($2);
 } else {
  _Error(34081,$vararg_buffer);
  _SkipTokens(8660,2);
 }
 (_ConsumeRParen()|0);
 STACKTOP = sp;return;
}
function _AsmGetSym($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 (_ConsumeComma()|0);
 $2 = HEAP32[11156]|0;
 $3 = ($2|0)==(40);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = $0;
  _Error(34269,$vararg_buffer);
  _SkipTokens(8660,2);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (_FindSym((44644))|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  HEAP32[$vararg_buffer1>>2] = (44644);
  $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $0;
  _Error(34305,$vararg_buffer1);
  _SkipTokens(8660,2);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _NextToken();
 $6 = ((($4)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & $1;
 $9 = ($8|0)==($1|0);
 if ($9) {
  $10 = $7 | 8192;
  HEAP32[$6>>2] = $10;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer5>>2] = $0;
  _Error(34343,$vararg_buffer5);
  _SkipTokens(8660,2);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _OptPtrStore1($0) {
 $0 = $0|0;
 var $$0 = 0, $$06270 = 0, $$064$lcssa = 0, $$06469 = 0, $$1 = 0, $$1$in = 0, $$161 = 0, $$163 = 0, $$165 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i68 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i68 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i68|0)==(0);
 if ($2) {
  $$064$lcssa = 0;
  STACKTOP = sp;return ($$064$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 16|0);
 $7 = ((($1)) + 12|0);
 $8 = ((($1)) + 20|0);
 $9 = ((($1)) + 24|0);
 $10 = ((($1)) + 28|0);
 $11 = ((($1)) + 32|0);
 $$06270 = 0;$$06469 = 0;$12 = $$idx$val$i68;
 while(1) {
  $13 = ($12>>>0)>($$06270>>>0);
  if (!($13)) {
   label = 4;
   break;
  }
  $16 = HEAP32[$3>>2]|0;
  $17 = (($16) + ($$06270<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$1>>2] = $18;
  $19 = HEAP8[$18>>0]|0;
  $20 = ($19<<24>>24)==(14);
  L7: do {
   if ($20) {
    $21 = (($$06270) + 1)|0;
    $22 = (_CS_GetEntries($0,$4,$21,8)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $$163 = $$06270;$$165 = $$06469;
    } else {
     $24 = HEAP32[$4>>2]|0;
     $25 = HEAP16[$24>>1]|0;
     $26 = $25&255;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      $28 = ($25&65535) >>> 8;
      $29 = $28&255;
      switch ($29<<24>>24) {
      case 2: case 3: case 6:  {
       break;
      }
      case 10:  {
       $30 = ((($24)) + 40|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ((($31)) + 4|0);
       $33 = HEAP16[$32>>1]|0;
       $34 = ($33<<16>>16)<(0);
       if ($34) {
        $$163 = $$06270;$$165 = $$06469;
        break L7;
       }
       break;
      }
      default: {
       $$163 = $$06270;$$165 = $$06469;
       break L7;
      }
      }
      $35 = HEAP32[$5>>2]|0;
      $36 = HEAP8[$35>>0]|0;
      switch ($36<<24>>24) {
      case 30: case 3:  {
       break;
      }
      default: {
       $$163 = $$06270;$$165 = $$06469;
       break L7;
      }
      }
      $37 = ((($35)) + 20|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($38|0)==(0|0);
      if ($39) {
       $$163 = $$06270;$$165 = $$06469;
      } else {
       $40 = ((($38)) + 12|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = HEAP32[$6>>2]|0;
       $43 = ($41|0)==($42|0);
       if ($43) {
        $44 = HEAP32[$7>>2]|0;
        $45 = HEAP8[$44>>0]|0;
        $46 = ($45<<24>>24)==(28);
        if ($46) {
         $47 = HEAP8[$41>>0]|0;
         $48 = ($47<<24>>24)==(37);
         if ($48) {
          $49 = ((($41)) + 4|0);
          $50 = HEAP32[$49>>2]|0;
          $51 = (_strcmp($50,35341)|0);
          $52 = ($51|0)==(0);
          if ($52) {
           $53 = HEAP32[$8>>2]|0;
           $54 = HEAP8[$53>>0]|0;
           $55 = ($54<<24>>24)==(41);
           if ($55) {
            $56 = HEAP32[$9>>2]|0;
            $57 = HEAP8[$56>>0]|0;
            $58 = ($57<<24>>24)==(40);
            if ($58) {
             $59 = HEAP32[$10>>2]|0;
             $60 = HEAP8[$59>>0]|0;
             $61 = ($60<<24>>24)==(42);
             if ($61) {
              $62 = (_CE_IsKnownImm($59,0)|0);
              $63 = ($62|0)==(0);
              if ($63) {
               $$163 = $$06270;$$165 = $$06469;
              } else {
               $64 = HEAP32[$11>>2]|0;
               $65 = HEAP8[$64>>0]|0;
               $66 = ($65<<24>>24)==(37);
               if ($66) {
                $67 = ((($64)) + 4|0);
                $68 = HEAP32[$67>>2]|0;
                $69 = (_strcmp($68,34393)|0);
                $70 = ($69|0)==(0);
                if ($70) {
                 $71 = (_CS_RangeHasLabel($0,$21,3)|0);
                 $72 = ($71|0)==(0);
                 if ($72) {
                  $73 = (($$06270) + 5)|0;
                  $74 = (_CS_RangeHasLabel($0,$73,4)|0);
                  $75 = ($74|0)==(0);
                  if ($75) {
                   $76 = (($$06270) + 9)|0;
                   $77 = (_LoadAXZP($0,$$06270)|0);
                   $78 = ($77|0)==(0|0);
                   do {
                    if ($78) {
                     $79 = (_LoadAXImm($0,$$06270)|0);
                     $80 = ($79|0)==(0|0);
                     if (!($80)) {
                      $$0 = $76;$$161 = $79;$$2 = 8;
                      break;
                     }
                     $81 = HEAP32[$11>>2]|0;
                     $82 = ((($81)) + 36|0);
                     $83 = HEAP32[$82>>2]|0;
                     $84 = (_NewCodeEntry(62,3,34402,0,$83)|0);
                     $85 = (($$06270) + 10)|0;
                     _CS_InsertEntry($0,$84,$76);
                     $86 = HEAP32[$11>>2]|0;
                     $87 = ((($86)) + 36|0);
                     $88 = HEAP32[$87>>2]|0;
                     $89 = (_NewCodeEntry(63,3,34407,0,$88)|0);
                     $90 = (($$06270) + 11)|0;
                     _CS_InsertEntry($0,$89,$85);
                     $$0 = $90;$$161 = 34402;$$2 = 10;
                    } else {
                     $$0 = $76;$$161 = $77;$$2 = 10;
                    }
                   } while(0);
                   $91 = HEAP32[$4>>2]|0;
                   $92 = ((($91)) + 1|0);
                   $93 = HEAP8[$92>>0]|0;
                   $94 = $93&255;
                   $95 = ($93<<24>>24)==(10);
                   $96 = ((($91)) + 4|0);
                   $97 = HEAP32[$96>>2]|0;
                   $98 = ((($91)) + 36|0);
                   $99 = HEAP32[$98>>2]|0;
                   if ($95) {
                    $100 = (_NewCodeEntry(40,$94,$97,0,$99)|0);
                    $101 = (($$0) + 1)|0;
                    _CS_InsertEntry($0,$100,$$0);
                    $102 = HEAP32[$4>>2]|0;
                    $103 = ((($102)) + 36|0);
                    $104 = HEAP32[$103>>2]|0;
                    $105 = (_NewCodeEntry(67,0,0,0,$104)|0);
                    _CS_InsertEntry($0,$105,$101);
                    $$1$in = $101;
                   } else {
                    $106 = (_NewCodeEntry(42,$94,$97,0,$99)|0);
                    _CS_InsertEntry($0,$106,$$0);
                    $$1$in = $$0;
                   }
                   $$1 = (($$1$in) + 1)|0;
                   $107 = HEAP32[$8>>2]|0;
                   $108 = ((($107)) + 1|0);
                   $109 = HEAP8[$108>>0]|0;
                   $110 = $109&255;
                   $111 = ((($107)) + 4|0);
                   $112 = HEAP32[$111>>2]|0;
                   $113 = ((($107)) + 36|0);
                   $114 = HEAP32[$113>>2]|0;
                   $115 = (_NewCodeEntry(41,$110,$112,0,$114)|0);
                   $116 = (($$1$in) + 2)|0;
                   _CS_InsertEntry($0,$115,$$1);
                   $117 = HEAP32[$9>>2]|0;
                   $118 = ((($117)) + 1|0);
                   $119 = HEAP8[$118>>0]|0;
                   $120 = $119&255;
                   $121 = ((($117)) + 4|0);
                   $122 = HEAP32[$121>>2]|0;
                   $123 = ((($117)) + 36|0);
                   $124 = HEAP32[$123>>2]|0;
                   $125 = (_NewCodeEntry(40,$120,$122,0,$124)|0);
                   $126 = (($$1$in) + 3)|0;
                   _CS_InsertEntry($0,$125,$116);
                   $127 = HEAP32[$11>>2]|0;
                   $128 = ((($127)) + 36|0);
                   $129 = HEAP32[$128>>2]|0;
                   $130 = (_NewCodeEntry(62,$$2,$$161,0,$129)|0);
                   _CS_InsertEntry($0,$130,$126);
                   _CS_DelEntries($0,$$06270,9);
                   $131 = (($$06270) + 3)|0;
                   $132 = (($$06469) + 1)|0;
                   $$163 = $131;$$165 = $132;
                  } else {
                   $$163 = $$06270;$$165 = $$06469;
                  }
                 } else {
                  $$163 = $$06270;$$165 = $$06469;
                 }
                } else {
                 $$163 = $$06270;$$165 = $$06469;
                }
               } else {
                $$163 = $$06270;$$165 = $$06469;
               }
              }
             } else {
              $$163 = $$06270;$$165 = $$06469;
             }
            } else {
             $$163 = $$06270;$$165 = $$06469;
            }
           } else {
            $$163 = $$06270;$$165 = $$06469;
           }
          } else {
           $$163 = $$06270;$$165 = $$06469;
          }
         } else {
          $$163 = $$06270;$$165 = $$06469;
         }
        } else {
         $$163 = $$06270;$$165 = $$06469;
        }
       } else {
        $$163 = $$06270;$$165 = $$06469;
       }
      }
     } else {
      $$163 = $$06270;$$165 = $$06469;
     }
    }
   } else {
    $$163 = $$06270;$$165 = $$06469;
   }
  } while(0);
  $133 = (($$163) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $134 = ($133>>>0)<($$idx$val$i>>>0);
  if ($134) {
   $$06270 = $133;$$06469 = $$165;$12 = $$idx$val$i;
  } else {
   $$064$lcssa = $$165;
   label = 32;
   break;
  }
 }
 if ((label|0) == 4) {
  $14 = HEAP32[3332]|0;
  $15 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$14 & 1]($15,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 32) {
  STACKTOP = sp;return ($$064$lcssa|0);
 }
 return (0)|0;
}
function _LoadAXZP($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$idx$i = 0, $$idx$val$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = ($1>>>0)>(1);
 if ($3) {
  $4 = (($1) + -2)|0;
  $5 = (_CS_GetEntries($0,$2,$4,2)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 0;
  } else {
   $7 = HEAP32[$2>>2]|0;
   $8 = HEAP16[$7>>1]|0;
   $9 = ($8<<16>>16)==(808);
   if ($9) {
    $10 = ((($2)) + 4|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP16[$11>>1]|0;
    $13 = ($12<<16>>16)==(809);
    if ($13) {
     $$idx$i = ((($11)) + 24|0);
     $$idx$val$i = HEAP32[$$idx$i>>2]|0;
     $14 = ($$idx$val$i|0)==(0);
     if ($14) {
      $15 = ((($7)) + 4|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = (_strlen($16)|0);
      $18 = ((($11)) + 4|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (_strlen($19)|0);
      $21 = (($20) + -2)|0;
      $22 = ($17|0)==($21|0);
      if ($22) {
       $23 = (_memcmp($16,$19,$17)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $25 = (($19) + ($17)|0);
        $26 = HEAP8[$25>>0]|0;
        $27 = ($26<<24>>24)==(43);
        if ($27) {
         $28 = (($17) + 1)|0;
         $29 = (($19) + ($28)|0);
         $30 = HEAP8[$29>>0]|0;
         $31 = ($30<<24>>24)==(49);
         $$ = $31 ? $16 : 0;
         $$0 = $$;
        } else {
         $$0 = 0;
        }
       } else {
        $$0 = 0;
       }
      } else {
       $$0 = 0;
      }
     } else {
      $$0 = 0;
     }
    } else {
     $$0 = 0;
    }
   } else {
    $$0 = 0;
   }
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _LoadAXImm($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$051 = 0, $$052 = 0, $$055 = 0, $$153 = 0, $$156 = 0, $$2 = 0, $$3 = 0, $$358 = 0, $$idx$i = 0, $$idx$val$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if (!($4)) {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,40922,40950,129);
  // unreachable;
 }
 $7 = ((($0)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $$051 = $1;$$052 = 0;$$055 = 0;
 } else {
  $12 = ((($10)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP16[$13>>1]|0;
  $15 = ($14<<16>>16)<(0);
  if ($15) {
   $$051 = $1;$$052 = 0;$$055 = 0;
  } else {
   $16 = ((($13)) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = ($17<<16>>16)<(0);
   if ($18) {
    $$051 = $1;$$052 = 0;$$055 = 0;
   } else {
    $19 = $14&65535;
    $20 = $19 & 255;
    $21 = $17&65535;
    $22 = $21 << 8;
    $23 = $22 & 65280;
    $24 = $23 | $20;
    HEAP32[$vararg_buffer>>2] = $24;
    _SB_Printf(46012,34414,$vararg_buffer);
    $25 = HEAP32[11503]|0;
    $$2 = $25;
    STACKTOP = sp;return ($$2|0);
   }
  }
 }
 L9: while(1) {
  $26 = (($$051) + -1)|0;
  $27 = ($$051|0)==(0);
  if ($27) {
   $$3 = $$052;$$358 = $$055;
   label = 18;
   break;
  }
  $28 = ($3>>>0)>($26>>>0);
  if (!($28)) {
   label = 9;
   break;
  }
  $31 = (($8) + ($26<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($$052|0)==(0|0);
  if ($33) {
   $34 = HEAP16[$32>>1]|0;
   $35 = ($34<<16>>16)==(552);
   if ($35) {
    $$153 = $32;$$156 = $$055;
   } else {
    label = 12;
   }
  } else {
   label = 12;
  }
  do {
   if ((label|0) == 12) {
    label = 0;
    $36 = ((($32)) + 16|0);
    $37 = HEAP16[$36>>1]|0;
    $38 = $37 & 1;
    $39 = ($38<<16>>16)==(0);
    if (!($39)) {
     $$2 = 0;
     label = 25;
     break L9;
    }
    $40 = ($$055|0)==(0|0);
    if ($40) {
     $41 = HEAP16[$32>>1]|0;
     $42 = ($41<<16>>16)==(553);
     if ($42) {
      $$153 = $$052;$$156 = $32;
      break;
     }
    }
    $43 = $37 & 2;
    $44 = ($43<<16>>16)==(0);
    if ($44) {
     $$153 = $$052;$$156 = $$055;
    } else {
     $$2 = 0;
     label = 25;
     break L9;
    }
   }
  } while(0);
  $45 = ($$153|0)!=(0|0);
  $46 = ($$156|0)!=(0|0);
  $or$cond = $46 & $45;
  if ($or$cond) {
   $$3 = $$153;$$358 = $$156;
   label = 18;
   break;
  }
  $$idx$i = ((($32)) + 24|0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $47 = ($$idx$val$i|0)==(0);
  if ($47) {
   $$051 = $26;$$052 = $$153;$$055 = $$156;
  } else {
   $$2 = 0;
   label = 25;
   break;
  }
 }
 if ((label|0) == 9) {
  $29 = HEAP32[3332]|0;
  $30 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$29 & 1]($30,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 18) {
  $48 = ((($$3)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (_strlen($49)|0);
  $51 = ($50>>>0)>(3);
  if (!($51)) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $52 = HEAP8[$49>>0]|0;
  $53 = ($52<<24>>24)==(60);
  if (!($53)) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $54 = ((($49)) + 1|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = ($55<<24>>24)==(40);
  if (!($56)) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $57 = ((($$358)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (_strlen($58)|0);
  $60 = ($59|0)==($50|0);
  if (!($60)) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $61 = HEAP8[$58>>0]|0;
  $62 = ($61<<24>>24)==(62);
  if (!($62)) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $63 = ((($58)) + 1|0);
  $64 = (($50) + -1)|0;
  $65 = (_memcmp($54,$63,$64)|0);
  $66 = ($65|0)==(0);
  if (!($66)) {
   $$2 = 0;
   STACKTOP = sp;return ($$2|0);
  }
  $67 = (($50) + -3)|0;
  $68 = ((($49)) + 2|0);
  _SB_CopyBuf(46012,$68,$67);
  _SB_Terminate(46012);
  $69 = HEAP32[11503]|0;
  $$2 = $69;
  STACKTOP = sp;return ($$2|0);
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return ($$2|0);
 }
 return (0)|0;
}
function _OptPtrStore2($0) {
 $0 = $0|0;
 var $$0 = 0, $$0113121 = 0, $$0115$lcssa = 0, $$0115120 = 0, $$1112 = 0, $$1114 = 0, $$1116 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i119 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i119 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i119|0)==(0);
 if ($2) {
  $$0115$lcssa = 0;
  STACKTOP = sp;return ($$0115$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 16|0);
 $7 = ((($1)) + 12|0);
 $8 = ((($1)) + 20|0);
 $9 = ((($1)) + 24|0);
 $10 = ((($1)) + 28|0);
 $11 = ((($1)) + 32|0);
 $12 = ((($1)) + 36|0);
 $$0113121 = 0;$$0115120 = 0;$13 = $$idx$val$i119;
 while(1) {
  $14 = ($13>>>0)>($$0113121>>>0);
  if (!($14)) {
   label = 4;
   break;
  }
  $17 = HEAP32[$3>>2]|0;
  $18 = (($17) + ($$0113121<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  HEAP32[$1>>2] = $19;
  $20 = HEAP8[$19>>0]|0;
  $21 = ($20<<24>>24)==(14);
  L7: do {
   if ($21) {
    $22 = (($$0113121) + 1)|0;
    $23 = (_CS_GetEntries($0,$4,$22,9)|0);
    $24 = ($23|0)==(0);
    if ($24) {
     $$1114 = $$0113121;$$1116 = $$0115120;
    } else {
     $25 = HEAP32[$4>>2]|0;
     $26 = HEAP16[$25>>1]|0;
     $27 = $26&255;
     $28 = ($27<<24>>24)==(0);
     if ($28) {
      $29 = ($26&65535) >>> 8;
      $30 = $29&255;
      switch ($30<<24>>24) {
      case 2: case 3: case 6:  {
       break;
      }
      case 10:  {
       $31 = ((($25)) + 40|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = ((($32)) + 4|0);
       $34 = HEAP16[$33>>1]|0;
       $35 = ($34<<16>>16)<(0);
       if ($35) {
        $$1114 = $$0113121;$$1116 = $$0115120;
        break L7;
       }
       break;
      }
      default: {
       $$1114 = $$0113121;$$1116 = $$0115120;
       break L7;
      }
      }
      $36 = HEAP32[$5>>2]|0;
      $37 = HEAP8[$36>>0]|0;
      switch ($37<<24>>24) {
      case 30: case 3:  {
       break;
      }
      default: {
       $$1114 = $$0113121;$$1116 = $$0115120;
       break L7;
      }
      }
      $38 = ((($36)) + 20|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39|0)==(0|0);
      if ($40) {
       $$1114 = $$0113121;$$1116 = $$0115120;
      } else {
       $41 = ((($39)) + 12|0);
       $42 = HEAP32[$41>>2]|0;
       $43 = HEAP32[$6>>2]|0;
       $44 = ($42|0)==($43|0);
       if ($44) {
        $45 = HEAP32[$7>>2]|0;
        $46 = HEAP8[$45>>0]|0;
        $47 = ($46<<24>>24)==(28);
        if ($47) {
         $48 = HEAP8[$42>>0]|0;
         $49 = ($48<<24>>24)==(37);
         if ($49) {
          $50 = ((($42)) + 4|0);
          $51 = HEAP32[$50>>2]|0;
          $52 = (_strcmp($51,35341)|0);
          $53 = ($52|0)==(0);
          if ($53) {
           $54 = HEAP32[$8>>2]|0;
           $55 = HEAP8[$54>>0]|0;
           $56 = ($55<<24>>24)==(42);
           if ($56) {
            $57 = (_CE_IsConstImm($54)|0);
            $58 = ($57|0)==(0);
            if ($58) {
             $$1114 = $$0113121;$$1116 = $$0115120;
            } else {
             $59 = HEAP32[$9>>2]|0;
             $60 = HEAP8[$59>>0]|0;
             $61 = ($60<<24>>24)==(41);
             if ($61) {
              $62 = HEAP32[$10>>2]|0;
              $63 = HEAP16[$62>>1]|0;
              $64 = ($63<<16>>16)==(2600);
              if ($64) {
               $65 = ((($62)) + 4|0);
               $66 = HEAP32[$65>>2]|0;
               $67 = (_strcmp($66,36898)|0);
               $68 = ($67|0)==(0);
               if ($68) {
                $69 = HEAP32[$11>>2]|0;
                $70 = HEAP16[$69>>1]|0;
                $71 = $70&255;
                $72 = ($71<<24>>24)==(42);
                if ($72) {
                 $73 = ($70&65535) >>> 8;
                 $74 = $73&255;
                 switch ($74<<24>>24) {
                 case 2: case 3: case 6:  {
                  break;
                 }
                 default: {
                  $$1114 = $$0113121;$$1116 = $$0115120;
                  break L7;
                 }
                 }
                 $75 = HEAP32[$12>>2]|0;
                 $76 = HEAP8[$75>>0]|0;
                 $77 = ($76<<24>>24)==(37);
                 if ($77) {
                  $78 = ((($75)) + 4|0);
                  $79 = HEAP32[$78>>2]|0;
                  $80 = (_strcmp($79,34393)|0);
                  $81 = ($80|0)==(0);
                  if ($81) {
                   $82 = (_CS_RangeHasLabel($0,$22,3)|0);
                   $83 = ($82|0)==(0);
                   if (!($83)) {
                    $$1114 = $$0113121;$$1116 = $$0115120;
                    break;
                   }
                   $84 = (($$0113121) + 5)|0;
                   $85 = (_CS_RangeHasLabel($0,$84,5)|0);
                   $86 = ($85|0)==(0);
                   if (!($86)) {
                    $$1114 = $$0113121;$$1116 = $$0115120;
                    break;
                   }
                   $87 = (($$0113121) + 10)|0;
                   $88 = (_LoadAXZP($0,$$0113121)|0);
                   $89 = ($88|0)==(0|0);
                   do {
                    if ($89) {
                     $90 = (_LoadAXImm($0,$$0113121)|0);
                     $91 = ($90|0)==(0|0);
                     if (!($91)) {
                      $$0 = $87;$$1112 = $90;$$2 = 8;
                      break;
                     }
                     $92 = HEAP32[$11>>2]|0;
                     $93 = ((($92)) + 36|0);
                     $94 = HEAP32[$93>>2]|0;
                     $95 = (_NewCodeEntry(62,3,34402,0,$94)|0);
                     $96 = (($$0113121) + 11)|0;
                     _CS_InsertEntry($0,$95,$87);
                     $97 = HEAP32[$11>>2]|0;
                     $98 = ((($97)) + 36|0);
                     $99 = HEAP32[$98>>2]|0;
                     $100 = (_NewCodeEntry(63,3,34407,0,$99)|0);
                     $101 = (($$0113121) + 12)|0;
                     _CS_InsertEntry($0,$100,$96);
                     $$0 = $101;$$1112 = 34402;$$2 = 10;
                    } else {
                     $$0 = $87;$$1112 = $88;$$2 = 10;
                    }
                   } while(0);
                   $102 = HEAP32[$4>>2]|0;
                   $103 = ((($102)) + 1|0);
                   $104 = HEAP8[$103>>0]|0;
                   $105 = $104&255;
                   $106 = ($104<<24>>24)==(10);
                   do {
                    if ($106) {
                     $151 = ($$2|0)==(8);
                     if ($151) {
                      $152 = ((($102)) + 4|0);
                      $153 = HEAP32[$152>>2]|0;
                      $154 = ((($102)) + 36|0);
                      $155 = HEAP32[$154>>2]|0;
                      $156 = (_NewCodeEntry(40,$105,$153,0,$155)|0);
                      $157 = (($$0) + 1)|0;
                      _CS_InsertEntry($0,$156,$$0);
                      $158 = HEAP32[$4>>2]|0;
                      $159 = ((($158)) + 36|0);
                      $160 = HEAP32[$159>>2]|0;
                      $161 = (_NewCodeEntry(66,0,0,0,$160)|0);
                      $162 = (($$0) + 2)|0;
                      _CS_InsertEntry($0,$161,$157);
                      $163 = HEAP32[$8>>2]|0;
                      $164 = ((($163)) + 8|0);
                      $165 = HEAP32[$164>>2]|0;
                      $166 = (($165) + -2)|0;
                      $167 = (_MakeHexArg($166)|0);
                      $168 = HEAP32[$8>>2]|0;
                      $169 = ((($168)) + 36|0);
                      $170 = HEAP32[$169>>2]|0;
                      $171 = (_NewCodeEntry(42,2,$167,0,$170)|0);
                      $172 = (($$0) + 3)|0;
                      _CS_InsertEntry($0,$171,$162);
                      $173 = HEAP32[$10>>2]|0;
                      $174 = ((($173)) + 1|0);
                      $175 = HEAP8[$174>>0]|0;
                      $176 = $175&255;
                      $177 = ((($173)) + 4|0);
                      $178 = HEAP32[$177>>2]|0;
                      $179 = ((($173)) + 36|0);
                      $180 = HEAP32[$179>>2]|0;
                      $181 = (_NewCodeEntry(40,$176,$178,0,$180)|0);
                      $182 = (($$0) + 4)|0;
                      _CS_InsertEntry($0,$181,$172);
                      $183 = HEAP32[$12>>2]|0;
                      $184 = ((($183)) + 36|0);
                      $185 = HEAP32[$184>>2]|0;
                      $186 = (_NewCodeEntry(62,7,$$1112,0,$185)|0);
                      $187 = (($$0) + 5)|0;
                      _CS_InsertEntry($0,$186,$182);
                      $188 = HEAP32[$9>>2]|0;
                      $189 = ((($188)) + 1|0);
                      $190 = HEAP8[$189>>0]|0;
                      $191 = $190&255;
                      $192 = ((($188)) + 4|0);
                      $193 = HEAP32[$192>>2]|0;
                      $194 = ((($188)) + 36|0);
                      $195 = HEAP32[$194>>2]|0;
                      $196 = (_NewCodeEntry(41,$191,$193,0,$195)|0);
                      _CS_InsertEntry($0,$196,$187);
                      break;
                     } else {
                      $197 = HEAP32[$8>>2]|0;
                      $198 = ((($197)) + 8|0);
                      $199 = HEAP32[$198>>2]|0;
                      $200 = (($199) + -2)|0;
                      $201 = (_MakeHexArg($200)|0);
                      $202 = HEAP32[$8>>2]|0;
                      $203 = ((($202)) + 36|0);
                      $204 = HEAP32[$203>>2]|0;
                      $205 = (_NewCodeEntry(42,2,$201,0,$204)|0);
                      $206 = (($$0) + 1)|0;
                      _CS_InsertEntry($0,$205,$$0);
                      $207 = HEAP32[$9>>2]|0;
                      $208 = ((($207)) + 1|0);
                      $209 = HEAP8[$208>>0]|0;
                      $210 = $209&255;
                      $211 = ((($207)) + 4|0);
                      $212 = HEAP32[$211>>2]|0;
                      $213 = ((($207)) + 36|0);
                      $214 = HEAP32[$213>>2]|0;
                      $215 = (_NewCodeEntry(41,$210,$212,0,$214)|0);
                      $216 = (($$0) + 2)|0;
                      _CS_InsertEntry($0,$215,$206);
                      $217 = HEAP32[$10>>2]|0;
                      $218 = ((($217)) + 1|0);
                      $219 = HEAP8[$218>>0]|0;
                      $220 = $219&255;
                      $221 = ((($217)) + 4|0);
                      $222 = HEAP32[$221>>2]|0;
                      $223 = ((($217)) + 36|0);
                      $224 = HEAP32[$223>>2]|0;
                      $225 = (_NewCodeEntry(40,$220,$222,0,$224)|0);
                      $226 = (($$0) + 3)|0;
                      _CS_InsertEntry($0,$225,$216);
                      $227 = HEAP32[$9>>2]|0;
                      $228 = ((($227)) + 36|0);
                      $229 = HEAP32[$228>>2]|0;
                      $230 = (_NewCodeEntry(46,0,0,0,$229)|0);
                      $231 = (($$0) + 4)|0;
                      _CS_InsertEntry($0,$230,$226);
                      $232 = HEAP32[$4>>2]|0;
                      $233 = ((($232)) + 40|0);
                      $234 = HEAP32[$233>>2]|0;
                      $235 = ((($234)) + 4|0);
                      $236 = HEAP16[$235>>1]|0;
                      $237 = $236 << 16 >> 16;
                      $238 = (_MakeHexArg($237)|0);
                      $239 = HEAP32[$4>>2]|0;
                      $240 = ((($239)) + 36|0);
                      $241 = HEAP32[$240>>2]|0;
                      $242 = (_NewCodeEntry(42,2,$238,0,$241)|0);
                      $243 = (($$0) + 5)|0;
                      _CS_InsertEntry($0,$242,$231);
                      $244 = HEAP32[$4>>2]|0;
                      $245 = ((($244)) + 1|0);
                      $246 = HEAP8[$245>>0]|0;
                      $247 = $246&255;
                      $248 = ((($244)) + 4|0);
                      $249 = HEAP32[$248>>2]|0;
                      $250 = ((($244)) + 36|0);
                      $251 = HEAP32[$250>>2]|0;
                      $252 = (_NewCodeEntry(40,$247,$249,0,$251)|0);
                      $253 = (($$0) + 6)|0;
                      _CS_InsertEntry($0,$252,$243);
                      $254 = HEAP32[$4>>2]|0;
                      $255 = ((($254)) + 36|0);
                      $256 = HEAP32[$255>>2]|0;
                      $257 = (_NewCodeEntry(67,0,0,0,$256)|0);
                      $258 = (($$0) + 7)|0;
                      _CS_InsertEntry($0,$257,$253);
                      $259 = HEAP32[$9>>2]|0;
                      $260 = ((($259)) + 36|0);
                      $261 = HEAP32[$260>>2]|0;
                      $262 = (_NewCodeEntry(50,0,0,0,$261)|0);
                      $263 = (($$0) + 8)|0;
                      _CS_InsertEntry($0,$262,$258);
                      $264 = HEAP32[$12>>2]|0;
                      $265 = ((($264)) + 36|0);
                      $266 = HEAP32[$265>>2]|0;
                      $267 = (_NewCodeEntry(62,$$2,$$1112,0,$266)|0);
                      _CS_InsertEntry($0,$267,$263);
                      break;
                     }
                    } else {
                     $107 = HEAP32[$8>>2]|0;
                     $108 = ((($107)) + 8|0);
                     $109 = HEAP32[$108>>2]|0;
                     $110 = (($109) + -2)|0;
                     $111 = (_MakeHexArg($110)|0);
                     $112 = HEAP32[$8>>2]|0;
                     $113 = ((($112)) + 36|0);
                     $114 = HEAP32[$113>>2]|0;
                     $115 = (_NewCodeEntry(42,2,$111,0,$114)|0);
                     $116 = (($$0) + 1)|0;
                     _CS_InsertEntry($0,$115,$$0);
                     $117 = HEAP32[$9>>2]|0;
                     $118 = ((($117)) + 1|0);
                     $119 = HEAP8[$118>>0]|0;
                     $120 = $119&255;
                     $121 = ((($117)) + 4|0);
                     $122 = HEAP32[$121>>2]|0;
                     $123 = ((($117)) + 36|0);
                     $124 = HEAP32[$123>>2]|0;
                     $125 = (_NewCodeEntry(41,$120,$122,0,$124)|0);
                     $126 = (($$0) + 2)|0;
                     _CS_InsertEntry($0,$125,$116);
                     $127 = HEAP32[$10>>2]|0;
                     $128 = ((($127)) + 1|0);
                     $129 = HEAP8[$128>>0]|0;
                     $130 = $129&255;
                     $131 = ((($127)) + 4|0);
                     $132 = HEAP32[$131>>2]|0;
                     $133 = ((($127)) + 36|0);
                     $134 = HEAP32[$133>>2]|0;
                     $135 = (_NewCodeEntry(40,$130,$132,0,$134)|0);
                     $136 = (($$0) + 3)|0;
                     _CS_InsertEntry($0,$135,$126);
                     $137 = HEAP32[$4>>2]|0;
                     $138 = ((($137)) + 1|0);
                     $139 = HEAP8[$138>>0]|0;
                     $140 = $139&255;
                     $141 = ((($137)) + 4|0);
                     $142 = HEAP32[$141>>2]|0;
                     $143 = ((($137)) + 36|0);
                     $144 = HEAP32[$143>>2]|0;
                     $145 = (_NewCodeEntry(42,$140,$142,0,$144)|0);
                     $146 = (($$0) + 4)|0;
                     _CS_InsertEntry($0,$145,$136);
                     $147 = HEAP32[$12>>2]|0;
                     $148 = ((($147)) + 36|0);
                     $149 = HEAP32[$148>>2]|0;
                     $150 = (_NewCodeEntry(62,$$2,$$1112,0,$149)|0);
                     _CS_InsertEntry($0,$150,$146);
                    }
                   } while(0);
                   _CS_DelEntries($0,$$0113121,10);
                   $268 = (($$0113121) + 4)|0;
                   $269 = (($$0115120) + 1)|0;
                   $$1114 = $268;$$1116 = $269;
                  } else {
                   $$1114 = $$0113121;$$1116 = $$0115120;
                  }
                 } else {
                  $$1114 = $$0113121;$$1116 = $$0115120;
                 }
                } else {
                 $$1114 = $$0113121;$$1116 = $$0115120;
                }
               } else {
                $$1114 = $$0113121;$$1116 = $$0115120;
               }
              } else {
               $$1114 = $$0113121;$$1116 = $$0115120;
              }
             } else {
              $$1114 = $$0113121;$$1116 = $$0115120;
             }
            }
           } else {
            $$1114 = $$0113121;$$1116 = $$0115120;
           }
          } else {
           $$1114 = $$0113121;$$1116 = $$0115120;
          }
         } else {
          $$1114 = $$0113121;$$1116 = $$0115120;
         }
        } else {
         $$1114 = $$0113121;$$1116 = $$0115120;
        }
       } else {
        $$1114 = $$0113121;$$1116 = $$0115120;
       }
      }
     } else {
      $$1114 = $$0113121;$$1116 = $$0115120;
     }
    }
   } else {
    $$1114 = $$0113121;$$1116 = $$0115120;
   }
  } while(0);
  $270 = (($$1114) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $271 = ($270>>>0)<($$idx$val$i>>>0);
  if ($271) {
   $$0113121 = $270;$$0115120 = $$1116;$13 = $$idx$val$i;
  } else {
   $$0115$lcssa = $$1116;
   label = 37;
   break;
  }
 }
 if ((label|0) == 4) {
  $15 = HEAP32[3332]|0;
  $16 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$15 & 1]($16,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 37) {
  STACKTOP = sp;return ($$0115$lcssa|0);
 }
 return (0)|0;
}
function _OptPtrStore3($0) {
 $0 = $0|0;
 var $$ = 0, $$0$i$ph = 0, $$0$lcssa = 0, $$0108 = 0, $$080106 = 0, $$1 = 0, $$113 = 0, $$2 = 0, $$285 = 0, $$idx$i = 0, $$idx$i$i = 0, $$idx$i21$i = 0, $$idx$i23$i = 0, $$idx$i86 = 0, $$idx$i89 = 0, $$idx$i93 = 0, $$idx$i95 = 0, $$idx$i98 = 0, $$idx$val$i = 0, $$idx$val$i$i = 0;
 var $$idx$val$i105 = 0, $$idx$val$i22$i = 0, $$idx$val$i24$i = 0, $$idx$val$i87 = 0, $$idx$val$i90 = 0, $$idx$val$i94 = 0, $$idx$val$i96 = 0, $$idx$val$i99 = 0, $$pre$i = 0, $$pre25$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i105 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i105|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $$0108 = 0;$$080106 = 0;$8 = $$idx$val$i105;
 L4: while(1) {
  $9 = ($8>>>0)>($$080106>>>0);
  if (!($9)) {
   label = 4;
   break;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($$080106<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$1>>2] = $14;
  $15 = HEAP8[$14>>0]|0;
  $16 = ($15<<24>>24)==(37);
  do {
   if ($16) {
    $17 = ((($14)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (_strcmp($18,35341)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = (($$080106) + 1)|0;
     $22 = (_CS_GetEntries($0,$4,$21,3)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$1 = $$0108;
     } else {
      $24 = HEAP32[$4>>2]|0;
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(42);
      if ($26) {
       $27 = (_CE_IsConstImm($24)|0);
       $28 = ($27|0)==(0);
       if ($28) {
        $$1 = $$0108;
       } else {
        $29 = HEAP32[$4>>2]|0;
        $$idx$i89 = ((($29)) + 24|0);
        $$idx$val$i90 = HEAP32[$$idx$i89>>2]|0;
        $30 = ($$idx$val$i90|0)==(0);
        if ($30) {
         $31 = HEAP32[$5>>2]|0;
         $32 = HEAP8[$31>>0]|0;
         $33 = ($32<<24>>24)==(37);
         if ($33) {
          $34 = ((($31)) + 4|0);
          $35 = HEAP32[$34>>2]|0;
          $36 = (_strcmp($35,34420)|0);
          $37 = ($36|0)==(0);
          if ($37) {
           $$idx$i93 = ((($31)) + 24|0);
           $$idx$val$i94 = HEAP32[$$idx$i93>>2]|0;
           $38 = ($$idx$val$i94|0)==(0);
           if ($38) {
            $39 = (($$080106) + 3)|0;
            $40 = HEAP32[$6>>2]|0;
            $$idx$i$i = ((($40)) + 24|0);
            $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
            $41 = ($$idx$val$i$i|0)==(0);
            if ($41) {
             $42 = HEAP8[$40>>0]|0;
             L18: do {
              switch ($42<<24>>24) {
              case 45: case 25: case 1:  {
               $$0$i$ph = 1;
               break;
              }
              case 37:  {
               $43 = ((($40)) + 4|0);
               $44 = HEAP32[$43>>2]|0;
               $45 = (_strncmp($44,34428,5)|0);
               $46 = ($45|0)==(0);
               if (!($46)) {
                $47 = (_strncmp($44,34434,5)|0);
                $48 = ($47|0)==(0);
                if (!($48)) {
                 label = 25;
                 break L18;
                }
               }
               $49 = (_strlen($44)|0);
               $50 = ($49|0)==(6);
               if ($50) {
                $51 = ((($44)) + 5|0);
                $52 = HEAP8[$51>>0]|0;
                $53 = (_IsDigit($52)|0);
                $54 = ($53|0)==(0);
                if ($54) {
                 $$pre$i = HEAP32[$6>>2]|0;
                 $$pre25$i = HEAP8[$$pre$i>>0]|0;
                 $55 = $$pre25$i;
                 label = 21;
                } else {
                 $$0$i$ph = 1;
                }
               } else {
                label = 25;
               }
               break;
              }
              default: {
               $55 = $42;
               label = 21;
              }
              }
             } while(0);
             if ((label|0) == 21) {
              label = 0;
              $56 = ($55<<24>>24)==(14);
              if ($56) {
               $57 = (_CS_GetNextEntry($0,$39)|0);
               HEAP32[$7>>2] = $57;
               $58 = ($57|0)==(0|0);
               if ($58) {
                label = 25;
               } else {
                $59 = HEAP8[$57>>0]|0;
                $60 = ($59<<24>>24)==(0);
                if ($60) {
                 $$idx$i23$i = ((($57)) + 24|0);
                 $$idx$val$i24$i = HEAP32[$$idx$i23$i>>2]|0;
                 $61 = ($$idx$val$i24$i|0)==(0);
                 if ($61) {
                  $$0$i$ph = 2;
                 } else {
                  label = 25;
                 }
                } else {
                 label = 25;
                }
               }
              } else {
               label = 25;
              }
             }
             if ((label|0) == 25) {
              label = 0;
              $62 = HEAP32[$6>>2]|0;
              $63 = HEAP8[$62>>0]|0;
              $64 = ($63<<24>>24)==(59);
              if (!($64)) {
               $$1 = $$0108;
               break;
              }
              $65 = (_CS_GetNextEntry($0,$39)|0);
              HEAP32[$7>>2] = $65;
              $66 = ($65|0)==(0|0);
              if ($66) {
               $$1 = $$0108;
               break;
              }
              $67 = HEAP8[$65>>0]|0;
              $68 = ($67<<24>>24)==(58);
              if (!($68)) {
               $$1 = $$0108;
               break;
              }
              $$idx$i21$i = ((($65)) + 24|0);
              $$idx$val$i22$i = HEAP32[$$idx$i21$i>>2]|0;
              $69 = ($$idx$val$i22$i|0)==(0);
              if ($69) {
               $$0$i$ph = 2;
              } else {
               $$1 = $$0108;
               break;
              }
             }
             $70 = (($6) + ($$0$i$ph<<2)|0);
             $71 = (($$0$i$ph) + ($39))|0;
             $72 = (_CS_GetEntries($0,$70,$71,2)|0);
             $73 = ($72|0)==(0);
             if ($73) {
              $$1 = $$0108;
             } else {
              $74 = (($$0$i$ph) + 3)|0;
              $75 = (($1) + ($74<<2)|0);
              $76 = HEAP32[$75>>2]|0;
              $77 = HEAP8[$76>>0]|0;
              $78 = ($77<<24>>24)==(42);
              if ($78) {
               $79 = (_CE_IsConstImm($76)|0);
               $80 = ($79|0)==(0);
               if ($80) {
                $$1 = $$0108;
               } else {
                $81 = HEAP32[$75>>2]|0;
                $$idx$i98 = ((($81)) + 24|0);
                $$idx$val$i99 = HEAP32[$$idx$i98>>2]|0;
                $82 = ($$idx$val$i99|0)==(0);
                if ($82) {
                 $83 = $$0$i$ph | 4;
                 $84 = (($1) + ($83<<2)|0);
                 $85 = HEAP32[$84>>2]|0;
                 $86 = HEAP8[$85>>0]|0;
                 $87 = ($86<<24>>24)==(37);
                 if ($87) {
                  $88 = ((($85)) + 4|0);
                  $89 = HEAP32[$88>>2]|0;
                  $90 = (_strcmp($89,34393)|0);
                  $91 = ($90|0)==(0);
                  if ($91) {
                   $$idx$i95 = ((($85)) + 24|0);
                   $$idx$val$i96 = HEAP32[$$idx$i95>>2]|0;
                   $92 = ($$idx$val$i96|0)==(0);
                   if (!($92)) {
                    $$1 = $$0108;
                    break;
                   }
                   $93 = ($$080106>>>0)>(1);
                   do {
                    if ($93) {
                     $94 = (($$080106) + -2)|0;
                     $95 = HEAP32[$$idx$i>>2]|0;
                     $96 = ($95>>>0)>($94>>>0);
                     if (!($96)) {
                      label = 38;
                      break L4;
                     }
                     $99 = HEAP32[$3>>2]|0;
                     $100 = (($99) + ($94<<2)|0);
                     $101 = HEAP32[$100>>2]|0;
                     $102 = (($$080106) + -1)|0;
                     $103 = ($95>>>0)>($102>>>0);
                     if (!($103)) {
                      label = 40;
                      break L4;
                     }
                     $106 = (($99) + ($102<<2)|0);
                     $107 = HEAP32[$106>>2]|0;
                     $108 = HEAP16[$101>>1]|0;
                     $109 = ($108<<16>>16)==(808);
                     if (!($109)) {
                      $$2 = 0;$$285 = 34402;
                      break;
                     }
                     $110 = HEAP16[$107>>1]|0;
                     $111 = ($110<<16>>16)==(809);
                     if (!($111)) {
                      $$2 = 0;$$285 = 34402;
                      break;
                     }
                     $$idx$i86 = ((($107)) + 24|0);
                     $$idx$val$i87 = HEAP32[$$idx$i86>>2]|0;
                     $112 = ($$idx$val$i87|0)==(0);
                     if (!($112)) {
                      $$2 = 0;$$285 = 34402;
                      break;
                     }
                     $113 = ((($101)) + 4|0);
                     $114 = HEAP32[$113>>2]|0;
                     $115 = (_strncmp($114,34440,8)|0);
                     $116 = ($115|0)==(0);
                     if (!($116)) {
                      $$2 = 0;$$285 = 34402;
                      break;
                     }
                     $117 = (_strlen($114)|0);
                     $118 = ((($107)) + 4|0);
                     $119 = HEAP32[$118>>2]|0;
                     $120 = (_strncmp($114,$119,$117)|0);
                     $121 = ($120|0)==(0);
                     if (!($121)) {
                      $$2 = 0;$$285 = 34402;
                      break;
                     }
                     $122 = (($119) + ($117)|0);
                     $123 = HEAP8[$122>>0]|0;
                     $124 = ($123<<24>>24)==(43);
                     if (!($124)) {
                      $$2 = 0;$$285 = 34402;
                      break;
                     }
                     $125 = (($117) + 1)|0;
                     $126 = (($119) + ($125)|0);
                     $127 = HEAP8[$126>>0]|0;
                     $128 = ($127<<24>>24)==(49);
                     if (!($128)) {
                      $$2 = 0;$$285 = 34402;
                      break;
                     }
                     $129 = (($117) + 2)|0;
                     $130 = (($119) + ($129)|0);
                     $131 = HEAP8[$130>>0]|0;
                     $132 = ($131<<24>>24)==(0);
                     $$ = $132 ? $114 : 34402;
                     $$113 = $132 ? $114 : 0;
                     $$2 = $$113;$$285 = $$;
                    } else {
                     $$2 = 0;$$285 = 34402;
                    }
                   } while(0);
                   $133 = HEAP32[$6>>2]|0;
                   $134 = ((($133)) + 36|0);
                   $135 = HEAP32[$134>>2]|0;
                   $136 = (_NewCodeEntry(41,2,34449,0,$135)|0);
                   _CS_InsertEntry($0,$136,$39);
                   $137 = HEAP32[$5>>2]|0;
                   $138 = ((($137)) + 36|0);
                   $139 = HEAP32[$138>>2]|0;
                   $140 = (_NewCodeEntry(40,10,$$285,0,$139)|0);
                   $141 = (($$080106) + 4)|0;
                   _CS_InsertEntry($0,$140,$141);
                   $142 = HEAP32[$6>>2]|0;
                   $143 = ((($142)) + 36|0);
                   $144 = HEAP32[$143>>2]|0;
                   $145 = (_NewCodeEntry(62,10,$$285,0,$144)|0);
                   $146 = (($$080106) + 6)|0;
                   $147 = (($146) + ($$0$i$ph))|0;
                   _CS_InsertEntry($0,$145,$147);
                   $148 = (($$080106) + 7)|0;
                   $149 = (($148) + ($$0$i$ph))|0;
                   _CS_DelEntry($0,$149);
                   $150 = (($$080106) + 2)|0;
                   _CS_DelEntry($0,$150);
                   $151 = ($$2|0)==(0|0);
                   if ($151) {
                    $152 = HEAP32[$1>>2]|0;
                    $153 = ((($152)) + 36|0);
                    $154 = HEAP32[$153>>2]|0;
                    $155 = (_NewCodeEntry(62,3,34402,0,$154)|0);
                    _CS_InsertEntry($0,$155,$21);
                    $156 = HEAP32[$1>>2]|0;
                    $157 = ((($156)) + 36|0);
                    $158 = HEAP32[$157>>2]|0;
                    $159 = (_NewCodeEntry(63,3,34407,0,$158)|0);
                    _CS_InsertEntry($0,$159,$150);
                   }
                   _CS_DelEntry($0,$$080106);
                   $160 = (($$0108) + 1)|0;
                   $$1 = $160;
                  } else {
                   $$1 = $$0108;
                  }
                 } else {
                  $$1 = $$0108;
                 }
                } else {
                 $$1 = $$0108;
                }
               }
              } else {
               $$1 = $$0108;
              }
             }
            } else {
             $$1 = $$0108;
            }
           } else {
            $$1 = $$0108;
           }
          } else {
           $$1 = $$0108;
          }
         } else {
          $$1 = $$0108;
         }
        } else {
         $$1 = $$0108;
        }
       }
      } else {
       $$1 = $$0108;
      }
     }
    } else {
     $$1 = $$0108;
    }
   } else {
    $$1 = $$0108;
   }
  } while(0);
  $161 = (($$080106) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $162 = ($161>>>0)<($$idx$val$i>>>0);
  if ($162) {
   $$0108 = $$1;$$080106 = $161;$8 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 53;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 38) {
  $97 = HEAP32[3332]|0;
  $98 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$97 & 1]($98,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 40) {
  $104 = HEAP32[3332]|0;
  $105 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$104 & 1]($105,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _FindStandard($0) {
 $0 = $0|0;
 var $$ = 0, $$05 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strcmp(34453,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$05 = 0;
  return ($$05|0);
 }
 $3 = (_strcmp(34457,$0)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$05 = 1;
  return ($$05|0);
 } else {
  $5 = (_strcmp(34461,$0)|0);
  $6 = ($5|0)==(0);
  $$ = $6 ? 2 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function _F_GetFuncName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 48|0);
 return ($2|0);
}
function _F_GetParamSize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 return ($4|0);
}
function _F_GetReturnType($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _F_HasVoidReturn($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 >>> 2;
 $$lobit = $3 & 1;
 return ($$lobit|0);
}
function _F_ReturnFound($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 return;
}
function _F_IsVariadic($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 2;
 $$lobit = $4 & 1;
 return ($$lobit|0);
}
function _F_HasOldStyleIntRet($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >>> 5;
 $$lobit = $4 & 1;
 return ($$lobit|0);
}
function _F_GetRetLab($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _F_GetTopLevelSP($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _F_ReserveLocalSpace($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 HEAP32[$2>>2] = $4;
 $5 = HEAP32[11252]|0;
 $6 = (($5) - ($4))|0;
 return ($6|0);
}
function _F_GetStackPtr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11252]|0;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($3))|0;
 return ($4|0);
}
function _F_AllocLocalSpace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(0);
 if (!($3)) {
  return;
 }
 _g_space($2);
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[11252]|0;
 $6 = (($5) - ($4))|0;
 HEAP32[11252] = $6;
 HEAP32[$1>>2] = 0;
 return;
}
function _F_AllocRegVar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_IS_Get(8372)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$1 = -1;
  return ($$1|0);
 }
 $4 = (_GetLexicalLevel()|0);
 $5 = ($4|0)==(2);
 if (!($5)) {
  $$1 = -1;
  return ($$1|0);
 }
 $6 = (_CheckedSizeOf($1)|0);
 $7 = ((($0)) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8>>>0)<($6>>>0);
 $10 = (($8) - ($6))|0;
 if ($9) {
  $$1 = -1;
  return ($$1|0);
 }
 HEAP32[$7>>2] = $10;
 $$1 = $10;
 return ($$1|0);
}
function _NewFunc($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$idx$i = 0, $$0$idx$val$i = 0, $$035$i = 0, $$035$idx$i = 0, $$035$idx$val$i = 0, $$035$in$i = 0, $$036$i = 0, $$039$i = 0, $$048 = 0, $$049 = 0, $$04966 = 0, $$04967 = 0, $$061$i = 0, $$062$i = 0, $$1$i = 0, $$1$pn$i = 0, $$4$i = 0;
 var $$idx$val$i = 0, $$idx50$val = 0, $$idx51$val = 0, $$idx52$val = 0, $$idx53$val = 0, $$lobit$i = 0, $$lobit$i$i = 0, $$lobit$i45$i = 0, $$lobit$i54 = 0, $$lobit$i55 = 0, $$lobit$i57 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_xmalloc(32)|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($0)) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_GetFuncReturn($5)|0);
 $7 = ((($3)) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = (_GetFuncDesc($5)|0);
 $9 = ((($3)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($3)) + 12|0);
 HEAP32[$10>>2] = 0;
 $11 = (_GetLocalLabel()|0);
 $12 = ((($3)) + 16|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($3)) + 20|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[2065]|0;
 $15 = ((($3)) + 24|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$7>>2]|0;
 $$idx$val$i = HEAP32[$16>>2]|0;
 $17 = $$idx$val$i & 15;
 $18 = ($17|0)==(9);
 $19 = $18 ? 4 : 0;
 $20 = ((($3)) + 28|0);
 HEAP32[$20>>2] = $19;
 HEAP32[11507] = $3;
 _ReenterFunctionLevel($2);
 $21 = HEAP32[$2>>2]|0;
 $22 = $21 & 64;
 $23 = ($22|0)==(0);
 if (!($23)) {
  $24 = (_IS_Get(8668)|0);
  $25 = ($24|0)==(2);
  if (!($25)) {
   _Error(34466,$vararg_buffer);
  }
 }
 $26 = ((($2)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 (_AddConstSym(34489,10956,4128,$27)|0);
 $28 = HEAP32[$2>>2]|0;
 $29 = $28 & 4;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = HEAP32[$26>>2]|0;
  (_AddConstSym(34501,10924,4128,$31)|0);
 } else {
  (_AddLocalSym(34501,8704,12289,0)|0);
 }
 $32 = ((($0)) + 20|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 | 4096;
 HEAP32[$32>>2] = $34;
 $35 = ((($0)) + 48|0);
 $36 = (_strcmp($35,34513)|0);
 $37 = ($36|0)==(0);
 if ($37) {
  $38 = HEAP32[11507]|0;
  $39 = ((($38)) + 28|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 | 2;
  HEAP32[$39>>2] = $41;
  $42 = HEAP32[$4>>2]|0;
  $$idx50$val = HEAP32[$42>>2]|0;
  $$lobit$i = $$idx50$val & 65536;
  $43 = ($$lobit$i|0)==(0);
  if (!($43)) {
   _Error(34518,$vararg_buffer1);
  }
  $44 = (_IS_Get(8668)|0);
  $45 = ($44|0)==(2);
  if (!($45)) {
   $46 = HEAP32[11507]|0;
   $47 = ((($46)) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)==(275);
   if (!($50)) {
    _Error(34560,$vararg_buffer3);
   }
  }
  _g_importstartup();
  $51 = ((($2)) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = HEAP32[$2>>2]|0;
   $55 = $54 & 4;
   $56 = ($55|0)==(0);
   if (!($56)) {
    label = 15;
   }
  } else {
   label = 15;
  }
  if ((label|0) == 15) {
   _g_importmainargs();
   $57 = HEAP32[$4>>2]|0;
   $58 = HEAP32[$57>>2]|0;
   $59 = $58 | 131072;
   HEAP32[$57>>2] = $59;
  }
  $60 = HEAP32[11507]|0;
  $61 = ((($60)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $$idx51$val = HEAP32[$62>>2]|0;
  $63 = $$idx51$val & 15;
  $64 = ($63|0)==(3);
  if ($64) {
   $65 = (_IS_Get(8668)|0);
   $66 = ($65|0)==(1);
   $$ = $66&1;
   $$0 = $$;
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 $67 = (_PushSegments($0)|0);
 $68 = ((($0)) + 40|0);
 HEAP32[$68>>2] = $67;
 _PushLiteralPool($0);
 $69 = HEAP32[$2>>2]|0;
 $70 = $69 & 4;
 $71 = ($70|0)==(0);
 do {
  if ($71) {
   $72 = ((($2)) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($73|0)==(0);
   if (!($74)) {
    $75 = HEAP8[47028]|0;
    $76 = ($75<<24>>24)==(0);
    $77 = HEAP32[$4>>2]|0;
    $$idx52$val = HEAP32[$77>>2]|0;
    if ($76) {
     $$lobit$i55 = $$idx52$val & 131072;
     $79 = ($$lobit$i55|0)==(0);
     if (!($79)) {
      break;
     }
    } else {
     $$lobit$i54 = $$idx52$val & 65536;
     $78 = ($$lobit$i54|0)==(0);
     if ($78) {
      break;
     }
    }
    $80 = ((($2)) + 20|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ((($81)) + 24|0);
    $83 = HEAP32[$82>>2]|0;
    $$idx53$val = HEAP32[$83>>2]|0;
    $84 = $$idx53$val & 15;
    $85 = ($84|0)==(14);
    if ($85) {
     $$048 = 1;
    } else {
     $86 = (_TypeOf($83)|0);
     $87 = $86 | 512;
     $$048 = $87;
    }
    _g_push($$048,0);
   }
  }
 } while(0);
 $88 = HEAP32[$4>>2]|0;
 $89 = (_TypeOf($88)|0);
 $90 = HEAP32[11507]|0;
 $91 = ((($90)) + 8|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ((($92)) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 _g_enter($89,$94);
 $95 = (_IS_Get(8516)|0);
 $96 = ($95|0)==(0);
 if (!($96)) {
  _g_stackcheck();
 }
 HEAP32[11252] = 0;
 $97 = ((($2)) + 4|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ((($98)) + 4|0);
 $$04966 = HEAP32[$99>>2]|0;
 $100 = ($$04966|0)==(0|0);
 L39: do {
  if (!($100)) {
   $$04967 = $$04966;
   while(1) {
    $101 = ((($$04967)) + 20|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 128;
    $104 = ($103|0)==(0);
    if ($104) {
     break L39;
    }
    $105 = $102 & 16386;
    $106 = ($105|0)==(2);
    do {
     if ($106) {
      $107 = HEAP32[11507]|0;
      $108 = ((($$04967)) + 24|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (_IS_Get(8372)|0);
      $111 = ($110|0)==(0);
      if (!($111)) {
       $112 = (_GetLexicalLevel()|0);
       $113 = ($112|0)==(2);
       if ($113) {
        $114 = (_CheckedSizeOf($109)|0);
        $115 = ((($107)) + 24|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = ($116>>>0)<($114>>>0);
        $118 = (($116) - ($114))|0;
        if (!($117)) {
         HEAP32[$115>>2] = $118;
         $119 = ($118|0)<(0);
         if (!($119)) {
          $120 = ((($$04967)) + 36|0);
          HEAP32[$120>>2] = $118;
          $121 = ((($$04967)) + 40|0);
          $122 = HEAP32[$121>>2]|0;
          $123 = HEAP32[$108>>2]|0;
          $124 = (_CheckedSizeOf($123)|0);
          _g_swap_regvars($122,$118,$124);
          break;
         }
        }
       }
      }
      _CvtRegVarToAuto($$04967);
     }
    } while(0);
    $125 = ((($$04967)) + 8|0);
    $$049 = HEAP32[$125>>2]|0;
    $126 = ($$049|0)==(0|0);
    if ($126) {
     break;
    } else {
     $$04967 = $$049;
    }
   }
  }
 } while(0);
 (_ConsumeLCurly()|0);
 _DeclareLocals();
 $127 = HEAP32[11252]|0;
 $128 = HEAP32[11507]|0;
 $129 = ((($128)) + 20|0);
 HEAP32[$129>>2] = $127;
 L53: while(1) {
  $130 = HEAP32[11156]|0;
  switch ($130|0) {
  case 1: case 55:  {
   break L53;
   break;
  }
  default: {
  }
  }
  (_Statement(0)|0);
 }
 $131 = HEAP32[11507]|0;
 $132 = ((($131)) + 28|0);
 $133 = HEAP32[$132>>2]|0;
 $$lobit$i57 = $133 & 4;
 $134 = ($$lobit$i57|0)==(0);
 if ($134) {
  $135 = $133 & 1;
  $136 = $135 | $$0;
  $137 = ($136|0)==(0);
  if ($137) {
   _Warning(34593,$vararg_buffer5);
  }
 }
 $138 = ($$0|0)==(0);
 if (!($138)) {
  _g_getimmed(33,0,0);
 }
 $139 = HEAP32[11507]|0;
 $140 = ((($139)) + 16|0);
 $141 = HEAP32[$140>>2]|0;
 _g_defcodelabel($141);
 $142 = HEAP32[11507]|0;
 $143 = ((($142)) + 24|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = HEAP32[2065]|0;
 $146 = ($144|0)==($145|0);
 if (!($146)) {
  $147 = ((($142)) + 28|0);
  $148 = HEAP32[$147>>2]|0;
  $$lobit$i$i = $148 & 4;
  $149 = ($$lobit$i$i|0)==(0);
  if ($149) {
   _g_save(515);
  }
  $150 = HEAP32[$142>>2]|0;
  $151 = ((($150)) + 36|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ((($152)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ((($154)) + 4|0);
  $$061$i = HEAP32[$155>>2]|0;
  $156 = ($$061$i|0)==(0|0);
  if (!($156)) {
   $$062$i = $$061$i;
   while(1) {
    $$0$idx$i = ((($$062$i)) + 20|0);
    $$0$idx$val$i = HEAP32[$$0$idx$i>>2]|0;
    $157 = $$0$idx$val$i & 16386;
    $158 = ($157|0)==(2);
    if ($158) {
     $159 = ((($$062$i)) + 40|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ((($$062$i)) + 24|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (_CheckedSizeOf($162)|0);
     $$036$i = $163;$$039$i = $160;$$1$i = $$062$i;
     L74: while(1) {
      $$1$pn$i = $$1$i;
      while(1) {
       $$035$in$i = ((($$1$pn$i)) + 8|0);
       $$035$i = HEAP32[$$035$in$i>>2]|0;
       $164 = ($$035$i|0)==(0|0);
       if ($164) {
        break L74;
       }
       $$035$idx$i = ((($$035$i)) + 20|0);
       $$035$idx$val$i = HEAP32[$$035$idx$i>>2]|0;
       $165 = $$035$idx$val$i & 16386;
       $166 = ($165|0)==(2);
       if ($166) {
        break;
       } else {
        $$1$pn$i = $$035$i;
       }
      }
      $167 = ((($$035$i)) + 24|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = (_CheckedSizeOf($168)|0);
      $170 = ((($$035$i)) + 40|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = (($171) + ($169))|0;
      $173 = ($172|0)==($$039$i|0);
      $174 = (($169) + ($$036$i))|0;
      $175 = (($$039$i) - ($169))|0;
      if ($173) {
       $$036$i = $174;$$039$i = $175;$$1$i = $$035$i;
      } else {
       break;
      }
     }
     $176 = ((($$1$i)) + 36|0);
     $177 = HEAP32[$176>>2]|0;
     _g_restore_regvars($$039$i,$177,$$036$i);
     $$4$i = $$1$i;
    } else {
     $$4$i = $$062$i;
    }
    $178 = ((($$4$i)) + 8|0);
    $$0$i = HEAP32[$178>>2]|0;
    $179 = ($$0$i|0)==(0|0);
    if ($179) {
     break;
    } else {
     $$062$i = $$0$i;
    }
   }
  }
  $180 = HEAP32[$147>>2]|0;
  $$lobit$i45$i = $180 & 4;
  $181 = ($$lobit$i45$i|0)==(0);
  if ($181) {
   _g_restore(515);
  }
 }
 _g_leave();
 _EmitExternals();
 $182 = HEAP8[47029]|0;
 $183 = ($182<<24>>24)==(0);
 if ($183) {
  _EmitDebugInfo();
  _LeaveFunctionLevel();
  (_ConsumeRCurly()|0);
  $194 = (_PopLiteralPool()|0);
  $195 = ((($0)) + 44|0);
  HEAP32[$195>>2] = $194;
  _PopSegments();
  $196 = HEAP32[11507]|0;
  _xfree($196);
  HEAP32[11507] = 0;
  STACKTOP = sp;return;
 }
 $184 = HEAP32[11507]|0;
 $185 = HEAP32[$184>>2]|0;
 $186 = ((($185)) + 48|0);
 $187 = ((($185)) + 20|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = $188 & 8;
 $190 = ($189|0)!=(0);
 $191 = $190 ? 34634 : 34641;
 $192 = ((($185)) + 32|0);
 $193 = HEAP32[$192>>2]|0;
 HEAP32[$vararg_buffer7>>2] = $186;
 $vararg_ptr9 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $191;
 $vararg_ptr10 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr10>>2] = $193;
 _AddTextLine(34648,$vararg_buffer7);
 _EmitDebugInfo();
 _LeaveFunctionLevel();
 (_ConsumeRCurly()|0);
 $194 = (_PopLiteralPool()|0);
 $195 = ((($0)) + 44|0);
 HEAP32[$195>>2] = $194;
 _PopSegments();
 $196 = HEAP32[11507]|0;
 _xfree($196);
 HEAP32[11507] = 0;
 STACKTOP = sp;return;
}
function _OptSub1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$01825 = 0, $$027 = 0, $$1 = 0, $$idx$i = 0, $$idx$i19 = 0, $$idx$i21 = 0, $$idx$val$i = 0, $$idx$val$i20 = 0, $$idx$val$i22 = 0, $$idx$val$i24 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i24 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i24|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $$01825 = 0;$$027 = 0;$6 = $$idx$val$i24;
 while(1) {
  $7 = ($6>>>0)>($$01825>>>0);
  if (!($7)) {
   label = 4;
   break;
  }
  $10 = HEAP32[$3>>2]|0;
  $11 = (($10) + ($$01825<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(58);
  $15 = (($$01825) + 1)|0;
  L7: do {
   if ($14) {
    $16 = (_CS_GetEntries($0,$1,$15,3)|0);
    $17 = ($16|0)==(0);
    if ($17) {
     $$1 = $$027;
    } else {
     $18 = HEAP32[$1>>2]|0;
     $19 = HEAP8[$18>>0]|0;
     switch ($19<<24>>24) {
     case 31: case 4:  {
      break;
     }
     default: {
      $$1 = $$027;
      break L7;
     }
     }
     $20 = ((($18)) + 20|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      $$1 = $$027;
     } else {
      $$idx$i21 = ((($18)) + 24|0);
      $$idx$val$i22 = HEAP32[$$idx$i21>>2]|0;
      $23 = ($$idx$val$i22|0)==(0);
      if ($23) {
       $24 = HEAP32[$4>>2]|0;
       $25 = HEAP8[$24>>0]|0;
       $26 = ($25<<24>>24)==(23);
       if ($26) {
        $$idx$i19 = ((($24)) + 24|0);
        $$idx$val$i20 = HEAP32[$$idx$i19>>2]|0;
        $27 = ($$idx$val$i20|0)==(0);
        if ($27) {
         $28 = ((($21)) + 12|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = HEAP32[$5>>2]|0;
         $31 = ($29|0)==($30|0);
         if ($31) {
          $32 = (($$01825) + 3)|0;
          $33 = (_RegXUsed($0,$32)|0);
          $34 = ($33|0)==(0);
          if ($34) {
           $35 = (($$027) + 1)|0;
           _CS_DelEntries($0,$15,2);
           $$1 = $35;
          } else {
           $$1 = $$027;
          }
         } else {
          $$1 = $$027;
         }
        } else {
         $$1 = $$027;
        }
       } else {
        $$1 = $$027;
       }
      } else {
       $$1 = $$027;
      }
     }
    }
   } else {
    $$1 = $$027;
   }
  } while(0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $36 = ($15>>>0)<($$idx$val$i>>>0);
  if ($36) {
   $$01825 = $15;$$027 = $$1;$6 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 16;
   break;
  }
 }
 if ((label|0) == 4) {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 16) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptSub2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02732 = 0, $$033 = 0, $$1 = 0, $$idx$i = 0, $$idx$i28 = 0, $$idx$val$i = 0, $$idx$val$i29 = 0, $$idx$val$i31 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i31 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i31|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $8 = ((($0)) + 8|0);
 $$02732 = 0;$$033 = 0;$9 = $$idx$val$i31;
 while(1) {
  $10 = ($9>>>0)>($$02732>>>0);
  if (!($10)) {
   label = 4;
   break;
  }
  $13 = HEAP32[$3>>2]|0;
  $14 = (($13) + ($$02732<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(40);
  $18 = (($$02732) + 1)|0;
  if ($17) {
   $19 = (_CS_RangeHasLabel($0,$18,5)|0);
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = (_CS_GetEntries($0,$1,$18,5)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $$1 = $$033;
    } else {
     $23 = HEAP32[$1>>2]|0;
     $24 = HEAP8[$23>>0]|0;
     $25 = ($24<<24>>24)==(59);
     if ($25) {
      $26 = HEAP32[$4>>2]|0;
      $27 = HEAP8[$26>>0]|0;
      $28 = ($27<<24>>24)==(62);
      if ($28) {
       $29 = ((($26)) + 4|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = (_strcmp($30,34681)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        $33 = HEAP32[$5>>2]|0;
        $34 = HEAP8[$33>>0]|0;
        $35 = ($34<<24>>24)==(40);
        if ($35) {
         $36 = HEAP32[$6>>2]|0;
         $37 = HEAP8[$36>>0]|0;
         $38 = ($37<<24>>24)==(58);
         if ($38) {
          $39 = ((($36)) + 4|0);
          $40 = HEAP32[$39>>2]|0;
          $41 = (_strcmp($40,34681)|0);
          $42 = ($41|0)==(0);
          if ($42) {
           $43 = HEAP32[$7>>2]|0;
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)==(62);
           if ($45) {
            $46 = ((($43)) + 4|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = ((($33)) + 4|0);
            $49 = HEAP32[$48>>2]|0;
            $50 = (_strcmp($47,$49)|0);
            $51 = ($50|0)==(0);
            if ($51) {
             $52 = (($$02732) + 2)|0;
             _CS_DelEntry($0,$52);
             $53 = (($$02732) + 3)|0;
             _CS_DelEntry($0,$53);
             _CollMove($8,$$02732,$53);
             _CE_ReplaceOPC($15,58);
             $$idx$i28 = ((($15)) + 24|0);
             $$idx$val$i29 = HEAP32[$$idx$i28>>2]|0;
             $54 = ($$idx$val$i29|0)==(0);
             if (!($54)) {
              $55 = HEAP32[$1>>2]|0;
              _CS_MoveLabels($0,$15,$55);
             }
             $56 = (($$033) + 1)|0;
             $$1 = $56;
            } else {
             $$1 = $$033;
            }
           } else {
            $$1 = $$033;
           }
          } else {
           $$1 = $$033;
          }
         } else {
          $$1 = $$033;
         }
        } else {
         $$1 = $$033;
        }
       } else {
        $$1 = $$033;
       }
      } else {
       $$1 = $$033;
      }
     } else {
      $$1 = $$033;
     }
    }
   } else {
    $$1 = $$033;
   }
  } else {
   $$1 = $$033;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $57 = ($18>>>0)<($$idx$val$i>>>0);
  if ($57) {
   $$02732 = $18;$$033 = $$1;$9 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 20;
   break;
  }
 }
 if ((label|0) == 4) {
  $11 = HEAP32[3332]|0;
  $12 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$11 & 1]($12,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptSub3($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03335 = 0, $$036 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i34 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i34 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i34|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03335 = 0;$$036 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$03335<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (_strncmp($9,34686,5)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = ((($9)) + 5|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = (_IsDigit($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$1 = $$036;
    } else {
     $16 = HEAP32[$8>>2]|0;
     $17 = ((($16)) + 6|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(0);
     if ($19) {
      $20 = (($$03335) + 1)|0;
      $21 = (_RegXUsed($0,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       $23 = ((($5)) + 36|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (_NewCodeEntry(59,0,0,0,$24)|0);
       _CS_InsertEntry($0,$25,$20);
       $26 = HEAP32[$8>>2]|0;
       $27 = ((($26)) + 5|0);
       $28 = HEAP8[$27>>0]|0;
       $29 = $28 << 24 >> 24;
       $30 = (($29) + -48)|0;
       $31 = (_MakeHexArg($30)|0);
       $32 = HEAP32[$23>>2]|0;
       $33 = (_NewCodeEntry(58,2,$31,0,$32)|0);
       $34 = (($$03335) + 2)|0;
       _CS_InsertEntry($0,$33,$34);
       _CS_DelEntry($0,$$03335);
       $35 = (($$036) + 1)|0;
       $$1 = $35;
      } else {
       $$1 = $$036;
      }
     } else {
      $$1 = $$036;
     }
    }
   } else {
    $$1 = $$036;
   }
  } else {
   $$1 = $$036;
  }
  $36 = (($$03335) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $37 = ($36>>>0)<($$idx$val$i>>>0);
  if ($37) {
   $$03335 = $36;$$036 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _GetCodePos($0) {
 $0 = $0|0;
 var $$idx$i = 0, $$idx$val$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11209]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $$idx$i = ((($3)) + 8|0);
 $$idx$val$i = HEAP32[$$idx$i>>2]|0;
 HEAP32[$0>>2] = $$idx$val$i;
 $4 = HEAP32[11252]|0;
 $5 = ((($0)) + 4|0);
 HEAP32[$5>>2] = $4;
 return;
}
function _RemoveCode($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[11209]|0;
 $2 = ((($1)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 _CS_DelCodeAfter($3,$4);
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[11252] = $6;
 return;
}
function _MoveCode($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[11209]|0;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($7) - ($6))|0;
 $9 = HEAP32[$2>>2]|0;
 _CS_MoveEntries($5,$6,$8,$9);
 return;
}
function _CodeRangeIsEmpty($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($2>>>0)>($3>>>0);
 if ($4) {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,34692,34715,101);
  // unreachable;
 }
 $7 = ($2|0)==($3|0);
 $8 = $7&1;
 if (!($7)) {
  return ($8|0);
 }
 $9 = ((($0)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($1)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)==($12|0);
 if ($13) {
  return ($8|0);
 } else {
  $14 = HEAP32[3332]|0;
  $15 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$14 & 1]($15,34730,34715,105);
  // unreachable;
 }
 return (0)|0;
}
function _WriteAsmOutput() {
 var $$0 = 0, $$08 = 0, $$09 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_HaveGlobalCode()|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $2 = HEAP32[3332]|0;
  $3 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$2 & 1]($3,34751,34715,119);
  // unreachable;
 }
 $4 = HEAP32[11209]|0;
 _OutputSegments($4);
 $5 = (_GetGlobalSymTab()|0);
 $6 = ((($5)) + 4|0);
 $$08 = HEAP32[$6>>2]|0;
 $7 = ($$08|0)==(0|0);
 if ($7) {
  return;
 } else {
  $$09 = $$08;
 }
 while(1) {
  $8 = (_SymIsOutputFunc($$09)|0);
  $9 = ($8|0)==(0);
  if (!($9)) {
   $10 = ((($$09)) + 40|0);
   $11 = HEAP32[$10>>2]|0;
   _OutputSegments($11);
  }
  $12 = ((($$09)) + 8|0);
  $$0 = HEAP32[$12>>2]|0;
  $13 = ($$0|0)==(0|0);
  if ($13) {
   break;
  } else {
   $$09 = $$0;
  }
 }
 return;
}
function _ShiftExpr($0) {
 $0 = $0|0;
 var $$ = 0, $$052 = 0, $$05264 = 0, $$idx$val = 0, $$idx55$val = 0, $$idx56$val = 0, $$idx57 = 0, $$idx57$val = 0, $$idx58 = 0, $$idx58$val = 0, $$idx59$val = 0, $$lobit$i = 0, $$old53 = 0, $$pre = 0, $$pre67 = 0, $$pre68 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $not$ = 0, $or$cond = 0, $or$cond54 = 0, $or$cond66 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $1 = sp;
 $2 = sp + 96|0;
 $3 = sp + 88|0;
 _ExprWithCheck(5,$0);
 $4 = HEAP32[11156]|0;
 $5 = $4 | 2;
 $6 = ($5|0)==(78);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ((($0)) + 4|0);
 $$idx58 = ((($0)) + 8|0);
 $8 = ((($0)) + 16|0);
 $9 = ((($1)) + 4|0);
 $$idx57 = ((($1)) + 8|0);
 $10 = ((($1)) + 16|0);
 $$pre = HEAP32[$7>>2]|0;
 $11 = $$pre;$67 = $4;
 while(1) {
  $$idx55$val = HEAP32[$11>>2]|0;
  $12 = $$idx55$val & 112;
  $13 = ($12|0)==(16);
  if ($13) {
   $41 = $67;
  } else {
   _Error(38185,$vararg_buffer);
   (_ED_MakeConstAbsInt($0,1)|0);
   $$pre67 = HEAP32[11156]|0;
   $41 = $$pre67;
  }
  _NextToken();
  $14 = HEAP32[$7>>2]|0;
  $15 = (_IntPromotion($14)|0);
  $16 = (_TypeOf($15)|0);
  $17 = (_SizeOf($15)|0);
  $18 = $17 << 3;
  _GetCodePos($2);
  $19 = HEAP32[$7>>2]|0;
  $20 = (_TypeOf($19)|0);
  $$idx58$val = HEAP32[$$idx58>>2]|0;
  $21 = $$idx58$val & 511;
  $22 = ($21|0)==(1);
  if ($22) {
   _GetCodePos($3);
   $23 = $20 | 32;
   $24 = HEAP32[$8>>2]|0;
   _g_push($23,$24);
  } else {
   _LoadExpr(0,$0);
   _GetCodePos($3);
   _g_push($20,0);
  }
  _ExprWithCheck(5,$1);
  $25 = HEAP32[$9>>2]|0;
  $$idx$val = HEAP32[$25>>2]|0;
  $26 = $$idx$val & 112;
  $27 = ($26|0)==(16);
  if (!($27)) {
   _Error(38185,$vararg_buffer1);
   (_ED_MakeConstAbsInt($1,1)|0);
  }
  $$idx57$val = HEAP32[$$idx57>>2]|0;
  $28 = $$idx57$val & 511;
  $29 = ($28|0)==(1);
  do {
   if ($29) {
    $30 = $16 | 32;
    _RemoveCode($3);
    $31 = HEAP32[$10>>2]|0;
    $32 = ($31|0)>(-1);
    $33 = ($31|0)<($18|0);
    $or$cond = $32 & $33;
    if ($or$cond) {
     $37 = $31;
    } else {
     $34 = (($18) + -1)|0;
     _Warning(34770,$vararg_buffer3);
     $35 = HEAP32[$10>>2]|0;
     $36 = $35 & $34;
     HEAP32[$10>>2] = $36;
     $37 = $36;
    }
    $38 = ($37|0)==(0);
    if ($38) {
     _RemoveCode($2);
     break;
    }
    $$idx56$val = HEAP32[$$idx58>>2]|0;
    $39 = $$idx56$val & 511;
    $40 = ($39|0)==(1);
    if ($40) {
     switch ($41|0) {
     case 76:  {
      $42 = HEAP32[$8>>2]|0;
      $43 = $42 << $37;
      HEAP32[$8>>2] = $43;
      break;
     }
     case 78:  {
      $44 = HEAP32[$8>>2]|0;
      $45 = $44 >> $37;
      HEAP32[$8>>2] = $45;
      break;
     }
     default: {
     }
     }
     _RemoveCode($2);
     break;
    }
    $46 = ($41|0)==(78);
    if ($46) {
     $47 = HEAP32[$7>>2]|0;
     $$idx59$val = HEAP32[$47>>2]|0;
     $48 = $$idx59$val & 15;
     $49 = ($48|0)!=(3);
     $$lobit$i = $$idx56$val & 256;
     $50 = ($$lobit$i|0)==(0);
     $or$cond66 = $50 | $49;
     if ($or$cond66) {
      $$05264 = $30;$63 = $37;
      label = 30;
     } else {
      $51 = $$idx56$val & 143;
      $52 = ($51|0)==(0);
      if ($52) {
       $53 = $$idx56$val & 255;
       $54 = ($53|0)==(16);
       $55 = ($37|0)>(7);
       $or$cond54 = $55 & $54;
       if (!($or$cond54)) {
        $$05264 = $30;$63 = $37;
        label = 30;
        break;
       }
      } else {
       $$old53 = ($37|0)>(7);
       if (!($$old53)) {
        $$05264 = $30;$63 = $37;
        label = 30;
        break;
       }
      }
      $56 = HEAP32[$8>>2]|0;
      $57 = (($56) + 1)|0;
      HEAP32[$8>>2] = $57;
      $58 = (($37) + -8)|0;
      HEAP32[$10>>2] = $58;
      $59 = $$idx59$val & 384;
      $60 = ($59|0)==(128);
      $$ = $60 ? 10924 : 10908;
      HEAP32[$7>>2] = $$;
      _RemoveCode($2);
      _LoadExpr(0,$0);
      HEAP32[$7>>2] = $47;
      $61 = HEAP32[$10>>2]|0;
      $not$ = ($61|0)==(0);
      if ($not$) {
       label = 31;
      } else {
       $$05264 = $30;$63 = $61;
       label = 30;
      }
     }
    } else {
     $$052 = $30;
     label = 27;
    }
   } else {
    _LoadExpr(0,$1);
    $$052 = $16;
    label = 27;
   }
  } while(0);
  L38: do {
   if ((label|0) == 27) {
    label = 0;
    switch ($41|0) {
    case 76:  {
     $62 = HEAP32[$10>>2]|0;
     _g_asl($$052,$62);
     label = 31;
     break L38;
     break;
    }
    case 78:  {
     $$pre68 = HEAP32[$10>>2]|0;
     $$05264 = $$052;$63 = $$pre68;
     label = 30;
     break L38;
     break;
    }
    default: {
     label = 31;
     break L38;
    }
    }
   }
  } while(0);
  if ((label|0) == 30) {
   label = 0;
   _g_asr($$05264,$63);
   label = 31;
  }
  if ((label|0) == 31) {
   label = 0;
   (_ED_MakeRValExpr($0)|0);
  }
  HEAP32[$7>>2] = $15;
  $64 = HEAP32[11156]|0;
  $65 = $64 | 2;
  $66 = ($65|0)==(78);
  if ($66) {
   $11 = $15;$67 = $64;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _NewSymEntry($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 52)|0;
 $4 = (_xmalloc($3)|0);
 $5 = ((($4)) + 20|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;
 HEAP32[$5>>2] = $1;
 $6 = ((($4)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($4)) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($4)) + 32|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($4)) + 48|0);
 $10 = (($2) + 1)|0;
 _memcpy(($9|0),($0|0),($10|0))|0;
 return ($4|0);
}
function _FreeSymEntry($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 _TypeFree($2);
 $3 = ((($0)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 _xfree($4);
 _xfree($0);
 return;
}
function _DumpSymEntry($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02731 = 0, $$032 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 48|0);
 HEAP32[$vararg_buffer>>2] = $2;
 (_fprintf($0,34809,$vararg_buffer)|0);
 $3 = ((($1)) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  HEAP32[$vararg_buffer1>>2] = $4;
  (_fprintf($0,34814,$vararg_buffer1)|0);
 }
 $6 = ((($1)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 (_fwrite(34831,10,1,$0)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  $$02731 = 0;$$032 = $7;
  while(1) {
   $9 = (((8720 + ($$02731<<3)|0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & $$032;
   $12 = ($11|0)==($10|0);
   if ($12) {
    $13 = (8720 + ($$02731<<3)|0);
    $14 = $10 ^ -1;
    $15 = $$032 & $14;
    $16 = HEAP32[$13>>2]|0;
    HEAP32[$vararg_buffer4>>2] = $16;
    (_fprintf($0,34842,$vararg_buffer4)|0);
    $$1 = $15;
   } else {
    $$1 = $$032;
   }
   $17 = (($$02731) + 1)|0;
   $18 = ($17>>>0)<(18);
   $19 = ($$1|0)!=(0);
   $20 = $18 & $19;
   if ($20) {
    $$02731 = $17;$$032 = $$1;
   } else {
    break;
   }
  }
  if ($19) {
   HEAP32[$vararg_buffer7>>2] = $$1;
   (_fprintf($0,34846,$vararg_buffer7)|0);
  }
 }
 (_fputc(10,$0)|0);
 (_fwrite(34854,11,1,$0)|0);
 $21 = ((($1)) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  (_fwrite(34866,6,1,$0)|0);
  (_fputc(10,$0)|0);
  STACKTOP = sp;return;
 } else {
  _PrintType($0,$22);
  (_fputc(10,$0)|0);
  STACKTOP = sp;return;
 }
}
function _SymIsOutputFunc($0) {
 $0 = $0|0;
 var $$idx$val = 0, $$idx3 = 0, $$idx3$val = 0, $$lobit$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $$idx$val = HEAP32[$2>>2]|0;
 $3 = $$idx$val & 15;
 $4 = ($3|0)==(14);
 if (!($4)) {
  $9 = 0;
  $8 = $9&1;
  return ($8|0);
 }
 $$idx3 = ((($0)) + 20|0);
 $$idx3$val = HEAP32[$$idx3>>2]|0;
 $$lobit$i = $$idx3$val & 4096;
 $5 = ($$lobit$i|0)==(0);
 if ($5) {
  $9 = 0;
  $8 = $9&1;
  return ($8|0);
 }
 $6 = $$idx3$val & 8200;
 $7 = ($6|0)!=(0);
 $9 = $7;
 $8 = $9&1;
 return ($8|0);
}
function _SymGetAttr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01620 = 0, $$3 = 0, $$idx$val19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$3 = 0;
  return ($$3|0);
 }
 $$idx$val19 = HEAP32[$3>>2]|0;
 $5 = ($$idx$val19|0)==(0);
 if ($5) {
  $$3 = 0;
  return ($$3|0);
 }
 $6 = ((($3)) + 8|0);
 $$01620 = 0;
 while(1) {
  $9 = ($$idx$val19>>>0)>($$01620>>>0);
  if (!($9)) {
   label = 6;
   break;
  }
  $12 = HEAP32[$6>>2]|0;
  $13 = (($12) + ($$01620<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($1|0);
  $7 = (($$01620) + 1)|0;
  if ($16) {
   $$3 = $14;
   label = 8;
   break;
  }
  $8 = ($7>>>0)<($$idx$val19>>>0);
  if ($8) {
   $$01620 = $7;
  } else {
   $$3 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,155);
  // unreachable;
 }
 else if ((label|0) == 8) {
  return ($$3|0);
 }
 return (0)|0;
}
function _SymUseAttr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 65536;
 $5 = ($4|0)==(0);
 $6 = ((($1)) + 312|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  $9 = ((($0)) + 28|0);
  HEAP32[$9>>2] = $7;
  HEAP32[$6>>2] = 0;
  $10 = $3 | 65536;
  HEAP32[$2>>2] = $10;
  STACKTOP = sp;return;
 }
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 _Error(35050,$vararg_buffer);
 STACKTOP = sp;return;
}
function _SymSetAsmName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 32|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $6 = ((($0)) + 48|0);
  $7 = (_strlen($6)|0);
  $8 = (($7) + 2)|0;
  $9 = (_xmalloc($8)|0);
  HEAP32[$1>>2] = $9;
  HEAP8[$9>>0] = 95;
  $10 = HEAP32[$1>>2]|0;
  $11 = ((($10)) + 1|0);
  $12 = (($7) + 1)|0;
  _memcpy(($11|0),($6|0),($12|0))|0;
  return;
 } else {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,35104,35122,219);
  // unreachable;
 }
}
function _CvtRegVarToAuto($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -16;
 $4 = $3 | 1;
 HEAP32[$1>>2] = $4;
 $5 = ((($0)) + 40|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 36|0);
 HEAP32[$7>>2] = $6;
 return;
}
function _ChangeSymType($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 _TypeFree($3);
 $4 = (_TypeDup($1)|0);
 HEAP32[$2>>2] = $4;
 return;
}
function _HasAnonName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 48|0);
 $2 = (_IsAnonName($1)|0);
 return ($2|0);
}
function _OptSize1($0) {
 $0 = $0|0;
 var $$$021$i = 0, $$0$lcssa = 0, $$0$lcssa$i = 0, $$0$ph31$i = 0, $$019$ph30$i = 0, $$021$ph$lcssa$i = 0, $$021$ph29$i = 0, $$025$i = 0, $$04762 = 0, $$048 = 0, $$048$lcssa = 0, $$048$us = 0, $$063 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i61 = 0, $$idx$val$i77 = 0, $$lobit$i = 0;
 var $$lobit$i$us = 0, $$lobit$i49$us82 = 0, $$lobit$i4980 = 0, $$lobit$i50 = 0, $$lobit$i50$us = 0, $$lobit$i51$us81 = 0, $$lobit$i5179 = 0, $$lobit$i52 = 0, $$lobit$i52$us = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 152|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)<(100);
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i61 = HEAP32[$$idx$i>>2]|0;
 $4 = ($$idx$val$i61|0)==(0);
 if ($4) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $5 = ((($0)) + 16|0);
 $$04762 = 0;$$063 = 0;$$idx$val$i77 = $$idx$val$i61;
 while(1) {
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($$04762<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&255;
  $11 = ($10<<24>>24)==(37);
  $12 = ($9&65535) >>> 8;
  $13 = $12&65535;
  L6: do {
   if ($11) {
    $14 = ((($8)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $$0$ph31$i = 0;$$019$ph30$i = 72;$$021$ph29$i = 0;
    L8: while(1) {
     $$025$i = $$0$ph31$i;
     while(1) {
      $16 = (($$025$i) + ($$019$ph30$i))|0;
      $17 = (($16|0) / 2)&-1;
      $18 = (8864 + (($17*28)|0)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (_strcmp($19,$15)|0);
      $21 = ($20|0)<(0);
      if (!($21)) {
       break;
      }
      $22 = (($17) + 1)|0;
      $23 = ($17|0)<($$019$ph30$i|0);
      if ($23) {
       $$025$i = $22;
      } else {
       $$0$lcssa$i = $22;$$021$ph$lcssa$i = $$021$ph29$i;
       break L8;
      }
     }
     $24 = (($17) + -1)|0;
     $25 = ($20|0)==(0);
     $$$021$i = $25 ? 1 : $$021$ph29$i;
     $26 = ($$025$i|0)<($17|0);
     if ($26) {
      $$0$ph31$i = $$025$i;$$019$ph30$i = $24;$$021$ph29$i = $$$021$i;
     } else {
      $$0$lcssa$i = $$025$i;$$021$ph$lcssa$i = $$$021$i;
      break;
     }
    }
    $27 = (8864 + (($$0$lcssa$i*28)|0)|0);
    $28 = ($27|0)==(0|0);
    $not$ = ($$021$ph$lcssa$i|0)==(0);
    $29 = $not$ | $28;
    if ($29) {
     $$2 = $$063;$$idx$val$i = $$idx$val$i77;
    } else {
     $30 = ((($8)) + 40|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ((($31)) + 2|0);
     $33 = ((($31)) + 4|0);
     $34 = ((($31)) + 6|0);
     $35 = ((($31)) + 8|0);
     L16: do {
      if ($3) {
       $$pre = HEAP16[$31>>1]|0;
       $$048$us = $27;
       while(1) {
        $36 = ((($$048$us)) + 4|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = $37&65535;
        $39 = ($38<<16>>16)==($$pre<<16>>16);
        $40 = $39&1;
        $$lobit$i52$us = $37 >>> 15;
        $41 = $$lobit$i52$us & 1;
        $42 = $40 | $41;
        $43 = ($42|0)==(0);
        if (!($43)) {
         $44 = $37 >>> 16;
         $45 = $44&65535;
         $46 = HEAP16[$32>>1]|0;
         $47 = ($45<<16>>16)==($46<<16>>16);
         $48 = $47&1;
         $$lobit$i51$us81 = $37 >>> 31;
         $49 = $48 | $$lobit$i51$us81;
         $50 = ($49|0)==(0);
         if (!($50)) {
          $51 = ((($$048$us)) + 8|0);
          $52 = HEAP32[$51>>2]|0;
          $53 = $52&65535;
          $54 = HEAP16[$33>>1]|0;
          $55 = ($53<<16>>16)==($54<<16>>16);
          $56 = $55&1;
          $$lobit$i50$us = $52 >>> 15;
          $57 = $$lobit$i50$us & 1;
          $58 = $56 | $57;
          $59 = ($58|0)==(0);
          if (!($59)) {
           $60 = $52 >>> 16;
           $61 = $60&65535;
           $62 = HEAP16[$34>>1]|0;
           $63 = ($61<<16>>16)==($62<<16>>16);
           $64 = $63&1;
           $$lobit$i49$us82 = $52 >>> 31;
           $65 = $64 | $$lobit$i49$us82;
           $66 = ($65|0)==(0);
           if (!($66)) {
            $67 = ((($$048$us)) + 12|0);
            $68 = HEAP16[$67>>1]|0;
            $69 = HEAP16[$35>>1]|0;
            $70 = ($68<<16>>16)==($69<<16>>16);
            $71 = $70&1;
            $$lobit$i$us = ($68&65535) >>> 15;
            $72 = $$lobit$i$us&65535;
            $73 = $71 | $72;
            $74 = ($73|0)==(0);
            if (!($74)) {
             $$048$lcssa = $$048$us;
             break L16;
            }
           }
          }
         }
        }
        $75 = ((($$048$us)) + 28|0);
        $76 = ($75>>>0)<((10908)>>>0);
        if (!($76)) {
         $$2 = $$063;$$idx$val$i = $$idx$val$i77;
         break L6;
        }
        $77 = HEAP32[$75>>2]|0;
        $78 = (_strcmp($77,$15)|0);
        $79 = ($78|0)==(0);
        if ($79) {
         $$048$us = $75;
        } else {
         $$2 = $$063;$$idx$val$i = $$idx$val$i77;
         break L6;
        }
       }
      } else {
       $$048 = $27;
       while(1) {
        $80 = ((($$048)) + 20|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = $81 & 1;
        $83 = ($82|0)==(0);
        if ($83) {
         $84 = ((($$048)) + 4|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = $85&65535;
         $87 = HEAP16[$31>>1]|0;
         $88 = ($86<<16>>16)==($87<<16>>16);
         $89 = $88&1;
         $$lobit$i52 = $85 >>> 15;
         $90 = $$lobit$i52 & 1;
         $91 = $89 | $90;
         $92 = ($91|0)==(0);
         if (!($92)) {
          $93 = $85 >>> 16;
          $94 = $93&65535;
          $95 = HEAP16[$32>>1]|0;
          $96 = ($94<<16>>16)==($95<<16>>16);
          $97 = $96&1;
          $$lobit$i5179 = $85 >>> 31;
          $98 = $97 | $$lobit$i5179;
          $99 = ($98|0)==(0);
          if (!($99)) {
           $100 = ((($$048)) + 8|0);
           $101 = HEAP32[$100>>2]|0;
           $102 = $101&65535;
           $103 = HEAP16[$33>>1]|0;
           $104 = ($102<<16>>16)==($103<<16>>16);
           $105 = $104&1;
           $$lobit$i50 = $101 >>> 15;
           $106 = $$lobit$i50 & 1;
           $107 = $105 | $106;
           $108 = ($107|0)==(0);
           if (!($108)) {
            $109 = $101 >>> 16;
            $110 = $109&65535;
            $111 = HEAP16[$34>>1]|0;
            $112 = ($110<<16>>16)==($111<<16>>16);
            $113 = $112&1;
            $$lobit$i4980 = $101 >>> 31;
            $114 = $113 | $$lobit$i4980;
            $115 = ($114|0)==(0);
            if (!($115)) {
             $116 = ((($$048)) + 12|0);
             $117 = HEAP16[$116>>1]|0;
             $118 = HEAP16[$35>>1]|0;
             $119 = ($117<<16>>16)==($118<<16>>16);
             $120 = $119&1;
             $$lobit$i = ($117&65535) >>> 15;
             $121 = $$lobit$i&65535;
             $122 = $120 | $121;
             $123 = ($122|0)==(0);
             if (!($123)) {
              $$048$lcssa = $$048;
              break L16;
             }
            }
           }
          }
         }
        }
        $131 = ((($$048)) + 28|0);
        $132 = ($131>>>0)<((10908)>>>0);
        if (!($132)) {
         $$2 = $$063;$$idx$val$i = $$idx$val$i77;
         break L6;
        }
        $133 = HEAP32[$131>>2]|0;
        $134 = (_strcmp($133,$15)|0);
        $135 = ($134|0)==(0);
        if ($135) {
         $$048 = $131;
        } else {
         $$2 = $$063;$$idx$val$i = $$idx$val$i77;
         break L6;
        }
       }
      }
     } while(0);
     $124 = ((($$048$lcssa)) + 24|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = ((($8)) + 36|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (_NewCodeEntry(37,$13,$125,0,$127)|0);
     $129 = (($$04762) + 1)|0;
     _CS_InsertEntry($0,$128,$129);
     _CS_DelEntry($0,$$04762);
     $130 = (($$063) + 1)|0;
     $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
     $$2 = $130;$$idx$val$i = $$idx$val$i$pre;
    }
   } else {
    $$2 = $$063;$$idx$val$i = $$idx$val$i77;
   }
  } while(0);
  $136 = (($$04762) + 1)|0;
  $137 = ($136>>>0)<($$idx$val$i>>>0);
  if ($137) {
   $$04762 = $136;$$063 = $$2;$$idx$val$i77 = $$idx$val$i;
  } else {
   $$0$lcssa = $$2;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptSize2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$07088 = 0, $$089 = 0, $$1 = 0, $$3 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i87 = 0, $$pre = 0, $$pre$phi96Z2D = 0, $$pre$phiZ2D = 0, $$pre93 = 0, $$pre94 = 0, $$pre95 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $sext73 = 0, $sext76 = 0, $sext78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i87 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i87|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$07088 = 0;$$089 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$07088<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP8[$5>>0]|0;
  L6: do {
   switch ($8<<24>>24) {
   case 40:  {
    $9 = (_CE_IsConstImm($5)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$1 = $$089;
    } else {
     $11 = ((($5)) + 8|0);
     $12 = HEAP32[$11>>2]|0;
     $sext78 = $12 << 16;
     $13 = $sext78 >> 16;
     $14 = ((($7)) + 2|0);
     $15 = HEAP16[$14>>1]|0;
     $16 = $15 << 16 >> 16;
     $17 = ($13|0)==($16|0);
     if ($17) {
      $18 = ((($5)) + 36|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (_NewCodeEntry(71,0,0,0,$19)|0);
      $$3 = $20;
      label = 31;
      break L6;
     }
     $21 = ((($7)) + 4|0);
     $22 = HEAP16[$21>>1]|0;
     $23 = $22 << 16 >> 16;
     $24 = ($13|0)==($23|0);
     if ($24) {
      $25 = ((($5)) + 36|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (_NewCodeEntry(73,0,0,0,$26)|0);
      $$3 = $27;
      label = 31;
      break L6;
     }
     $28 = HEAP16[$7>>1]|0;
     $29 = ($28<<16>>16)<(0);
     if ($29) {
      $$1 = $$089;
     } else {
      $30 = HEAP32[3628]|0;
      $31 = (14556 + ($30<<2)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = $32 & 8;
      $34 = ($33|0)==(0);
      if ($34) {
       $$1 = $$089;
      } else {
       $35 = $28 << 16 >> 16;
       $36 = (($35) + 255)|0;
       $37 = $36 & 255;
       $38 = ($13|0)==($37|0);
       if ($38) {
        $39 = ((($5)) + 36|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = (_NewCodeEntry(21,0,0,0,$40)|0);
        $$3 = $41;
        label = 31;
        break L6;
       }
       $42 = (($35) + 1)|0;
       $43 = $42 & 255;
       $44 = ($13|0)==($43|0);
       if ($44) {
        $45 = ((($5)) + 36|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = (_NewCodeEntry(26,0,0,0,$46)|0);
        $$3 = $47;
        label = 31;
       } else {
        $$1 = $$089;
       }
      }
     }
    }
    break;
   }
   case 41:  {
    $48 = (_CE_IsConstImm($5)|0);
    $49 = ($48|0)==(0);
    if ($49) {
     $$1 = $$089;
    } else {
     $50 = ((($5)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ((($7)) + 2|0);
     $53 = HEAP16[$52>>1]|0;
     $54 = ($53<<16>>16)<(0);
     $$pre = $51 << 16;
     $$pre93 = $$pre >> 16;
     if ($54) {
      $$pre$phiZ2D = $$pre93;
     } else {
      $55 = $53&65535;
      $56 = (($55) + 255)|0;
      $57 = $56 & 255;
      $58 = ($$pre93|0)==($57|0);
      if ($58) {
       $59 = ((($5)) + 36|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (_NewCodeEntry(23,0,0,0,$60)|0);
       $$3 = $61;
       label = 31;
       break L6;
      }
      $sext76 = $51 << 16;
      $62 = $sext76 >> 16;
      $63 = $53&65535;
      $64 = (($63) + 1)|0;
      $65 = $64 & 255;
      $66 = ($62|0)==($65|0);
      if ($66) {
       $67 = ((($5)) + 36|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = (_NewCodeEntry(28,0,0,0,$68)|0);
       $$3 = $69;
       label = 31;
       break L6;
      } else {
       $$pre$phiZ2D = $62;
      }
     }
     $70 = HEAP16[$7>>1]|0;
     $71 = $70 << 16 >> 16;
     $72 = ($$pre$phiZ2D|0)==($71|0);
     if ($72) {
      $73 = ((($5)) + 36|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (_NewCodeEntry(66,0,0,0,$74)|0);
      $$3 = $75;
      label = 31;
     } else {
      $$1 = $$089;
     }
    }
    break;
   }
   case 42:  {
    $76 = (_CE_IsConstImm($5)|0);
    $77 = ($76|0)==(0);
    if ($77) {
     $$1 = $$089;
    } else {
     $78 = ((($5)) + 8|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ((($7)) + 4|0);
     $81 = HEAP16[$80>>1]|0;
     $82 = ($81<<16>>16)<(0);
     $$pre94 = $79 << 16;
     $$pre95 = $$pre94 >> 16;
     if ($82) {
      $$pre$phi96Z2D = $$pre95;
     } else {
      $83 = $81&65535;
      $84 = (($83) + 255)|0;
      $85 = $84 & 255;
      $86 = ($$pre95|0)==($85|0);
      if ($86) {
       $87 = ((($5)) + 36|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = (_NewCodeEntry(24,0,0,0,$88)|0);
       $$3 = $89;
       label = 31;
       break L6;
      }
      $sext73 = $79 << 16;
      $90 = $sext73 >> 16;
      $91 = $81&65535;
      $92 = (($91) + 1)|0;
      $93 = $92 & 255;
      $94 = ($90|0)==($93|0);
      if ($94) {
       $95 = ((($5)) + 36|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = (_NewCodeEntry(29,0,0,0,$96)|0);
       $$3 = $97;
       label = 31;
       break L6;
      } else {
       $$pre$phi96Z2D = $90;
      }
     }
     $98 = HEAP16[$7>>1]|0;
     $99 = $98 << 16 >> 16;
     $100 = ($$pre$phi96Z2D|0)==($99|0);
     if ($100) {
      $101 = ((($5)) + 36|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (_NewCodeEntry(67,0,0,0,$102)|0);
      $$3 = $103;
      label = 31;
     } else {
      $$1 = $$089;
     }
    }
    break;
   }
   default: {
    $$1 = $$089;
   }
   }
  } while(0);
  if ((label|0) == 31) {
   label = 0;
   $104 = ($$3|0)==(0|0);
   if ($104) {
    $$1 = $$089;
   } else {
    $105 = (($$089) + 1)|0;
    $106 = (($$07088) + 1)|0;
    _CS_InsertEntry($0,$$3,$106);
    _CS_DelEntry($0,$$07088);
    $$1 = $105;
   }
  }
  $107 = (($$07088) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $108 = ($107>>>0)<($$idx$val$i>>>0);
  if ($108) {
   $$07088 = $107;$$089 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _SwitchStatement() {
 var $$idx$val = 0, $$idx15$val = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $0 = sp;
 $1 = sp + 120|0;
 $2 = sp + 112|0;
 $3 = sp + 104|0;
 $4 = sp + 96|0;
 $5 = sp + 80|0;
 _NextToken();
 (_ConsumeLParen()|0);
 _Expression0($0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $$idx$val = HEAP32[$7>>2]|0;
 $8 = $$idx$val & 112;
 $9 = ($8|0)==(16);
 if (!($9)) {
  _Error(36213,$vararg_buffer);
  (_ED_MakeConstAbsInt($0,1)|0);
 }
 (_ConsumeRParen()|0);
 $10 = (_GetLocalLabel()|0);
 _g_jump($10);
 _GetCodePos($1);
 $11 = (_NewCollection()|0);
 HEAP32[$5>>2] = $11;
 $12 = HEAP32[$6>>2]|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & -260097;
 $15 = ((($5)) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = (_SizeOf($12)|0);
 $17 = ((($5)) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = ((($5)) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[11508]|0;
 HEAP32[11508] = $5;
 $20 = (_GetLocalLabel()|0);
 (_AddLoop($20,0)|0);
 $21 = (_Statement($4)|0);
 $22 = HEAP32[$5>>2]|0;
 $$idx15$val = HEAP32[$22>>2]|0;
 $23 = HEAP32[$18>>2]|0;
 $24 = $23 | $$idx15$val;
 $25 = ($24|0)==(0);
 if ($25) {
  _Warning(36247,$vararg_buffer1);
 }
 $26 = ($21|0)==(0);
 if ($26) {
  _g_jump($20);
 }
 _GetCodePos($2);
 _g_defcodelabel($10);
 $27 = HEAP32[$18>>2]|0;
 $28 = ($27|0)==(0);
 if ($28) {
  HEAP32[$18>>2] = $20;
  $31 = $20;
 } else {
  $31 = $27;
 }
 $29 = HEAP32[$5>>2]|0;
 $30 = HEAP32[$17>>2]|0;
 _g_switch($29,$31,$30);
 _GetCodePos($3);
 _MoveCode($2,$3,$1);
 _g_defcodelabel($20);
 _DelLoop();
 HEAP32[11508] = $19;
 $32 = HEAP32[$5>>2]|0;
 _FreeCaseNodeColl($32);
 $33 = HEAP32[$4>>2]|0;
 $34 = ($33|0)==(0);
 if ($34) {
  STACKTOP = sp;return;
 }
 _NextToken();
 STACKTOP = sp;return;
}
function _CaseLabel() {
 var $$off = 0, $$off20 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer9 = sp + 104|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $0 = sp;
 _NextToken();
 _ConstAbsIntExpr(3,$0);
 $1 = ((($0)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[11508]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  _Error(36294,$vararg_buffer9);
  (_ConsumeColon()|0);
  STACKTOP = sp;return;
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 273:  {
  $$off20 = (($2) + 128)|0;
  $7 = ($$off20>>>0)>(255);
  if ($7) {
   _Error(36262,$vararg_buffer);
  }
  break;
 }
 case 145:  {
  $8 = ($2>>>0)>(255);
  if ($8) {
   _Error(36262,$vararg_buffer1);
  }
  break;
 }
 case 275: case 786:  {
  $$off = (($2) + 32768)|0;
  $9 = ($$off>>>0)>(65535);
  if ($9) {
   _Error(36262,$vararg_buffer3);
  }
  break;
 }
 case 147: case 658:  {
  $10 = ($2>>>0)>(65535);
  if ($10) {
   _Error(36262,$vararg_buffer5);
  }
  break;
 }
 case 1172: case 1300:  {
  break;
 }
 default: {
  HEAP32[$vararg_buffer7>>2] = $6;
  _Internal(36274,$vararg_buffer7);
  // unreachable;
 }
 }
 $11 = HEAP32[11508]|0;
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($11)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_InsertCaseValue($12,$2,$14)|0);
 _g_defcodelabel($15);
 (_ConsumeColon()|0);
 STACKTOP = sp;return;
}
function _DefaultLabel() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 _NextToken();
 $0 = HEAP32[11508]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   _Error(36373,$vararg_buffer1);
  } else {
   $2 = ((($0)) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    $5 = (_GetLocalLabel()|0);
    $6 = HEAP32[11508]|0;
    $7 = ((($6)) + 12|0);
    HEAP32[$7>>2] = $5;
    _g_defcodelabel($5);
    break;
   } else {
    _Error(36335,$vararg_buffer);
    break;
   }
  }
 } while(0);
 (_ConsumeColon()|0);
 STACKTOP = sp;return;
}
function _TypeLen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 8|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 3;
 return ($7|0);
}
function _TypeCopy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$010 = 0, $$089 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = HEAP32[$1>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($0|0);
 } else {
  $$010 = $0;$$089 = $1;
 }
 while(1) {
  $14 = ((($$089)) + 8|0);
  $15 = ((($$010)) + 8|0);
  $16 = $14;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + 4)|0;
  $20 = $19;
  $21 = HEAP32[$20>>2]|0;
  $22 = $15;
  $23 = $22;
  HEAP32[$23>>2] = $18;
  $24 = (($22) + 4)|0;
  $25 = $24;
  HEAP32[$25>>2] = $21;
  $26 = HEAP32[$14>>2]|0;
  $27 = ($26|0)==(0);
  if ($27) {
   break;
  } else {
   $$010 = $15;$$089 = $14;
  }
 }
 return ($0|0);
}
function _TypeDup($0) {
 $0 = $0|0;
 var $$0$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = $0;
 while(1) {
  $1 = HEAP32[$$0$i>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0$i)) + 8|0);
  if ($2) {
   break;
  } else {
   $$0$i = $3;
  }
 }
 $4 = $$0$i;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = (($6) + 8)|0;
 $8 = (_xmalloc($7)|0);
 _memcpy(($8|0),($0|0),($7|0))|0;
 return ($8|0);
}
function _TypeFree($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _xfree($0);
 return;
}
function _SignExtendChar($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_IS_Get(8480)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 128;
 $4 = ($3|0)==(0);
 $or$cond = $4 | $2;
 $5 = $0 | -256;
 $6 = $0 & 255;
 $$0 = $or$cond ? $6 : $5;
 return ($$0|0);
}
function _GetDefaultChar() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_IS_Get(8480)|0);
 $1 = ($0|0)!=(0);
 $2 = $1 ? 273 : 145;
 return ($2|0);
}
function _GetCharArrayType($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_xmalloc(24)|0);
 HEAP32[$1>>2] = 60;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = $0;
 $3 = (_IS_Get(8480)|0);
 $4 = ($3|0)!=(0);
 $5 = $4 ? 273 : 145;
 $6 = ((($1)) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = ((($1)) + 16|0);
 HEAP32[$7>>2] = 0;
 return ($1|0);
}
function _GetImplicitFuncType() {
 var $$0$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_NewFuncDesc()|0);
 $1 = (_xmalloc(24)|0);
 HEAP32[$0>>2] = 5;
 $2 = ((($0)) + 4|0);
 HEAP32[$2>>2] = 6440;
 $3 = ((($0)) + 8|0);
 HEAP32[$3>>2] = 6440;
 $4 = HEAP8[41046]|0;
 switch ($4<<24>>24) {
 case 2:  {
  $$0$i$i = 16478;
  break;
 }
 case 3:  {
  $$0$i$i = 32862;
  break;
 }
 default: {
  _Error(36419,$vararg_buffer);
  $$0$i$i = 16478;
 }
 }
 HEAP32[$1>>2] = $$0$i$i;
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($1)) + 8|0);
 HEAP32[$6>>2] = 275;
 $7 = ((($1)) + 16|0);
 HEAP32[$7>>2] = 0;
 STACKTOP = sp;return ($1|0);
}
function _PointerTo($0) {
 $0 = $0|0;
 var $$0$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0$i = $0;
 while(1) {
  $1 = HEAP32[$$0$i>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0$i)) + 8|0);
  if ($2) {
   break;
  } else {
   $$0$i = $3;
  }
 }
 $4 = $$0$i;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = (($6) + 16)|0;
 $8 = $7 & -8;
 $9 = (_xmalloc($8)|0);
 $10 = HEAP32[$0>>2]|0;
 $11 = $10 & 49152;
 $12 = $11 | 61;
 HEAP32[$9>>2] = $12;
 $13 = ((($9)) + 8|0);
 $14 = (($6) + 8)|0;
 _memcpy(($13|0),($0|0),($14|0))|0;
 return ($9|0);
}
function _PrintType($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i50 = 0, $$0$i52 = 0, $$0$i54 = 0, $$0$i56 = 0, $$0$i58 = 0, $$0$i60 = 0, $$0$i64 = 0, $$048 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, $trunc = 0;
 var $trunc$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer34 = sp + 96|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer28 = sp + 80|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $34 = $1;$5 = $2;
 }
 L3: while(1) {
  $4 = $5 & 2048;
  $6 = ($4|0)==(0);
  if ($6) {
   $$0$i = $5;
  } else {
   $7 = $5 & -2049;
   HEAP32[$vararg_buffer>>2] = 36444;
   (_fprintf($0,36440,$vararg_buffer)|0);
   $$0$i = $7;
  }
  $8 = $$0$i & 4096;
  $9 = ($8|0)==(0);
  if ($9) {
   $$0$i50 = $$0$i;
  } else {
   $10 = $$0$i & -4097;
   HEAP32[$vararg_buffer1>>2] = 36450;
   (_fprintf($0,36440,$vararg_buffer1)|0);
   $$0$i50 = $10;
  }
  $11 = $$0$i50 & 8192;
  $12 = ($11|0)==(0);
  if ($12) {
   $$0$i52 = $$0$i50;
  } else {
   $13 = $$0$i50 & -8193;
   HEAP32[$vararg_buffer4>>2] = 36459;
   (_fprintf($0,36440,$vararg_buffer4)|0);
   $$0$i52 = $13;
  }
  $14 = $$0$i52 & 16384;
  $15 = ($14|0)==(0);
  if ($15) {
   $$0$i54 = $$0$i52;
  } else {
   $16 = $$0$i52 & -16385;
   HEAP32[$vararg_buffer7>>2] = 36468;
   (_fprintf($0,36440,$vararg_buffer7)|0);
   $$0$i54 = $16;
  }
  $17 = $$0$i54 & 32768;
  $18 = ($17|0)==(0);
  if ($18) {
   $$0$i56 = $$0$i54;
  } else {
   $19 = $$0$i54 & -32769;
   HEAP32[$vararg_buffer10>>2] = 36477;
   (_fprintf($0,36440,$vararg_buffer10)|0);
   $$0$i56 = $19;
  }
  $20 = $$0$i56 & 65536;
  $21 = ($20|0)==(0);
  if ($21) {
   $$0$i58 = $$0$i56;
  } else {
   $22 = $$0$i56 & -65537;
   HEAP32[$vararg_buffer13>>2] = 36485;
   (_fprintf($0,36440,$vararg_buffer13)|0);
   $$0$i58 = $22;
  }
  $23 = $$0$i58 & 131072;
  $24 = ($23|0)==(0);
  if ($24) {
   $$0$i60 = $$0$i58;
  } else {
   $25 = $$0$i58 & -131073;
   HEAP32[$vararg_buffer16>>2] = 36498;
   (_fprintf($0,36440,$vararg_buffer16)|0);
   $$0$i60 = $25;
  }
  $26 = $$0$i60 & 15;
  $$off = (($26) + -3)|0;
  $switch = ($$off>>>0)<(2);
  $27 = $$0$i60 & 256;
  $28 = ($27|0)==(0);
  $or$cond = $28 | $switch;
  if ($or$cond) {
   $$048 = $$0$i60;
  } else {
   $29 = $$0$i60 & -257;
   HEAP32[$vararg_buffer19>>2] = 36508;
   (_fprintf($0,36440,$vararg_buffer19)|0);
   $$048 = $29;
  }
  $30 = $$048 & 128;
  $31 = ($30|0)==(0);
  if ($31) {
   $$0$i64 = $$048;
  } else {
   $32 = $$048 & -129;
   HEAP32[$vararg_buffer22>>2] = 36515;
   (_fprintf($0,36440,$vararg_buffer22)|0);
   $$0$i64 = $32;
  }
  $trunc = $$0$i64&255;
  $trunc$clear = $trunc & 15;
  do {
   switch ($trunc$clear<<24>>24) {
   case 12:  {
    label = 31;
    break L3;
    break;
   }
   case 13:  {
    label = 34;
    break L3;
    break;
   }
   case 1:  {
    (_fwrite(36524,4,1,$0)|0);
    break;
   }
   case 2:  {
    (_fwrite(36529,5,1,$0)|0);
    break;
   }
   case 3:  {
    (_fwrite(36535,3,1,$0)|0);
    break;
   }
   case 4:  {
    (_fwrite(36539,4,1,$0)|0);
    break;
   }
   case 5:  {
    (_fwrite(36544,9,1,$0)|0);
    break;
   }
   case 7:  {
    (_fwrite(36554,5,1,$0)|0);
    break;
   }
   case 8:  {
    (_fwrite(36560,6,1,$0)|0);
    break;
   }
   case 9:  {
    (_fwrite(36567,4,1,$0)|0);
    break;
   }
   case 10:  {
    $33 = ((($34)) + 4|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = ((($35)) + 48|0);
    HEAP32[$vararg_buffer25>>2] = $36;
    (_fprintf($0,36572,$vararg_buffer25)|0);
    break;
   }
   case 11:  {
    $37 = ((($34)) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($38)) + 48|0);
    HEAP32[$vararg_buffer28>>2] = $39;
    (_fprintf($0,36582,$vararg_buffer28)|0);
    break;
   }
   case 14:  {
    (_fwrite(36605,19,1,$0)|0);
    break;
   }
   default: {
    $45 = HEAP32[$34>>2]|0;
    HEAP32[$vararg_buffer34>>2] = $45;
    (_fprintf($0,36625,$vararg_buffer34)|0);
   }
   }
  } while(0);
  $46 = ((($34)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0);
  if ($48) {
   label = 38;
   break;
  } else {
   $34 = $46;$5 = $47;
  }
 }
 if ((label|0) == 31) {
  $40 = ((($34)) + 8|0);
  _PrintType($0,$40);
  $41 = ((($34)) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(-1);
  if ($43) {
   (_fwrite(36591,3,1,$0)|0);
   STACKTOP = sp;return;
  } else {
   HEAP32[$vararg_buffer31>>2] = $42;
   (_fprintf($0,36595,$vararg_buffer31)|0);
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 34) {
  $44 = ((($34)) + 8|0);
  _PrintType($0,$44);
  (_fwrite(36602,2,1,$0)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 38) {
  STACKTOP = sp;return;
 }
}
function _PrintFuncSig($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$$idx$val$i = 0, $$0$idx = 0, $$0$idx$val = 0, $$03142 = 0, $$043 = 0, $$043$in = 0, $$idx$val = 0, $$idx32$val = 0, $$idx32$val$pre = 0, $$idx33$val = 0, $$idx33$val$pre = 0, $$idx34$val = 0, $$idx34$val$pre = 0, $$lobit$i = 0, $$lobit$i38 = 0, $$lobit$i39 = 0, $$lobit$i40 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -260097;
 $5 = ($4|0)==(61);
 $6 = ((($2)) + 8|0);
 $$$i = $5 ? $6 : $2;
 $$$idx$val$i = HEAP32[$$$i>>2]|0;
 $7 = $$$idx$val$i & 112;
 $8 = ($7|0)==(80);
 if (!($8)) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,36645,36661,589);
  // unreachable;
 }
 $11 = ((($$$i)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($$$i)) + 8|0);
 _PrintType($0,$13);
 $$idx$val = HEAP32[$2>>2]|0;
 $$lobit$i = $$idx$val & 16384;
 $14 = ($$lobit$i|0)==(0);
 if ($14) {
  $$idx32$val = $$idx$val;
 } else {
  (_fwrite(36677,9,1,$0)|0);
  $$idx32$val$pre = HEAP32[$2>>2]|0;
  $$idx32$val = $$idx32$val$pre;
 }
 $$lobit$i38 = $$idx32$val & 32768;
 $15 = ($$lobit$i38|0)==(0);
 if ($15) {
  $$idx33$val = $$idx32$val;
 } else {
  (_fwrite(36687,8,1,$0)|0);
  $$idx33$val$pre = HEAP32[$2>>2]|0;
  $$idx33$val = $$idx33$val$pre;
 }
 $$lobit$i40 = $$idx33$val & 65536;
 $16 = ($$lobit$i40|0)==(0);
 if ($16) {
  $$idx34$val = $$idx33$val;
 } else {
  (_fwrite(36696,13,1,$0)|0);
  $$idx34$val$pre = HEAP32[$2>>2]|0;
  $$idx34$val = $$idx34$val$pre;
 }
 $$lobit$i39 = $$idx34$val & 131072;
 $17 = ($$lobit$i39|0)==(0);
 if (!($17)) {
  (_fwrite(36710,10,1,$0)|0);
 }
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($0,36721,$vararg_buffer)|0);
 $18 = HEAP32[$12>>2]|0;
 $19 = $18 & 2;
 $20 = ($19|0)==(0);
 if (!($20)) {
  (_fwrite(36567,4,1,$0)|0);
  (_fputc(41,$0)|0);
  STACKTOP = sp;return;
 }
 $21 = ((($12)) + 12|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  (_fputc(41,$0)|0);
  STACKTOP = sp;return;
 }
 $24 = ((($12)) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ((($25)) + 4|0);
 $$03142 = 0;$$043$in = $26;
 while(1) {
  $$043 = HEAP32[$$043$in>>2]|0;
  $27 = ($$03142|0)==(0);
  if (!($27)) {
   (_fwrite(36727,2,1,$0)|0);
  }
  $$0$idx = ((($$043)) + 20|0);
  $$0$idx$val = HEAP32[$$0$idx>>2]|0;
  $28 = $$0$idx$val & 16386;
  $29 = ($28|0)==(2);
  if ($29) {
   (_fwrite(36730,9,1,$0)|0);
  }
  $30 = ((($$043)) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  _PrintType($0,$31);
  $32 = ((($$043)) + 8|0);
  $33 = (($$03142) + 1)|0;
  $34 = HEAP32[$21>>2]|0;
  $35 = ($33>>>0)<($34>>>0);
  if ($35) {
   $$03142 = $33;$$043$in = $32;
  } else {
   break;
  }
 }
 (_fputc(41,$0)|0);
 STACKTOP = sp;return;
}
function _GetFuncDesc($0) {
 $0 = $0|0;
 var $$ = 0, $$$idx$val = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -260097;
 $3 = ($2|0)==(61);
 $4 = ((($0)) + 8|0);
 $$ = $3 ? $4 : $0;
 $$$idx$val = HEAP32[$$>>2]|0;
 $5 = $$$idx$val & 112;
 $6 = ($5|0)==(80);
 if ($6) {
  $9 = ((($$)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  return ($10|0);
 } else {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,36645,36661,589);
  // unreachable;
 }
 return (0)|0;
}
function _GetFuncReturn($0) {
 $0 = $0|0;
 var $$ = 0, $$$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -260097;
 $3 = ($2|0)==(61);
 $4 = ((($0)) + 8|0);
 $$ = $3 ? $4 : $0;
 $$$idx$val = HEAP32[$$>>2]|0;
 $5 = $$$idx$val & 112;
 $6 = ($5|0)==(80);
 if ($6) {
  $9 = ((($$)) + 8|0);
  return ($9|0);
 } else {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,36645,36661,623);
  // unreachable;
 }
 return (0)|0;
}
function _SizeOf($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -260097;
 do {
  switch ($2|0) {
  case 94: case 9:  {
   $$0 = 0;
   break;
  }
  case 145: case 273:  {
   $$0 = 1;
   break;
  }
  case 658: case 786:  {
   $$0 = 2;
   break;
  }
  case 147: case 275:  {
   $$0 = 2;
   break;
  }
  case 61:  {
   $$0 = 2;
   break;
  }
  case 1172: case 1300:  {
   $$0 = 4;
   break;
  }
  case 1685: case 1813:  {
   $$0 = 8;
   break;
  }
  case 278:  {
   $$0 = 2;
   break;
  }
  case 39:  {
   $3 = (_FP_F_Size()|0);
   $$0 = $3;
   break;
  }
  case 40:  {
   $4 = (_FP_D_Size()|0);
   $$0 = $4;
   break;
  }
  case 75: case 74:  {
   $5 = ((($0)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 40|0);
   $8 = HEAP32[$7>>2]|0;
   $$0 = $8;
   break;
  }
  case 60:  {
   $9 = ((($0)) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(-1);
   if ($11) {
    $$0 = 0;
   } else {
    $12 = ((($0)) + 8|0);
    $13 = (_SizeOf($12)|0);
    $14 = Math_imul($13, $10)|0;
    STACKTOP = sp;return ($14|0);
   }
   break;
  }
  default: {
   HEAP32[$vararg_buffer>>2] = $1;
   _Internal(36740,$vararg_buffer);
   // unreachable;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _CheckedSizeOf($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = (_SizeOf($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _Error(36785,$vararg_buffer);
  $$0 = 1;
 } else {
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _CheckedPSizeOf($0) {
 $0 = $0|0;
 var $$0 = 0, $$idx$val$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $$idx$val$i = HEAP32[$0>>2]|0;
 $1 = $$idx$val$i & 112;
 $2 = ($1|0)==(48);
 if (!($2)) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,36770,36661,457);
  // unreachable;
 }
 $5 = ((($0)) + 8|0);
 $6 = (_SizeOf($5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 _Error(36785,$vararg_buffer);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _TypeOf($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -260097;
 switch ($2|0) {
 case 273:  {
  $$0 = 3;
  break;
 }
 case 145:  {
  $$0 = 11;
  break;
 }
 case 278: case 275: case 786:  {
  $$0 = 1;
  break;
 }
 case 60: case 61: case 147: case 658:  {
  $$0 = 9;
  break;
 }
 case 1300:  {
  $$0 = 0;
  break;
 }
 case 1172:  {
  $$0 = 8;
  break;
 }
 case 40: case 39:  {
  $$0 = 4;
  break;
 }
 case 94:  {
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 << 6;
  $7 = $6 & 256;
  $8 = $7 ^ 256;
  $$0 = $8;
  break;
 }
 case 75: case 74:  {
  $$0 = 9;
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $1;
  _Error(36814,$vararg_buffer);
  $$0 = 1;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _Indirect($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $1 = $$idx$val & 112;
 $2 = ($1|0)==(48);
 if ($2) {
  $5 = ((($0)) + 8|0);
  return ($5|0);
 } else {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,36770,36661,552);
  // unreachable;
 }
 return (0)|0;
}
function _ArrayToPtr($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$idx$val$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val$i = HEAP32[$0>>2]|0;
 $1 = $$idx$val$i & 15;
 $2 = ($1|0)==(12);
 if (!($2)) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,36833,36661,656);
  // unreachable;
 }
 $5 = ((($0)) + 8|0);
 $$0$i$i = $5;
 while(1) {
  $6 = HEAP32[$$0$i$i>>2]|0;
  $7 = ($6|0)==(0);
  $8 = ((($$0$i$i)) + 8|0);
  if ($7) {
   break;
  } else {
   $$0$i$i = $8;
  }
 }
 $9 = $$0$i$i;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + 16)|0;
 $13 = $12 & -8;
 $14 = (_xmalloc($13)|0);
 $15 = HEAP32[$5>>2]|0;
 $16 = $15 & 49152;
 $17 = $16 | 61;
 HEAP32[$14>>2] = $17;
 $18 = ((($14)) + 8|0);
 $19 = (($11) + 8)|0;
 _memcpy(($18|0),($5|0),($19|0))|0;
 return ($14|0);
}
function _GetElementType($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $1 = $$idx$val & 15;
 $2 = ($1|0)==(12);
 if ($2) {
  $5 = ((($0)) + 8|0);
  return ($5|0);
 } else {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,36833,36661,656);
  // unreachable;
 }
 return (0)|0;
}
function _IsVariadicFunc($0) {
 $0 = $0|0;
 var $$$i = 0, $$$idx$val$i = 0, $$lobit = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -260097;
 $3 = ($2|0)==(61);
 $4 = ((($0)) + 8|0);
 $$$i = $3 ? $4 : $0;
 $$$idx$val$i = HEAP32[$$$i>>2]|0;
 $5 = $$$idx$val$i & 112;
 $6 = ($5|0)==(80);
 if ($6) {
  $9 = ((($$$i)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 >>> 2;
  $$lobit = $12 & 1;
  return ($$lobit|0);
 } else {
  $7 = HEAP32[3332]|0;
  $8 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$7 & 1]($8,36645,36661,589);
  // unreachable;
 }
 return (0)|0;
}
function _SetFuncDesc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$idx$val = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = $2 & -260097;
 $4 = ($3|0)==(61);
 $5 = ((($0)) + 8|0);
 $$ = $4 ? $5 : $0;
 $$$idx$val = HEAP32[$$>>2]|0;
 $6 = $$$idx$val & 112;
 $7 = ($6|0)==(80);
 if ($7) {
  $10 = ((($$)) + 4|0);
  HEAP32[$10>>2] = $1;
  return;
 } else {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,36645,36661,606);
  // unreachable;
 }
}
function _GetElementCount($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $1 = $$idx$val & 15;
 $2 = ($1|0)==(12);
 if ($2) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  return ($6|0);
 } else {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,36833,36661,636);
  // unreachable;
 }
 return (0)|0;
}
function _SetElementCount($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $2 = $$idx$val & 15;
 $3 = ($2|0)==(12);
 if ($3) {
  $6 = ((($0)) + 4|0);
  HEAP32[$6>>2] = $1;
  return;
 } else {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,36833,36661,647);
  // unreachable;
 }
}
function _GetBaseElementType($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $$0$idx$val = HEAP32[$$0>>2]|0;
  $1 = $$0$idx$val & 15;
  $2 = ($1|0)==(12);
  $3 = ((($$0)) + 8|0);
  if ($2) {
   $$0 = $3;
  } else {
   break;
  }
 }
 return ($$0|0);
}
function _GetSymEntry($0) {
 $0 = $0|0;
 var $$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $1 = $$idx$val & 112;
 $2 = ($1|0)==(64);
 if ($2) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  return ($6|0);
 } else {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,36849,36661,680);
  // unreachable;
 }
 return (0)|0;
}
function _SetSymEntry($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $2 = $$idx$val & 112;
 $3 = ($2|0)==(64);
 if ($3) {
  $6 = ((($0)) + 4|0);
  HEAP32[$6>>2] = $1;
  return;
 } else {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,36849,36661,692);
  // unreachable;
 }
}
function _IntPromotion($0) {
 $0 = $0|0;
 var $$ = 0, $$idx$val = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$val = HEAP32[$0>>2]|0;
 $1 = $$idx$val & 112;
 $2 = ($1|0)==(16);
 if ($2) {
  $5 = $$idx$val & 15;
  $6 = ($5|0)==(1);
  $$ = $6 ? 10940 : $0;
  return ($$|0);
 } else {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,36867,36661,706);
  // unreachable;
 }
 return (0)|0;
}
function _PtrConversion($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i$i = 0, $$0$i$i$lcssa = 0, $$idx4$val = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0;
 var $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx4$val = HEAP32[$0>>2]|0;
 $trunc = $$idx4$val&255;
 $trunc$clear = $trunc & 15;
 switch ($trunc$clear<<24>>24) {
 case 14:  {
  $1 = ($$idx4$val|0)==(0);
  if ($1) {
   $$0$i$i$lcssa = $0;
  } else {
   $$pn = $0;
   while(1) {
    $2 = ((($$pn)) + 8|0);
    $$pre = HEAP32[$2>>2]|0;
    $3 = ($$pre|0)==(0);
    if ($3) {
     $$0$i$i$lcssa = $2;
     break;
    } else {
     $$pn = $2;
    }
   }
  }
  $4 = $$0$i$i$lcssa;
  $5 = $0;
  $6 = (($4) - ($5))|0;
  $7 = (($6) + 16)|0;
  $8 = $7 & -8;
  $9 = (_xmalloc($8)|0);
  $10 = HEAP32[$0>>2]|0;
  $11 = $10 & 49152;
  $12 = $11 | 61;
  HEAP32[$9>>2] = $12;
  $13 = ((($9)) + 8|0);
  $14 = (($6) + 8)|0;
  _memcpy(($13|0),($0|0),($14|0))|0;
  $$0 = $9;
  return ($$0|0);
  break;
 }
 case 12:  {
  $15 = $$idx4$val & 15;
  $16 = ($15|0)==(12);
  if (!($16)) {
   $17 = HEAP32[3332]|0;
   $18 = HEAP32[3331]|0;
   FUNCTION_TABLE_viiii[$17 & 1]($18,36833,36661,656);
   // unreachable;
  }
  $19 = ((($0)) + 8|0);
  $$0$i$i$i = $19;
  while(1) {
   $20 = HEAP32[$$0$i$i$i>>2]|0;
   $21 = ($20|0)==(0);
   $22 = ((($$0$i$i$i)) + 8|0);
   if ($21) {
    break;
   } else {
    $$0$i$i$i = $22;
   }
  }
  $23 = $$0$i$i$i;
  $24 = $19;
  $25 = (($23) - ($24))|0;
  $26 = (($25) + 16)|0;
  $27 = $26 & -8;
  $28 = (_xmalloc($27)|0);
  $29 = HEAP32[$19>>2]|0;
  $30 = $29 & 49152;
  $31 = $30 | 61;
  HEAP32[$28>>2] = $31;
  $32 = ((($28)) + 8|0);
  $33 = (($25) + 8)|0;
  _memcpy(($32|0),($19|0),($33|0))|0;
  $$0 = $28;
  return ($$0|0);
  break;
 }
 default: {
  $$0 = $0;
  return ($$0|0);
 }
 }
 return (0)|0;
}
function _AddrSizeQualifier($0) {
 $0 = $0|0;
 var $$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 switch ($0|0) {
 case 2:  {
  $$0 = 16384;
  break;
 }
 case 3:  {
  $$0 = 32768;
  break;
 }
 default: {
  _Error(36419,$vararg_buffer);
  $$0 = 16384;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _RC_Invalidate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP16[$0>>1]=65535|0;HEAP16[$0+2>>1]=65535|0;HEAP16[$0+4>>1]=65535|0;HEAP16[$0+6>>1]=65535|0;HEAP16[$0+8>>1]=65535|0;HEAP16[$0+10>>1]=65535|0;HEAP16[$0+12>>1]=65535|0;HEAP16[$0+14>>1]=65535|0;
 return;
}
function _RC_InvalidateZP($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 6|0);
 ;HEAP16[$1>>1]=65535|0;HEAP16[$1+2>>1]=65535|0;HEAP16[$1+4>>1]=65535|0;HEAP16[$1+6>>1]=65535|0;HEAP16[$1+8>>1]=65535|0;
 return;
}
function _NewRegInfo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = (_xmalloc(48)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  dest=$1; stop=dest+48|0; do { HEAP16[dest>>1]=65535|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  return ($1|0);
 } else {
  ;HEAP16[$1>>1]=HEAP16[$0>>1]|0;HEAP16[$1+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[$1+4>>1]=HEAP16[$0+4>>1]|0;HEAP16[$1+6>>1]=HEAP16[$0+6>>1]|0;HEAP16[$1+8>>1]=HEAP16[$0+8>>1]|0;HEAP16[$1+10>>1]=HEAP16[$0+10>>1]|0;HEAP16[$1+12>>1]=HEAP16[$0+12>>1]|0;HEAP16[$1+14>>1]=HEAP16[$0+14>>1]|0;
  $3 = ((($1)) + 16|0);
  ;HEAP16[$3>>1]=HEAP16[$0>>1]|0;HEAP16[$3+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[$3+4>>1]=HEAP16[$0+4>>1]|0;HEAP16[$3+6>>1]=HEAP16[$0+6>>1]|0;HEAP16[$3+8>>1]=HEAP16[$0+8>>1]|0;HEAP16[$3+10>>1]=HEAP16[$0+10>>1]|0;HEAP16[$3+12>>1]=HEAP16[$0+12>>1]|0;HEAP16[$3+14>>1]=HEAP16[$0+14>>1]|0;
  $4 = ((($1)) + 32|0);
  ;HEAP16[$4>>1]=HEAP16[$0>>1]|0;HEAP16[$4+2>>1]=HEAP16[$0+2>>1]|0;HEAP16[$4+4>>1]=HEAP16[$0+4>>1]|0;HEAP16[$4+6>>1]=HEAP16[$0+6>>1]|0;HEAP16[$4+8>>1]=HEAP16[$0+8>>1]|0;HEAP16[$4+10>>1]=HEAP16[$0+10>>1]|0;HEAP16[$4+12>>1]=HEAP16[$0+12>>1]|0;HEAP16[$4+14>>1]=HEAP16[$0+14>>1]|0;
  return ($1|0);
 }
 return (0)|0;
}
function _FreeRegInfo($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _xfree($0);
 return;
}
function _OptStore1($0) {
 $0 = $0|0;
 var $$015$lcssa = 0, $$01519 = 0, $$020 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i18 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i18 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i18|0)==(0);
 if ($2) {
  $$015$lcssa = 0;
  STACKTOP = sp;return ($$015$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $$01519 = 0;$$020 = 0;$7 = $$idx$val$i18;
 while(1) {
  $8 = ($7>>>0)>($$020>>>0);
  if (!($8)) {
   label = 4;
   break;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($$020<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(42);
  if ($15) {
   $16 = (_CE_IsConstImm($13)|0);
   $17 = ($16|0)==(0);
   if ($17) {
    $$1 = $$01519;
   } else {
    $18 = HEAP32[$1>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20>>>0)<(255);
    if ($21) {
     $22 = (($$020) + 1)|0;
     $23 = (_CS_RangeHasLabel($0,$22,3)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $25 = (_CS_GetEntries($0,$4,$22,3)|0);
      $26 = ($25|0)==(0);
      if ($26) {
       $$1 = $$01519;
      } else {
       $27 = HEAP32[$4>>2]|0;
       $28 = HEAP8[$27>>0]|0;
       $29 = ($28<<24>>24)==(37);
       if ($29) {
        $30 = ((($27)) + 4|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = (_strcmp($31,36882)|0);
        $33 = ($32|0)==(0);
        if ($33) {
         $34 = HEAP32[$5>>2]|0;
         $35 = HEAP8[$34>>0]|0;
         $36 = ($35<<24>>24)==(42);
         if ($36) {
          $37 = HEAP32[$1>>2]|0;
          $38 = ((($37)) + 8|0);
          $39 = HEAP32[$38>>2]|0;
          $40 = (($39) + 1)|0;
          $41 = (_CE_IsKnownImm($34,$40)|0);
          $42 = ($41|0)==(0);
          if ($42) {
           $$1 = $$01519;
          } else {
           $43 = HEAP32[$6>>2]|0;
           $44 = HEAP8[$43>>0]|0;
           $45 = ($44<<24>>24)==(37);
           if ($45) {
            $46 = ((($43)) + 4|0);
            $47 = HEAP32[$46>>2]|0;
            $48 = (_strcmp($47,36890)|0);
            $49 = ($48|0)==(0);
            if ($49) {
             $50 = (($$01519) + 1)|0;
             $51 = (($$020) + 2)|0;
             _CS_DelEntries($0,$51,2);
             $$1 = $50;
            } else {
             $$1 = $$01519;
            }
           } else {
            $$1 = $$01519;
           }
          }
         } else {
          $$1 = $$01519;
         }
        } else {
         $$1 = $$01519;
        }
       } else {
        $$1 = $$01519;
       }
      }
     } else {
      $$1 = $$01519;
     }
    } else {
     $$1 = $$01519;
    }
   }
  } else {
   $$1 = $$01519;
  }
  $52 = (($$020) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $53 = ($52>>>0)<($$idx$val$i>>>0);
  if ($53) {
   $$01519 = $$1;$$020 = $52;$7 = $$idx$val$i;
  } else {
   $$015$lcssa = $$1;
   label = 18;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 18) {
  STACKTOP = sp;return ($$015$lcssa|0);
 }
 return (0)|0;
}
function _OptStore2($0) {
 $0 = $0|0;
 var $$046$lcssa = 0, $$04658 = 0, $$056 = 0, $$059 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i57 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i57 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i57|0)==(0);
 if ($1) {
  $$046$lcssa = 0;
  return ($$046$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$04658 = 0;$$059 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$059<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP8[$5>>0]|0;
  $9 = ($8<<24>>24)==(37);
  if ($9) {
   $10 = ((($5)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_strcmp($11,36882)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = HEAP16[$7>>1]|0;
    $15 = ($14<<16>>16)<(0);
    if ($15) {
     $$1 = $$04658;
    } else {
     $16 = ((($7)) + 2|0);
     $17 = HEAP16[$16>>1]|0;
     $18 = ($17<<16>>16)<(0);
     if ($18) {
      $$1 = $$04658;
     } else {
      $19 = ((($7)) + 4|0);
      $20 = HEAP16[$19>>1]|0;
      $21 = ($20<<16>>16)<(0);
      if ($21) {
       $$1 = $$04658;
      } else {
       $22 = (($$059) + 1)|0;
       $23 = (_RegAXUsed($0,$22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $25 = HEAP16[$7>>1]|0;
        $26 = $25&65535;
        $27 = HEAP16[$16>>1]|0;
        $28 = $27&65535;
        $29 = HEAP16[$19>>1]|0;
        $30 = $29&65535;
        $31 = $26 & 255;
        $32 = (_MakeHexArg($31)|0);
        $33 = ((($5)) + 36|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = (_NewCodeEntry(40,2,$32,0,$34)|0);
        $36 = (($$059) + 2)|0;
        _CS_InsertEntry($0,$35,$22);
        $37 = HEAP32[$33>>2]|0;
        $38 = (_NewCodeEntry(62,10,36898,0,$37)|0);
        $39 = (($$059) + 3)|0;
        _CS_InsertEntry($0,$38,$36);
        $40 = $28 & 255;
        $41 = ($31|0)==($40|0);
        if ($41) {
         $$056 = $39;
        } else {
         $42 = (($$059) + 4)|0;
         $43 = (_MakeHexArg($40)|0);
         $44 = HEAP32[$33>>2]|0;
         $45 = (_NewCodeEntry(40,2,$43,0,$44)|0);
         _CS_InsertEntry($0,$45,$39);
         $$056 = $42;
        }
        $46 = $30 & 255;
        $47 = (($46) + 1)|0;
        $48 = (_MakeHexArg($47)|0);
        $49 = HEAP32[$33>>2]|0;
        $50 = (_NewCodeEntry(42,2,$48,0,$49)|0);
        $51 = (($$056) + 1)|0;
        _CS_InsertEntry($0,$50,$$056);
        $52 = HEAP32[$33>>2]|0;
        $53 = (_NewCodeEntry(62,10,36898,0,$52)|0);
        _CS_InsertEntry($0,$53,$51);
        _CS_DelEntry($0,$$059);
        $54 = (($$04658) + 1)|0;
        $$1 = $54;
       } else {
        $$1 = $$04658;
       }
      }
     }
    }
   } else {
    $$1 = $$04658;
   }
  } else {
   $$1 = $$04658;
  }
  $55 = (($$059) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $56 = ($55>>>0)<($$idx$val$i>>>0);
  if ($56) {
   $$04658 = $$1;$$059 = $55;
  } else {
   $$046$lcssa = $$1;
   break;
  }
 }
 return ($$046$lcssa|0);
}
function _OptStore3($0) {
 $0 = $0|0;
 var $$0 = 0, $$0137193 = 0, $$0138$lcssa = 0, $$0138192 = 0, $$0183 = 0, $$1 = 0, $$1139 = 0, $$1184 = 0, $$2 = 0, $$2185 = 0, $$3 = 0, $$3186 = 0, $$4 = 0, $$4187 = 0, $$5 = 0, $$5188 = 0, $$6 = 0, $$6189 = 0, $$7 = 0, $$7190 = 0;
 var $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i191 = 0, $$mask = 0, $$mask140 = 0, $$mask141 = 0, $$mask142 = 0, $$mask143 = 0, $$mask144 = 0, $$mask145 = 0, $$mask146 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond149 = 0, $or$cond151 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i191 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i191|0)==(0);
 if ($1) {
  $$0138$lcssa = 0;
  return ($$0138$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$0137193 = 0;$$0138192 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$0137193<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP8[$5>>0]|0;
  $9 = ($8<<24>>24)==(37);
  if ($9) {
   $10 = ((($5)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (_strcmp($11,36901)|0);
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = HEAP16[$7>>1]|0;
    $15 = ($14<<16>>16)<(0);
    if ($15) {
     $$1139 = $$0138192;
    } else {
     $16 = ((($7)) + 2|0);
     $17 = HEAP16[$16>>1]|0;
     $18 = ($17<<16>>16)<(0);
     if ($18) {
      $$1139 = $$0138192;
     } else {
      $19 = ((($7)) + 4|0);
      $20 = HEAP16[$19>>1]|0;
      $21 = ($20<<16>>16)<(0);
      if ($21) {
       $$1139 = $$0138192;
      } else {
       $22 = ((($7)) + 6|0);
       $23 = HEAP16[$22>>1]|0;
       $24 = ($23<<16>>16)<(0);
       if ($24) {
        $$1139 = $$0138192;
       } else {
        $25 = ((($7)) + 8|0);
        $26 = HEAP16[$25>>1]|0;
        $27 = ($26<<16>>16)<(0);
        if ($27) {
         $$1139 = $$0138192;
        } else {
         $28 = (($$0137193) + 1)|0;
         $29 = (_RegEAXUsed($0,$28)|0);
         $30 = ($29|0)==(0);
         if ($30) {
          $31 = HEAP16[$7>>1]|0;
          $32 = $31&65535;
          $33 = HEAP16[$16>>1]|0;
          $34 = $33&65535;
          $35 = HEAP16[$19>>1]|0;
          $36 = HEAP16[$22>>1]|0;
          $37 = $36&65535;
          $38 = HEAP16[$25>>1]|0;
          $39 = $38&65535;
          $40 = $32 & 255;
          $41 = (_MakeHexArg($40)|0);
          $42 = ((($5)) + 36|0);
          $43 = HEAP32[$42>>2]|0;
          $44 = (_NewCodeEntry(40,2,$41,0,$43)|0);
          $45 = (($$0137193) + 2)|0;
          _CS_InsertEntry($0,$44,$28);
          $46 = HEAP32[$42>>2]|0;
          $47 = (_NewCodeEntry(62,10,36898,0,$46)|0);
          $48 = (($$0137193) + 3)|0;
          _CS_InsertEntry($0,$47,$45);
          $49 = $34 & 255;
          $50 = ($40|0)==($49|0);
          if ($50) {
           $51 = $35&65535;
           $52 = $51 & 255;
           $53 = (($52) + 1)|0;
           $54 = (_MakeHexArg($53)|0);
           $55 = HEAP32[$42>>2]|0;
           $56 = (_NewCodeEntry(42,2,$54,0,$55)|0);
           $57 = (($$0137193) + 4)|0;
           _CS_InsertEntry($0,$56,$48);
           $58 = HEAP32[$42>>2]|0;
           $59 = (_NewCodeEntry(62,10,36898,0,$58)|0);
           $60 = (($$0137193) + 5)|0;
           _CS_InsertEntry($0,$59,$57);
           $$0 = 3;$$0183 = $60;
          } else {
           $$0 = 1;$$0183 = $48;
          }
          $61 = $37 & 255;
          $62 = ($40|0)==($61|0);
          if ($62) {
           $$mask146 = $35 & 255;
           $63 = $$mask146&65535;
           $64 = (($63) + 2)|0;
           $65 = (_MakeHexArg($64)|0);
           $66 = HEAP32[$42>>2]|0;
           $67 = (_NewCodeEntry(42,2,$65,0,$66)|0);
           $68 = (($$0183) + 1)|0;
           _CS_InsertEntry($0,$67,$$0183);
           $69 = HEAP32[$42>>2]|0;
           $70 = (_NewCodeEntry(62,10,36898,0,$69)|0);
           $71 = (($$0183) + 2)|0;
           _CS_InsertEntry($0,$70,$68);
           $72 = $$0 | 4;
           $$1 = $72;$$1184 = $71;
          } else {
           $$1 = $$0;$$1184 = $$0183;
          }
          $73 = $39 & 255;
          $74 = ($40|0)==($73|0);
          if ($74) {
           $$mask145 = $35 & 255;
           $75 = $$mask145&65535;
           $76 = (($75) + 3)|0;
           $77 = (_MakeHexArg($76)|0);
           $78 = HEAP32[$42>>2]|0;
           $79 = (_NewCodeEntry(42,2,$77,0,$78)|0);
           $80 = (($$1184) + 1)|0;
           _CS_InsertEntry($0,$79,$$1184);
           $81 = HEAP32[$42>>2]|0;
           $82 = (_NewCodeEntry(62,10,36898,0,$81)|0);
           $83 = (($$1184) + 2)|0;
           _CS_InsertEntry($0,$82,$80);
           $84 = $$1 | 8;
           $$2 = $84;$$2185 = $83;
          } else {
           $$2 = $$1;$$2185 = $$1184;
          }
          $85 = $$2 & 2;
          $86 = ($85|0)==(0);
          if ($86) {
           $87 = (_MakeHexArg($49)|0);
           $88 = HEAP32[$42>>2]|0;
           $89 = (_NewCodeEntry(40,2,$87,0,$88)|0);
           $90 = (($$2185) + 1)|0;
           _CS_InsertEntry($0,$89,$$2185);
           $$mask144 = $35 & 255;
           $91 = $$mask144&65535;
           $92 = (($91) + 1)|0;
           $93 = (_MakeHexArg($92)|0);
           $94 = HEAP32[$42>>2]|0;
           $95 = (_NewCodeEntry(42,2,$93,0,$94)|0);
           $96 = (($$2185) + 2)|0;
           _CS_InsertEntry($0,$95,$90);
           $97 = HEAP32[$42>>2]|0;
           $98 = (_NewCodeEntry(62,10,36898,0,$97)|0);
           $99 = (($$2185) + 3)|0;
           _CS_InsertEntry($0,$98,$96);
           $100 = $$2 | 2;
           $$3 = $100;$$3186 = $99;
          } else {
           $$3 = $$2;$$3186 = $$2185;
          }
          $101 = ($49|0)==($61|0);
          $102 = $$3 & 4;
          $103 = ($102|0)==(0);
          $or$cond = $101 & $103;
          if ($or$cond) {
           $$mask143 = $35 & 255;
           $104 = $$mask143&65535;
           $105 = (($104) + 2)|0;
           $106 = (_MakeHexArg($105)|0);
           $107 = HEAP32[$42>>2]|0;
           $108 = (_NewCodeEntry(42,2,$106,0,$107)|0);
           $109 = (($$3186) + 1)|0;
           _CS_InsertEntry($0,$108,$$3186);
           $110 = HEAP32[$42>>2]|0;
           $111 = (_NewCodeEntry(62,10,36898,0,$110)|0);
           $112 = (($$3186) + 2)|0;
           _CS_InsertEntry($0,$111,$109);
           $113 = $$3 | 4;
           $$4 = $113;$$4187 = $112;
          } else {
           $$4 = $$3;$$4187 = $$3186;
          }
          $114 = ($49|0)==($73|0);
          $115 = $$4 & 8;
          $116 = ($115|0)==(0);
          $or$cond149 = $114 & $116;
          if ($or$cond149) {
           $$mask142 = $35 & 255;
           $117 = $$mask142&65535;
           $118 = (($117) + 3)|0;
           $119 = (_MakeHexArg($118)|0);
           $120 = HEAP32[$42>>2]|0;
           $121 = (_NewCodeEntry(42,2,$119,0,$120)|0);
           $122 = (($$4187) + 1)|0;
           _CS_InsertEntry($0,$121,$$4187);
           $123 = HEAP32[$42>>2]|0;
           $124 = (_NewCodeEntry(62,10,36898,0,$123)|0);
           $125 = (($$4187) + 2)|0;
           _CS_InsertEntry($0,$124,$122);
           $126 = $$4 | 8;
           $$5 = $126;$$5188 = $125;
          } else {
           $$5 = $$4;$$5188 = $$4187;
          }
          $127 = $$5 & 4;
          $128 = ($127|0)==(0);
          if ($128) {
           $129 = (_MakeHexArg($61)|0);
           $130 = HEAP32[$42>>2]|0;
           $131 = (_NewCodeEntry(40,2,$129,0,$130)|0);
           $132 = (($$5188) + 1)|0;
           _CS_InsertEntry($0,$131,$$5188);
           $$mask141 = $35 & 255;
           $133 = $$mask141&65535;
           $134 = (($133) + 2)|0;
           $135 = (_MakeHexArg($134)|0);
           $136 = HEAP32[$42>>2]|0;
           $137 = (_NewCodeEntry(42,2,$135,0,$136)|0);
           $138 = (($$5188) + 2)|0;
           _CS_InsertEntry($0,$137,$132);
           $139 = HEAP32[$42>>2]|0;
           $140 = (_NewCodeEntry(62,10,36898,0,$139)|0);
           $141 = (($$5188) + 3)|0;
           _CS_InsertEntry($0,$140,$138);
           $142 = $$5 | 4;
           $$6 = $142;$$6189 = $141;
          } else {
           $$6 = $$5;$$6189 = $$5188;
          }
          $143 = ($61|0)==($73|0);
          $144 = $$6 & 8;
          $145 = ($144|0)==(0);
          $or$cond151 = $143 & $145;
          if ($or$cond151) {
           $$mask140 = $35 & 255;
           $146 = $$mask140&65535;
           $147 = (($146) + 3)|0;
           $148 = (_MakeHexArg($147)|0);
           $149 = HEAP32[$42>>2]|0;
           $150 = (_NewCodeEntry(42,2,$148,0,$149)|0);
           $151 = (($$6189) + 1)|0;
           _CS_InsertEntry($0,$150,$$6189);
           $152 = HEAP32[$42>>2]|0;
           $153 = (_NewCodeEntry(62,10,36898,0,$152)|0);
           $154 = (($$6189) + 2)|0;
           _CS_InsertEntry($0,$153,$151);
           $155 = $$6 | 8;
           $$7 = $155;$$7190 = $154;
          } else {
           $$7 = $$6;$$7190 = $$6189;
          }
          $156 = $$7 & 8;
          $157 = ($156|0)==(0);
          if ($157) {
           $158 = (_MakeHexArg($73)|0);
           $159 = HEAP32[$42>>2]|0;
           $160 = (_NewCodeEntry(40,2,$158,0,$159)|0);
           $161 = (($$7190) + 1)|0;
           _CS_InsertEntry($0,$160,$$7190);
           $$mask = $35 & 255;
           $162 = $$mask&65535;
           $163 = (($162) + 3)|0;
           $164 = (_MakeHexArg($163)|0);
           $165 = HEAP32[$42>>2]|0;
           $166 = (_NewCodeEntry(42,2,$164,0,$165)|0);
           $167 = (($$7190) + 2)|0;
           _CS_InsertEntry($0,$166,$161);
           $168 = HEAP32[$42>>2]|0;
           $169 = (_NewCodeEntry(62,10,36898,0,$168)|0);
           _CS_InsertEntry($0,$169,$167);
          }
          _CS_DelEntry($0,$$0137193);
          $170 = (($$0138192) + 1)|0;
          $$1139 = $170;
         } else {
          $$1139 = $$0138192;
         }
        }
       }
      }
     }
    }
   } else {
    $$1139 = $$0138192;
   }
  } else {
   $$1139 = $$0138192;
  }
  $171 = (($$0137193) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $172 = ($171>>>0)<($$idx$val$i>>>0);
  if ($172) {
   $$0137193 = $171;$$0138192 = $$1139;
  } else {
   $$0138$lcssa = $$1139;
   break;
  }
 }
 return ($$0138$lcssa|0);
}
function _OptStore4($0) {
 $0 = $0|0;
 var $$015$lcssa = 0, $$01518 = 0, $$019 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i17 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i17 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i17|0)==(0);
 if ($2) {
  $$015$lcssa = 0;
  STACKTOP = sp;return ($$015$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $7 = ((($1)) + 16|0);
 $$01518 = 0;$$019 = 0;$8 = $$idx$val$i17;
 while(1) {
  $9 = ($8>>>0)>($$019>>>0);
  if (!($9)) {
   label = 4;
   break;
  }
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($$019<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$1>>2] = $14;
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&255;
  $17 = ($16<<24>>24)==(62);
  L7: do {
   if ($17) {
    $18 = ($15&65535) >>> 8;
    $19 = $18&255;
    switch ($19<<24>>24) {
    case 3: case 6:  {
     break;
    }
    default: {
     $$1 = $$01518;
     break L7;
    }
    }
    $20 = (($$019) + 1)|0;
    $21 = (_CS_RangeHasLabel($0,$20,3)|0);
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = (_CS_GetEntries($0,$4,$20,4)|0);
     $24 = ($23|0)==(0);
     if ($24) {
      $$1 = $$01518;
     } else {
      $25 = HEAP32[$4>>2]|0;
      $26 = HEAP16[$25>>1]|0;
      $27 = $26&255;
      $28 = ($27<<24>>24)==(63);
      $29 = ($26&65535) >>> 8;
      $30 = $29&255;
      if ($28) {
       $31 = HEAP32[$1>>2]|0;
       $32 = ((($31)) + 1|0);
       $33 = HEAP8[$32>>0]|0;
       $34 = ($30<<24>>24)==($33<<24>>24);
       if ($34) {
        $35 = HEAP32[$5>>2]|0;
        $36 = HEAP16[$35>>1]|0;
        $37 = $36&255;
        $38 = ($37<<24>>24)==(40);
        if ($38) {
         $39 = ($36&65535) >>> 8;
         $40 = $39&255;
         $41 = ($40<<24>>24)==($30<<24>>24);
         if ($41) {
          $42 = HEAP32[$6>>2]|0;
          $43 = HEAP16[$42>>1]|0;
          $44 = $43&255;
          $45 = ($44<<24>>24)==(41);
          if ($45) {
           $46 = ($43&65535) >>> 8;
           $47 = $46&255;
           $48 = ($47<<24>>24)==($30<<24>>24);
           if ($48) {
            $49 = ((($31)) + 4|0);
            $50 = HEAP32[$49>>2]|0;
            $51 = ((($35)) + 4|0);
            $52 = HEAP32[$51>>2]|0;
            $53 = (_strcmp($50,$52)|0);
            $54 = ($53|0)==(0);
            if ($54) {
             $55 = ((($25)) + 4|0);
             $56 = HEAP32[$55>>2]|0;
             $57 = ((($42)) + 4|0);
             $58 = HEAP32[$57>>2]|0;
             $59 = (_strcmp($56,$58)|0);
             $60 = ($59|0)==(0);
             if ($60) {
              $61 = HEAP32[$7>>2]|0;
              $62 = (_CE_UseLoadFlags($61)|0);
              $63 = ($62|0)==(0);
              if ($63) {
               $64 = (($$01518) + 1)|0;
               $65 = (($$019) + 2)|0;
               _CS_DelEntries($0,$65,2);
               $$1 = $64;
              } else {
               $$1 = $$01518;
              }
             } else {
              $$1 = $$01518;
             }
            } else {
             $$1 = $$01518;
            }
           } else {
            $$1 = $$01518;
           }
          } else {
           $$1 = $$01518;
          }
         } else {
          $$1 = $$01518;
         }
        } else {
         $$1 = $$01518;
        }
       } else {
        $$1 = $$01518;
       }
      } else {
       $$1 = $$01518;
      }
     }
    } else {
     $$1 = $$01518;
    }
   } else {
    $$1 = $$01518;
   }
  } while(0);
  $66 = (($$019) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $67 = ($66>>>0)<($$idx$val$i>>>0);
  if ($67) {
   $$01518 = $$1;$$019 = $66;$8 = $$idx$val$i;
  } else {
   $$015$lcssa = $$1;
   label = 20;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = HEAP32[3332]|0;
  $11 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$10 & 1]($11,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return ($$015$lcssa|0);
 }
 return (0)|0;
}
function _OptStore5($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02730 = 0, $$031 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i29 = HEAP32[$$idx$i>>2]|0;
 $2 = ($$idx$val$i29|0)==(0);
 if ($2) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = ((($1)) + 4|0);
 $5 = ((($1)) + 8|0);
 $6 = ((($1)) + 12|0);
 $$02730 = 0;$$031 = 0;$7 = $$idx$val$i29;
 while(1) {
  $8 = ($7>>>0)>($$02730>>>0);
  if (!($8)) {
   label = 4;
   break;
  }
  $11 = HEAP32[$3>>2]|0;
  $12 = (($11) + ($$02730<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(40);
  $16 = (($$02730) + 1)|0;
  if ($15) {
   $17 = (_CS_RangeHasLabel($0,$16,3)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = (_CS_GetEntries($0,$4,$16,3)|0);
    $20 = ($19|0)==(0);
    if ($20) {
     $$1 = $$031;
    } else {
     $21 = HEAP32[$4>>2]|0;
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(41);
     if ($23) {
      $24 = HEAP32[$5>>2]|0;
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(62);
      if ($26) {
       $27 = HEAP32[$6>>2]|0;
       $28 = HEAP8[$27>>0]|0;
       $29 = ($28<<24>>24)==(63);
       if ($29) {
        $30 = (($$02730) + 4)|0;
        $31 = (_RegXUsed($0,$30)|0);
        $32 = ($31|0)==(0);
        if ($32) {
         $33 = HEAP32[$4>>2]|0;
         $34 = ((($33)) + 1|0);
         $35 = HEAP8[$34>>0]|0;
         $36 = $35&255;
         $37 = ((($33)) + 4|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = ((($33)) + 36|0);
         $40 = HEAP32[$39>>2]|0;
         $41 = (_NewCodeEntry(40,$36,$38,0,$40)|0);
         _CS_InsertEntry($0,$41,$30);
         $42 = HEAP32[$6>>2]|0;
         $43 = ((($42)) + 1|0);
         $44 = HEAP8[$43>>0]|0;
         $45 = $44&255;
         $46 = ((($42)) + 4|0);
         $47 = HEAP32[$46>>2]|0;
         $48 = ((($42)) + 36|0);
         $49 = HEAP32[$48>>2]|0;
         $50 = (_NewCodeEntry(62,$45,$47,0,$49)|0);
         $51 = (($$02730) + 5)|0;
         _CS_InsertEntry($0,$50,$51);
         $52 = (($$02730) + 3)|0;
         _CS_DelEntry($0,$52);
         _CS_DelEntry($0,$16);
         $53 = (($$031) + 1)|0;
         $$1 = $53;
        } else {
         $$1 = $$031;
        }
       } else {
        $$1 = $$031;
       }
      } else {
       $$1 = $$031;
      }
     } else {
      $$1 = $$031;
     }
    }
   } else {
    $$1 = $$031;
   }
  } else {
   $$1 = $$031;
  }
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $54 = ($16>>>0)<($$idx$val$i>>>0);
  if ($54) {
   $$02730 = $16;$$031 = $$1;$7 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   label = 14;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _Opt65C02Ind($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02325 = 0, $$026 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i24 = 0, $$idx$val$i27 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i24 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i24|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02325 = 0;$$026 = 0;$$idx$val$i27 = $$idx$val$i24;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02325<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(10);
  if ($8) {
   $9 = ((($5)) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 4|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(0);
   if ($13) {
    $14 = HEAP8[$5>>0]|0;
    $15 = $14&255;
    $16 = ((($5)) + 4|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ((($5)) + 36|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_NewCodeEntry($15,11,$17,0,$19)|0);
    $21 = (($$02325) + 1)|0;
    _CS_InsertEntry($0,$20,$21);
    _CS_DelEntry($0,$$02325);
    $22 = (($$026) + 1)|0;
    $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
    $$1 = $22;$$idx$val$i = $$idx$val$i$pre;
   } else {
    $$1 = $$026;$$idx$val$i = $$idx$val$i27;
   }
  } else {
   $$1 = $$026;$$idx$val$i = $$idx$val$i27;
  }
  $23 = (($$02325) + 1)|0;
  $24 = ($23>>>0)<($$idx$val$i>>>0);
  if ($24) {
   $$02325 = $23;$$026 = $$1;$$idx$val$i27 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _Opt65C02BitOps($0) {
 $0 = $0|0;
 var $$031$lcssa = 0, $$03134 = 0, $$035 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i33 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 12|0;
 $2 = sp + 24|0;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i33 = HEAP32[$$idx$i>>2]|0;
 $3 = ($$idx$val$i33|0)==(0);
 if ($3) {
  $$031$lcssa = 0;
  STACKTOP = sp;return ($$031$lcssa|0);
 }
 $4 = ((($0)) + 16|0);
 $5 = ((($1)) + 4|0);
 $6 = ((($1)) + 8|0);
 $$03134 = 0;$$035 = 0;$7 = $$idx$val$i33;
 while(1) {
  $8 = ($7>>>0)>($$035>>>0);
  if (!($8)) {
   label = 4;
   break;
  }
  $11 = HEAP32[$4>>2]|0;
  $12 = (($11) + ($$035<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP16[$13>>1]|0;
  $15 = $14&255;
  $16 = ($15<<24>>24)==(40);
  L7: do {
   if ($16) {
    $17 = ($14&65535) >>> 8;
    $18 = $17&255;
    switch ($18<<24>>24) {
    case 6: case 3:  {
     break;
    }
    default: {
     $$1 = $$03134;
     break L7;
    }
    }
    $19 = (($$035) + 1)|0;
    $20 = (_CS_RangeHasLabel($0,$19,2)|0);
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = (_CS_GetEntries($0,$5,$19,2)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$1 = $$03134;
     } else {
      $24 = HEAP32[$5>>2]|0;
      $25 = HEAP8[$24>>0]|0;
      switch ($25<<24>>24) {
      case 45: case 1:  {
       break;
      }
      default: {
       $$1 = $$03134;
       break L7;
      }
      }
      $26 = (_CE_IsConstImm($24)|0);
      $27 = ($26|0)==(0);
      if ($27) {
       $$1 = $$03134;
      } else {
       $28 = HEAP32[$6>>2]|0;
       $29 = HEAP16[$28>>1]|0;
       $30 = $29&255;
       $31 = ($30<<24>>24)==(62);
       if ($31) {
        $32 = ($29&65535) >>> 8;
        $33 = $32&255;
        $34 = HEAP32[$1>>2]|0;
        $35 = ((($34)) + 1|0);
        $36 = HEAP8[$35>>0]|0;
        $37 = ($33<<24>>24)==($36<<24>>24);
        if ($37) {
         $38 = ((($28)) + 4|0);
         $39 = HEAP32[$38>>2]|0;
         $40 = ((($34)) + 4|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = (_strcmp($39,$41)|0);
         $43 = ($42|0)==(0);
         if ($43) {
          $44 = (($$035) + 3)|0;
          $45 = (_RegAUsed($0,$44)|0);
          $46 = ($45|0)==(0);
          if ($46) {
           $47 = HEAP32[$5>>2]|0;
           $48 = HEAP8[$47>>0]|0;
           $49 = ($48<<24>>24)==(1);
           $50 = ((($47)) + 8|0);
           $51 = HEAP32[$50>>2]|0;
           if ($49) {
            $52 = $51 & 255;
            $53 = $52 ^ 255;
            HEAP32[$vararg_buffer>>2] = $53;
            (_sprintf($2,36910,$vararg_buffer)|0);
            $54 = HEAP32[$5>>2]|0;
            $55 = ((($54)) + 36|0);
            $56 = HEAP32[$55>>2]|0;
            $57 = (_NewCodeEntry(40,2,$2,0,$56)|0);
            _CS_InsertEntry($0,$57,$44);
            $58 = HEAP32[$1>>2]|0;
            $59 = ((($58)) + 1|0);
            $60 = HEAP8[$59>>0]|0;
            $61 = $60&255;
            $62 = ((($58)) + 4|0);
            $63 = HEAP32[$62>>2]|0;
            $64 = ((($58)) + 36|0);
            $65 = HEAP32[$64>>2]|0;
            $66 = (_NewCodeEntry(68,$61,$63,0,$65)|0);
            $67 = (($$035) + 4)|0;
            _CS_InsertEntry($0,$66,$67);
           } else {
            HEAP32[$vararg_buffer1>>2] = $51;
            (_sprintf($2,36910,$vararg_buffer1)|0);
            $68 = HEAP32[$5>>2]|0;
            $69 = ((($68)) + 36|0);
            $70 = HEAP32[$69>>2]|0;
            $71 = (_NewCodeEntry(40,2,$2,0,$70)|0);
            _CS_InsertEntry($0,$71,$44);
            $72 = HEAP32[$1>>2]|0;
            $73 = ((($72)) + 1|0);
            $74 = HEAP8[$73>>0]|0;
            $75 = $74&255;
            $76 = ((($72)) + 4|0);
            $77 = HEAP32[$76>>2]|0;
            $78 = ((($72)) + 36|0);
            $79 = HEAP32[$78>>2]|0;
            $80 = (_NewCodeEntry(69,$75,$77,0,$79)|0);
            $81 = (($$035) + 4)|0;
            _CS_InsertEntry($0,$80,$81);
           }
           _CS_DelEntries($0,$$035,3);
           $82 = (($$03134) + 1)|0;
           $$1 = $82;
          } else {
           $$1 = $$03134;
          }
         } else {
          $$1 = $$03134;
         }
        } else {
         $$1 = $$03134;
        }
       } else {
        $$1 = $$03134;
       }
      }
     }
    } else {
     $$1 = $$03134;
    }
   } else {
    $$1 = $$03134;
   }
  } while(0);
  $83 = (($$035) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $84 = ($83>>>0)<($$idx$val$i>>>0);
  if ($84) {
   $$03134 = $$1;$$035 = $83;$7 = $$idx$val$i;
  } else {
   $$031$lcssa = $$1;
   label = 20;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 20) {
  STACKTOP = sp;return ($$031$lcssa|0);
 }
 return (0)|0;
}
function _Opt65C02Stores($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03133 = 0, $$034 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i32 = 0, $$idx$val$i35 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i32 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i32|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03133 = 0;$$034 = 0;$$idx$val$i35 = $$idx$val$i32;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$03133<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP16[$5>>1]|0;
  $7 = $6&255;
  $8 = ($6&65535) >>> 8;
  $9 = $8&255;
  switch ($7<<24>>24) {
  case 62:  {
   $10 = ((($5)) + 40|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(0);
   if ($13) {
    label = 7;
   } else {
    $$1 = $$034;$$idx$val$i = $$idx$val$i35;
   }
   break;
  }
  case 63:  {
   $14 = ((($5)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($15)) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = ($17<<16>>16)==(0);
   if ($18) {
    label = 7;
   } else {
    $$1 = $$034;$$idx$val$i = $$idx$val$i35;
   }
   break;
  }
  case 64:  {
   $19 = ((($5)) + 40|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($20)) + 4|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = ($22<<16>>16)==(0);
   if ($23) {
    label = 7;
   } else {
    $$1 = $$034;$$idx$val$i = $$idx$val$i35;
   }
   break;
  }
  default: {
   $$1 = $$034;$$idx$val$i = $$idx$val$i35;
  }
  }
  L10: do {
   if ((label|0) == 7) {
    label = 0;
    switch ($9<<24>>24) {
    case 7: case 4: case 6: case 3:  {
     break;
    }
    default: {
     $$1 = $$034;$$idx$val$i = $$idx$val$i35;
     break L10;
    }
    }
    $24 = $8&65535;
    $25 = ((($5)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ((($5)) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (_NewCodeEntry(65,$24,$26,0,$28)|0);
    $30 = (($$03133) + 1)|0;
    _CS_InsertEntry($0,$29,$30);
    _CS_DelEntry($0,$$03133);
    $31 = (($$034) + 1)|0;
    $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
    $$1 = $31;$$idx$val$i = $$idx$val$i$pre;
   }
  } while(0);
  $32 = (($$03133) + 1)|0;
  $33 = ($32>>>0)<($$idx$val$i>>>0);
  if ($33) {
   $$03133 = $32;$$034 = $$1;$$idx$val$i35 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _ExprWithCheck($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11252]|0;
 FUNCTION_TABLE_vi[$0 & 15]($1);
 $3 = HEAP32[11252]|0;
 $4 = ($3|0)==($2|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = HEAP8[47051]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  HEAP32[$vararg_buffer2>>2] = $3;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $2;
  _Internal(36916,$vararg_buffer2);
  // unreachable;
 }
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 _Error(36916,$vararg_buffer);
 STACKTOP = sp;return;
}
function _MarkedExprWithCheck($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 24|0;
 $3 = sp + 16|0;
 _GetCodePos($2);
 $4 = HEAP32[11252]|0;
 FUNCTION_TABLE_vi[$0 & 15]($1);
 $5 = HEAP32[11252]|0;
 $6 = ($5|0)==($4|0);
 if ($6) {
  _GetCodePos($3);
  _ED_SetCodeRange($1,$2,$3);
  STACKTOP = sp;return;
 }
 $7 = HEAP8[47051]|0;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  HEAP32[$vararg_buffer2>>2] = $5;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $4;
  _Internal(36916,$vararg_buffer2);
  // unreachable;
 }
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 _Error(36916,$vararg_buffer);
 _GetCodePos($3);
 _ED_SetCodeRange($1,$2,$3);
 STACKTOP = sp;return;
}
function _PushAddr($0) {
 $0 = $0|0;
 var $$idx = 0, $$idx$val = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = ((($0)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $1 = $$idx$val & 255;
 $2 = ($1|0)==(64);
 if (!($2)) {
  return;
 }
 _g_push(1,0);
 return;
}
function _Store($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$idx23 = 0, $$idx23$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 } else {
  $$0 = $1;
 }
 $5 = (_TypeOf($$0)|0);
 $$idx23 = ((($0)) + 8|0);
 $$idx23$val = HEAP32[$$idx23>>2]|0;
 $trunc$i = $$idx23$val&255;
 switch ($trunc$i<<24>>24) {
 case 1:  {
  $6 = $5 | 8192;
  $7 = ((($0)) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  _g_putstatic($6,$8,0);
  break;
 }
 case 2:  {
  $9 = $5 | 4096;
  $10 = ((($0)) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  _g_putstatic($9,$11,$13);
  break;
 }
 case -128: case 4:  {
  $14 = ((($0)) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($0)) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  _g_putstatic($5,$15,$17);
  break;
 }
 case 8:  {
  $18 = $5 | 32768;
  $19 = ((($0)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  _g_putstatic($18,$20,$22);
  break;
 }
 case 16:  {
  $23 = ((($0)) + 16|0);
  $24 = HEAP32[$23>>2]|0;
  _g_putlocal($5,$24,0);
  break;
 }
 case 32:  {
  break;
 }
 case 64:  {
  $25 = ((($0)) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  _g_putind($5,$26);
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $$idx23$val;
  _Internal(36972,$vararg_buffer);
  // unreachable;
 }
 }
 $27 = HEAP32[$$idx23>>2]|0;
 $28 = $27 & -2049;
 HEAP32[$$idx23>>2] = $28;
 STACKTOP = sp;return;
}
function _hie10($0) {
 $0 = $0|0;
 var $$$i$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i84 = 0, $$0$i$i96 = 0, $$0$i101$i$i = 0, $$055$i$i = 0, $$056$i$i = 0, $$057$i$i = 0, $$067$i$i$i = 0, $$067$us$i$i$i = 0, $$068$i$i$i = 0, $$068$us$i$i$i = 0, $$069$i$i$i = 0, $$069$us$i$i$i = 0, $$071$i$i = 0, $$071$i$i$i = 0, $$071$idx95$val$i$i = 0, $$073$i$i$i = 0;
 var $$074$i$i$i = 0, $$078$i$i$i = 0, $$078$us$i$i$i = 0, $$080$i$i$i = 0, $$080$us$i$i$i = 0, $$1$i$i = 0, $$1$i$i$i = 0, $$1$i29$i = 0, $$1$us$i$i$i = 0, $$106$i$i = 0, $$107$i$i = 0, $$170$i$i = 0, $$170$ph$i$i$i = 0, $$170$ph$us$i$i$i = 0, $$17083$i$i$i = 0, $$17083$us$i$i$i = 0, $$17084$i$i$i = 0, $$17084$us$i$i$i = 0, $$172$i$i = 0, $$172$i$i$i = 0;
 var $$172$idx$val$i$i = 0, $$172$us$i$i$i = 0, $$175$i$i$i = 0, $$179$i$i$i = 0, $$181$us$i$i$i = 0, $$185$i$i$i = 0, $$185$us$i$i$i = 0, $$186$i$i$i = 0, $$186$us$i$i$i = 0, $$2$i$i = 0, $$2$i$i$i = 0, $$2$i30$i = 0, $$2$us$i$i$i = 0, $$276$i$i$i = 0, $$276$us$i$i$i = 0, $$282$i$i$i = 0, $$3$us$i$i$i = 0, $$377$i$i$i = 0, $$377$us$i$i$i = 0, $$4$i$i$i = 0;
 var $$4$us$i$i$i = 0, $$5$us$i$i$i = 0, $$6$i$i$i = 0, $$idx = 0, $$idx$i65 = 0, $$idx$i67 = 0, $$idx$i77 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i$i$i = 0, $$idx$val$i$i58 = 0, $$idx$val$i52 = 0, $$idx$val$i63 = 0, $$idx$val$i66 = 0, $$idx$val$i68 = 0, $$idx$val$i70 = 0, $$idx$val$i78 = 0, $$idx$val$i81 = 0, $$idx12$val$i = 0;
 var $$idx12$val$i55 = 0, $$idx13$val$i = 0, $$idx13$val$i60 = 0, $$idx19$i = 0, $$idx19$val$i = 0, $$idx2$i = 0, $$idx2$i$i = 0, $$idx2$i$i$i = 0, $$idx2$val$i = 0, $$idx2$val$i$i = 0, $$idx2$val$i$i$i = 0, $$idx20$val$i = 0, $$idx20$val$pre$i = 0, $$idx21$val$i = 0, $$idx22$val$i = 0, $$idx23$val$i = 0, $$idx35$val$i = 0, $$idx35$val$i$pre = 0, $$idx35$val$i101 = 0, $$idx35$val$i101$pre = 0;
 var $$idx36$val$i = 0, $$idx36$val$i94 = 0, $$idx37$i = 0, $$idx37$i87 = 0, $$idx37$val$i = 0, $$idx37$val$i88 = 0, $$idx38$val$i = 0, $$idx38$val$i91 = 0, $$idx39$val$i = 0, $$idx39$val$i98 = 0, $$idx43$val = 0, $$idx47$val = 0, $$idx48 = 0, $$idx48$val = 0, $$idx50 = 0, $$idx50$val = 0, $$idx59$val$i$i = 0, $$idx74$val$i$i = 0, $$idx75$val$i$i = 0, $$idx76$val$i$i = 0;
 var $$idx77$val$i$i = 0, $$idx77$val$pre$i$i = 0, $$idx78$val$i$i = 0, $$idx81$val$i$i = 0, $$idx84$val$i$i = 0, $$idx85$val$i$i = 0, $$idx86$val$i$i = 0, $$idx87$val$i$i = 0, $$idx88$val$i$i = 0, $$idx89$val$i$i = 0, $$idx91$val$i$i = 0, $$idx91$val$pre$i$i = 0, $$idx93$i$i = 0, $$idx93$val$i$i = 0, $$idx94$i$i = 0, $$idx94$val$i$i = 0, $$idx98$val$i$i = 0, $$lobit$i = 0, $$lobit$i$i = 0, $$lobit$i$i$i = 0;
 var $$lobit$i$i27$i = 0, $$lobit$i$i53 = 0, $$lobit$i$i82 = 0, $$lobit$i$i89 = 0, $$lobit$i103$i$i = 0, $$lobit$i104$i$i = 0, $$lobit$i14$i = 0, $$lobit$i14$i56 = 0, $$lobit$i40$i = 0, $$lobit$i40$i92 = 0, $$lobit$i61$i$i = 0, $$lobit$i61$lobit$i$i = 0, $$lobit$i62$i$i = 0, $$lobit$i63$i$i = 0, $$lobit$i63$lobit$i$i = 0, $$lobit$i72 = 0, $$lobit$i73 = 0, $$lobit$i99$i$i = 0, $$off$i$i = 0, $$off$i$i64 = 0;
 var $$off$i$i74 = 0, $$off$i2$i = 0, $$off$i2$i75 = 0, $$old$i$i$i = 0, $$old4$i$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i57 = 0, $$pre$phiZ2D = 0, $$pre110$i$i = 0, $$pre131 = 0, $$pre133 = 0, $$pre135 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0;
 var $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0;
 var $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i76 = 0, $or$cond3$i$i = 0, $storemerge$i$i = 0;
 var $trunc = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i$i = 0, $trunc$i$i$clear = 0, $trunc$i$i83 = 0, $trunc$i$i95 = 0, $trunc$i100$i$i = 0, $trunc$i26$i = 0, $trunc$i26$i$clear = 0, $trunc106 = 0, $trunc109$i$i = 0, $trunc119 = 0, $trunc119$clear = 0, $trunc147 = 0, $trunc147$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer101 = 0;
 var $vararg_buffer103 = 0, $vararg_buffer105 = 0, $vararg_buffer107 = 0, $vararg_buffer109 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0;
 var $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer71 = 0, $vararg_buffer75 = 0, $vararg_buffer79 = 0, $vararg_buffer8 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer88 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer95 = 0, $vararg_buffer97 = 0, $vararg_buffer99 = 0, $vararg_ptr29 = 0;
 var $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr47 = 0, $vararg_ptr51 = 0, $vararg_ptr74 = 0, $vararg_ptr78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 672|0;
 $vararg_buffer109 = sp + 640|0;
 $vararg_buffer107 = sp + 632|0;
 $vararg_buffer105 = sp + 624|0;
 $vararg_buffer103 = sp + 616|0;
 $vararg_buffer101 = sp + 608|0;
 $vararg_buffer99 = sp + 600|0;
 $vararg_buffer97 = sp + 592|0;
 $vararg_buffer95 = sp + 584|0;
 $vararg_buffer93 = sp + 576|0;
 $vararg_buffer91 = sp + 568|0;
 $vararg_buffer88 = sp + 560|0;
 $vararg_buffer85 = sp + 552|0;
 $vararg_buffer83 = sp + 544|0;
 $vararg_buffer81 = sp + 536|0;
 $vararg_buffer79 = sp + 528|0;
 $vararg_buffer75 = sp + 520|0;
 $vararg_buffer71 = sp + 512|0;
 $vararg_buffer69 = sp + 504|0;
 $vararg_buffer66 = sp + 496|0;
 $vararg_buffer63 = sp + 488|0;
 $vararg_buffer60 = sp + 480|0;
 $vararg_buffer58 = sp + 472|0;
 $vararg_buffer56 = sp + 464|0;
 $vararg_buffer54 = sp + 456|0;
 $vararg_buffer52 = sp + 448|0;
 $vararg_buffer48 = sp + 440|0;
 $vararg_buffer44 = sp + 432|0;
 $vararg_buffer42 = sp + 424|0;
 $vararg_buffer38 = sp + 416|0;
 $vararg_buffer34 = sp + 408|0;
 $vararg_buffer30 = sp + 400|0;
 $vararg_buffer26 = sp + 392|0;
 $vararg_buffer23 = sp + 384|0;
 $vararg_buffer20 = sp + 376|0;
 $vararg_buffer18 = sp + 368|0;
 $vararg_buffer15 = sp + 360|0;
 $vararg_buffer12 = sp + 352|0;
 $vararg_buffer10 = sp + 344|0;
 $vararg_buffer8 = sp + 336|0;
 $vararg_buffer5 = sp + 328|0;
 $vararg_buffer3 = sp + 320|0;
 $vararg_buffer1 = sp + 312|0;
 $vararg_buffer = sp + 304|0;
 $1 = sp + 64|0;
 $2 = sp + 664|0;
 $3 = sp;
 $4 = sp + 656|0;
 $5 = sp + 648|0;
 $6 = HEAP32[11156]|0;
 L1: do {
  switch ($6|0) {
  case 49:  {
   _NextToken();
   _hie10($0);
   $$idx37$i87 = ((($0)) + 8|0);
   $$idx37$val$i88 = HEAP32[$$idx37$i87>>2]|0;
   $$lobit$i$i89 = $$idx37$val$i88 & 256;
   $7 = ($$lobit$i$i89|0)==(0);
   if ($7) {
    _Error(37026,$vararg_buffer);
    STACKTOP = sp;return;
   }
   $8 = ((($0)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $$idx38$val$i91 = HEAP32[$9>>2]|0;
   $$lobit$i40$i92 = $$idx38$val$i91 & 2048;
   $10 = ($$lobit$i40$i92|0)==(0);
   if ($10) {
    $11 = $9;
   } else {
    _Error(37041,$vararg_buffer1);
    $$pre133 = HEAP32[$8>>2]|0;
    $11 = $$pre133;
   }
   $12 = (_TypeOf($11)|0);
   $$idx36$val$i94 = HEAP32[$$idx37$i87>>2]|0;
   $trunc$i$i95 = $$idx36$val$i94&255;
   switch ($trunc$i$i95<<24>>24) {
   case 1:  {
    $$0$i$i96 = 8192;
    break;
   }
   case 2:  {
    $$0$i$i96 = 4096;
    break;
   }
   case 4:  {
    $$0$i$i96 = 0;
    break;
   }
   case 8:  {
    $$0$i$i96 = 32768;
    break;
   }
   case 16:  {
    $$0$i$i96 = 0;
    break;
   }
   case 32:  {
    $$0$i$i96 = 0;
    break;
   }
   case 64:  {
    $$0$i$i96 = 0;
    break;
   }
   case -128:  {
    $$0$i$i96 = 0;
    break;
   }
   default: {
    HEAP32[$vararg_buffer3>>2] = $$idx36$val$i94;
    _Internal(36972,$vararg_buffer3);
    // unreachable;
   }
   }
   $13 = $12 | $$0$i$i96;
   $14 = $13 | 544;
   $15 = HEAP32[$8>>2]|0;
   $$idx39$val$i98 = HEAP32[$15>>2]|0;
   $16 = $$idx39$val$i98 & 15;
   $17 = ($16|0)==(13);
   if ($17) {
    $18 = (_CheckedPSizeOf($15)|0);
    $$idx35$val$i101$pre = HEAP32[$$idx37$i87>>2]|0;
    $$idx35$val$i101 = $$idx35$val$i101$pre;$21 = $18;
   } else {
    $$idx35$val$i101 = $$idx36$val$i94;$21 = 1;
   }
   $trunc106 = $$idx35$val$i101&255;
   switch ($trunc106<<24>>24) {
   case 1:  {
    $19 = ((($0)) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    _g_addeqstatic($14,$20,0,$21);
    break;
   }
   case 2:  {
    $22 = ((($0)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($0)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    _g_addeqstatic($14,$23,$25,$21);
    break;
   }
   case -128: case 4:  {
    $26 = ((($0)) + 12|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($0)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    _g_addeqstatic($14,$27,$29,$21);
    break;
   }
   case 8:  {
    $30 = ((($0)) + 12|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($0)) + 16|0);
    $33 = HEAP32[$32>>2]|0;
    _g_addeqstatic($14,$31,$33,$21);
    break;
   }
   case 16:  {
    $34 = ((($0)) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    _g_addeqlocal($14,$35,$21);
    break;
   }
   case 32:  {
    _g_inc($14,$21);
    break;
   }
   case 64:  {
    $36 = ((($0)) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    _g_addeqind($14,$37,$21);
    break;
   }
   default: {
    $38 = $$idx35$val$i101 & 255;
    HEAP32[$vararg_buffer5>>2] = $38;
    _Internal(37073,$vararg_buffer5);
    // unreachable;
   }
   }
   (_ED_MakeRValExpr($0)|0);
   STACKTOP = sp;return;
   break;
  }
  case 53:  {
   _NextToken();
   _hie10($0);
   $$idx37$i = ((($0)) + 8|0);
   $$idx37$val$i = HEAP32[$$idx37$i>>2]|0;
   $$lobit$i$i82 = $$idx37$val$i & 256;
   $39 = ($$lobit$i$i82|0)==(0);
   if ($39) {
    _Error(37026,$vararg_buffer8);
    STACKTOP = sp;return;
   }
   $40 = ((($0)) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $$idx38$val$i = HEAP32[$41>>2]|0;
   $$lobit$i40$i = $$idx38$val$i & 2048;
   $42 = ($$lobit$i40$i|0)==(0);
   if ($42) {
    $43 = $41;
   } else {
    _Error(37110,$vararg_buffer10);
    $$pre131 = HEAP32[$40>>2]|0;
    $43 = $$pre131;
   }
   $44 = (_TypeOf($43)|0);
   $$idx36$val$i = HEAP32[$$idx37$i>>2]|0;
   $trunc$i$i83 = $$idx36$val$i&255;
   switch ($trunc$i$i83<<24>>24) {
   case 1:  {
    $$0$i$i84 = 8192;
    break;
   }
   case 2:  {
    $$0$i$i84 = 4096;
    break;
   }
   case 4:  {
    $$0$i$i84 = 0;
    break;
   }
   case 8:  {
    $$0$i$i84 = 32768;
    break;
   }
   case 16:  {
    $$0$i$i84 = 0;
    break;
   }
   case 32:  {
    $$0$i$i84 = 0;
    break;
   }
   case 64:  {
    $$0$i$i84 = 0;
    break;
   }
   case -128:  {
    $$0$i$i84 = 0;
    break;
   }
   default: {
    HEAP32[$vararg_buffer12>>2] = $$idx36$val$i;
    _Internal(36972,$vararg_buffer12);
    // unreachable;
   }
   }
   $45 = $44 | $$0$i$i84;
   $46 = $45 | 544;
   $47 = HEAP32[$40>>2]|0;
   $$idx39$val$i = HEAP32[$47>>2]|0;
   $48 = $$idx39$val$i & 15;
   $49 = ($48|0)==(13);
   if ($49) {
    $50 = (_CheckedPSizeOf($47)|0);
    $$idx35$val$i$pre = HEAP32[$$idx37$i>>2]|0;
    $$idx35$val$i = $$idx35$val$i$pre;$53 = $50;
   } else {
    $$idx35$val$i = $$idx36$val$i;$53 = 1;
   }
   $trunc = $$idx35$val$i&255;
   switch ($trunc<<24>>24) {
   case 1:  {
    $51 = ((($0)) + 16|0);
    $52 = HEAP32[$51>>2]|0;
    _g_subeqstatic($46,$52,0,$53);
    break;
   }
   case 2:  {
    $54 = ((($0)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($0)) + 16|0);
    $57 = HEAP32[$56>>2]|0;
    _g_subeqstatic($46,$55,$57,$53);
    break;
   }
   case -128: case 4:  {
    $58 = ((($0)) + 12|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ((($0)) + 16|0);
    $61 = HEAP32[$60>>2]|0;
    _g_subeqstatic($46,$59,$61,$53);
    break;
   }
   case 8:  {
    $62 = ((($0)) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($0)) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    _g_subeqstatic($46,$63,$65,$53);
    break;
   }
   case 16:  {
    $66 = ((($0)) + 16|0);
    $67 = HEAP32[$66>>2]|0;
    _g_subeqlocal($46,$67,$53);
    break;
   }
   case 32:  {
    _g_inc($46,$53);
    break;
   }
   case 64:  {
    $68 = ((($0)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    _g_subeqind($46,$69,$53);
    break;
   }
   default: {
    $70 = $$idx35$val$i & 255;
    HEAP32[$vararg_buffer15>>2] = $70;
    _Internal(37142,$vararg_buffer15);
    // unreachable;
   }
   }
   (_ED_MakeRValExpr($0)|0);
   STACKTOP = sp;return;
   break;
  }
  case 48: case 56: case 51:  {
   _NextToken();
   _hie10($0);
   $71 = ((($0)) + 4|0);
   $72 = HEAP32[$71>>2]|0;
   $$idx$val$i81 = HEAP32[$72>>2]|0;
   $73 = $$idx$val$i81 & 112;
   $74 = ($73|0)==(16);
   if (!($74)) {
    _Error(37179,$vararg_buffer18);
    (_ED_MakeConstAbsInt($0,1)|0);
   }
   $$idx19$i = ((($0)) + 8|0);
   $$idx19$val$i = HEAP32[$$idx19$i>>2]|0;
   $75 = $$idx19$val$i & 511;
   $76 = ($75|0)==(1);
   if (!($76)) {
    _LoadExpr(0,$0);
    $83 = HEAP32[$71>>2]|0;
    $84 = (_TypeOf($83)|0);
    switch ($6|0) {
    case 56:  {
     _g_neg($84);
     break;
    }
    case 51:  {
     break;
    }
    case 48:  {
     _g_com($84);
     break;
    }
    default: {
     HEAP32[$vararg_buffer23>>2] = $6;
     _Internal(37211,$vararg_buffer23);
     // unreachable;
    }
    }
    (_ED_MakeRValExpr($0)|0);
    STACKTOP = sp;return;
   }
   switch ($6|0) {
   case 56:  {
    $77 = ((($0)) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (0 - ($78))|0;
    HEAP32[$77>>2] = $79;
    STACKTOP = sp;return;
    break;
   }
   case 48:  {
    $80 = ((($0)) + 16|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = $81 ^ -1;
    HEAP32[$80>>2] = $82;
    STACKTOP = sp;return;
    break;
   }
   case 51:  {
    STACKTOP = sp;return;
    break;
   }
   default: {
    HEAP32[$vararg_buffer20>>2] = $6;
    _Internal(37211,$vararg_buffer20);
    // unreachable;
   }
   }
   break;
  }
  case 65:  {
   _NextToken();
   $85 = HEAP32[11252]|0;
   _hie10($0);
   $86 = HEAP32[11252]|0;
   $87 = ($86|0)==($85|0);
   do {
    if (!($87)) {
     $88 = HEAP8[47051]|0;
     $89 = ($88<<24>>24)==(0);
     if ($89) {
      HEAP32[$vararg_buffer30>>2] = $86;
      $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
      HEAP32[$vararg_ptr33>>2] = $85;
      _Internal(36916,$vararg_buffer30);
      // unreachable;
     } else {
      HEAP32[$vararg_buffer26>>2] = $86;
      $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
      HEAP32[$vararg_ptr29>>2] = $85;
      _Error(36916,$vararg_buffer26);
      break;
     }
    }
   } while(0);
   $$idx$i67 = ((($0)) + 8|0);
   $$idx$val$i68 = HEAP32[$$idx$i67>>2]|0;
   $90 = $$idx$val$i68 & 511;
   $91 = ($90|0)==(1);
   if ($91) {
    $92 = ((($0)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0);
    $95 = $94&1;
    HEAP32[$92>>2] = $95;
    STACKTOP = sp;return;
   } else {
    _LoadExpr(0,$0);
    $96 = ((($0)) + 4|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (_TypeOf($97)|0);
    _g_bneg($98);
    (_ED_MakeRValExpr($0)|0);
    $99 = HEAP32[$$idx$i67>>2]|0;
    $100 = $99 & -3073;
    $101 = $100 | 2048;
    HEAP32[$$idx$i67>>2] = $101;
    STACKTOP = sp;return;
   }
   break;
  }
  case 58:  {
   _NextToken();
   $102 = HEAP32[11252]|0;
   _hie10($0);
   $103 = HEAP32[11252]|0;
   $104 = ($103|0)==($102|0);
   do {
    if (!($104)) {
     $105 = HEAP8[47051]|0;
     $106 = ($105<<24>>24)==(0);
     if ($106) {
      HEAP32[$vararg_buffer38>>2] = $103;
      $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
      HEAP32[$vararg_ptr41>>2] = $102;
      _Internal(36916,$vararg_buffer38);
      // unreachable;
     } else {
      HEAP32[$vararg_buffer34>>2] = $103;
      $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
      HEAP32[$vararg_ptr37>>2] = $102;
      _Error(36916,$vararg_buffer34);
      break;
     }
    }
   } while(0);
   $$idx = ((($0)) + 8|0);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$lobit$i = $$idx$val & 256;
   $107 = ($$lobit$i|0)==(0);
   if ($107) {
    $108 = $$idx$val & 143;
    $109 = ($108|0)!=(0);
    $110 = $$idx$val & 255;
    $111 = ($110|0)==(16);
    $or$cond = $109 | $111;
    if (!($or$cond)) {
     label = 77;
    }
   } else {
    label = 77;
   }
   if ((label|0) == 77) {
    _LoadExpr(0,$0);
    (_ED_MakeRValExpr($0)|0);
   }
   $112 = ((($0)) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $$idx$val$i70 = HEAP32[$113>>2]|0;
   $trunc147 = $$idx$val$i70&255;
   $trunc147$clear = $trunc147 & 15;
   switch ($trunc147$clear<<24>>24) {
   case 13:  {
    $$idx2$i = ((($113)) + 8|0);
    $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
    $114 = $$idx2$val$i & 15;
    $115 = ($114|0)==(14);
    if ($115) {
     label = 80;
    }
    break;
   }
   case 14:  {
    label = 80;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 80) {
    $116 = HEAP32[$$idx>>2]|0;
    $117 = $116 & -257;
    HEAP32[$$idx>>2] = $117;
    STACKTOP = sp;return;
   }
   $118 = $$idx$val$i70 & 112;
   $119 = ($118|0)==(48);
   if ($119) {
    $120 = (_Indirect($113)|0);
    HEAP32[$112>>2] = $120;
    $121 = $120;
   } else {
    _Error(37232,$vararg_buffer42);
    $$pre = HEAP32[$112>>2]|0;
    $121 = $$pre;
   }
   $$idx47$val = HEAP32[$121>>2]|0;
   $122 = $$idx47$val & 15;
   $123 = ($122|0)==(12);
   if ($123) {
    STACKTOP = sp;return;
   }
   $124 = HEAP32[$$idx>>2]|0;
   $125 = $124 | 256;
   HEAP32[$$idx>>2] = $125;
   STACKTOP = sp;return;
   break;
  }
  case 63:  {
   _NextToken();
   $126 = HEAP32[11252]|0;
   _hie10($0);
   $127 = HEAP32[11252]|0;
   $128 = ($127|0)==($126|0);
   do {
    if (!($128)) {
     $129 = HEAP8[47051]|0;
     $130 = ($129<<24>>24)==(0);
     if ($130) {
      HEAP32[$vararg_buffer48>>2] = $127;
      $vararg_ptr51 = ((($vararg_buffer48)) + 4|0);
      HEAP32[$vararg_ptr51>>2] = $126;
      _Internal(36916,$vararg_buffer48);
      // unreachable;
     } else {
      HEAP32[$vararg_buffer44>>2] = $127;
      $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
      HEAP32[$vararg_ptr47>>2] = $126;
      _Error(36916,$vararg_buffer44);
      break;
     }
    }
   } while(0);
   $$idx48 = ((($0)) + 8|0);
   $$idx48$val = HEAP32[$$idx48>>2]|0;
   $$lobit$i72 = $$idx48$val & 256;
   $131 = ($$lobit$i72|0)==(0);
   L131: do {
    if ($131) {
     $132 = ((($0)) + 4|0);
     $133 = HEAP32[$132>>2]|0;
     $$idx43$val = HEAP32[$133>>2]|0;
     $trunc119 = $$idx43$val&255;
     $trunc119$clear = $trunc119 & 15;
     switch ($trunc119$clear<<24>>24) {
     case 12: case 14:  {
      break L131;
      break;
     }
     default: {
     }
     }
     _Error(37252,$vararg_buffer52);
     STACKTOP = sp;return;
    }
   } while(0);
   $$lobit$i73 = $$idx48$val & 512;
   $134 = ($$lobit$i73|0)==(0);
   if (!($134)) {
    _Error(37268,$vararg_buffer54);
    $135 = HEAP32[$$idx48>>2]|0;
    $136 = $135 & -513;
    HEAP32[$$idx48>>2] = $136;
   }
   $137 = ((($0)) + 4|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = (_PointerTo($138)|0);
   HEAP32[$137>>2] = $139;
   $140 = HEAP32[$$idx48>>2]|0;
   $141 = $140 & -257;
   HEAP32[$$idx48>>2] = $141;
   STACKTOP = sp;return;
   break;
  }
  case 39:  {
   _NextToken();
   $142 = HEAP32[11156]|0;
   $143 = ($142|0)==(43);
   do {
    if ($143) {
     $144 = HEAP32[11180]|0;
     $$off$i$i74 = (($144) + -13)|0;
     $145 = ($$off$i$i74>>>0)<(12);
     $$off$i2$i75 = (($144) + -7)|0;
     $146 = ($$off$i2$i75>>>0)<(3);
     $or$cond$i76 = $145 | $146;
     if (!($or$cond$i76)) {
      $147 = ($144|0)==(40);
      if (!($147)) {
       label = 102;
       break;
      }
      $148 = (_FindSym((44740))|0);
      $149 = ($148|0)==(0|0);
      if ($149) {
       label = 102;
       break;
      }
      $$idx$i77 = ((($148)) + 20|0);
      $$idx$val$i78 = HEAP32[$$idx$i77>>2]|0;
      $150 = $$idx$val$i78 & 16389;
      $151 = ($150|0)==(16389);
      if (!($151)) {
       label = 102;
       break;
      }
     }
     _NextToken();
     $152 = (_ParseType($1)|0);
     $153 = (_CheckedSizeOf($152)|0);
     (_ConsumeRParen()|0);
     $$pre135 = ((($0)) + 8|0);
     $$0 = $153;$$pre$phiZ2D = $$pre135;
    } else {
     label = 102;
    }
   } while(0);
   if ((label|0) == 102) {
    _GetCodePos($1);
    _hie10($0);
    $$idx50 = ((($0)) + 8|0);
    $$idx50$val = HEAP32[$$idx50>>2]|0;
    $154 = $$idx50$val & 255;
    $155 = ($154|0)==(128);
    if ($155) {
     $156 = ((($0)) + 32|0);
     $157 = HEAP32[$156>>2]|0;
     _ReleaseLiteral($157);
    }
    $158 = ((($0)) + 4|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = (_CheckedSizeOf($159)|0);
    _RemoveCode($1);
    $$0 = $160;$$pre$phiZ2D = $$idx50;
   }
   (_ED_MakeConstAbs($0,$$0,11020)|0);
   $161 = HEAP32[$$pre$phiZ2D>>2]|0;
   $162 = $161 & -2049;
   HEAP32[$$pre$phiZ2D>>2] = $162;
   STACKTOP = sp;return;
   break;
  }
  case 43:  {
   $163 = HEAP32[11180]|0;
   $$off$i$i64 = (($163) + -13)|0;
   $164 = ($$off$i$i64>>>0)<(12);
   $$off$i2$i = (($163) + -7)|0;
   $165 = ($$off$i2$i>>>0)<(3);
   $or$cond$i = $164 | $165;
   if (!($or$cond$i)) {
    $166 = ($163|0)==(40);
    if (!($166)) {
     break L1;
    }
    $167 = (_FindSym((44740))|0);
    $168 = ($167|0)==(0|0);
    if ($168) {
     break L1;
    }
    $$idx$i65 = ((($167)) + 20|0);
    $$idx$val$i66 = HEAP32[$$idx$i65>>2]|0;
    $169 = $$idx$val$i66 & 16389;
    $170 = ($169|0)==(16389);
    if (!($170)) {
     break L1;
    }
   }
   _TypeCast($0);
   STACKTOP = sp;return;
   break;
  }
  default: {
  }
  }
 } while(0);
 (_ED_Init($0)|0);
 $171 = HEAP32[11156]|0;
 $$off$i$i = (($171) + -87)|0;
 $172 = ($$off$i$i>>>0)<(2);
 L163: do {
  if ($172) {
   $173 = HEAP32[(44628)>>2]|0;
   $174 = ((($0)) + 16|0);
   HEAP32[$174>>2] = $173;
   $175 = ((($0)) + 8|0);
   HEAP32[$175>>2] = 1;
   $176 = HEAP32[(44716)>>2]|0;
   $177 = ((($0)) + 4|0);
   HEAP32[$177>>2] = $176;
   _NextToken();
  } else {
   switch ($171|0) {
   case 89:  {
    $178 = ((($0)) + 24|0);
    $179 = +HEAPF64[(44632)>>3];
    HEAPF64[$178>>3] = $179;
    $180 = ((($0)) + 8|0);
    HEAP32[$180>>2] = 1;
    $181 = HEAP32[(44716)>>2]|0;
    $182 = ((($0)) + 4|0);
    HEAP32[$182>>2] = $181;
    _NextToken();
    break L163;
    break;
   }
   case 43:  {
    _NextToken();
    _hie1($0);
    $183 = HEAP32[11156]|0;
    $184 = ($183|0)==(52);
    if ($184) {
     while(1) {
      _NextToken();
      _hie1($0);
      $185 = HEAP32[11156]|0;
      $186 = ($185|0)==(52);
      if (!($186)) {
       break;
      }
     }
    }
    (_ConsumeRParen()|0);
    break L163;
    break;
   }
   default: {
    $187 = HEAP8[46962]|0;
    $188 = ($187<<24>>24)!=(0);
    $189 = ($171|0)==(40);
    $or$cond3$i$i = $189 & $188;
    if ($or$cond3$i$i) {
     _NextToken();
     (_ED_MakeConstAbsInt($0,0)|0);
     break L163;
    }
    $190 = ($187<<24>>24)==(0);
    if (!($190)) {
     _Error(37301,$vararg_buffer56);
     (_ED_MakeConstAbsInt($0,1)|0);
     break L163;
    }
    switch ($171|0) {
    case 40:  {
     $191 = (_FindSym((44644))|0);
     HEAP32[$0>>2] = $191;
     $192 = ($191|0)==(0|0);
     if ($192) {
      (_strcpy($1,(44644))|0);
      _NextToken();
      $260 = HEAP32[11156]|0;
      $261 = ($260|0)==(43);
      if ($261) {
       $262 = (_IS_Get(8668)|0);
       $263 = ($262|0)>(0);
       if ($263) {
        HEAP32[$vararg_buffer60>>2] = $1;
        _Error(37411,$vararg_buffer60);
       } else {
        HEAP32[$vararg_buffer63>>2] = $1;
        _Warning(37411,$vararg_buffer63);
       }
       $264 = (_GetImplicitFuncType()|0);
       $265 = (_AddGlobalSym($1,$264,8456)|0);
       $266 = ((($265)) + 24|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = ((($0)) + 4|0);
       HEAP32[$268>>2] = $267;
       $269 = ((($0)) + 8|0);
       HEAP32[$269>>2] = 2;
       $270 = ((($265)) + 48|0);
       $271 = $270;
       $272 = ((($0)) + 12|0);
       HEAP32[$272>>2] = $271;
      } else {
       (_AddLocalSym($1,10940,8193,0)|0);
       $273 = ((($0)) + 8|0);
       HEAP32[$273>>2] = 272;
       $274 = ((($0)) + 4|0);
       HEAP32[$274>>2] = 10940;
       HEAP32[$vararg_buffer66>>2] = $1;
       _Error(37443,$vararg_buffer66);
      }
      break L163;
     }
     _NextToken();
     $193 = ((($191)) + 20|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $194 & 64;
     $196 = ($195|0)==(0);
     if (!($196)) {
      $197 = HEAP32[3332]|0;
      $198 = HEAP32[3331]|0;
      FUNCTION_TABLE_viiii[$197 & 1]($198,37334,37370,666);
      // unreachable;
     }
     $199 = $194 & 16384;
     $200 = ($199|0)==(0);
     if (!($200)) {
      _Error(37382,$vararg_buffer58);
      $201 = ((($0)) + 8|0);
      HEAP32[$201>>2] = 272;
      $202 = ((($0)) + 4|0);
      HEAP32[$202>>2] = 10940;
      break L163;
     }
     $203 = $194 | 8192;
     HEAP32[$193>>2] = $203;
     $204 = ((($191)) + 24|0);
     $205 = HEAP32[$204>>2]|0;
     $206 = ((($0)) + 4|0);
     HEAP32[$206>>2] = $205;
     $207 = $194 & 32;
     $208 = ($207|0)==(0);
     do {
      if ($208) {
       $213 = $194 & 256;
       $214 = ($213|0)==(0);
       if (!($214)) {
        $215 = ((($0)) + 8|0);
        HEAP32[$215>>2] = 258;
        $216 = ((($191)) + 48|0);
        $217 = $216;
        $218 = ((($0)) + 12|0);
        HEAP32[$218>>2] = $217;
        $259 = 2;
        break;
       }
       $219 = $194 & 1;
       $220 = ($219|0)==(0);
       if (!($220)) {
        $221 = $194 & 128;
        $222 = ($221|0)==(0);
        if (!($222)) {
         $223 = HEAP32[11507]|0;
         $224 = (_F_IsVariadic($223)|0);
         $225 = ($224|0)==(0);
         if (!($225)) {
          $226 = ((($191)) + 36|0);
          $227 = HEAP32[$226>>2]|0;
          $228 = HEAP32[11507]|0;
          $229 = (_F_GetParamSize($228)|0);
          $230 = (($227) - ($229))|0;
          _g_leavariadic($230);
          $231 = ((($0)) + 8|0);
          HEAP32[$231>>2] = 320;
          $259 = 64;
          break;
         }
        }
        $232 = ((($0)) + 8|0);
        HEAP32[$232>>2] = 272;
        $233 = ((($191)) + 36|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = ((($0)) + 16|0);
        HEAP32[$235>>2] = $234;
        $259 = 16;
        break;
       }
       $236 = $194 & 2;
       $237 = ($236|0)==(0);
       if (!($237)) {
        $238 = ((($0)) + 8|0);
        HEAP32[$238>>2] = 264;
        $239 = ((($191)) + 36|0);
        $240 = HEAP32[$239>>2]|0;
        $241 = ((($0)) + 12|0);
        HEAP32[$241>>2] = $240;
        $259 = 8;
        break;
       }
       $242 = $194 & 4;
       $243 = ($242|0)==(0);
       if ($243) {
        $253 = ((($0)) + 8|0);
        HEAP32[$253>>2] = 260;
        $254 = ((($191)) + 36|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = ((($0)) + 12|0);
        HEAP32[$256>>2] = $255;
        $259 = 4;
        break;
       }
       $244 = $194 & 1032;
       $245 = ($244|0)==(0);
       $246 = ((($0)) + 8|0);
       if ($245) {
        HEAP32[$246>>2] = 260;
        $250 = ((($191)) + 36|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = ((($0)) + 12|0);
        HEAP32[$252>>2] = $251;
        $259 = 4;
        break;
       } else {
        HEAP32[$246>>2] = 258;
        $247 = ((($191)) + 48|0);
        $248 = $247;
        $249 = ((($0)) + 12|0);
        HEAP32[$249>>2] = $248;
        $259 = 2;
        break;
       }
      } else {
       $209 = ((($0)) + 8|0);
       HEAP32[$209>>2] = 1;
       $210 = ((($191)) + 36|0);
       $211 = HEAP32[$210>>2]|0;
       $212 = ((($0)) + 16|0);
       HEAP32[$212>>2] = $211;
       $259 = 1;
      }
     } while(0);
     $257 = HEAP32[$206>>2]|0;
     $$idx75$val$i$i = HEAP32[$257>>2]|0;
     $trunc$i$i = $$idx75$val$i$i&255;
     $trunc$i$i$clear = $trunc$i$i & 15;
     switch ($trunc$i$i$clear<<24>>24) {
     case 14: case 12:  {
      break;
     }
     default: {
      break L163;
     }
     }
     $258 = ((($0)) + 8|0);
     HEAP32[$258>>2] = $259;
     break L163;
     break;
    }
    case 90: case 86:  {
     $275 = HEAP32[(44640)>>2]|0;
     $276 = (_UseLiteral($275)|0);
     $277 = ((($0)) + 32|0);
     HEAP32[$277>>2] = $276;
     $278 = HEAP32[(44640)>>2]|0;
     $279 = (_GetLiteralSize($278)|0);
     $280 = (_GetCharArrayType($279)|0);
     $281 = ((($0)) + 4|0);
     HEAP32[$281>>2] = $280;
     $282 = ((($0)) + 8|0);
     HEAP32[$282>>2] = 128;
     $283 = ((($0)) + 16|0);
     HEAP32[$283>>2] = 0;
     $284 = HEAP32[(44640)>>2]|0;
     $285 = (_GetLiteralLabel($284)|0);
     $286 = ((($0)) + 12|0);
     HEAP32[$286>>2] = $285;
     _NextToken();
     break L163;
     break;
    }
    case 32:  {
     _AsmStatement();
     $287 = ((($0)) + 8|0);
     HEAP32[$287>>2] = 64;
     $288 = ((($0)) + 4|0);
     HEAP32[$288>>2] = 11004;
     break L163;
     break;
    }
    case 94:  {
     $289 = ((($0)) + 4|0);
     HEAP32[$289>>2] = 10924;
     $290 = ((($0)) + 8|0);
     HEAP32[$290>>2] = 288;
     _NextToken();
     break L163;
     break;
    }
    case 97:  {
     $291 = ((($0)) + 4|0);
     HEAP32[$291>>2] = 10956;
     $292 = ((($0)) + 8|0);
     HEAP32[$292>>2] = 288;
     _NextToken();
     break L163;
     break;
    }
    case 98:  {
     $293 = ((($0)) + 4|0);
     HEAP32[$293>>2] = 10988;
     $294 = ((($0)) + 8|0);
     HEAP32[$294>>2] = 288;
     _NextToken();
     break L163;
     break;
    }
    default: {
     _Error(37466,$vararg_buffer69);
     _NextToken();
     (_ED_MakeConstAbsInt($0,1)|0);
     break L163;
    }
    }
   }
   }
  }
 } while(0);
 $295 = ((($0)) + 4|0);
 $$idx93$i$i = ((($0)) + 8|0);
 $$idx94$i$i = ((($3)) + 8|0);
 $296 = ((($3)) + 16|0);
 $297 = ((($0)) + 16|0);
 $298 = ((($3)) + 4|0);
 $299 = ((($3)) + 12|0);
 $300 = ((($0)) + 12|0);
 $301 = ((($1)) + 4|0);
 $302 = ((($1)) + 16|0);
 L230: while(1) {
  $303 = HEAP32[11156]|0;
  switch ($303|0) {
  case 49:  {
   label = 332;
   break L230;
   break;
  }
  case 53:  {
   label = 342;
   break L230;
   break;
  }
  case 42:  {
   _NextToken();
   $304 = HEAP32[$295>>2]|0;
   $$idx93$val$i$i = HEAP32[$$idx93$i$i>>2]|0;
   $$lobit$i$i$i = $$idx93$val$i$i & 256;
   $305 = ($$lobit$i$i$i|0)==(0);
   do {
    if ($305) {
     $306 = $$idx93$val$i$i & 143;
     $307 = ($306|0)==(0);
     if ($307) {
      $308 = $$idx93$val$i$i & 255;
      $309 = ($308|0)==(16);
      $310 = $309&1;
      _GetCodePos($4);
      if ($309) {
       $615 = $310;$616 = 1;
       break;
      } else {
       $614 = $310;
       label = 166;
       break;
      }
     } else {
      _GetCodePos($4);
      $615 = 1;$616 = 1;
      break;
     }
    } else {
     _GetCodePos($4);
     $614 = 0;
     label = 166;
    }
   } while(0);
   if ((label|0) == 166) {
    label = 0;
    _LoadExpr(0,$0);
    _GetCodePos($5);
    _g_push(1,0);
    $615 = $614;$616 = 0;
   }
   _GetCodePos($1);
   $311 = HEAP32[11252]|0;
   _hie1($3);
   $312 = HEAP32[11156]|0;
   $313 = ($312|0)==(52);
   if ($313) {
    while(1) {
     _NextToken();
     _hie1($3);
     $314 = HEAP32[11156]|0;
     $315 = ($314|0)==(52);
     if (!($315)) {
      break;
     }
    }
   }
   $316 = HEAP32[11252]|0;
   $317 = ($316|0)==($311|0);
   if (!($317)) {
    $318 = HEAP8[47051]|0;
    $319 = ($318<<24>>24)==(0);
    if ($319) {
     label = 172;
     break L230;
    }
    HEAP32[$vararg_buffer71>>2] = $316;
    $vararg_ptr74 = ((($vararg_buffer71)) + 4|0);
    HEAP32[$vararg_ptr74>>2] = $311;
    _Error(36916,$vararg_buffer71);
   }
   _GetCodePos($2);
   _ED_SetCodeRange($3,$1,$2);
   $320 = HEAP32[$295>>2]|0;
   $$idx87$val$i$i = HEAP32[$320>>2]|0;
   $321 = $$idx87$val$i$i & 112;
   $trunc$i26$i = $321&255;
   $trunc$i26$i$clear = $trunc$i26$i & 127;
   switch ($trunc$i26$i$clear<<24>>24) {
   case 48:  {
    $322 = HEAP32[$298>>2]|0;
    $$idx76$val$i$i = HEAP32[$322>>2]|0;
    $323 = $$idx76$val$i$i & 112;
    $324 = ($323|0)==(16);
    if ($324) {
     $$idx91$val$i$i = $$idx87$val$i$i;$328 = $320;
    } else {
     _Error(37486,$vararg_buffer79);
     (_ED_MakeConstAbsInt($3,0)|0);
     $$pre110$i$i = HEAP32[$295>>2]|0;
     $$idx91$val$pre$i$i = HEAP32[$$pre110$i$i>>2]|0;
     $$idx91$val$i$i = $$idx91$val$pre$i$i;$328 = $$pre110$i$i;
    }
    $325 = $$idx91$val$i$i & 15;
    $326 = ($325|0)==(12);
    $327 = $$idx91$val$i$i & 260096;
    $$106$i$i = $326 ? $327 : 0;
    $329 = (_Indirect($328)|0);
    $$071$i$i = $329;$$2$i$i = $$106$i$i;
    break;
   }
   case 16:  {
    $330 = HEAP32[$298>>2]|0;
    $$idx86$val$i$i = HEAP32[$330>>2]|0;
    $331 = $$idx86$val$i$i & 112;
    $332 = ($331|0)==(48);
    if ($332) {
     $334 = $$idx86$val$i$i & 15;
     $335 = ($334|0)==(12);
     $336 = $$idx86$val$i$i & 260096;
     $$107$i$i = $335 ? $336 : 0;
     $$170$i$i = $$107$i$i;$337 = $330;
    } else {
     _Error(37520,$vararg_buffer81);
     $333 = (_GetCharArrayType(1)|0);
     (_ED_MakeConstAbs($3,0,$333)|0);
     $$pre$i$i = HEAP32[$298>>2]|0;
     $$170$i$i = 0;$337 = $$pre$i$i;
    }
    $338 = (_Indirect($337)|0);
    $$071$i$i = $338;$$2$i$i = $$170$i$i;
    break;
   }
   default: {
    _Error(37567,$vararg_buffer83);
    $339 = (_GetCharArrayType(1)|0);
    (_ED_MakeConstAbs($0,0,$339)|0);
    (_ED_MakeConstAbsInt($3,0)|0);
    $340 = HEAP32[$295>>2]|0;
    $341 = (_Indirect($340)|0);
    $$071$i$i = $341;$$2$i$i = 0;
   }
   }
   $$071$idx95$val$i$i = HEAP32[$$071$i$i>>2]|0;
   $342 = $$071$idx95$val$i$i & 260096;
   $343 = $342 | $$2$i$i;
   $344 = ($342|0)==($343|0);
   if ($344) {
    $$172$i$i = $$071$i$i;
   } else {
    $345 = (_TypeDup($$071$i$i)|0);
    $346 = HEAP32[$345>>2]|0;
    $347 = $346 | $$2$i$i;
    HEAP32[$345>>2] = $347;
    $$172$i$i = $345;
   }
   $$idx94$val$i$i = HEAP32[$$idx94$i$i>>2]|0;
   $$lobit$i104$i$i = $$idx94$val$i$i & 512;
   $348 = ($$lobit$i104$i$i|0)==(0);
   if ($348) {
    $$idx77$val$i$i = $$idx94$val$i$i;
   } else {
    _LoadExpr(0,$3);
    (_ED_MakeRValExpr($3)|0);
    $$idx77$val$pre$i$i = HEAP32[$$idx94$i$i>>2]|0;
    $$idx77$val$i$i = $$idx77$val$pre$i$i;
   }
   $349 = $$idx77$val$i$i & 511;
   $350 = ($349|0)==(1);
   do {
    if ($350) {
     $351 = (_ED_CodeRangeIsEmpty($3)|0);
     $352 = ($351|0)==(0);
     if ($352) {
      label = 199;
     } else {
      if ($616) {
       _LoadExpr(0,$0);
      } else {
       _RemoveCode($5);
      }
      $353 = HEAP32[$295>>2]|0;
      $$idx85$val$i$i = HEAP32[$353>>2]|0;
      $354 = $$idx85$val$i$i & 112;
      $355 = ($354|0)==(48);
      if (!($355)) {
       $367 = (_TypeOf($304)|0);
       $368 = (_CheckedSizeOf($$172$i$i)|0);
       _g_scale($367,$368);
       $369 = HEAP32[$296>>2]|0;
       _g_inc(33,$369);
       break;
      }
      $356 = (_CheckedSizeOf($$172$i$i)|0);
      $357 = HEAP32[$296>>2]|0;
      $358 = Math_imul($357, $356)|0;
      HEAP32[$296>>2] = $358;
      _RemoveCode($4);
      $359 = HEAP32[$295>>2]|0;
      $$idx89$val$i$i = HEAP32[$359>>2]|0;
      $360 = $$idx89$val$i$i & 15;
      $361 = ($360|0)==(12);
      if ($361) {
       $362 = HEAP32[$296>>2]|0;
       $363 = HEAP32[$297>>2]|0;
       $364 = (($363) + ($362))|0;
       HEAP32[$297>>2] = $364;
       break;
      }
      if ($616) {
       label = 196;
      } else {
       $$idx74$val$i$i = HEAP32[$$idx93$i$i>>2]|0;
       $$lobit$i103$i$i = $$idx74$val$i$i & 256;
       $365 = ($$lobit$i103$i$i|0)==(0);
       if (!($365)) {
        label = 196;
       }
      }
      if ((label|0) == 196) {
       label = 0;
       _LoadExpr(0,$0);
       (_ED_MakeRValExpr($0)|0);
      }
      $366 = HEAP32[$296>>2]|0;
      HEAP32[$297>>2] = $366;
     }
    } else {
     label = 199;
    }
   } while(0);
   if ((label|0) == 199) {
    label = 0;
    _GetCodePos($5);
    _LoadExpr(0,$3);
    $370 = HEAP32[$295>>2]|0;
    $$idx84$val$i$i = HEAP32[$370>>2]|0;
    $371 = $$idx84$val$i$i & 112;
    $372 = ($371|0)==(48);
    if ($372) {
     $373 = (_CheckedSizeOf($$172$i$i)|0);
     _g_scale(1,$373);
     $$1$i$i = $615;
    } else {
     if ($616) {
      _g_push(1,0);
      _LoadExpr(0,$0);
      $$0$i$i = 0;
     } else {
      _g_swap(1);
      $$0$i$i = $615;
     }
     $374 = (_TypeOf($304)|0);
     $375 = (_CheckedSizeOf($$172$i$i)|0);
     _g_scale($374,$375);
     $$1$i$i = $$0$i$i;
    }
    $376 = ($$1$i$i|0)==(0);
    L297: do {
     if ($376) {
      _g_add(1,0);
     } else {
      $$idx78$val$i$i = HEAP32[$$idx94$i$i>>2]|0;
      $377 = $$idx78$val$i$i & 143;
      $378 = ($377|0)!=(0);
      $379 = $$idx78$val$i$i & 255;
      $380 = ($379|0)==(16);
      $or$cond$i$i = $378 | $380;
      if ($or$cond$i$i) {
       $381 = (_CheckedSizeOf($$172$i$i)|0);
       $382 = ($381|0)==(1);
       if ($382) {
        $383 = HEAP32[$298>>2]|0;
        $384 = (_CheckedSizeOf($383)|0);
        $385 = ($384|0)==(1);
        $$$i$i = $385 ? 3 : 1;
        _RemoveCode($5);
        _LoadExpr(0,$0);
        $$idx81$val$i$i = HEAP32[$$idx94$i$i>>2]|0;
        $386 = $$idx81$val$i$i & 255;
        $387 = ($386|0)==(16);
        if ($387) {
         $388 = HEAP32[$296>>2]|0;
         _g_addlocal($$$i$i,$388);
         break;
        }
        $trunc$i100$i$i = $$idx81$val$i$i&255;
        switch ($trunc$i100$i$i<<24>>24) {
        case 1:  {
         $$0$i101$i$i = 8192;
         break;
        }
        case 2:  {
         $$0$i101$i$i = 4096;
         break;
        }
        case 4:  {
         $$0$i101$i$i = 0;
         break;
        }
        case 8:  {
         $$0$i101$i$i = 32768;
         break;
        }
        case 16:  {
         $$0$i101$i$i = 0;
         break;
        }
        case 32:  {
         $$0$i101$i$i = 0;
         break;
        }
        case 64:  {
         $$0$i101$i$i = 0;
         break;
        }
        case -128:  {
         $$0$i101$i$i = 0;
         break;
        }
        default: {
         label = 219;
         break L230;
        }
        }
        $389 = $$0$i101$i$i | $$$i$i;
        $390 = HEAP32[$299>>2]|0;
        $391 = HEAP32[$296>>2]|0;
        _g_addstatic($389,$390,$391);
        break;
       }
      }
      $$idx98$val$i$i = HEAP32[$$idx93$i$i>>2]|0;
      $trunc109$i$i = $$idx98$val$i$i&255;
      switch ($trunc109$i$i<<24>>24) {
      case 1:  {
       $392 = HEAP32[$297>>2]|0;
       _g_inc(1,$392);
       break L297;
       break;
      }
      case 16:  {
       $393 = HEAP32[$295>>2]|0;
       $$idx88$val$i$i = HEAP32[$393>>2]|0;
       $394 = $$idx88$val$i$i & 15;
       $395 = ($394|0)==(12);
       $396 = HEAP32[$297>>2]|0;
       if ($395) {
        _g_addaddr_local(1,$396);
        break L297;
       } else {
        _g_addlocal(1,$396);
        break L297;
       }
       break;
      }
      case 64:  {
       $$0$i$i$i = 1;
       break;
      }
      case 2:  {
       $$0$i$i$i = 4097;
       break;
      }
      case 4:  {
       $$0$i$i$i = 1;
       break;
      }
      case 8:  {
       $$0$i$i$i = 32769;
       break;
      }
      case -128:  {
       $$0$i$i$i = 1;
       break;
      }
      case 32:  {
       $$0$i$i$i = 1;
       break;
      }
      default: {
       label = 231;
       break L230;
      }
      }
      $$lobit$i99$i$i = $$idx98$val$i$i & 256;
      $397 = ($$lobit$i99$i$i|0)==(0);
      $398 = HEAP32[$300>>2]|0;
      $399 = HEAP32[$297>>2]|0;
      if ($397) {
       _g_addaddr_static($$0$i$i$i,$398,$399);
       break;
      } else {
       _g_addstatic($$0$i$i$i,$398,$399);
       break;
      }
     }
    } while(0);
    (_ED_MakeRValExpr($0)|0);
   }
   HEAP32[$295>>2] = $$172$i$i;
   $$172$idx$val$i$i = HEAP32[$$172$i$i>>2]|0;
   $400 = $$172$idx$val$i$i & 15;
   $401 = ($400|0)==(12);
   $402 = HEAP32[$$idx93$i$i>>2]|0;
   $403 = $402 & -257;
   $404 = $402 | 256;
   $storemerge$i$i = $401 ? $403 : $404;
   HEAP32[$$idx93$i$i>>2] = $storemerge$i$i;
   (_ConsumeRBrack()|0);
   continue L230;
   break;
  }
  case 43:  {
   $405 = HEAP32[$295>>2]|0;
   $$idx$val$i63 = HEAP32[$405>>2]|0;
   $trunc$i = $$idx$val$i63&255;
   $trunc$i$clear = $trunc$i & 15;
   switch ($trunc$i$clear<<24>>24) {
   case 14:  {
    break;
   }
   case 13:  {
    $$idx2$i$i = ((($405)) + 8|0);
    $$idx2$val$i$i = HEAP32[$$idx2$i$i>>2]|0;
    $406 = $$idx2$val$i$i & 15;
    $407 = ($406|0)==(14);
    if (!($407)) {
     label = 239;
    }
    break;
   }
   default: {
    label = 239;
   }
   }
   if ((label|0) == 239) {
    label = 0;
    _Error(37584,$vararg_buffer91);
    $408 = (_GetImplicitFuncType()|0);
    (_ED_MakeConstAbs($0,0,$408)|0);
    HEAP32[$300>>2] = (37606);
   }
   _NextToken();
   $409 = HEAP32[$295>>2]|0;
   $410 = (_GetFuncDesc($409)|0);
   $$idx$val$i$i$i = HEAP32[$409>>2]|0;
   $411 = $$idx$val$i$i$i & 15;
   $412 = ($411|0)==(13);
   do {
    if ($412) {
     $$idx2$i$i$i = ((($409)) + 8|0);
     $$idx2$val$i$i$i = HEAP32[$$idx2$i$i$i>>2]|0;
     $413 = $$idx2$val$i$i$i & 15;
     $414 = ($413|0)==(14);
     if ($414) {
      $415 = HEAP32[$410>>2]|0;
      $416 = $415 & 4;
      $417 = ($416|0)==(0);
      if ($417) {
       $418 = ((($410)) + 12|0);
       $419 = HEAP32[$418>>2]|0;
       $420 = ($419|0)==(0);
       if ($420) {
        label = 248;
       } else {
        $421 = HEAP8[47028]|0;
        $422 = ($421<<24>>24)==(0);
        if ($422) {
         $$lobit$i61$i$i = $$idx2$val$i$i$i >>> 17;
         $$lobit$i61$lobit$i$i = $$lobit$i61$i$i & 1;
         $424 = $$lobit$i61$lobit$i$i ^ 1;
         $425 = $424;
        } else {
         $423 = $$idx2$val$i$i$i >>> 16;
         $$lobit$i$i27$i = $423 & 1;
         $425 = $$lobit$i$i27$i;
        }
        $426 = ($425|0)==(0);
        if ($426) {
         label = 248;
        } else {
         $617 = 1;$618 = $425;
        }
       }
      } else {
       label = 248;
      }
      if ((label|0) == 248) {
       label = 0;
       $427 = (_ED_IsConst($0)|0);
       $428 = ($427|0)==(0);
       $429 = $428&1;
       if ($428) {
        $617 = $429;$618 = 0;
       } else {
        $$055$i$i = 0;$$056$i$i = $429;$$057$i$i = 0;$619 = 1;
        label = 262;
        break;
       }
      }
      _LoadExpr(0,$0);
      (_ED_MakeRValExpr($0)|0);
      _GetCodePos($2);
      _g_push(1,0);
      $430 = HEAP32[11252]|0;
      $$055$i$i = $430;$$056$i$i = $617;$$057$i$i = $618;$619 = 1;
      label = 262;
     } else {
      label = 250;
     }
    } else {
     label = 250;
    }
   } while(0);
   do {
    if ((label|0) == 250) {
     label = 0;
     $431 = HEAP32[$0>>2]|0;
     $432 = ($431|0)==(0|0);
     if (!($432)) {
      $433 = (_SymGetAttr($431,0)|0);
      $434 = ($433|0)==(0|0);
      if (!($434)) {
       $435 = HEAP32[11507]|0;
       _F_ReturnFound($435);
      }
     }
     $436 = HEAP32[$300>>2]|0;
     $437 = ($436|0)==(0);
     if (!($437)) {
      $438 = $436;
      $439 = (_FindStdFunc($438)|0);
      $440 = ($439|0)>(-1);
      if ($440) {
       _HandleStdFunc($439,$410,$0);
       break;
      }
     }
     $441 = HEAP32[$410>>2]|0;
     $442 = $441 & 4;
     $443 = ($442|0)==(0);
     if ($443) {
      $444 = HEAP8[47028]|0;
      $445 = ($444<<24>>24)==(0);
      $446 = HEAP32[$295>>2]|0;
      $$idx59$val$i$i = HEAP32[$446>>2]|0;
      if ($445) {
       $$lobit$i63$i$i = $$idx59$val$i$i >>> 17;
       $$lobit$i63$lobit$i$i = $$lobit$i63$i$i & 1;
       $448 = $$lobit$i63$lobit$i$i ^ 1;
       $449 = $448;
      } else {
       $447 = $$idx59$val$i$i >>> 16;
       $$lobit$i62$i$i = $447 & 1;
       $449 = $$lobit$i62$i$i;
      }
      $450 = ($449|0)!=(0);
      $452 = $450;
     } else {
      $452 = 0;
     }
     $451 = $452&1;
     $$055$i$i = 0;$$056$i$i = 0;$$057$i$i = $451;$619 = 0;
     label = 262;
    }
   } while(0);
   if ((label|0) == 262) {
    label = 0;
    $453 = (_IS_Get(8588)|0);
    $454 = ($453|0)>(199);
    $455 = ((($410)) + 12|0);
    if ($454) {
     $456 = HEAP32[$455>>2]|0;
     $457 = ((($410)) + 16|0);
     $458 = HEAP32[$457>>2]|0;
     $459 = ($456|0)!=(0);
     $460 = ($$057$i$i|0)!=(0);
     $or$cond$i$i$i = $460 & $459;
     if ($or$cond$i$i$i) {
      $461 = ((($410)) + 20|0);
      $462 = HEAP32[$461>>2]|0;
      $463 = ((($462)) + 24|0);
      $464 = HEAP32[$463>>2]|0;
      $465 = (_CheckedSizeOf($464)|0);
      $466 = (($458) - ($465))|0;
      $467 = (($456) + -1)|0;
      $$073$i$i$i = $467;$$074$i$i$i = $466;
     } else {
      $$073$i$i$i = $456;$$074$i$i$i = $458;
     }
     $468 = ($$073$i$i$i>>>0)>(1);
     if ($468) {
      $469 = HEAP32[11252]|0;
      _g_space($$074$i$i$i);
      $470 = HEAP32[11252]|0;
      $471 = (($470) - ($$074$i$i$i))|0;
      HEAP32[11252] = $471;
      $$071$i$i$i = $469;$$175$i$i$i = $$074$i$i$i;
     } else {
      $$071$i$i$i = 0;$$175$i$i$i = 0;
     }
    } else {
     $$071$i$i$i = 0;$$175$i$i$i = 0;
    }
    $$old$i$i$i = HEAP32[11156]|0;
    $$old4$i$i$i = ($$old$i$i$i|0)==(85);
    L378: do {
     if ($$old4$i$i$i) {
      $$179$i$i$i = 0;$$282$i$i$i = 0;$$6$i$i$i = $$175$i$i$i;
     } else {
      $472 = ($$057$i$i|0)==(0);
      $473 = ((($410)) + 4|0);
      if ($472) {
       $$067$i$i$i = 0;$$069$i$i$i = 0;$$078$i$i$i = 0;$$080$i$i$i = 0;$$172$i$i$i = $$071$i$i$i;$$276$i$i$i = $$175$i$i$i;
       while(1) {
        $515 = (($$078$i$i$i) + 1)|0;
        $516 = HEAP32[$455>>2]|0;
        $517 = ($515>>>0)>($516>>>0);
        if ($517) {
         $531 = ($$069$i$i$i|0)==(0);
         if ($531) {
          $532 = HEAP32[$410>>2]|0;
          $533 = $532 & 4;
          $534 = ($533|0)==(0);
          if ($534) {
           _Error(37628,$vararg_buffer95);
           $$170$ph$i$i$i = 1;
          } else {
           $$170$ph$i$i$i = 1;
          }
         } else {
          $$170$ph$i$i$i = $$069$i$i$i;
         }
         _hie1($1);
         $$17084$i$i$i = $$170$ph$i$i$i;$$186$i$i$i = $$067$i$i$i;
         label = 300;
        } else {
         $518 = ($$078$i$i$i|0)==(0);
         if ($518) {
          $519 = HEAP32[$473>>2]|0;
          $520 = ((($519)) + 4|0);
          $521 = HEAP32[$520>>2]|0;
          $$1$i$i$i = $521;
         } else {
          $522 = ((($$067$i$i$i)) + 8|0);
          $523 = HEAP32[$522>>2]|0;
          $524 = ($523|0)==(0|0);
          if ($524) {
           $$1$i$i$i = $$067$i$i$i;
          } else {
           $525 = ((($523)) + 20|0);
           $526 = HEAP32[$525>>2]|0;
           $527 = $526 & 128;
           $528 = ($527|0)==(0);
           if ($528) {
            label = 293;
            break L230;
           } else {
            $$1$i$i$i = $523;
           }
          }
         }
         _hie1($1);
         $535 = ($$069$i$i$i|0)==(0);
         if ($535) {
          $536 = ((($$1$i$i$i)) + 24|0);
          $537 = HEAP32[$536>>2]|0;
          _TypeConversion($1,$537);
          $$068$i$i$i = 512;$$17083$i$i$i = 0;$$185$i$i$i = $$1$i$i$i;
         } else {
          $$17084$i$i$i = $$069$i$i$i;$$186$i$i$i = $$1$i$i$i;
          label = 300;
         }
        }
        if ((label|0) == 300) {
         label = 0;
         $538 = HEAP32[$301>>2]|0;
         $539 = (_PtrConversion($538)|0);
         HEAP32[$301>>2] = $539;
         $$068$i$i$i = 0;$$17083$i$i$i = $$17084$i$i$i;$$185$i$i$i = $$186$i$i$i;
        }
        _LoadExpr($$068$i$i$i,$1);
        $540 = HEAP32[$301>>2]|0;
        $541 = (_TypeOf($540)|0);
        $542 = $541 | $$068$i$i$i;
        $543 = (_sizeofarg($542)|0);
        $544 = ($$276$i$i$i|0)==(0);
        if ($544) {
         $550 = HEAP32[$302>>2]|0;
         _g_push($542,$550);
         $$2$i$i$i = $$172$i$i$i;$$4$i$i$i = 0;
        } else {
         $545 = ($$276$i$i$i>>>0)<($543>>>0);
         $546 = (($$276$i$i$i) - ($543))|0;
         $$377$i$i$i = $545 ? 0 : $546;
         $547 = (($$172$i$i$i) - ($543))|0;
         $548 = $542 | 16;
         $549 = HEAP32[$302>>2]|0;
         _g_putlocal($548,$547,$549);
         $$2$i$i$i = $547;$$4$i$i$i = $$377$i$i$i;
        }
        $551 = (($543) + ($$080$i$i$i))|0;
        $552 = HEAP32[11156]|0;
        $553 = ($552|0)==(52);
        if (!($553)) {
         $$179$i$i$i = $515;$$282$i$i$i = $551;$$6$i$i$i = $$4$i$i$i;
         break L378;
        }
        _NextToken();
        $554 = HEAP32[11156]|0;
        $555 = ($554|0)==(85);
        if ($555) {
         $$179$i$i$i = $515;$$282$i$i$i = $551;$$6$i$i$i = $$4$i$i$i;
         break L378;
        } else {
         $$067$i$i$i = $$185$i$i$i;$$069$i$i$i = $$17083$i$i$i;$$078$i$i$i = $515;$$080$i$i$i = $551;$$172$i$i$i = $$2$i$i$i;$$276$i$i$i = $$4$i$i$i;
        }
       }
      } else {
       $$067$us$i$i$i = 0;$$069$us$i$i$i = 0;$$078$us$i$i$i = 0;$$080$us$i$i$i = 0;$$172$us$i$i$i = $$071$i$i$i;$$276$us$i$i$i = $$175$i$i$i;
      }
      while(1) {
       $474 = (($$078$us$i$i$i) + 1)|0;
       $475 = HEAP32[$455>>2]|0;
       $476 = ($474>>>0)>($475>>>0);
       if ($476) {
        $491 = ($$069$us$i$i$i|0)==(0);
        if ($491) {
         $492 = HEAP32[$410>>2]|0;
         $493 = $492 & 4;
         $494 = ($493|0)==(0);
         if ($494) {
          _Error(37628,$vararg_buffer93);
          $$170$ph$us$i$i$i = 1;
         } else {
          $$170$ph$us$i$i$i = 1;
         }
        } else {
         $$170$ph$us$i$i$i = $$069$us$i$i$i;
        }
        _hie1($1);
        $$17084$us$i$i$i = $$170$ph$us$i$i$i;$$186$us$i$i$i = $$067$us$i$i$i;
        label = 280;
       } else {
        $477 = ($$078$us$i$i$i|0)==(0);
        if ($477) {
         $485 = HEAP32[$473>>2]|0;
         $486 = ((($485)) + 4|0);
         $487 = HEAP32[$486>>2]|0;
         $$1$us$i$i$i = $487;
        } else {
         $478 = ((($$067$us$i$i$i)) + 8|0);
         $479 = HEAP32[$478>>2]|0;
         $480 = ($479|0)==(0|0);
         if ($480) {
          $$1$us$i$i$i = $$067$us$i$i$i;
         } else {
          $481 = ((($479)) + 20|0);
          $482 = HEAP32[$481>>2]|0;
          $483 = $482 & 128;
          $484 = ($483|0)==(0);
          if ($484) {
           label = 293;
           break L230;
          } else {
           $$1$us$i$i$i = $479;
          }
         }
        }
        _hie1($1);
        $488 = ($$069$us$i$i$i|0)==(0);
        if ($488) {
         $489 = ((($$1$us$i$i$i)) + 24|0);
         $490 = HEAP32[$489>>2]|0;
         _TypeConversion($1,$490);
         $$068$us$i$i$i = 512;$$17083$us$i$i$i = 0;$$185$us$i$i$i = $$1$us$i$i$i;
        } else {
         $$17084$us$i$i$i = $$069$us$i$i$i;$$186$us$i$i$i = $$1$us$i$i$i;
         label = 280;
        }
       }
       if ((label|0) == 280) {
        label = 0;
        $495 = HEAP32[$301>>2]|0;
        $496 = (_PtrConversion($495)|0);
        HEAP32[$301>>2] = $496;
        $$068$us$i$i$i = 0;$$17083$us$i$i$i = $$17084$us$i$i$i;$$185$us$i$i$i = $$186$us$i$i$i;
       }
       _LoadExpr($$068$us$i$i$i,$1);
       $497 = HEAP32[$301>>2]|0;
       $498 = (_TypeOf($497)|0);
       $499 = $498 | $$068$us$i$i$i;
       $500 = HEAP32[$455>>2]|0;
       $501 = ($474|0)==($500|0);
       if ($501) {
        $$181$us$i$i$i = $$080$us$i$i$i;$$3$us$i$i$i = $$172$us$i$i$i;$$5$us$i$i$i = $$276$us$i$i$i;
       } else {
        $502 = (_sizeofarg($499)|0);
        $503 = ($$276$us$i$i$i|0)==(0);
        if ($503) {
         $509 = HEAP32[$302>>2]|0;
         _g_push($499,$509);
         $$2$us$i$i$i = $$172$us$i$i$i;$$4$us$i$i$i = 0;
        } else {
         $504 = ($$276$us$i$i$i>>>0)<($502>>>0);
         $505 = (($$276$us$i$i$i) - ($502))|0;
         $$377$us$i$i$i = $504 ? 0 : $505;
         $506 = (($$172$us$i$i$i) - ($502))|0;
         $507 = $499 | 16;
         $508 = HEAP32[$302>>2]|0;
         _g_putlocal($507,$506,$508);
         $$2$us$i$i$i = $506;$$4$us$i$i$i = $$377$us$i$i$i;
        }
        $510 = (($502) + ($$080$us$i$i$i))|0;
        $$181$us$i$i$i = $510;$$3$us$i$i$i = $$2$us$i$i$i;$$5$us$i$i$i = $$4$us$i$i$i;
       }
       $511 = HEAP32[11156]|0;
       $512 = ($511|0)==(52);
       if (!($512)) {
        $$179$i$i$i = $474;$$282$i$i$i = $$181$us$i$i$i;$$6$i$i$i = $$5$us$i$i$i;
        break L378;
       }
       _NextToken();
       $513 = HEAP32[11156]|0;
       $514 = ($513|0)==(85);
       if ($514) {
        $$179$i$i$i = $474;$$282$i$i$i = $$181$us$i$i$i;$$6$i$i$i = $$5$us$i$i$i;
        break;
       } else {
        $$067$us$i$i$i = $$185$us$i$i$i;$$069$us$i$i$i = $$17083$us$i$i$i;$$078$us$i$i$i = $474;$$080$us$i$i$i = $$181$us$i$i$i;$$172$us$i$i$i = $$3$us$i$i$i;$$276$us$i$i$i = $$5$us$i$i$i;
       }
      }
     }
    } while(0);
    $556 = HEAP32[$455>>2]|0;
    $557 = ($$179$i$i$i>>>0)<($556>>>0);
    if ($557) {
     _Error(37695,$vararg_buffer97);
    }
    $558 = (($$6$i$i$i) + ($$282$i$i$i))|0;
    (_ConsumeRParen()|0);
    if ($619) {
     $559 = ($$057$i$i|0)==(0);
     if ($559) {
      $560 = ($$056$i$i|0)==(0);
      do {
       if ($560) {
        _LoadExpr(0,$0);
        $$1$i29$i = 0;
       } else {
        $561 = ($558|0)==(0);
        if ($561) {
         _RemoveCode($2);
         $$1$i29$i = 0;
         break;
        } else {
         _g_getlocal(1,$$055$i$i);
         $$1$i29$i = $$056$i$i;
         break;
        }
       }
      } while(0);
      $562 = HEAP32[$295>>2]|0;
      $563 = ((($562)) + 8|0);
      $564 = (_TypeOf($563)|0);
      _g_callind($564,$558,$$055$i$i);
      $$2$i30$i = $$1$i29$i;
     } else {
      _g_callind(16384,$558,$$055$i$i);
      $$2$i30$i = $$056$i$i;
     }
     $565 = ($$2$i30$i|0)==(0);
     if (!($565)) {
      _g_drop(2);
      (_pop(1)|0);
     }
     $566 = HEAP32[$295>>2]|0;
     $567 = ((($566)) + 8|0);
     HEAP32[$295>>2] = $567;
    } else {
     $568 = HEAP32[$295>>2]|0;
     $569 = (_TypeOf($568)|0);
     $570 = HEAP32[$300>>2]|0;
     _g_call($569,$570,$558);
    }
    (_ED_MakeRValExpr($0)|0);
    $571 = HEAP32[$295>>2]|0;
    $572 = (_GetFuncReturn($571)|0);
    HEAP32[$295>>2] = $572;
   }
   continue L230;
   break;
  }
  case 44:  {
   $573 = HEAP32[$295>>2]|0;
   $$idx23$val$i = HEAP32[$573>>2]|0;
   $574 = $$idx23$val$i & 112;
   $575 = ($574|0)==(64);
   if (!($575)) {
    _Error(37730,$vararg_buffer99);
   }
   _StructRef($0);
   continue L230;
   break;
  }
  case 45:  {
   $576 = HEAP32[$295>>2]|0;
   $$idx21$val$i = HEAP32[$576>>2]|0;
   $577 = $$idx21$val$i & 15;
   $578 = ($577|0)==(12);
   if ($578) {
    $579 = (_ArrayToPtr($576)|0);
    HEAP32[$295>>2] = $579;
    $$idx20$val$pre$i = HEAP32[$579>>2]|0;
    $$idx20$val$i = $$idx20$val$pre$i;$582 = $579;
   } else {
    $$idx20$val$i = $$idx21$val$i;$582 = $576;
   }
   $580 = $$idx20$val$i & 112;
   $581 = ($580|0)==(48);
   if ($581) {
    $583 = (_Indirect($582)|0);
    $$idx22$val$i = HEAP32[$583>>2]|0;
    $584 = $$idx22$val$i & 112;
    $585 = ($584|0)==(64);
    if (!($585)) {
     label = 330;
    }
   } else {
    label = 330;
   }
   if ((label|0) == 330) {
    label = 0;
    _Error(37746,$vararg_buffer101);
   }
   _StructRef($0);
   continue L230;
   break;
  }
  default: {
   label = 352;
   break L230;
  }
  }
 }
 if ((label|0) == 172) {
  HEAP32[$vararg_buffer75>>2] = $316;
  $vararg_ptr78 = ((($vararg_buffer75)) + 4|0);
  HEAP32[$vararg_ptr78>>2] = $311;
  _Internal(36916,$vararg_buffer75);
  // unreachable;
 }
 else if ((label|0) == 219) {
  HEAP32[$vararg_buffer85>>2] = $$idx81$val$i$i;
  _Internal(36972,$vararg_buffer85);
  // unreachable;
 }
 else if ((label|0) == 231) {
  HEAP32[$vararg_buffer88>>2] = $$idx98$val$i$i;
  _Internal(36972,$vararg_buffer88);
  // unreachable;
 }
 else if ((label|0) == 293) {
  $529 = HEAP32[3332]|0;
  $530 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$529 & 1]($530,37664,37370,359);
  // unreachable;
 }
 else if ((label|0) == 332) {
  _NextToken();
  $$idx$val$i52 = HEAP32[$$idx93$i$i>>2]|0;
  $$lobit$i$i53 = $$idx$val$i52 & 256;
  $586 = ($$lobit$i$i53|0)==(0);
  if ($586) {
   _Error(37026,$vararg_buffer103);
   STACKTOP = sp;return;
  }
  $587 = HEAP32[$295>>2]|0;
  $$idx12$val$i55 = HEAP32[$587>>2]|0;
  $$lobit$i14$i56 = $$idx12$val$i55 & 2048;
  $588 = ($$lobit$i14$i56|0)==(0);
  if ($588) {
   $589 = $587;
  } else {
   _Error(37041,$vararg_buffer105);
   $$pre$i57 = HEAP32[$295>>2]|0;
   $589 = $$pre$i57;
  }
  $590 = (_TypeOf($589)|0);
  $$idx$val$i$i58 = HEAP32[$$idx93$i$i>>2]|0;
  $591 = $$idx$val$i$i58 & 255;
  $592 = ($591|0)==(64);
  if ($592) {
   _g_push(1,0);
  }
  _LoadExpr(0,$0);
  $593 = $590 | 512;
  _g_save($593);
  $594 = HEAP32[$295>>2]|0;
  $$idx13$val$i60 = HEAP32[$594>>2]|0;
  $595 = $$idx13$val$i60 & 15;
  $596 = ($595|0)==(13);
  $597 = $590 | 544;
  if ($596) {
   $598 = ((($594)) + 8|0);
   $599 = (_CheckedSizeOf($598)|0);
   _g_inc($597,$599);
  } else {
   _g_inc($597,1);
  }
  _Store($0,0);
  _g_restore($593);
  (_ED_MakeRValExpr($0)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 342) {
  _NextToken();
  $$idx$val$i = HEAP32[$$idx93$i$i>>2]|0;
  $$lobit$i$i = $$idx$val$i & 256;
  $600 = ($$lobit$i$i|0)==(0);
  if ($600) {
   _Error(37026,$vararg_buffer107);
   STACKTOP = sp;return;
  }
  $601 = HEAP32[$295>>2]|0;
  $$idx12$val$i = HEAP32[$601>>2]|0;
  $$lobit$i14$i = $$idx12$val$i & 2048;
  $602 = ($$lobit$i14$i|0)==(0);
  if ($602) {
   $603 = $601;
  } else {
   _Error(37110,$vararg_buffer109);
   $$pre$i = HEAP32[$295>>2]|0;
   $603 = $$pre$i;
  }
  $604 = (_TypeOf($603)|0);
  $$idx$val$i$i = HEAP32[$$idx93$i$i>>2]|0;
  $605 = $$idx$val$i$i & 255;
  $606 = ($605|0)==(64);
  if ($606) {
   _g_push(1,0);
  }
  _LoadExpr(0,$0);
  $607 = $604 | 512;
  _g_save($607);
  $608 = HEAP32[$295>>2]|0;
  $$idx13$val$i = HEAP32[$608>>2]|0;
  $609 = $$idx13$val$i & 15;
  $610 = ($609|0)==(13);
  $611 = $604 | 544;
  if ($610) {
   $612 = ((($608)) + 8|0);
   $613 = (_CheckedSizeOf($612)|0);
   _g_dec($611,$613);
  } else {
   _g_dec($611,1);
  }
  _Store($0,0);
  _g_restore($607);
  (_ED_MakeRValExpr($0)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 352) {
  STACKTOP = sp;return;
 }
}
function _hie1($0) {
 $0 = $0|0;
 var $$$i$i = 0, $$0$i = 0, $$7$i$i = 0, $$idx$i$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx15$i$i = 0, $$idx15$val$i$i = 0, $$idx24$val$i = 0, $$idx25$val$i = 0, $$idx27$val$i = 0, $$idx29$i = 0, $$idx29$val$i = 0, $$idx30$val$i = 0, $$idx32$val$i = 0, $$idx33$val$i = 0, $$lobit$i$i = 0, $$lobit$i40$i = 0, $$lobit$i41$i = 0, $$pre = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond47$i = 0, $trunc$i = 0, $trunc$i$clear = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer3 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0, $vararg_buffer46 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0, $vararg_buffer60 = 0;
 var $vararg_ptr19 = 0, $vararg_ptr23 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $vararg_buffer60 = sp + 408|0;
 $vararg_buffer58 = sp + 400|0;
 $vararg_buffer54 = sp + 392|0;
 $vararg_buffer50 = sp + 384|0;
 $vararg_buffer46 = sp + 376|0;
 $vararg_buffer42 = sp + 368|0;
 $vararg_buffer38 = sp + 360|0;
 $vararg_buffer34 = sp + 352|0;
 $vararg_buffer30 = sp + 344|0;
 $vararg_buffer26 = sp + 336|0;
 $vararg_buffer24 = sp + 328|0;
 $vararg_buffer20 = sp + 320|0;
 $vararg_buffer16 = sp + 312|0;
 $vararg_buffer14 = sp + 304|0;
 $vararg_buffer12 = sp + 296|0;
 $vararg_buffer10 = sp + 288|0;
 $vararg_buffer6 = sp + 280|0;
 $vararg_buffer3 = sp + 272|0;
 $vararg_buffer1 = sp + 264|0;
 $vararg_buffer = sp + 256|0;
 $1 = sp + 192|0;
 $2 = sp + 128|0;
 $3 = sp + 424|0;
 $4 = sp + 416|0;
 $5 = sp + 64|0;
 $6 = sp;
 $7 = HEAP8[46962]|0;
 $8 = ($7<<24>>24)==(0);
 $9 = HEAP32[11252]|0;
 do {
  if ($8) {
   HEAP32[$2>>2] = 0;
   $69 = (_GetLocalLabel()|0);
   _hieAnd($0,$69,$2);
   $70 = HEAP32[11156]|0;
   $71 = ($70|0)==(66);
   if ($71) {
    $$idx15$i$i = ((($0)) + 8|0);
    $$idx15$val$i$i = HEAP32[$$idx15$i$i>>2]|0;
    $$lobit$i40$i = $$idx15$val$i$i & 2048;
    $72 = ($$lobit$i40$i|0)==(0);
    if ($72) {
     $73 = $$idx15$val$i$i | 1024;
     HEAP32[$$idx15$i$i>>2] = $73;
    }
    _LoadExpr(512,$0);
    $74 = HEAP32[$2>>2]|0;
    $75 = ($74|0)==(0);
    if ($75) {
     _g_truejump(0,$69);
    }
    HEAP32[$2>>2] = 1;
    $76 = HEAP32[11156]|0;
    $77 = ($76|0)==(66);
    if ($77) {
     $$idx$i$i = ((($1)) + 8|0);
     while(1) {
      _NextToken();
      HEAP32[$3>>2] = 0;
      _hieAnd($1,$69,$3);
      $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
      $$lobit$i41$i = $$idx$val$i$i & 2048;
      $78 = ($$lobit$i41$i|0)==(0);
      if ($78) {
       $79 = $$idx$val$i$i | 1024;
       HEAP32[$$idx$i$i>>2] = $79;
      }
      _LoadExpr(512,$1);
      _g_truejump(0,$69);
      $80 = HEAP32[11156]|0;
      $81 = ($80|0)==(66);
      if (!($81)) {
       break;
      }
     }
    }
    (_ED_MakeRValExpr($0)|0);
    $82 = HEAP32[$$idx15$i$i>>2]|0;
    $83 = $82 & -3073;
    $84 = $83 | 2048;
    HEAP32[$$idx15$i$i>>2] = $84;
   }
   $85 = HEAP32[$2>>2]|0;
   $86 = ($85|0)==(0);
   if (!($86)) {
    $87 = (_GetLocalLabel()|0);
    _g_getimmed(33,0,0);
    _g_falsejump(0,$87);
    _g_defcodelabel($69);
    _g_getimmed(33,1,0);
    _g_defcodelabel($87);
   }
   $88 = HEAP32[11252]|0;
   $89 = ($88|0)==($9|0);
   if (!($89)) {
    $90 = HEAP8[47051]|0;
    $91 = ($90<<24>>24)==(0);
    if ($91) {
     HEAP32[$vararg_buffer38>>2] = $88;
     $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
     HEAP32[$vararg_ptr41>>2] = $9;
     _Internal(36916,$vararg_buffer38);
     // unreachable;
    } else {
     HEAP32[$vararg_buffer34>>2] = $88;
     $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
     HEAP32[$vararg_ptr37>>2] = $9;
     _Error(36916,$vararg_buffer34);
     break;
    }
   }
  } else {
   _ExprWithCheck(6,$0);
   $10 = (_ED_IsConstAbsInt($0)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    _Error(37887,$vararg_buffer);
    (_ED_MakeConstAbsInt($0,1)|0);
   }
   $12 = HEAP32[11156]|0;
   $13 = ($12|0)==(61);
   if ($13) {
    $14 = ((($0)) + 16|0);
    $15 = ((($1)) + 16|0);
    while(1) {
     _NextToken();
     _ExprWithCheck(6,$1);
     $16 = (_ED_IsConstAbsInt($1)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      _Error(37887,$vararg_buffer1);
      (_ED_MakeConstAbsInt($1,1)|0);
     }
     $18 = HEAP32[$14>>2]|0;
     $19 = ($18|0)!=(0);
     $20 = HEAP32[$15>>2]|0;
     $21 = ($20|0)!=(0);
     $22 = $19 & $21;
     $23 = $22&1;
     HEAP32[$14>>2] = $23;
     $24 = HEAP32[11156]|0;
     $25 = ($24|0)==(61);
     if (!($25)) {
      break;
     }
    }
   }
   $26 = HEAP32[11252]|0;
   $27 = ($26|0)==($9|0);
   do {
    if (!($27)) {
     $28 = HEAP8[47051]|0;
     $29 = ($28<<24>>24)==(0);
     if ($29) {
      HEAP32[$vararg_buffer6>>2] = $26;
      $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
      HEAP32[$vararg_ptr9>>2] = $9;
      _Internal(36916,$vararg_buffer6);
      // unreachable;
     } else {
      HEAP32[$vararg_buffer3>>2] = $26;
      $vararg_ptr5 = ((($vararg_buffer3)) + 4|0);
      HEAP32[$vararg_ptr5>>2] = $9;
      _Error(36916,$vararg_buffer3);
      break;
     }
    }
   } while(0);
   $30 = (_ED_IsConstAbsInt($0)|0);
   $31 = ($30|0)==(0);
   if ($31) {
    _Error(37887,$vararg_buffer10);
    (_ED_MakeConstAbsInt($0,1)|0);
   }
   $32 = HEAP32[11156]|0;
   $33 = ($32|0)==(66);
   L48: do {
    if ($33) {
     $34 = ((($0)) + 16|0);
     $35 = ((($2)) + 16|0);
     $36 = ((($1)) + 16|0);
     while(1) {
      _NextToken();
      $37 = HEAP32[11252]|0;
      _ExprWithCheck(6,$2);
      $38 = (_ED_IsConstAbsInt($2)|0);
      $39 = ($38|0)==(0);
      if ($39) {
       _Error(37887,$vararg_buffer12);
       (_ED_MakeConstAbsInt($2,1)|0);
      }
      $40 = HEAP32[11156]|0;
      $41 = ($40|0)==(61);
      if ($41) {
       while(1) {
        _NextToken();
        _ExprWithCheck(6,$1);
        $42 = (_ED_IsConstAbsInt($1)|0);
        $43 = ($42|0)==(0);
        if ($43) {
         _Error(37887,$vararg_buffer14);
         (_ED_MakeConstAbsInt($1,1)|0);
        }
        $44 = HEAP32[$35>>2]|0;
        $45 = ($44|0)!=(0);
        $46 = HEAP32[$36>>2]|0;
        $47 = ($46|0)!=(0);
        $48 = $45 & $47;
        $49 = $48&1;
        HEAP32[$35>>2] = $49;
        $50 = HEAP32[11156]|0;
        $51 = ($50|0)==(61);
        if (!($51)) {
         break;
        }
       }
      }
      $52 = HEAP32[11252]|0;
      $53 = ($52|0)==($37|0);
      if (!($53)) {
       $54 = HEAP8[47051]|0;
       $55 = ($54<<24>>24)==(0);
       if ($55) {
        break;
       }
       HEAP32[$vararg_buffer16>>2] = $52;
       $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
       HEAP32[$vararg_ptr19>>2] = $37;
       _Error(36916,$vararg_buffer16);
      }
      $56 = (_ED_IsConstAbsInt($2)|0);
      $57 = ($56|0)==(0);
      if ($57) {
       _Error(37887,$vararg_buffer24);
       (_ED_MakeConstAbsInt($2,1)|0);
      }
      $58 = HEAP32[$34>>2]|0;
      $59 = HEAP32[$35>>2]|0;
      $60 = $59 | $58;
      $61 = ($60|0)!=(0);
      $62 = $61&1;
      HEAP32[$34>>2] = $62;
      $63 = HEAP32[11156]|0;
      $64 = ($63|0)==(66);
      if (!($64)) {
       break L48;
      }
     }
     HEAP32[$vararg_buffer20>>2] = $52;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = $37;
     _Internal(36916,$vararg_buffer20);
     // unreachable;
    }
   } while(0);
   $65 = HEAP32[11252]|0;
   $66 = ($65|0)==($9|0);
   if (!($66)) {
    $67 = HEAP8[47051]|0;
    $68 = ($67<<24>>24)==(0);
    if ($68) {
     HEAP32[$vararg_buffer30>>2] = $65;
     $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
     HEAP32[$vararg_ptr33>>2] = $9;
     _Internal(36916,$vararg_buffer30);
     // unreachable;
    } else {
     HEAP32[$vararg_buffer26>>2] = $65;
     $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
     HEAP32[$vararg_ptr29>>2] = $9;
     _Error(36916,$vararg_buffer26);
     break;
    }
   }
  }
 } while(0);
 $92 = HEAP32[11156]|0;
 $93 = ($92|0)==(83);
 if ($93) {
  _NextToken();
  $$idx29$i = ((($0)) + 8|0);
  $$idx29$val$i = HEAP32[$$idx29$i>>2]|0;
  $$lobit$i$i = $$idx29$val$i & 2048;
  $94 = ($$lobit$i$i|0)==(0);
  if ($94) {
   $95 = $$idx29$val$i | 1024;
   HEAP32[$$idx29$i>>2] = $95;
  }
  _LoadExpr(0,$0);
  $96 = (_GetLocalLabel()|0);
  _g_falsejump(0,$96);
  $97 = HEAP32[11252]|0;
  _hie1($5);
  $98 = HEAP32[11252]|0;
  $99 = ($98|0)==($97|0);
  do {
   if (!($99)) {
    $100 = HEAP8[47051]|0;
    $101 = ($100<<24>>24)==(0);
    if ($101) {
     HEAP32[$vararg_buffer46>>2] = $98;
     $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
     HEAP32[$vararg_ptr49>>2] = $97;
     _Internal(36916,$vararg_buffer46);
     // unreachable;
    } else {
     HEAP32[$vararg_buffer42>>2] = $98;
     $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
     HEAP32[$vararg_ptr45>>2] = $97;
     _Error(36916,$vararg_buffer42);
     break;
    }
   }
  } while(0);
  $102 = (_ED_IsNullPtr($5)|0);
  $103 = ((($5)) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $$idx33$val$i = HEAP32[$104>>2]|0;
  $105 = $$idx33$val$i & 15;
  $106 = ($105|0)==(9);
  if (!($106)) {
   _LoadExpr(0,$5);
   (_ED_MakeRValExpr($5)|0);
   $107 = HEAP32[$103>>2]|0;
   $108 = (_PtrConversion($107)|0);
   HEAP32[$103>>2] = $108;
  }
  _GetCodePos($4);
  $109 = (_GetLocalLabel()|0);
  (_ConsumeColon()|0);
  _g_jump($109);
  _g_defcodelabel($96);
  $110 = HEAP32[11252]|0;
  _hie1($6);
  $111 = HEAP32[11252]|0;
  $112 = ($111|0)==($110|0);
  do {
   if (!($112)) {
    $113 = HEAP8[47051]|0;
    $114 = ($113<<24>>24)==(0);
    if ($114) {
     HEAP32[$vararg_buffer54>>2] = $111;
     $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
     HEAP32[$vararg_ptr57>>2] = $110;
     _Internal(36916,$vararg_buffer54);
     // unreachable;
    } else {
     HEAP32[$vararg_buffer50>>2] = $111;
     $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
     HEAP32[$vararg_ptr53>>2] = $110;
     _Error(36916,$vararg_buffer50);
     break;
    }
   }
  } while(0);
  $115 = (_ED_IsNullPtr($6)|0);
  $116 = ((($6)) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $$idx32$val$i = HEAP32[$117>>2]|0;
  $118 = $$idx32$val$i & 15;
  $119 = ($118|0)==(9);
  if ($119) {
   $124 = $117;
  } else {
   _LoadExpr(0,$6);
   (_ED_MakeRValExpr($6)|0);
   $120 = HEAP32[$116>>2]|0;
   $121 = (_PtrConversion($120)|0);
   HEAP32[$116>>2] = $121;
   $124 = $121;
  }
  $122 = HEAP32[$103>>2]|0;
  $$idx24$val$i = HEAP32[$122>>2]|0;
  $123 = $$idx24$val$i & 112;
  $trunc$i = $123&255;
  $trunc$i$clear = $trunc$i & 127;
  L99: do {
   switch ($trunc$i$clear<<24>>24) {
   case 16:  {
    $$idx$val$i = HEAP32[$124>>2]|0;
    $125 = $$idx$val$i & 112;
    $126 = ($125|0)==(16);
    if ($126) {
     $127 = $$idx24$val$i & 15;
     $128 = ($127|0)==(4);
     $129 = $$idx$val$i & 15;
     $130 = ($129|0)==(4);
     $or$cond47$i = $128 | $130;
     $131 = $$idx24$val$i & 384;
     $132 = ($131|0)==(128);
     $133 = $$idx$val$i & 384;
     if ($or$cond47$i) {
      if ($132) {
       $136 = 10988;
      } else {
       $134 = ($133|0)==(128);
       $$$i$i = $134 ? 10988 : 10972;
       $136 = $$$i$i;
      }
     } else {
      if ($132) {
       $136 = 10956;
      } else {
       $135 = ($133|0)==(128);
       $$7$i$i = $135 ? 10956 : 10940;
       $136 = $$7$i$i;
      }
     }
     _TypeConversion($6,$136);
     _GetCodePos($1);
     _TypeConversion($5,$136);
     _GetCodePos($2);
     $137 = (_CodeRangeIsEmpty($1,$2)|0);
     $138 = ($137|0)==(0);
     if ($138) {
      _MoveCode($1,$2,$4);
     }
     $$0$i = $136;
    } else {
     label = 81;
    }
    break;
   }
   case 48:  {
    $$idx27$val$i = HEAP32[$124>>2]|0;
    $139 = $$idx27$val$i & 112;
    $140 = ($139|0)==(48);
    if (!($140)) {
     $147 = ($115|0)==(0);
     if ($147) {
      label = 81;
      break L99;
     } else {
      $$0$i = $122;
      break L99;
     }
    }
    $141 = (_Indirect($122)|0);
    $142 = HEAP32[$116>>2]|0;
    $143 = (_Indirect($142)|0);
    $144 = (_TypeCmp($141,$143)|0);
    $145 = ($144>>>0)<(4);
    if ($145) {
     _Error(37924,$vararg_buffer58);
    }
    $146 = HEAP32[$103>>2]|0;
    $$0$i = $146;
    break;
   }
   default: {
    label = 81;
   }
   }
  } while(0);
  do {
   if ((label|0) == 81) {
    $148 = ($102|0)==(0);
    if (!($148)) {
     $$idx25$val$i = HEAP32[$124>>2]|0;
     $149 = $$idx25$val$i & 112;
     $150 = ($149|0)==(48);
     if ($150) {
      $$0$i = $124;
      break;
     }
    }
    $151 = $$idx24$val$i & 15;
    $152 = ($151|0)==(9);
    if ($152) {
     $$idx30$val$i = HEAP32[$124>>2]|0;
     $153 = $$idx30$val$i & 15;
     $154 = ($153|0)==(9);
     if ($154) {
      $$0$i = $124;
      break;
     }
    }
    _Error(38888,$vararg_buffer60);
    $155 = HEAP32[$103>>2]|0;
    $$0$i = $155;
   }
  } while(0);
  _g_defcodelabel($109);
  (_ED_MakeRValExpr($0)|0);
  $156 = ((($0)) + 4|0);
  HEAP32[$156>>2] = $$0$i;
  $$pre = HEAP32[11156]|0;
  $157 = $$pre;
 } else {
  $157 = $92;
 }
 do {
  switch ($157|0) {
  case 70:  {
   _Assignment($0);
   STACKTOP = sp;return;
   break;
  }
  case 50:  {
   _addsubeq(11068,$0,37951);
   STACKTOP = sp;return;
   break;
  }
  case 54:  {
   _addsubeq(11080,$0,37954);
   STACKTOP = sp;return;
   break;
  }
  case 57:  {
   _opeq(11092,$0,37957);
   STACKTOP = sp;return;
   break;
  }
  case 59:  {
   _opeq(11104,$0,37960);
   STACKTOP = sp;return;
   break;
  }
  case 81:  {
   _opeq(11116,$0,37963);
   STACKTOP = sp;return;
   break;
  }
  case 75:  {
   _opeq(11128,$0,37966);
   STACKTOP = sp;return;
   break;
  }
  case 77:  {
   _opeq(11140,$0,37970);
   STACKTOP = sp;return;
   break;
  }
  case 62:  {
   _opeq(11152,$0,37974);
   STACKTOP = sp;return;
   break;
  }
  case 79:  {
   _opeq(11164,$0,37977);
   STACKTOP = sp;return;
   break;
  }
  case 67:  {
   _opeq(11176,$0,37980);
   STACKTOP = sp;return;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
 } while(0);
}
function _StructRef($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$idx$val = 0, $$058 = 0, $$idx60 = 0, $$idx60$val = 0, $$idx61$val = 0, $$idx62$val = 0, $$idx63$val = 0, $$idx65$val = 0, $$idx66$val = 0, $$idx68$val = 0, $$idx68$val$sink = 0, $$idx69 = 0, $$idx69$val = 0, $$idx70 = 0, $$idx70$val = 0, $$lobit$i = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 20|0;
 _NextToken();
 $2 = HEAP32[11156]|0;
 $3 = ($2|0)==(40);
 if (!($3)) {
  _Error(37770,$vararg_buffer);
  (_ED_MakeConstAbs($0,0,10940)|0);
  STACKTOP = sp;return;
 }
 (_strcpy($1,(44644))|0);
 _NextToken();
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_FindStructField($5,$1)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$vararg_buffer1>>2] = $1;
  _Error(37790,$vararg_buffer1);
  (_ED_MakeConstAbs($0,0,10940)|0);
  STACKTOP = sp;return;
 }
 $$idx60 = ((($0)) + 8|0);
 $$idx60$val = HEAP32[$$idx60>>2]|0;
 $$lobit$i = $$idx60$val & 256;
 $8 = ($$lobit$i|0)==(0);
 if (!($8)) {
  $9 = HEAP32[$4>>2]|0;
  $$idx62$val = HEAP32[$9>>2]|0;
  $10 = $$idx62$val & 15;
  $11 = ($10|0)==(13);
  if ($11) {
   _LoadExpr(0,$0);
   (_ED_MakeLValExpr($0)|0);
  }
 }
 $12 = HEAP32[$4>>2]|0;
 $$idx68$val = HEAP32[$12>>2]|0;
 $13 = $$idx68$val & 112;
 $14 = ($13|0)==(64);
 if ($14) {
  $$idx68$val$sink = $$idx68$val;
 } else {
  $15 = (_Indirect($12)|0);
  $$idx66$val = HEAP32[$15>>2]|0;
  $$idx68$val$sink = $$idx66$val;
 }
 $16 = $$idx68$val$sink & 260096;
 $17 = ((($6)) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $$idx65$val = HEAP32[$18>>2]|0;
 $19 = $$idx65$val & 260096;
 $20 = $19 | $16;
 $21 = ($19|0)==($20|0);
 if ($21) {
  $$0 = $18;$$0$idx$val = $$idx65$val;
 } else {
  $22 = (_TypeDup($18)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 | $16;
  HEAP32[$22>>2] = $24;
  $$0 = $22;$$0$idx$val = $24;
 }
 $$idx63$val = HEAP32[$$idx60>>2]|0;
 $25 = $$idx63$val & 511;
 $26 = ($25|0)==(64);
 if ($26) {
  $27 = HEAP32[$4>>2]|0;
  $$idx61$val = HEAP32[$27>>2]|0;
  $28 = $$idx61$val & 15;
  $29 = ($28|0)==(13);
  if (!($29)) {
   $30 = (_SizeOf($27)|0);
   $31 = ((($6)) + 36|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + ($30))|0;
   $34 = ($33>>>0)<(5);
   if (!($34)) {
    $35 = HEAP32[3332]|0;
    $36 = HEAP32[3331]|0;
    FUNCTION_TABLE_viiii[$35 & 1]($36,37827,37370,1176);
    // unreachable;
   }
   switch ($30|0) {
   case 1:  {
    $$058 = 43;
    break;
   }
   case 2:  {
    $$058 = 41;
    break;
   }
   case 4: case 3:  {
    $$058 = 40;
    break;
   }
   default: {
    HEAP32[$vararg_buffer3>>2] = $30;
    _Internal(37863,$vararg_buffer3);
    // unreachable;
   }
   }
   $37 = $32 << 3;
   $$idx70 = ((($6)) + 20|0);
   $$idx70$val = HEAP32[$$idx70>>2]|0;
   $38 = $$idx70$val & 16388;
   $39 = ($38|0)==(16388);
   if ($39) {
    $40 = ((($6)) + 40|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + ($37))|0;
    _g_asr($$058,$42);
    $43 = ((($6)) + 44|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + ($42))|0;
    $46 = $30 << 3;
    $47 = ($45|0)==($46|0);
    if (!($47)) {
     $48 = 1 << $44;
     $49 = (($48) + -1)|0;
     _g_and(41,$49);
    }
   } else {
    _g_asr($$058,$37);
   }
   HEAP32[$4>>2] = $$0;
   STACKTOP = sp;return;
  }
 }
 $50 = ((($6)) + 36|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ((($0)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + ($51))|0;
 HEAP32[$52>>2] = $54;
 HEAP32[$4>>2] = $$0;
 $55 = $$0$idx$val & 15;
 $56 = ($55|0)==(12);
 $57 = $$idx63$val & -257;
 $58 = $$idx63$val | 256;
 $storemerge = $56 ? $57 : $58;
 HEAP32[$$idx60>>2] = $storemerge;
 $$idx69 = ((($6)) + 20|0);
 $$idx69$val = HEAP32[$$idx69>>2]|0;
 $59 = $$idx69$val & 16388;
 $60 = ($59|0)==(16388);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $61 = ((($6)) + 40|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ((($6)) + 44|0);
 $64 = HEAP32[$63>>2]|0;
 _ED_MakeBitField($0,$62,$64);
 STACKTOP = sp;return;
}
function _hie2($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 _hie_internal(11188,$0,7,$1);
 STACKTOP = sp;return;
}
function _hieAnd($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx = 0, $$idx$val = 0, $$idx11 = 0, $$idx11$val = 0, $$lobit$i = 0, $$lobit$i12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer2 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $3 = sp + 80|0;
 $4 = sp;
 $5 = HEAP32[11252]|0;
 _hie_internal(11188,$0,7,$3);
 $6 = HEAP32[11252]|0;
 $7 = ($6|0)==($5|0);
 do {
  if (!($7)) {
   $8 = HEAP8[47051]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    HEAP32[$vararg_buffer2>>2] = $6;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $5;
    _Internal(36916,$vararg_buffer2);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer>>2] = $6;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $5;
    _Error(36916,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $10 = HEAP32[11156]|0;
 $11 = ($10|0)==(61);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = 1;
 $12 = (_GetLocalLabel()|0);
 $$idx11 = ((($0)) + 8|0);
 $$idx11$val = HEAP32[$$idx11>>2]|0;
 $$lobit$i = $$idx11$val & 2048;
 $13 = ($$lobit$i|0)==(0);
 if ($13) {
  $14 = $$idx11$val | 1024;
  HEAP32[$$idx11>>2] = $14;
 }
 _LoadExpr(512,$0);
 _g_falsejump(0,$12);
 $15 = HEAP32[11156]|0;
 $16 = ($15|0)==(61);
 if ($16) {
  $$idx = ((($4)) + 8|0);
  while(1) {
   _NextToken();
   _hie_internal(11188,$4,7,$3);
   $$idx$val = HEAP32[$$idx>>2]|0;
   $$lobit$i12 = $$idx$val & 2048;
   $17 = ($$lobit$i12|0)==(0);
   if ($17) {
    $18 = $$idx$val | 1024;
    HEAP32[$$idx>>2] = $18;
   }
   _LoadExpr(512,$4);
   $19 = HEAP32[11156]|0;
   $20 = ($19|0)==(61);
   if ($20) {
    _g_falsejump(0,$12);
   } else {
    _g_truejump(0,$1);
   }
   $21 = HEAP32[11156]|0;
   $22 = ($21|0)==(61);
   if (!($22)) {
    break;
   }
  }
 }
 _g_defcodelabel($12);
 (_ED_MakeRValExpr($0)|0);
 $23 = HEAP32[$$idx11>>2]|0;
 $24 = $23 & -3073;
 $25 = $24 | 2048;
 HEAP32[$$idx11>>2] = $25;
 STACKTOP = sp;return;
}
function _addsubeq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$049 = 0, $$idx50$val = 0, $$idx52 = 0, $$idx52$val = 0, $$idx53$val = 0, $$idx54$val = 0, $$idx55$val = 0, $$idx57$val = 0, $$idx58$val = 0, $$idx58$val$pre = 0, $$idx59 = 0, $$idx59$val = 0, $$lobit$i = 0, $$lobit$i61 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0, $trunc$i = 0, $trunc62 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer10 = sp + 104|0;
 $vararg_buffer7 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $3 = sp;
 $$idx52 = ((($1)) + 8|0);
 $$idx52$val = HEAP32[$$idx52>>2]|0;
 $trunc = $$idx52$val&255;
 switch ($trunc<<24>>24) {
 case 32: case 64:  {
  _opeq($0,$1,$2);
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $$lobit$i = $$idx52$val & 256;
 $4 = ($$lobit$i|0)==(0);
 if ($4) {
  _Error(37983,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $$idx54$val = HEAP32[$6>>2]|0;
 $$lobit$i61 = $$idx54$val & 2048;
 $7 = ($$lobit$i61|0)==(0);
 if ($7) {
  $$idx58$val = $$idx54$val;
 } else {
  _Error(38012,$vararg_buffer1);
  $$pre = HEAP32[$5>>2]|0;
  $$idx58$val$pre = HEAP32[$$pre>>2]|0;
  $$idx58$val = $$idx58$val$pre;
 }
 $8 = $$idx58$val & 112;
 $9 = ($8|0)==(16);
 $10 = $$idx58$val & 15;
 $11 = ($10|0)==(13);
 $or$cond = $9 | $11;
 if (!($or$cond)) {
  _Error(38032,$vararg_buffer3);
 }
 _NextToken();
 $12 = HEAP32[$5>>2]|0;
 $$idx55$val = HEAP32[$12>>2]|0;
 $13 = $$idx55$val & 15;
 $14 = ($13|0)==(13);
 _hie1($3);
 $15 = ((($3)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $$idx57$val = HEAP32[$16>>2]|0;
 $17 = $$idx57$val & 112;
 $18 = ($17|0)==(16);
 if (!($18)) {
  HEAP32[$vararg_buffer5>>2] = $2;
  _Error(38058,$vararg_buffer5);
 }
 $$idx59 = ((($3)) + 8|0);
 $$idx59$val = HEAP32[$$idx59>>2]|0;
 $19 = $$idx59$val & 511;
 $20 = ($19|0)==(1);
 if ($20) {
  if ($14) {
   $21 = HEAP32[$5>>2]|0;
   $22 = (_Indirect($21)|0);
   $23 = (_CheckedSizeOf($22)|0);
   $24 = ((($3)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = Math_imul($25, $23)|0;
   HEAP32[$24>>2] = $26;
   $$049 = 544;
  } else {
   $$049 = 544;
  }
 } else {
  _LoadExpr(0,$3);
  if ($14) {
   $27 = HEAP32[$15>>2]|0;
   $28 = (_TypeOf($27)|0);
   $29 = HEAP32[$5>>2]|0;
   $30 = (_Indirect($29)|0);
   $31 = (_CheckedSizeOf($30)|0);
   _g_scale($28,$31);
   $$049 = 512;
  } else {
   $$049 = 512;
  }
 }
 $32 = HEAP32[$5>>2]|0;
 $33 = (_TypeOf($32)|0);
 $$idx53$val = HEAP32[$$idx52>>2]|0;
 $trunc$i = $$idx53$val&255;
 switch ($trunc$i<<24>>24) {
 case 1:  {
  $$0$i = 8192;
  break;
 }
 case 2:  {
  $$0$i = 4096;
  break;
 }
 case 4:  {
  $$0$i = 0;
  break;
 }
 case 8:  {
  $$0$i = 32768;
  break;
 }
 case 16:  {
  $$0$i = 0;
  break;
 }
 case 32:  {
  $$0$i = 0;
  break;
 }
 case 64:  {
  $$0$i = 0;
  break;
 }
 case -128:  {
  $$0$i = 0;
  break;
 }
 default: {
  HEAP32[$vararg_buffer7>>2] = $$idx53$val;
  _Internal(36972,$vararg_buffer7);
  // unreachable;
 }
 }
 $34 = $$049 | $33;
 $35 = $34 | $$0$i;
 $36 = HEAP32[$15>>2]|0;
 $37 = (_TypeOf($36)|0);
 $38 = $$049 | $37;
 (_g_typecast($35,$38)|0);
 $$idx50$val = HEAP32[$$idx52>>2]|0;
 $trunc62 = $$idx50$val&255;
 L34: do {
  switch ($trunc62<<24>>24) {
  case 1:  {
   $39 = HEAP32[$0>>2]|0;
   $40 = ($39|0)==(50);
   $41 = ((($1)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($1)) + 16|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($3)) + 16|0);
   $46 = HEAP32[$45>>2]|0;
   if ($40) {
    _g_addeqstatic($35,$42,$44,$46);
    break L34;
   } else {
    _g_subeqstatic($35,$42,$44,$46);
    break L34;
   }
   break;
  }
  case 2:  {
   $47 = HEAP32[$0>>2]|0;
   $48 = ($47|0)==(50);
   $49 = ((($1)) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($1)) + 16|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($3)) + 16|0);
   $54 = HEAP32[$53>>2]|0;
   if ($48) {
    _g_addeqstatic($35,$50,$52,$54);
    break L34;
   } else {
    _g_subeqstatic($35,$50,$52,$54);
    break L34;
   }
   break;
  }
  case -128: case 4:  {
   $55 = HEAP32[$0>>2]|0;
   $56 = ($55|0)==(50);
   $57 = ((($1)) + 12|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($1)) + 16|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ((($3)) + 16|0);
   $62 = HEAP32[$61>>2]|0;
   if ($56) {
    _g_addeqstatic($35,$58,$60,$62);
    break L34;
   } else {
    _g_subeqstatic($35,$58,$60,$62);
    break L34;
   }
   break;
  }
  case 8:  {
   $63 = HEAP32[$0>>2]|0;
   $64 = ($63|0)==(50);
   $65 = ((($1)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ((($1)) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ((($3)) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   if ($64) {
    _g_addeqstatic($35,$66,$68,$70);
    break L34;
   } else {
    _g_subeqstatic($35,$66,$68,$70);
    break L34;
   }
   break;
  }
  case 16:  {
   $71 = HEAP32[$0>>2]|0;
   $72 = ($71|0)==(50);
   $73 = ((($1)) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($3)) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   if ($72) {
    _g_addeqlocal($35,$74,$76);
    break L34;
   } else {
    _g_subeqlocal($35,$74,$76);
    break L34;
   }
   break;
  }
  default: {
   $77 = $$idx50$val & 255;
   HEAP32[$vararg_buffer10>>2] = $77;
   _Internal(38149,$vararg_buffer10);
   // unreachable;
  }
  }
 } while(0);
 (_ED_MakeRValExpr($1)|0);
 STACKTOP = sp;return;
}
function _opeq($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$35 = 0, $$idx = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx36$val = 0, $$idx37$val = 0, $$idx39$val = 0, $$idx40$val = 0, $$idx40$val$pre = 0, $$idx41 = 0, $$idx41$val = 0, $$lobit$i = 0, $$lobit$i42 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond44 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer17 = sp + 120|0;
 $vararg_buffer15 = sp + 112|0;
 $vararg_buffer12 = sp + 104|0;
 $vararg_buffer8 = sp + 96|0;
 $vararg_buffer5 = sp + 88|0;
 $vararg_buffer3 = sp + 80|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $3 = sp + 144|0;
 $4 = sp + 136|0;
 $5 = sp;
 $6 = sp + 128|0;
 $$idx = ((($1)) + 8|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$lobit$i = $$idx$val & 256;
 $7 = ($$lobit$i|0)==(0);
 if ($7) {
  _Error(37983,$vararg_buffer);
  STACKTOP = sp;return;
 }
 $8 = ((($1)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $$idx36$val = HEAP32[$9>>2]|0;
 $$lobit$i42 = $$idx36$val & 2048;
 $10 = ($$lobit$i42|0)==(0);
 if ($10) {
  $$idx40$val = $$idx36$val;
 } else {
  _Error(38012,$vararg_buffer1);
  $$pre = HEAP32[$8>>2]|0;
  $$idx40$val$pre = HEAP32[$$pre>>2]|0;
  $$idx40$val = $$idx40$val$pre;
 }
 $11 = $$idx40$val & 112;
 $12 = ($11|0)==(16);
 $13 = $$idx40$val & 15;
 $14 = ($13|0)==(13);
 $or$cond44 = $12 | $14;
 if (!($or$cond44)) {
  _Error(38032,$vararg_buffer3);
 }
 _NextToken();
 $15 = HEAP32[$8>>2]|0;
 $16 = (_TypeOf($15)|0);
 $17 = ((($0)) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(39|0);
 $20 = ($18|0)==(40|0);
 $or$cond = $19 | $20;
 if ($or$cond) {
  $21 = HEAP32[$8>>2]|0;
  $$idx37$val = HEAP32[$21>>2]|0;
  $22 = $$idx37$val & 15;
  $23 = ($22|0)==(13);
  $83 = $23;
 } else {
  $83 = 0;
 }
 $$idx$val$i = HEAP32[$$idx>>2]|0;
 $24 = $$idx$val$i & 255;
 $25 = ($24|0)==(64);
 if ($25) {
  _g_push(1,0);
 }
 _LoadExpr(0,$1);
 _GetCodePos($6);
 _g_push($16,0);
 _GetCodePos($3);
 $26 = HEAP32[11252]|0;
 _hie1($5);
 $27 = HEAP32[11252]|0;
 $28 = ($27|0)==($26|0);
 do {
  if (!($28)) {
   $29 = HEAP8[47051]|0;
   $30 = ($29<<24>>24)==(0);
   if ($30) {
    HEAP32[$vararg_buffer8>>2] = $27;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = $26;
    _Internal(36916,$vararg_buffer8);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer5>>2] = $27;
    $vararg_ptr7 = ((($vararg_buffer5)) + 4|0);
    HEAP32[$vararg_ptr7>>2] = $26;
    _Error(36916,$vararg_buffer5);
    break;
   }
  }
 } while(0);
 _GetCodePos($4);
 _ED_SetCodeRange($5,$3,$4);
 $31 = ((($5)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $$idx39$val = HEAP32[$32>>2]|0;
 $33 = $$idx39$val & 112;
 $34 = ($33|0)==(16);
 if (!($34)) {
  HEAP32[$vararg_buffer12>>2] = $2;
  _Error(38058,$vararg_buffer12);
 }
 $$idx41 = ((($5)) + 8|0);
 $$idx41$val = HEAP32[$$idx41>>2]|0;
 $35 = $$idx41$val & 511;
 $36 = ($35|0)==(1);
 do {
  if ($36) {
   $37 = (_ED_CodeRangeIsEmpty($5)|0);
   $38 = ($37|0)==(0);
   if ($38) {
    label = 33;
   } else {
    $39 = ((($0)) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $40 & 1;
    $42 = ($41|0)==(0);
    if (!($42)) {
     _RemoveCode($6);
    }
    if ($83) {
     $43 = HEAP32[$8>>2]|0;
     $44 = ((($43)) + 8|0);
     $45 = (_CheckedSizeOf($44)|0);
     $46 = ((($5)) + 16|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = Math_imul($47, $45)|0;
     HEAP32[$46>>2] = $48;
    }
    $49 = HEAP32[$8>>2]|0;
    $50 = (_CheckedSizeOf($49)|0);
    $51 = ($50|0)==(1);
    $52 = $16 | 512;
    $$ = $51 ? $52 : $16;
    $53 = HEAP32[$17>>2]|0;
    $54 = ($53|0)==(39|0);
    if ($54) {
     $55 = $$ | 32;
     $56 = ((($5)) + 16|0);
     $57 = HEAP32[$56>>2]|0;
     _g_inc($55,$57);
     break;
    }
    $58 = ($53|0)==(40|0);
    if ($58) {
     $59 = $$ | 32;
     $60 = ((($5)) + 16|0);
     $61 = HEAP32[$60>>2]|0;
     _g_dec($59,$61);
     break;
    }
    $62 = ((($5)) + 16|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(0);
    do {
     if ($64) {
      $65 = ($53|0)==(42|0);
      if ($65) {
       _Error(38105,$vararg_buffer15);
       break;
      }
      $66 = ($53|0)==(43|0);
      if ($66) {
       _Error(38122,$vararg_buffer17);
      }
     }
    } while(0);
    $67 = HEAP32[$17>>2]|0;
    $68 = $$ | 32;
    $69 = HEAP32[$62>>2]|0;
    FUNCTION_TABLE_vii[$67 & 63]($68,$69);
   }
  } else {
   label = 33;
  }
 } while(0);
 if ((label|0) == 33) {
  _LoadExpr(0,$5);
  if ($83) {
   $70 = HEAP32[$31>>2]|0;
   $71 = (_TypeOf($70)|0);
   $72 = HEAP32[$8>>2]|0;
   $73 = ((($72)) + 8|0);
   $74 = (_CheckedSizeOf($73)|0);
   _g_scale($71,$74);
  }
  $75 = HEAP32[$8>>2]|0;
  $76 = (_CheckedSizeOf($75)|0);
  $77 = ($76|0)==(1);
  $78 = $16 | 512;
  $$35 = $77 ? $78 : $16;
  $79 = HEAP32[$17>>2]|0;
  $80 = HEAP32[$31>>2]|0;
  $81 = (_TypeOf($80)|0);
  $82 = (_g_typeadjust($$35,$81)|0);
  FUNCTION_TABLE_vii[$79 & 63]($82,0);
 }
 _Store($1,0);
 (_ED_MakeRValExpr($1)|0);
 STACKTOP = sp;return;
}
function _hie3($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 _hie_internal(11212,$0,8,$1);
 STACKTOP = sp;return;
}
function _hie_internal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i = 0, $$$i140 = 0, $$$i148 = 0, $$0 = 0, $$0127 = 0, $$0128 = 0, $$05$i = 0, $$1 = 0, $$7$i = 0, $$7$i141 = 0, $$7$i149 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i137 = 0, $$idx$val$i145 = 0, $$idx11$val$i = 0, $$idx11$val$i139 = 0, $$idx11$val$i147 = 0, $$idx129$val = 0, $$idx130 = 0;
 var $$idx130$val = 0, $$idx131 = 0, $$idx131$val = 0, $$idx132$val = 0, $$idx133$val = 0, $$idx134$val = 0, $$idx135$val = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer34 = sp + 168|0;
 $vararg_buffer32 = sp + 160|0;
 $vararg_buffer29 = sp + 152|0;
 $vararg_buffer27 = sp + 144|0;
 $vararg_buffer25 = sp + 136|0;
 $vararg_buffer22 = sp + 128|0;
 $vararg_buffer20 = sp + 120|0;
 $vararg_buffer18 = sp + 112|0;
 $vararg_buffer16 = sp + 104|0;
 $vararg_buffer12 = sp + 96|0;
 $vararg_buffer8 = sp + 88|0;
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer2 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $4 = sp + 200|0;
 $5 = sp + 192|0;
 $6 = sp;
 $7 = sp + 184|0;
 $8 = sp + 176|0;
 $9 = HEAP32[11252]|0;
 FUNCTION_TABLE_vi[$2 & 15]($1);
 $10 = HEAP32[11252]|0;
 $11 = ($10|0)==($9|0);
 do {
  if (!($11)) {
   $12 = HEAP8[47051]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    HEAP32[$vararg_buffer2>>2] = $10;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $9;
    _Internal(36916,$vararg_buffer2);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer>>2] = $10;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $9;
    _Error(36916,$vararg_buffer);
    break;
   }
  }
 } while(0);
 HEAP32[$3>>2] = 0;
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = ((($1)) + 4|0);
 $$idx131 = ((($1)) + 8|0);
 $17 = ((($1)) + 16|0);
 $$idx130 = ((($6)) + 8|0);
 $18 = ((($6)) + 4|0);
 $19 = ((($6)) + 16|0);
 $154 = $14;
 L10: while(1) {
  $20 = HEAP32[11156]|0;
  $$05$i = $0;$21 = $154;
  while(1) {
   $22 = ($21|0)==($20|0);
   if ($22) {
    break;
   }
   $23 = ((($$05$i)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    label = 86;
    break L10;
   } else {
    $$05$i = $23;$21 = $24;
   }
  }
  $26 = ($$05$i|0)==(0|0);
  if ($26) {
   label = 86;
   break;
  }
  HEAP32[$3>>2] = 1;
  $27 = HEAP32[$16>>2]|0;
  $$idx129$val = HEAP32[$27>>2]|0;
  $28 = $$idx129$val & 112;
  $29 = ($28|0)==(16);
  if ($29) {
   $72 = $20;
  } else {
   _Error(38185,$vararg_buffer6);
   (_ED_MakeConstAbsInt($1,1)|0);
   $$pre = HEAP32[11156]|0;
   $72 = $$pre;
  }
  _NextToken();
  _GetCodePos($7);
  $30 = HEAP32[$16>>2]|0;
  $31 = (_TypeOf($30)|0);
  $$idx131$val = HEAP32[$$idx131>>2]|0;
  $32 = $$idx131$val & 511;
  $33 = ($32|0)==(1);
  if ($33) {
   _GetCodePos($8);
   $34 = ((($$05$i)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $35 & 2;
   $37 = ($36|0)==(0);
   if ($37) {
    $38 = $31 | 32;
    $39 = HEAP32[$17>>2]|0;
    _g_push($38,$39);
   }
  } else {
   _LoadExpr(0,$1);
   _GetCodePos($8);
   _g_push($31,0);
  }
  _GetCodePos($4);
  $40 = HEAP32[11252]|0;
  FUNCTION_TABLE_vi[$2 & 15]($6);
  $41 = HEAP32[11252]|0;
  $42 = ($41|0)==($40|0);
  if (!($42)) {
   $43 = HEAP8[47051]|0;
   $44 = ($43<<24>>24)==(0);
   if ($44) {
    label = 20;
    break;
   }
   HEAP32[$vararg_buffer8>>2] = $41;
   $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
   HEAP32[$vararg_ptr11>>2] = $40;
   _Error(36916,$vararg_buffer8);
  }
  _GetCodePos($5);
  _ED_SetCodeRange($6,$4,$5);
  $$idx130$val = HEAP32[$$idx130>>2]|0;
  $45 = $$idx130$val & 511;
  $46 = ($45|0)==(1);
  if ($46) {
   $47 = (_ED_CodeRangeIsEmpty($6)|0);
   $48 = ($47|0)==(0);
   if ($48) {
    label = 23;
   } else {
    $52 = 1;
   }
  } else {
   label = 23;
  }
  if ((label|0) == 23) {
   label = 0;
   _LoadExpr(0,$6);
   $52 = 0;
  }
  $49 = HEAP32[$18>>2]|0;
  $$idx$val = HEAP32[$49>>2]|0;
  $50 = $$idx$val & 112;
  $51 = ($50|0)==(16);
  if (!($51)) {
   _Error(38185,$vararg_buffer16);
  }
  $or$cond = $33 & $52;
  L37: do {
   if ($or$cond) {
    _RemoveCode($7);
    $53 = HEAP32[$16>>2]|0;
    $54 = HEAP32[$18>>2]|0;
    $$idx134$val = HEAP32[$53>>2]|0;
    $55 = $$idx134$val & 15;
    $56 = ($55|0)==(4);
    if ($56) {
     label = 29;
    } else {
     $$idx$val$i = HEAP32[$54>>2]|0;
     $57 = $$idx$val$i & 15;
     $58 = ($57|0)==(4);
     if ($58) {
      label = 29;
     } else {
      $63 = $$idx134$val & 384;
      $64 = ($63|0)==(128);
      if ($64) {
       $67 = 10956;
      } else {
       $65 = $$idx$val$i & 384;
       $66 = ($65|0)==(128);
       $$7$i = $66 ? 10956 : 10940;
       $67 = $$7$i;
      }
     }
    }
    if ((label|0) == 29) {
     label = 0;
     $59 = $$idx134$val & 384;
     $60 = ($59|0)==(128);
     if ($60) {
      $67 = 10988;
     } else {
      $$idx11$val$i = HEAP32[$54>>2]|0;
      $61 = $$idx11$val$i & 384;
      $62 = ($61|0)==(128);
      $$$i = $62 ? 10988 : 10972;
      $67 = $$$i;
     }
    }
    HEAP32[$16>>2] = $67;
    $$idx135$val = HEAP32[$67>>2]|0;
    $68 = $$idx135$val & 384;
    $69 = ($68|0)==(256);
    $70 = HEAP32[$17>>2]|0;
    $71 = HEAP32[$19>>2]|0;
    if ($69) {
     switch ($72|0) {
     case 68:  {
      $73 = $71 | $70;
      HEAP32[$17>>2] = $73;
      break L37;
      break;
     }
     case 80:  {
      $74 = $71 ^ $70;
      HEAP32[$17>>2] = $74;
      break L37;
      break;
     }
     case 63:  {
      $75 = $71 & $70;
      HEAP32[$17>>2] = $75;
      break L37;
      break;
     }
     case 58:  {
      $76 = Math_imul($71, $70)|0;
      HEAP32[$17>>2] = $76;
      break L37;
      break;
     }
     case 60:  {
      $77 = ($71|0)==(0);
      if ($77) {
       _Error(38105,$vararg_buffer18);
       HEAP32[$17>>2] = 2147483647;
       break L37;
      } else {
       $78 = (($70|0) / ($71|0))&-1;
       HEAP32[$17>>2] = $78;
       break L37;
      }
      break;
     }
     case 82:  {
      $79 = ($71|0)==(0);
      if ($79) {
       _Error(38122,$vararg_buffer20);
       HEAP32[$17>>2] = 0;
       break L37;
      } else {
       $80 = (($70|0) % ($71|0))&-1;
       HEAP32[$17>>2] = $80;
       break L37;
      }
      break;
     }
     default: {
      label = 45;
      break L10;
     }
     }
    } else {
     switch ($72|0) {
     case 68:  {
      $81 = $71 | $70;
      HEAP32[$17>>2] = $81;
      break L37;
      break;
     }
     case 80:  {
      $82 = $71 ^ $70;
      HEAP32[$17>>2] = $82;
      break L37;
      break;
     }
     case 63:  {
      $83 = $71 & $70;
      HEAP32[$17>>2] = $83;
      break L37;
      break;
     }
     case 58:  {
      $84 = Math_imul($71, $70)|0;
      HEAP32[$17>>2] = $84;
      break L37;
      break;
     }
     case 60:  {
      $85 = ($71|0)==(0);
      if ($85) {
       _Error(38105,$vararg_buffer25);
       HEAP32[$17>>2] = -1;
       break L37;
      } else {
       $86 = (($70>>>0) / ($71>>>0))&-1;
       HEAP32[$17>>2] = $86;
       break L37;
      }
      break;
     }
     case 82:  {
      $87 = ($71|0)==(0);
      if ($87) {
       _Error(38122,$vararg_buffer27);
       HEAP32[$17>>2] = 0;
       break L37;
      } else {
       $88 = (($70>>>0) % ($71>>>0))&-1;
       HEAP32[$17>>2] = $88;
       break L37;
      }
      break;
     }
     default: {
      label = 57;
      break L10;
     }
     }
    }
   } else {
    if ($33) {
     $89 = ((($$05$i)) + 4|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = $90 & 2;
     $92 = ($91|0)==(0);
     $or$cond3 = $52 | $92;
     if (!($or$cond3)) {
      $93 = $31 | 32;
      $94 = HEAP32[$18>>2]|0;
      $95 = (_TypeOf($94)|0);
      $96 = HEAP32[$89>>2]|0;
      $97 = $96 & 1;
      $98 = ($97|0)==(0);
      if ($98) {
       _g_push($95,0);
       $$0127 = $95;
      } else {
       $99 = $95 | 2048;
       $$0127 = $99;
      }
      $100 = (_g_typeadjust($$0127,$93)|0);
      $101 = $100 | 32;
      $102 = HEAP32[$16>>2]|0;
      $103 = HEAP32[$18>>2]|0;
      $$idx133$val = HEAP32[$102>>2]|0;
      $104 = $$idx133$val & 15;
      $105 = ($104|0)==(4);
      if ($105) {
       label = 65;
      } else {
       $$idx$val$i137 = HEAP32[$103>>2]|0;
       $106 = $$idx$val$i137 & 15;
       $107 = ($106|0)==(4);
       if ($107) {
        label = 65;
       } else {
        $112 = $$idx133$val & 384;
        $113 = ($112|0)==(128);
        if ($113) {
         $116 = 10956;
        } else {
         $114 = $$idx$val$i137 & 384;
         $115 = ($114|0)==(128);
         $$7$i141 = $115 ? 10956 : 10940;
         $116 = $$7$i141;
        }
       }
      }
      if ((label|0) == 65) {
       label = 0;
       $108 = $$idx133$val & 384;
       $109 = ($108|0)==(128);
       if ($109) {
        $116 = 10988;
       } else {
        $$idx11$val$i139 = HEAP32[$103>>2]|0;
        $110 = $$idx11$val$i139 & 384;
        $111 = ($110|0)==(128);
        $$$i140 = $111 ? 10988 : 10972;
        $116 = $$$i140;
       }
      }
      HEAP32[$16>>2] = $116;
      $117 = ((($$05$i)) + 8|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = HEAP32[$17>>2]|0;
      FUNCTION_TABLE_vii[$118 & 63]($101,$119);
      (_ED_MakeRValExpr($1)|0);
      break;
     }
    }
    $122 = HEAP32[$18>>2]|0;
    $123 = (_TypeOf($122)|0);
    if ($52) {
     $124 = $123 | 32;
     switch ($72|0) {
     case 60:  {
      $125 = HEAP32[$19>>2]|0;
      $126 = ($125|0)==(0);
      if ($126) {
       _Error(38105,$vararg_buffer32);
      }
      break;
     }
     case 82:  {
      $127 = HEAP32[$19>>2]|0;
      $128 = ($127|0)==(0);
      if ($128) {
       _Error(38122,$vararg_buffer34);
      }
      break;
     }
     default: {
     }
     }
     $129 = ((($$05$i)) + 4|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $130 & 1;
     $132 = ($131|0)==(0);
     if ($132) {
      $$0 = $124;$$0128 = 32;$$1 = $31;
     } else {
      $133 = $31 | 2048;
      _RemoveCode($8);
      $$0 = $124;$$0128 = 32;$$1 = $133;
     }
    } else {
     $$0 = $123;$$0128 = 0;$$1 = $31;
    }
    $134 = (_g_typeadjust($$1,$$0)|0);
    $135 = $134 | $$0128;
    $136 = HEAP32[$16>>2]|0;
    $137 = HEAP32[$18>>2]|0;
    $$idx132$val = HEAP32[$136>>2]|0;
    $138 = $$idx132$val & 15;
    $139 = ($138|0)==(4);
    if ($139) {
     label = 81;
    } else {
     $$idx$val$i145 = HEAP32[$137>>2]|0;
     $140 = $$idx$val$i145 & 15;
     $141 = ($140|0)==(4);
     if ($141) {
      label = 81;
     } else {
      $146 = $$idx132$val & 384;
      $147 = ($146|0)==(128);
      if ($147) {
       $150 = 10956;
      } else {
       $148 = $$idx$val$i145 & 384;
       $149 = ($148|0)==(128);
       $$7$i149 = $149 ? 10956 : 10940;
       $150 = $$7$i149;
      }
     }
    }
    if ((label|0) == 81) {
     label = 0;
     $142 = $$idx132$val & 384;
     $143 = ($142|0)==(128);
     if ($143) {
      $150 = 10988;
     } else {
      $$idx11$val$i147 = HEAP32[$137>>2]|0;
      $144 = $$idx11$val$i147 & 384;
      $145 = ($144|0)==(128);
      $$$i148 = $145 ? 10988 : 10972;
      $150 = $$$i148;
     }
    }
    HEAP32[$16>>2] = $150;
    $151 = ((($$05$i)) + 8|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = HEAP32[$19>>2]|0;
    FUNCTION_TABLE_vii[$152 & 63]($135,$153);
    (_ED_MakeRValExpr($1)|0);
   }
  } while(0);
  $120 = HEAP32[$0>>2]|0;
  $121 = ($120|0)==(0);
  if ($121) {
   label = 86;
   break;
  } else {
   $154 = $120;
  }
 }
 if ((label|0) == 20) {
  HEAP32[$vararg_buffer12>>2] = $41;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $40;
  _Internal(36916,$vararg_buffer12);
  // unreachable;
 }
 else if ((label|0) == 45) {
  HEAP32[$vararg_buffer22>>2] = $72;
  _Internal(38213,$vararg_buffer22);
  // unreachable;
 }
 else if ((label|0) == 57) {
  HEAP32[$vararg_buffer29>>2] = $72;
  _Internal(38213,$vararg_buffer29);
  // unreachable;
 }
 else if ((label|0) == 86) {
  STACKTOP = sp;return;
 }
}
function _hie4($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 _hie_internal(11236,$0,9,$1);
 STACKTOP = sp;return;
}
function _hie5($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _hie_compare(11260,$0,10);
 return;
}
function _hie6($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _hie_compare(11296,$0,11);
 return;
}
function _hie_compare($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$182 = 0, $$0 = 0, $$0171255260 = 0, $$0171255261 = 0, $$0171255262 = 0, $$0173 = 0, $$0256257 = 0, $$0256258 = 0, $$0256259 = 0, $$05$i = 0, $$174 = 0, $$181 = 0, $$182 = 0, $$182$v = 0, $$4 = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i204 = 0, $$idx183$val = 0;
 var $$idx184$val = 0, $$idx185$val = 0, $$idx186$val = 0, $$idx187 = 0, $$idx187$val = 0, $$idx188 = 0, $$idx188$val = 0, $$idx189$val = 0, $$idx190$val = 0, $$idx191$val = 0, $$idx196$val = 0, $$idx197$val = 0, $$idx2$i = 0, $$idx2$i205 = 0, $$idx2$val$i = 0, $$idx2$val$i206 = 0, $$idx200$val = 0, $$idx202$val = 0, $$idx202$val$pre = 0, $$idx202$val254263 = 0;
 var $$pre = 0, $$pre251 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $g_eq$ = 0, $g_ne$ = 0, $or$cond = 0, $or$cond175 = 0, $or$cond176 = 0, $or$cond177 = 0;
 var $or$cond178 = 0, $or$cond179 = 0, $or$cond180 = 0, $or$cond235 = 0, $or$cond3 = 0, $or$cond5 = 0, $trunc = 0, $trunc$clear = 0, $trunc236 = 0, $trunc236$clear = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0;
 var $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer36 = 0, $vararg_buffer38 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $vararg_buffer44 = sp + 208|0;
 $vararg_buffer42 = sp + 200|0;
 $vararg_buffer40 = sp + 192|0;
 $vararg_buffer38 = sp + 184|0;
 $vararg_buffer36 = sp + 176|0;
 $vararg_buffer34 = sp + 168|0;
 $vararg_buffer32 = sp + 160|0;
 $vararg_buffer29 = sp + 152|0;
 $vararg_buffer26 = sp + 144|0;
 $vararg_buffer24 = sp + 136|0;
 $vararg_buffer22 = sp + 128|0;
 $vararg_buffer20 = sp + 120|0;
 $vararg_buffer18 = sp + 112|0;
 $vararg_buffer16 = sp + 104|0;
 $vararg_buffer14 = sp + 96|0;
 $vararg_buffer10 = sp + 88|0;
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer2 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $3 = sp + 248|0;
 $4 = sp + 240|0;
 $5 = sp;
 $6 = sp + 232|0;
 $7 = sp + 224|0;
 $8 = sp + 216|0;
 _GetCodePos($6);
 $9 = HEAP32[11252]|0;
 FUNCTION_TABLE_vi[$2 & 15]($1);
 $10 = HEAP32[11252]|0;
 $11 = ($10|0)==($9|0);
 do {
  if (!($11)) {
   $12 = HEAP8[47051]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    HEAP32[$vararg_buffer2>>2] = $10;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $9;
    _Internal(36916,$vararg_buffer2);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer>>2] = $10;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $9;
    _Error(36916,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = ((($1)) + 4|0);
 $$idx188 = ((($1)) + 8|0);
 $17 = ((($1)) + 16|0);
 $18 = ((($5)) + 4|0);
 $$idx187 = ((($5)) + 8|0);
 $19 = ((($5)) + 16|0);
 $214 = $14;
 L10: while(1) {
  $20 = HEAP32[11156]|0;
  $$05$i = $0;$21 = $214;
  while(1) {
   $22 = ($21|0)==($20|0);
   if ($22) {
    break;
   }
   $23 = ((($$05$i)) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    label = 116;
    break L10;
   } else {
    $$05$i = $23;$21 = $24;
   }
  }
  $26 = ($$05$i|0)==(0|0);
  if ($26) {
   label = 116;
   break;
  }
  $27 = ((($$05$i)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  _NextToken();
  $29 = HEAP32[$16>>2]|0;
  $$idx190$val = HEAP32[$29>>2]|0;
  $30 = $$idx190$val & 15;
  $31 = ($30|0)==(14);
  if ($31) {
   $32 = (_PointerTo($29)|0);
   HEAP32[$16>>2] = $32;
  }
  _GetCodePos($7);
  $33 = HEAP32[$16>>2]|0;
  $34 = (_TypeOf($33)|0);
  $$idx188$val = HEAP32[$$idx188>>2]|0;
  $35 = $$idx188$val & 511;
  $36 = ($35|0)==(1);
  if ($36) {
   _GetCodePos($8);
   $37 = $34 | 32;
   $38 = HEAP32[$17>>2]|0;
   _g_push($37,$38);
  } else {
   _LoadExpr(0,$1);
   _GetCodePos($8);
   _g_push($34,0);
  }
  _GetCodePos($3);
  $39 = HEAP32[11252]|0;
  FUNCTION_TABLE_vi[$2 & 15]($5);
  $40 = HEAP32[11252]|0;
  $41 = ($40|0)==($39|0);
  if (!($41)) {
   $42 = HEAP8[47051]|0;
   $43 = ($42<<24>>24)==(0);
   if ($43) {
    label = 19;
    break;
   }
   HEAP32[$vararg_buffer6>>2] = $40;
   $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $39;
   _Error(36916,$vararg_buffer6);
  }
  _GetCodePos($4);
  _ED_SetCodeRange($5,$3,$4);
  $44 = HEAP32[$18>>2]|0;
  $$idx189$val = HEAP32[$44>>2]|0;
  $45 = $$idx189$val & 15;
  $46 = ($45|0)==(14);
  if ($46) {
   $47 = (_PointerTo($44)|0);
   HEAP32[$18>>2] = $47;
  }
  $$idx187$val = HEAP32[$$idx187>>2]|0;
  $48 = $$idx187$val & 511;
  $49 = ($48|0)==(1);
  if ($49) {
   $50 = (_ED_CodeRangeIsEmpty($5)|0);
   $51 = ($50|0)==(0);
   if ($51) {
    label = 24;
   } else {
    $88 = 1;
   }
  } else {
   label = 24;
  }
  if ((label|0) == 24) {
   label = 0;
   _LoadExpr(0,$5);
   $88 = 0;
  }
  $52 = ((($$05$i)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53 & 4;
  $55 = ($54|0)==(0);
  do {
   if (!($55)) {
    $56 = HEAP32[$16>>2]|0;
    $$idx$val$i = HEAP32[$56>>2]|0;
    $57 = $$idx$val$i & 15;
    $58 = ($57|0)==(13);
    if ($58) {
     $$idx2$i = ((($56)) + 8|0);
     $$idx2$val$i = HEAP32[$$idx2$i>>2]|0;
     $59 = $$idx2$val$i & 15;
     $60 = ($59|0)==(14);
     if ($60) {
      _Error(38243,$vararg_buffer14);
      (_ED_MakeConstAbsInt($1,0)|0);
      (_ED_MakeConstAbsInt($5,0)|0);
      break;
     }
    }
    $61 = HEAP32[$18>>2]|0;
    $$idx$val$i204 = HEAP32[$61>>2]|0;
    $62 = $$idx$val$i204 & 15;
    $63 = ($62|0)==(13);
    if ($63) {
     $$idx2$i205 = ((($61)) + 8|0);
     $$idx2$val$i206 = HEAP32[$$idx2$i205>>2]|0;
     $64 = $$idx2$val$i206 & 15;
     $65 = ($64|0)==(14);
     if ($65) {
      _Error(38288,$vararg_buffer16);
      (_ED_MakeConstAbsInt($1,0)|0);
      (_ED_MakeConstAbsInt($5,0)|0);
     }
    }
   }
  } while(0);
  $66 = HEAP32[$16>>2]|0;
  $$idx185$val = HEAP32[$66>>2]|0;
  $67 = $$idx185$val & 112;
  $trunc = $67&255;
  $trunc$clear = $trunc & 127;
  L45: do {
   switch ($trunc$clear<<24>>24) {
   case 16:  {
    $68 = HEAP32[$18>>2]|0;
    $$idx184$val = HEAP32[$68>>2]|0;
    $69 = $$idx184$val & 112;
    $trunc236 = $69&255;
    $trunc236$clear = $trunc236 & 127;
    switch ($trunc236$clear<<24>>24) {
    case 16:  {
     break L45;
     break;
    }
    case 48:  {
     $70 = (_ED_IsNullPtr($1)|0);
     $71 = ($70|0)==(0);
     if (!($71)) {
      break L45;
     }
     break;
    }
    default: {
    }
    }
    _Error(38888,$vararg_buffer18);
    break;
   }
   case 48:  {
    $72 = HEAP32[$18>>2]|0;
    $$idx191$val = HEAP32[$72>>2]|0;
    $73 = $$idx191$val & 112;
    $74 = ($73|0)==(48);
    if (!($74)) {
     $84 = (_ED_IsNullPtr($5)|0);
     $85 = ($84|0)==(0);
     if (!($85)) {
      break L45;
     }
     _Error(38888,$vararg_buffer22);
     break L45;
    }
    $75 = (_Indirect($66)|0);
    $76 = HEAP32[$18>>2]|0;
    $77 = (_Indirect($76)|0);
    $78 = (_TypeCmp($75,$77)|0);
    $79 = ($78>>>0)<(2);
    if ($79) {
     $80 = HEAP32[$75>>2]|0;
     $81 = ($80|0)==(9);
     if (!($81)) {
      $82 = HEAP32[$77>>2]|0;
      $83 = ($82|0)==(9);
      if (!($83)) {
       _Error(38888,$vararg_buffer20);
      }
     }
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  $$idx186$val = HEAP32[$$idx188>>2]|0;
  $86 = $$idx186$val & 511;
  $87 = ($86|0)==(1);
  $or$cond = $88 & $87;
  L59: do {
   if ($or$cond) {
    $89 = HEAP8[46962]|0;
    $90 = ($89<<24>>24)==(0);
    if ($90) {
     $91 = (_IS_Get(12956)|0);
     $92 = ($91|0)==(0);
     if (!($92)) {
      _Warning(38334,$vararg_buffer24);
     }
    }
    _RemoveCode($7);
    $93 = HEAP32[$16>>2]|0;
    $$idx183$val = HEAP32[$93>>2]|0;
    $94 = $$idx183$val & 496;
    $95 = ($94|0)==(272);
    if ($95) {
     $96 = HEAP32[$18>>2]|0;
     $$idx$val = HEAP32[$96>>2]|0;
     $97 = $$idx$val & 496;
     $98 = ($97|0)==(272);
     if ($98) {
      $99 = HEAP32[$17>>2]|0;
      $100 = HEAP32[$19>>2]|0;
      switch ($20|0) {
      case 69:  {
       $101 = ($99|0)==($100|0);
       $102 = $101&1;
       HEAP32[$17>>2] = $102;
       label = 114;
       break L59;
       break;
      }
      case 64:  {
       $103 = ($99|0)!=($100|0);
       $104 = $103&1;
       HEAP32[$17>>2] = $104;
       label = 114;
       break L59;
       break;
      }
      case 72:  {
       $105 = ($99|0)<($100|0);
       $106 = $105&1;
       HEAP32[$17>>2] = $106;
       label = 114;
       break L59;
       break;
      }
      case 71:  {
       $107 = ($99|0)<=($100|0);
       $108 = $107&1;
       HEAP32[$17>>2] = $108;
       label = 114;
       break L59;
       break;
      }
      case 73:  {
       $109 = ($99|0)>=($100|0);
       $110 = $109&1;
       HEAP32[$17>>2] = $110;
       label = 114;
       break L59;
       break;
      }
      case 74:  {
       $111 = ($99|0)>($100|0);
       $112 = $111&1;
       HEAP32[$17>>2] = $112;
       label = 114;
       break L59;
       break;
      }
      default: {
       label = 56;
       break L10;
      }
      }
     }
    }
    $113 = HEAP32[$17>>2]|0;
    $114 = HEAP32[$19>>2]|0;
    switch ($20|0) {
    case 69:  {
     $115 = ($113|0)==($114|0);
     $116 = $115&1;
     HEAP32[$17>>2] = $116;
     label = 114;
     break L59;
     break;
    }
    case 64:  {
     $117 = ($113|0)!=($114|0);
     $118 = $117&1;
     HEAP32[$17>>2] = $118;
     label = 114;
     break L59;
     break;
    }
    case 72:  {
     $119 = ($113>>>0)<($114>>>0);
     $120 = $119&1;
     HEAP32[$17>>2] = $120;
     label = 114;
     break L59;
     break;
    }
    case 71:  {
     $121 = ($113>>>0)<=($114>>>0);
     $122 = $121&1;
     HEAP32[$17>>2] = $122;
     label = 114;
     break L59;
     break;
    }
    case 73:  {
     $123 = ($113>>>0)>=($114>>>0);
     $124 = $123&1;
     HEAP32[$17>>2] = $124;
     label = 114;
     break L59;
     break;
    }
    case 74:  {
     $125 = ($113>>>0)>($114>>>0);
     $126 = $125&1;
     HEAP32[$17>>2] = $126;
     label = 114;
     break L59;
     break;
    }
    default: {
     label = 64;
     break L10;
    }
    }
   } else {
    $127 = HEAP32[$16>>2]|0;
    $$idx197$val = HEAP32[$127>>2]|0;
    $128 = $$idx197$val & 384;
    $129 = ($128|0)==(256);
    $130 = HEAP32[$18>>2]|0;
    $$idx196$val = HEAP32[$130>>2]|0;
    $131 = $$idx196$val & 384;
    $132 = ($131|0)!=(256);
    do {
     if ($88) {
      $135 = HEAP32[$52>>2]|0;
      $136 = $135 & 1;
      $137 = ($136|0)==(0);
      if ($137) {
       $$0 = $34;$$idx202$val = $$idx197$val;
      } else {
       $138 = $34 | 2048;
       _RemoveCode($8);
       $$pre = HEAP32[$16>>2]|0;
       $$idx202$val$pre = HEAP32[$$pre>>2]|0;
       $$0 = $138;$$idx202$val = $$idx202$val$pre;
      }
      $139 = $$idx202$val & 15;
      $140 = ($139|0)==(1);
      $or$cond3 = $88 & $140;
      if (!($or$cond3)) {
       if ($140) {
        $$0171255262 = 32;$$0256259 = $$0;$$idx202$val254263 = $$idx202$val;
        label = 101;
        break;
       } else {
        $$0171255261 = 32;$$0256258 = $$0;
        label = 100;
        break;
       }
      }
      $$ = $129 ? -128 : 0;
      $$174 = $129 ? 127 : 255;
      $141 = HEAP32[$19>>2]|0;
      $142 = ($141|0)<(0);
      $or$cond235 = $132 & $142;
      if ($or$cond235) {
       $143 = (($$174) + 1)|0;
       HEAP32[$19>>2] = $143;
       $144 = $143;
      } else {
       $144 = $141;
      }
      switch ($20|0) {
      case 69:  {
       $145 = ($144|0)<($$|0);
       $146 = ($144|0)>($$174|0);
       $or$cond175 = $145 | $146;
       if ($or$cond175) {
        (_ED_MakeConstAbsInt($1,0)|0);
        $147 = HEAP8[46962]|0;
        $148 = ($147<<24>>24)==(0);
        if (!($148)) {
         break L59;
        }
        $149 = (_IS_Get(12956)|0);
        $150 = ($149|0)==(0);
        if ($150) {
         break L59;
        }
        _Warning(38334,$vararg_buffer32);
        break L59;
       }
       break;
      }
      case 64:  {
       $151 = ($144|0)<($$|0);
       $152 = ($144|0)>($$174|0);
       $or$cond176 = $151 | $152;
       if ($or$cond176) {
        (_ED_MakeConstAbsInt($1,1)|0);
        $153 = HEAP8[46962]|0;
        $154 = ($153<<24>>24)==(0);
        if (!($154)) {
         break L59;
        }
        $155 = (_IS_Get(12956)|0);
        $156 = ($155|0)==(0);
        if ($156) {
         break L59;
        }
        _Warning(38334,$vararg_buffer34);
        break L59;
       }
       break;
      }
      case 72:  {
       $157 = ($144|0)<=($$|0);
       $158 = ($144|0)>($$174|0);
       $or$cond177 = $157 | $158;
       if ($or$cond177) {
        $159 = $158&1;
        (_ED_MakeConstAbsInt($1,$159)|0);
        $160 = HEAP8[46962]|0;
        $161 = ($160<<24>>24)==(0);
        if (!($161)) {
         break L59;
        }
        $162 = (_IS_Get(12956)|0);
        $163 = ($162|0)==(0);
        if ($163) {
         break L59;
        }
        _Warning(38334,$vararg_buffer36);
        break L59;
       }
       break;
      }
      case 71:  {
       $164 = ($144|0)>=($$|0);
       $165 = ($144|0)<($$174|0);
       $or$cond178 = $164 & $165;
       if (!($or$cond178)) {
        $166 = ($144|0)>=($$174|0);
        $167 = $166&1;
        (_ED_MakeConstAbsInt($1,$167)|0);
        $168 = HEAP8[46962]|0;
        $169 = ($168<<24>>24)==(0);
        if (!($169)) {
         break L59;
        }
        $170 = (_IS_Get(12956)|0);
        $171 = ($170|0)==(0);
        if ($171) {
         break L59;
        }
        _Warning(38334,$vararg_buffer38);
        break L59;
       }
       break;
      }
      case 73:  {
       $172 = ($144|0)<=($$|0);
       $173 = ($144|0)>($$174|0);
       $or$cond179 = $172 | $173;
       if ($or$cond179) {
        $174 = $172&1;
        (_ED_MakeConstAbsInt($1,$174)|0);
        $175 = HEAP8[46962]|0;
        $176 = ($175<<24>>24)==(0);
        if (!($176)) {
         break L59;
        }
        $177 = (_IS_Get(12956)|0);
        $178 = ($177|0)==(0);
        if ($178) {
         break L59;
        }
        _Warning(38334,$vararg_buffer40);
        break L59;
       }
       break;
      }
      case 74:  {
       $179 = ($144|0)>=($$|0);
       $180 = ($144|0)<($$174|0);
       $or$cond180 = $179 & $180;
       if (!($or$cond180)) {
        $181 = ($144|0)<($$|0);
        $182 = $181&1;
        (_ED_MakeConstAbsInt($1,$182)|0);
        $183 = HEAP8[46962]|0;
        $184 = ($183<<24>>24)==(0);
        if (!($184)) {
         break L59;
        }
        $185 = (_IS_Get(12956)|0);
        $186 = ($185|0)==(0);
        if ($186) {
         break L59;
        }
        _Warning(38334,$vararg_buffer42);
        break L59;
       }
       break;
      }
      default: {
       label = 97;
       break L10;
      }
      }
      $$181 = $129 ? 547 : 555;
      $$4 = $$181;
     } else {
      $133 = $$idx197$val & 15;
      $134 = ($133|0)==(1);
      if ($134) {
       $$0171255262 = 0;$$0256259 = $34;$$idx202$val254263 = $$idx197$val;
       label = 101;
      } else {
       $$0171255261 = 0;$$0256258 = $34;
       label = 100;
      }
     }
    } while(0);
    if ((label|0) == 100) {
     label = 0;
     $$pre251 = HEAP32[$18>>2]|0;
     $$0171255260 = $$0171255261;$$0256257 = $$0256258;$194 = $$pre251;
     label = 104;
    }
    else if ((label|0) == 101) {
     label = 0;
     $187 = HEAP32[$18>>2]|0;
     $$idx200$val = HEAP32[$187>>2]|0;
     $188 = $$idx200$val & 15;
     $189 = ($188|0)==(1);
     if ($189) {
      $190 = $$idx200$val ^ $$idx202$val254263;
      $191 = $190 & 384;
      $192 = ($191|0)==(0);
      if ($192) {
       $$182$v = $88 ? 515 : 3;
       $$182 = $$0171255262 | $$182$v;
       $193 = $$182 | 8;
       $$$182 = $129 ? $$182 : $193;
       $$4 = $$$182;
      } else {
       $$0171255260 = $$0171255262;$$0256257 = $$0256259;$194 = $187;
       label = 104;
      }
     } else {
      $$0171255260 = $$0171255262;$$0256257 = $$0256259;$194 = $187;
      label = 104;
     }
    }
    if ((label|0) == 104) {
     label = 0;
     $195 = (_TypeOf($194)|0);
     $196 = $195 | $$0171255260;
     $197 = (_g_typeadjust($$0256257,$196)|0);
     $198 = $197 | $$0171255260;
     $$4 = $198;
    }
    $199 = $129 ^ 1;
    $or$cond5 = $88 & $199;
    L130: do {
     if ($or$cond5) {
      switch ($20|0) {
      case 72:  {
       $200 = HEAP32[$19>>2]|0;
       $201 = ($200|0)==(1);
       if (!($201)) {
        $$0173 = $28;
        break L130;
       }
       HEAP32[$19>>2] = 0;
       $$0173 = 49;
       break L130;
       break;
      }
      case 71:  {
       $202 = HEAP32[$19>>2]|0;
       $203 = ($202|0)==(0);
       $g_eq$ = $203 ? 49 : $28;
       $$0173 = $g_eq$;
       break L130;
       break;
      }
      case 73:  {
       $204 = HEAP32[$19>>2]|0;
       $205 = ($204|0)==(1);
       if (!($205)) {
        $$0173 = $28;
        break L130;
       }
       HEAP32[$19>>2] = 0;
       $$0173 = 50;
       break L130;
       break;
      }
      case 74:  {
       $206 = HEAP32[$19>>2]|0;
       $207 = ($206|0)==(0);
       $g_ne$ = $207 ? 50 : $28;
       $$0173 = $g_ne$;
       break L130;
       break;
      }
      default: {
       $$0173 = $28;
       break L130;
      }
      }
     } else {
      $$0173 = $28;
     }
    } while(0);
    $208 = HEAP32[$19>>2]|0;
    FUNCTION_TABLE_vii[$$0173 & 63]($$4,$208);
    (_ED_MakeRValExpr($1)|0);
    label = 114;
   }
  } while(0);
  if ((label|0) == 114) {
   label = 0;
   HEAP32[$16>>2] = 10940;
  }
  $209 = HEAP32[$$idx188>>2]|0;
  $210 = $209 & -3073;
  $211 = $210 | 2048;
  HEAP32[$$idx188>>2] = $211;
  $212 = HEAP32[$0>>2]|0;
  $213 = ($212|0)==(0);
  if ($213) {
   label = 116;
   break;
  } else {
   $214 = $212;
  }
 }
 if ((label|0) == 19) {
  HEAP32[$vararg_buffer10>>2] = $40;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $39;
  _Internal(36916,$vararg_buffer10);
  // unreachable;
 }
 else if ((label|0) == 56) {
  HEAP32[$vararg_buffer26>>2] = $20;
  _Internal(38367,$vararg_buffer26);
  // unreachable;
 }
 else if ((label|0) == 64) {
  HEAP32[$vararg_buffer29>>2] = $20;
  _Internal(38367,$vararg_buffer29);
  // unreachable;
 }
 else if ((label|0) == 97) {
  HEAP32[$vararg_buffer44>>2] = $20;
  _Internal(38367,$vararg_buffer44);
  // unreachable;
 }
 else if ((label|0) == 116) {
  STACKTOP = sp;return;
 }
}
function _hie8($0) {
 $0 = $0|0;
 var $$$i$i = 0, $$$i$i$i = 0, $$$i$i$i19 = 0, $$$i$i111$i = 0, $$$i$i12 = 0, $$$i$i126$i = 0, $$$i$i129$i = 0, $$$i$i144$i = 0, $$$i$i159$i = 0, $$$i101$i = 0, $$$i116$i = 0, $$$i119$i = 0, $$$i134$i = 0, $$$i149$i = 0, $$0$i = 0, $$0$i6 = 0, $$068$i = 0, $$1$i = 0, $$1$i7 = 0, $$169$ph$i = 0;
 var $$2$i = 0, $$25$i$i = 0, $$25$i$i14 = 0, $$25$i104$i = 0, $$25$i119$i = 0, $$25$i122$i = 0, $$25$i137$i = 0, $$25$i152$i = 0, $$7$i$i$i = 0, $$7$i$i$i20 = 0, $$7$i$i112$i = 0, $$7$i$i127$i = 0, $$7$i$i130$i = 0, $$7$i$i145$i = 0, $$7$i$i160$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $$idx$val$i$i$i = 0, $$idx$val$i$i$i17 = 0, $$idx$val$i$i108$i = 0;
 var $$idx$val$i$i123$i = 0, $$idx$val$i$i126$i = 0, $$idx$val$i$i141$i = 0, $$idx$val$i$i156$i = 0, $$idx$val$i$i16 = 0, $$idx$val$i106$i = 0, $$idx$val$i121$i = 0, $$idx$val$i124$i = 0, $$idx$val$i139$i = 0, $$idx$val$i154$i = 0, $$idx$val$i8 = 0, $$idx103$val$i = 0, $$idx104$i = 0, $$idx104$val$i = 0, $$idx105$val$i = 0, $$idx106$val$i = 0, $$idx107$val$i = 0, $$idx108$val$i = 0, $$idx109$val$i = 0, $$idx11$val$i$i$i = 0;
 var $$idx11$val$i$i$i18 = 0, $$idx11$val$i$i110$i = 0, $$idx11$val$i$i125$i = 0, $$idx11$val$i$i128$i = 0, $$idx11$val$i$i143$i = 0, $$idx11$val$i$i158$i = 0, $$idx110$val$i = 0, $$idx111$val$i = 0, $$idx112$val$i = 0, $$idx113$val$i = 0, $$idx114$val$i = 0, $$idx115$val$i = 0, $$idx116$val$i = 0, $$idx2$i$i = 0, $$idx2$i96$i = 0, $$idx2$val$i$i = 0, $$idx2$val$i97$i = 0, $$idx26$val$i$i = 0, $$idx26$val$i$i13 = 0, $$idx26$val$i103$i = 0;
 var $$idx26$val$i118$i = 0, $$idx26$val$i121$i = 0, $$idx26$val$i136$i = 0, $$idx26$val$i151$i = 0, $$idx27$i117$i = 0, $$idx27$val$i$i = 0, $$idx27$val$i$i11 = 0, $$idx27$val$i100$i = 0, $$idx27$val$i115$i = 0, $$idx27$val$i118$i = 0, $$idx27$val$i133$i = 0, $$idx27$val$i148$i = 0, $$idx71$val$i = 0, $$idx72$val$i = 0, $$idx74$val$i = 0, $$idx75$val$i = 0, $$idx77$val$i = 0, $$idx78$val$i = 0, $$idx79$i = 0, $$idx79$val$i = 0;
 var $$idx80$val$i = 0, $$idx81$val$i = 0, $$idx84$val$i = 0, $$idx87$val$i = 0, $$idx90$val$i = 0, $$idx91$val$i = 0, $$idx91$val$i10 = 0, $$idx95$val$i = 0, $$idx99$val$i = 0, $$pre$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $phitmp$i = 0, $phitmp$i21 = 0, $trunc = 0, $trunc$clear = 0, $trunc$i = 0, $trunc$i$clear = 0, $trunc$i$i = 0, $trunc$i2 = 0, $trunc$i2$clear = 0, $trunc137$i = 0;
 var $trunc137$i$clear = 0, $trunc138$i = 0, $trunc138$i$clear = 0, $trunc139$i = 0, $trunc139$i$clear = 0, $trunc140$i = 0, $trunc140$i$clear = 0, $trunc170$i = 0, $trunc170$i$clear = 0, $trunc171$i = 0, $trunc171$i$clear = 0, $trunc172$i = 0, $trunc172$i$clear = 0, $trunc24 = 0, $trunc24$clear = 0, $trunc25 = 0, $trunc25$clear = 0, $trunc26 = 0, $trunc26$clear = 0, $trunc27 = 0;
 var $trunc27$clear = 0, $trunc28 = 0, $trunc28$clear = 0, $trunc29 = 0, $trunc29$clear = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0;
 var $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr24 = 0, $vararg_ptr28 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $vararg_buffer55 = sp + 224|0;
 $vararg_buffer53 = sp + 216|0;
 $vararg_buffer51 = sp + 208|0;
 $vararg_buffer49 = sp + 200|0;
 $vararg_buffer47 = sp + 192|0;
 $vararg_buffer45 = sp + 184|0;
 $vararg_buffer43 = sp + 176|0;
 $vararg_buffer39 = sp + 168|0;
 $vararg_buffer35 = sp + 160|0;
 $vararg_buffer33 = sp + 152|0;
 $vararg_buffer31 = sp + 144|0;
 $vararg_buffer29 = sp + 136|0;
 $vararg_buffer25 = sp + 128|0;
 $vararg_buffer21 = sp + 120|0;
 $vararg_buffer19 = sp + 112|0;
 $vararg_buffer16 = sp + 104|0;
 $vararg_buffer14 = sp + 96|0;
 $vararg_buffer10 = sp + 88|0;
 $vararg_buffer6 = sp + 80|0;
 $vararg_buffer2 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $1 = sp + 264|0;
 $2 = sp + 256|0;
 $3 = sp + 248|0;
 $4 = sp;
 $5 = sp + 240|0;
 $6 = sp + 232|0;
 $7 = HEAP32[11252]|0;
 _hie_internal(11356,$0,12,$1);
 $8 = HEAP32[11252]|0;
 $9 = ($8|0)==($7|0);
 do {
  if (!($9)) {
   $10 = HEAP8[47051]|0;
   $11 = ($10<<24>>24)==(0);
   if ($11) {
    HEAP32[$vararg_buffer2>>2] = $8;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $7;
    _Internal(36916,$vararg_buffer2);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer>>2] = $8;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $7;
    _Error(36916,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $12 = ((($0)) + 4|0);
 $$idx104$i = ((($4)) + 8|0);
 $13 = ((($4)) + 4|0);
 $14 = ((($4)) + 16|0);
 $$idx27$i117$i = ((($0)) + 8|0);
 $15 = ((($0)) + 16|0);
 $16 = ((($0)) + 12|0);
 $17 = ((($4)) + 4|0);
 $$idx79$i = ((($4)) + 8|0);
 $18 = ((($4)) + 16|0);
 L7: while(1) {
  $19 = HEAP32[11156]|0;
  switch ($19|0) {
  case 51:  {
   break;
  }
  case 56:  {
   $210 = HEAP32[$12>>2]|0;
   $$idx81$val$i = HEAP32[$210>>2]|0;
   $trunc$i2 = $$idx81$val$i&255;
   $trunc$i2$clear = $trunc$i2 & 15;
   switch ($trunc$i2$clear<<24>>24) {
   case 14:  {
    label = 96;
    break;
   }
   case 13:  {
    $$idx2$i$i = ((($210)) + 8|0);
    $$idx2$val$i$i = HEAP32[$$idx2$i$i>>2]|0;
    $211 = $$idx2$val$i$i & 15;
    $212 = ($211|0)==(14);
    if ($212) {
     label = 96;
    }
    break;
   }
   default: {
   }
   }
   if ((label|0) == 96) {
    label = 0;
    _Error(38437,$vararg_buffer33);
    HEAP32[$12>>2] = 10924;
   }
   _NextToken();
   $213 = HEAP32[$12>>2]|0;
   _GetCodePos($5);
   _LoadExpr(0,$0);
   _GetCodePos($6);
   $214 = (_TypeOf($213)|0);
   _g_push($214,0);
   _GetCodePos($2);
   $215 = HEAP32[11252]|0;
   _hie_internal(11356,$4,12,$1);
   $216 = HEAP32[11252]|0;
   $217 = ($216|0)==($215|0);
   if (!($217)) {
    $218 = HEAP8[47051]|0;
    $219 = ($218<<24>>24)==(0);
    if ($219) {
     label = 100;
     break L7;
    }
    HEAP32[$vararg_buffer35>>2] = $216;
    $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
    HEAP32[$vararg_ptr38>>2] = $215;
    _Error(36916,$vararg_buffer35);
   }
   _GetCodePos($3);
   _ED_SetCodeRange($4,$2,$3);
   $220 = HEAP32[$17>>2]|0;
   $$idx80$val$i = HEAP32[$220>>2]|0;
   $trunc137$i = $$idx80$val$i&255;
   $trunc137$i$clear = $trunc137$i & 15;
   switch ($trunc137$i$clear<<24>>24) {
   case 14:  {
    label = 103;
    break;
   }
   case 13:  {
    $$idx2$i96$i = ((($220)) + 8|0);
    $$idx2$val$i97$i = HEAP32[$$idx2$i96$i>>2]|0;
    $221 = $$idx2$val$i97$i & 15;
    $222 = ($221|0)==(14);
    if ($222) {
     label = 103;
    }
    break;
   }
   default: {
   }
   }
   if ((label|0) == 103) {
    label = 0;
    _Error(38482,$vararg_buffer43);
    HEAP32[$17>>2] = 10924;
   }
   $$idx79$val$i = HEAP32[$$idx79$i>>2]|0;
   $223 = $$idx79$val$i & 511;
   $224 = ($223|0)==(1);
   do {
    if ($224) {
     $225 = (_ED_CodeRangeIsEmpty($4)|0);
     $226 = ($225|0)==(0);
     if ($226) {
      label = 143;
     } else {
      $227 = HEAP32[$17>>2]|0;
      $$idx78$val$i = HEAP32[$$idx27$i117$i>>2]|0;
      $228 = $$idx78$val$i & 511;
      $229 = ($228|0)==(1);
      if ($229) {
       _RemoveCode($5);
       $$idx90$val$i = HEAP32[$213>>2]|0;
       $230 = $$idx90$val$i & 112;
       $trunc140$i = $230&255;
       $trunc140$i$clear = $trunc140$i & 127;
       L30: do {
        switch ($trunc140$i$clear<<24>>24) {
        case 48:  {
         $$idx77$val$i = HEAP32[$227>>2]|0;
         $231 = $$idx77$val$i & 112;
         $trunc25 = $231&255;
         $trunc25$clear = $trunc25 & 127;
         switch ($trunc25$clear<<24>>24) {
         case 16:  {
          $232 = HEAP32[$18>>2]|0;
          $233 = (_CheckedPSizeOf($213)|0);
          $234 = Math_imul($233, $232)|0;
          $235 = HEAP32[$15>>2]|0;
          $236 = (($235) - ($234))|0;
          HEAP32[$15>>2] = $236;
          break L30;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          label = 122;
          break L30;
         }
         }
         $237 = (_Indirect($213)|0);
         $238 = (_Indirect($227)|0);
         $239 = (_TypeCmp($237,$238)|0);
         $240 = ($239>>>0)<(2);
         if ($240) {
          _Error(37924,$vararg_buffer45);
         } else {
          $241 = HEAP32[$15>>2]|0;
          $242 = HEAP32[$18>>2]|0;
          $243 = (($241) - ($242))|0;
          $244 = (_CheckedPSizeOf($213)|0);
          $245 = (($243>>>0) / ($244>>>0))&-1;
          HEAP32[$15>>2] = $245;
         }
         HEAP32[$12>>2] = 10940;
         break;
        }
        case 16:  {
         $$idx75$val$i = HEAP32[$227>>2]|0;
         $246 = $$idx75$val$i & 112;
         $247 = ($246|0)==(16);
         if ($247) {
          $248 = HEAP32[$12>>2]|0;
          $249 = HEAP32[$17>>2]|0;
          $250 = (_TypeOf($248)|0);
          $$idx27$val$i115$i = HEAP32[$$idx27$i117$i>>2]|0;
          $251 = $$idx27$val$i115$i & 255;
          $252 = ($251|0)==(1);
          $253 = $250 | 32;
          $$$i116$i = $252 ? $253 : $250;
          $254 = $$$i116$i | 2048;
          $255 = (_TypeOf($249)|0);
          $$idx26$val$i118$i = HEAP32[$$idx79$i>>2]|0;
          $256 = $$idx26$val$i118$i & 255;
          $257 = ($256|0)==(1);
          $258 = $255 | 32;
          $$25$i119$i = $257 ? $258 : $255;
          (_g_typeadjust($254,$$25$i119$i)|0);
          $$idx$val$i121$i = HEAP32[$248>>2]|0;
          $259 = $$idx$val$i121$i & 15;
          $260 = ($259|0)==(4);
          if ($260) {
           label = 117;
          } else {
           $$idx$val$i$i123$i = HEAP32[$249>>2]|0;
           $261 = $$idx$val$i$i123$i & 15;
           $262 = ($261|0)==(4);
           if ($262) {
            label = 117;
           } else {
            $267 = $$idx$val$i121$i & 384;
            $268 = ($267|0)==(128);
            if ($268) {
             $271 = 10956;
            } else {
             $269 = $$idx$val$i$i123$i & 384;
             $270 = ($269|0)==(128);
             $$7$i$i127$i = $270 ? 10956 : 10940;
             $271 = $$7$i$i127$i;
            }
           }
          }
          if ((label|0) == 117) {
           label = 0;
           $263 = $$idx$val$i121$i & 384;
           $264 = ($263|0)==(128);
           if ($264) {
            $271 = 10988;
           } else {
            $$idx11$val$i$i125$i = HEAP32[$249>>2]|0;
            $265 = $$idx11$val$i$i125$i & 384;
            $266 = ($265|0)==(128);
            $$$i$i126$i = $266 ? 10988 : 10972;
            $271 = $$$i$i126$i;
           }
          }
          HEAP32[$12>>2] = $271;
          $272 = HEAP32[$18>>2]|0;
          $273 = HEAP32[$15>>2]|0;
          $274 = (($273) - ($272))|0;
          HEAP32[$15>>2] = $274;
         } else {
          label = 122;
         }
         break;
        }
        default: {
         label = 122;
        }
        }
       } while(0);
       if ((label|0) == 122) {
        label = 0;
        _Error(38528,$vararg_buffer47);
       }
       $275 = HEAP32[$$idx27$i117$i>>2]|0;
       $276 = $275 & -2049;
       HEAP32[$$idx27$i117$i>>2] = $276;
       break;
      }
      _RemoveCode($6);
      $$idx87$val$i = HEAP32[$213>>2]|0;
      $277 = $$idx87$val$i & 112;
      $trunc139$i = $277&255;
      $trunc139$i$clear = $trunc139$i & 127;
      L53: do {
       switch ($trunc139$i$clear<<24>>24) {
       case 48:  {
        $$idx74$val$i = HEAP32[$227>>2]|0;
        $278 = $$idx74$val$i & 112;
        $trunc24 = $278&255;
        $trunc24$clear = $trunc24 & 127;
        switch ($trunc24$clear<<24>>24) {
        case 16:  {
         $279 = (_CheckedPSizeOf($213)|0);
         $280 = HEAP32[$18>>2]|0;
         $281 = Math_imul($280, $279)|0;
         HEAP32[$18>>2] = $281;
         $$068$i = 1;$$1$i7 = 1;
         break L53;
         break;
        }
        case 48:  {
         break;
        }
        default: {
         label = 139;
         break L53;
        }
        }
        $282 = (_Indirect($213)|0);
        $283 = (_Indirect($227)|0);
        $284 = (_TypeCmp($282,$283)|0);
        $285 = ($284>>>0)<(2);
        if ($285) {
         _Error(37924,$vararg_buffer49);
         $$0$i6 = 1;
        } else {
         $286 = (_CheckedPSizeOf($213)|0);
         $$0$i6 = $286;
        }
        HEAP32[$12>>2] = 10940;
        $$068$i = 1;$$1$i7 = $$0$i6;
        break;
       }
       case 16:  {
        $$idx72$val$i = HEAP32[$227>>2]|0;
        $287 = $$idx72$val$i & 112;
        $288 = ($287|0)==(16);
        if ($288) {
         $289 = HEAP32[$12>>2]|0;
         $290 = HEAP32[$17>>2]|0;
         $291 = (_TypeOf($289)|0);
         $$idx27$val$i100$i = HEAP32[$$idx27$i117$i>>2]|0;
         $292 = $$idx27$val$i100$i & 255;
         $293 = ($292|0)==(1);
         $294 = $291 | 32;
         $$$i101$i = $293 ? $294 : $291;
         $295 = $$$i101$i | 2048;
         $296 = (_TypeOf($290)|0);
         $$idx26$val$i103$i = HEAP32[$$idx79$i>>2]|0;
         $297 = $$idx26$val$i103$i & 255;
         $298 = ($297|0)==(1);
         $299 = $296 | 32;
         $$25$i104$i = $298 ? $299 : $296;
         $300 = (_g_typeadjust($295,$$25$i104$i)|0);
         $$idx$val$i106$i = HEAP32[$289>>2]|0;
         $301 = $$idx$val$i106$i & 15;
         $302 = ($301|0)==(4);
         if ($302) {
          label = 134;
         } else {
          $$idx$val$i$i108$i = HEAP32[$290>>2]|0;
          $303 = $$idx$val$i$i108$i & 15;
          $304 = ($303|0)==(4);
          if ($304) {
           label = 134;
          } else {
           $309 = $$idx$val$i106$i & 384;
           $310 = ($309|0)==(128);
           if ($310) {
            $313 = 10956;
           } else {
            $311 = $$idx$val$i$i108$i & 384;
            $312 = ($311|0)==(128);
            $$7$i$i112$i = $312 ? 10956 : 10940;
            $313 = $$7$i$i112$i;
           }
          }
         }
         if ((label|0) == 134) {
          label = 0;
          $305 = $$idx$val$i106$i & 384;
          $306 = ($305|0)==(128);
          if ($306) {
           $313 = 10988;
          } else {
           $$idx11$val$i$i110$i = HEAP32[$290>>2]|0;
           $307 = $$idx11$val$i$i110$i & 384;
           $308 = ($307|0)==(128);
           $$$i$i111$i = $308 ? 10988 : 10972;
           $313 = $$$i$i111$i;
          }
         }
         HEAP32[$12>>2] = $313;
         $$068$i = $300;$$1$i7 = 1;
        } else {
         label = 139;
        }
        break;
       }
       default: {
        label = 139;
       }
       }
      } while(0);
      if ((label|0) == 139) {
       label = 0;
       _Error(38528,$vararg_buffer51);
       $$068$i = 1;$$1$i7 = 1;
      }
      $314 = $$068$i | 32;
      $315 = HEAP32[$18>>2]|0;
      _g_dec($314,$315);
      $316 = ($$1$i7|0)==(1);
      if (!($316)) {
       $317 = (0 - ($$1$i7))|0;
       _g_scale($$068$i,$317);
      }
      (_ED_MakeRValExpr($0)|0);
      $318 = HEAP32[$$idx27$i117$i>>2]|0;
      $319 = $318 & -2049;
      HEAP32[$$idx27$i117$i>>2] = $319;
     }
    } else {
     label = 143;
    }
   } while(0);
   if ((label|0) == 143) {
    label = 0;
    _LoadExpr(0,$4);
    $320 = HEAP32[$17>>2]|0;
    $$idx84$val$i = HEAP32[$213>>2]|0;
    $321 = $$idx84$val$i & 112;
    $trunc138$i = $321&255;
    $trunc138$i$clear = $trunc138$i & 127;
    L80: do {
     switch ($trunc138$i$clear<<24>>24) {
     case 48:  {
      $$idx71$val$i = HEAP32[$320>>2]|0;
      $322 = $$idx71$val$i & 112;
      $trunc = $322&255;
      $trunc$clear = $trunc & 127;
      switch ($trunc$clear<<24>>24) {
      case 16:  {
       $323 = (_CheckedPSizeOf($213)|0);
       _g_scale(1,$323);
       $$169$ph$i = 1;
       label = 159;
       break L80;
       break;
      }
      case 48:  {
       break;
      }
      default: {
       label = 158;
       break L80;
      }
      }
      $324 = (_Indirect($213)|0);
      $325 = (_Indirect($320)|0);
      $326 = (_TypeCmp($324,$325)|0);
      $327 = ($326>>>0)<(2);
      if ($327) {
       _Error(37924,$vararg_buffer53);
       HEAP32[$12>>2] = 10940;
       _g_sub(1,0);
       break L80;
      }
      $356 = (_CheckedPSizeOf($213)|0);
      HEAP32[$12>>2] = 10940;
      _g_sub(1,0);
      $357 = ($356|0)==(1);
      if (!($357)) {
       $358 = (0 - ($356))|0;
       _g_scale(1,$358);
      }
      break;
     }
     case 16:  {
      $$idx$val$i8 = HEAP32[$320>>2]|0;
      $328 = $$idx$val$i8 & 112;
      $329 = ($328|0)==(16);
      if ($329) {
       $$idx91$val$i10 = HEAP32[$$idx27$i117$i>>2]|0;
       $330 = $$idx91$val$i10 & 255;
       $331 = ($330|0)==(1);
       if ($331) {
        (_ED_MakeRValExpr($0)|0);
        $$pre$i = HEAP32[$17>>2]|0;
        $337 = $$pre$i;
       } else {
        $337 = $320;
       }
       $332 = HEAP32[$12>>2]|0;
       $333 = (_TypeOf($332)|0);
       $$idx27$val$i$i11 = HEAP32[$$idx27$i117$i>>2]|0;
       $334 = $$idx27$val$i$i11 & 255;
       $335 = ($334|0)==(1);
       $336 = $333 | 32;
       $$$i$i12 = $335 ? $336 : $333;
       $338 = (_TypeOf($337)|0);
       $$idx26$val$i$i13 = HEAP32[$$idx79$i>>2]|0;
       $339 = $$idx26$val$i$i13 & 255;
       $340 = ($339|0)==(1);
       $341 = $338 | 32;
       $$25$i$i14 = $340 ? $341 : $338;
       $342 = (_g_typeadjust($$$i$i12,$$25$i$i14)|0);
       $$idx$val$i$i16 = HEAP32[$332>>2]|0;
       $343 = $$idx$val$i$i16 & 15;
       $344 = ($343|0)==(4);
       if ($344) {
        label = 153;
       } else {
        $$idx$val$i$i$i17 = HEAP32[$337>>2]|0;
        $345 = $$idx$val$i$i$i17 & 15;
        $346 = ($345|0)==(4);
        if ($346) {
         label = 153;
        } else {
         $351 = $$idx$val$i$i16 & 384;
         $352 = ($351|0)==(128);
         if ($352) {
          $355 = 10956;
         } else {
          $353 = $$idx$val$i$i$i17 & 384;
          $354 = ($353|0)==(128);
          $$7$i$i$i20 = $354 ? 10956 : 10940;
          $355 = $$7$i$i$i20;
         }
        }
       }
       if ((label|0) == 153) {
        label = 0;
        $347 = $$idx$val$i$i16 & 384;
        $348 = ($347|0)==(128);
        if ($348) {
         $355 = 10988;
        } else {
         $$idx11$val$i$i$i18 = HEAP32[$337>>2]|0;
         $349 = $$idx11$val$i$i$i18 & 384;
         $350 = ($349|0)==(128);
         $$$i$i$i19 = $350 ? 10988 : 10972;
         $355 = $$$i$i$i19;
        }
       }
       HEAP32[$12>>2] = $355;
       $phitmp$i21 = $342 & -33;
       $$169$ph$i = $phitmp$i21;
       label = 159;
      } else {
       label = 158;
      }
      break;
     }
     default: {
      label = 158;
     }
     }
    } while(0);
    if ((label|0) == 158) {
     label = 0;
     _Error(38528,$vararg_buffer55);
     $$169$ph$i = 1;
     label = 159;
    }
    if ((label|0) == 159) {
     label = 0;
     _g_sub($$169$ph$i,0);
    }
    (_ED_MakeRValExpr($0)|0);
    $359 = HEAP32[$$idx27$i117$i>>2]|0;
    $360 = $359 & -2049;
    HEAP32[$$idx27$i117$i>>2] = $360;
   }
   continue L7;
   break;
  }
  default: {
   label = 164;
   break L7;
  }
  }
  _NextToken();
  $20 = HEAP32[$12>>2]|0;
  $21 = (_ED_IsConst($0)|0);
  $22 = ($21|0)==(0);
  L109: do {
   if ($22) {
    _LoadExpr(0,$0);
    _GetCodePos($5);
    $128 = HEAP32[$12>>2]|0;
    $129 = (_TypeOf($128)|0);
    _g_push($129,0);
    _GetCodePos($2);
    $130 = HEAP32[11252]|0;
    _hie_internal(11356,$4,12,$1);
    $131 = HEAP32[11252]|0;
    $132 = ($131|0)==($130|0);
    if (!($132)) {
     $133 = HEAP8[47051]|0;
     $134 = ($133<<24>>24)==(0);
     if ($134) {
      label = 61;
      break L7;
     }
     HEAP32[$vararg_buffer21>>2] = $131;
     $vararg_ptr24 = ((($vararg_buffer21)) + 4|0);
     HEAP32[$vararg_ptr24>>2] = $130;
     _Error(36916,$vararg_buffer21);
    }
    _GetCodePos($3);
    _ED_SetCodeRange($4,$2,$3);
    $$idx104$val$i = HEAP32[$$idx104$i>>2]|0;
    $135 = $$idx104$val$i & 511;
    $136 = ($135|0)==(1);
    if ($136) {
     $137 = (_ED_CodeRangeIsEmpty($4)|0);
     $138 = ($137|0)==(0);
     if ($138) {
      label = 78;
     } else {
      $139 = HEAP32[$13>>2]|0;
      _RemoveCode($5);
      $$idx109$val$i = HEAP32[$20>>2]|0;
      $140 = $$idx109$val$i & 112;
      $trunc172$i = $140&255;
      $trunc172$i$clear = $trunc172$i & 127;
      L118: do {
       switch ($trunc172$i$clear<<24>>24) {
       case 48:  {
        $$idx95$val$i = HEAP32[$139>>2]|0;
        $141 = $$idx95$val$i & 112;
        $142 = ($141|0)==(16);
        if ($142) {
         $143 = (_CheckedPSizeOf($20)|0);
         $144 = HEAP32[$14>>2]|0;
         $145 = Math_imul($144, $143)|0;
         HEAP32[$14>>2] = $145;
         $$1$i = 33;
        } else {
         label = 76;
        }
        break;
       }
       case 16:  {
        $$idx108$val$i = HEAP32[$139>>2]|0;
        $146 = $$idx108$val$i & 112;
        $trunc29 = $146&255;
        $trunc29$clear = $trunc29 & 127;
        switch ($trunc29$clear<<24>>24) {
        case 48:  {
         $147 = (_CheckedPSizeOf($139)|0);
         _g_scale(33,$147);
         $148 = HEAP32[$13>>2]|0;
         HEAP32[$12>>2] = $148;
         $$1$i = 33;
         break L118;
         break;
        }
        case 16:  {
         break;
        }
        default: {
         label = 76;
         break L118;
        }
        }
        $149 = HEAP32[$12>>2]|0;
        $150 = HEAP32[$13>>2]|0;
        $151 = (_TypeOf($149)|0);
        $$idx27$val$i118$i = HEAP32[$$idx27$i117$i>>2]|0;
        $152 = $$idx27$val$i118$i & 255;
        $153 = ($152|0)==(1);
        $154 = $151 | 32;
        $$$i119$i = $153 ? $154 : $151;
        $155 = $$$i119$i | 2048;
        $156 = (_TypeOf($150)|0);
        $$idx26$val$i121$i = HEAP32[$$idx104$i>>2]|0;
        $157 = $$idx26$val$i121$i & 255;
        $158 = ($157|0)==(1);
        $159 = $156 | 32;
        $$25$i122$i = $158 ? $159 : $156;
        $160 = (_g_typeadjust($155,$$25$i122$i)|0);
        $$idx$val$i124$i = HEAP32[$149>>2]|0;
        $161 = $$idx$val$i124$i & 15;
        $162 = ($161|0)==(4);
        if ($162) {
         label = 71;
        } else {
         $$idx$val$i$i126$i = HEAP32[$150>>2]|0;
         $163 = $$idx$val$i$i126$i & 15;
         $164 = ($163|0)==(4);
         if ($164) {
          label = 71;
         } else {
          $169 = $$idx$val$i124$i & 384;
          $170 = ($169|0)==(128);
          if ($170) {
           $173 = 10956;
          } else {
           $171 = $$idx$val$i$i126$i & 384;
           $172 = ($171|0)==(128);
           $$7$i$i130$i = $172 ? 10956 : 10940;
           $173 = $$7$i$i130$i;
          }
         }
        }
        if ((label|0) == 71) {
         label = 0;
         $165 = $$idx$val$i124$i & 384;
         $166 = ($165|0)==(128);
         if ($166) {
          $173 = 10988;
         } else {
          $$idx11$val$i$i128$i = HEAP32[$150>>2]|0;
          $167 = $$idx11$val$i$i128$i & 384;
          $168 = ($167|0)==(128);
          $$$i$i129$i = $168 ? 10988 : 10972;
          $173 = $$$i$i129$i;
         }
        }
        HEAP32[$12>>2] = $173;
        $phitmp$i = $160 | 32;
        $$1$i = $phitmp$i;
        break;
       }
       default: {
        label = 76;
       }
       }
      } while(0);
      if ((label|0) == 76) {
       label = 0;
       _Error(38396,$vararg_buffer29);
       $$1$i = 33;
      }
      $174 = HEAP32[$14>>2]|0;
      _g_inc($$1$i,$174);
     }
    } else {
     label = 78;
    }
    if ((label|0) == 78) {
     label = 0;
     _LoadExpr(0,$4);
     $175 = HEAP32[$13>>2]|0;
     $$idx107$val$i = HEAP32[$20>>2]|0;
     $176 = $$idx107$val$i & 112;
     $trunc171$i = $176&255;
     $trunc171$i$clear = $trunc171$i & 127;
     L138: do {
      switch ($trunc171$i$clear<<24>>24) {
      case 48:  {
       $$idx91$val$i = HEAP32[$175>>2]|0;
       $177 = $$idx91$val$i & 112;
       $178 = ($177|0)==(16);
       if ($178) {
        $179 = (_CheckedPSizeOf($20)|0);
        _g_scale(1,$179);
        $$2$i = 1;
       } else {
        label = 90;
       }
       break;
      }
      case 16:  {
       $$idx106$val$i = HEAP32[$175>>2]|0;
       $180 = $$idx106$val$i & 112;
       $trunc28 = $180&255;
       $trunc28$clear = $trunc28 & 127;
       switch ($trunc28$clear<<24>>24) {
       case 48:  {
        $181 = (_TypeOf($20)|0);
        _g_tosint($181);
        _g_swap(1);
        $182 = (_CheckedPSizeOf($175)|0);
        _g_scale(1,$182);
        $183 = HEAP32[$13>>2]|0;
        HEAP32[$12>>2] = $183;
        $$2$i = 1;
        break L138;
        break;
       }
       case 16:  {
        break;
       }
       default: {
        label = 90;
        break L138;
       }
       }
       $184 = HEAP32[$12>>2]|0;
       $185 = (_TypeOf($184)|0);
       $$idx27$val$i$i = HEAP32[$$idx27$i117$i>>2]|0;
       $186 = $$idx27$val$i$i & 255;
       $187 = ($186|0)==(1);
       $188 = $185 | 32;
       $$$i$i = $187 ? $188 : $185;
       $189 = (_TypeOf($175)|0);
       $$idx26$val$i$i = HEAP32[$$idx104$i>>2]|0;
       $190 = $$idx26$val$i$i & 255;
       $191 = ($190|0)==(1);
       $192 = $189 | 32;
       $$25$i$i = $191 ? $192 : $189;
       $193 = (_g_typeadjust($$$i$i,$$25$i$i)|0);
       $$idx$val$i$i = HEAP32[$184>>2]|0;
       $194 = $$idx$val$i$i & 15;
       $195 = ($194|0)==(4);
       if ($195) {
        label = 85;
       } else {
        $$idx$val$i$i$i = HEAP32[$175>>2]|0;
        $196 = $$idx$val$i$i$i & 15;
        $197 = ($196|0)==(4);
        if ($197) {
         label = 85;
        } else {
         $202 = $$idx$val$i$i & 384;
         $203 = ($202|0)==(128);
         if ($203) {
          $206 = 10956;
         } else {
          $204 = $$idx$val$i$i$i & 384;
          $205 = ($204|0)==(128);
          $$7$i$i$i = $205 ? 10956 : 10940;
          $206 = $$7$i$i$i;
         }
        }
       }
       if ((label|0) == 85) {
        label = 0;
        $198 = $$idx$val$i$i & 384;
        $199 = ($198|0)==(128);
        if ($199) {
         $206 = 10988;
        } else {
         $$idx11$val$i$i$i = HEAP32[$175>>2]|0;
         $200 = $$idx11$val$i$i$i & 384;
         $201 = ($200|0)==(128);
         $$$i$i$i = $201 ? 10988 : 10972;
         $206 = $$$i$i$i;
        }
       }
       HEAP32[$12>>2] = $206;
       $207 = $193 & -33;
       $$2$i = $207;
       break;
      }
      default: {
       label = 90;
      }
      }
     } while(0);
     if ((label|0) == 90) {
      label = 0;
      _Error(38396,$vararg_buffer31);
      $$2$i = 1;
     }
     _g_add($$2$i,0);
    }
    (_ED_MakeRValExpr($0)|0);
   } else {
    $23 = HEAP32[11252]|0;
    _hie_internal(11356,$4,12,$1);
    $24 = HEAP32[11252]|0;
    $25 = ($24|0)==($23|0);
    if (!($25)) {
     $26 = HEAP8[47051]|0;
     $27 = ($26<<24>>24)==(0);
     if ($27) {
      label = 11;
      break L7;
     }
     HEAP32[$vararg_buffer6>>2] = $24;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $23;
     _Error(36916,$vararg_buffer6);
    }
    $$idx105$val$i = HEAP32[$$idx104$i>>2]|0;
    $28 = $$idx105$val$i & 511;
    $29 = ($28|0)==(1);
    if ($29) {
     $30 = HEAP32[$13>>2]|0;
     $$idx113$val$i = HEAP32[$20>>2]|0;
     $31 = $$idx113$val$i & 112;
     $trunc170$i = $31&255;
     $trunc170$i$clear = $trunc170$i & 127;
     L164: do {
      switch ($trunc170$i$clear<<24>>24) {
      case 48:  {
       $$idx103$val$i = HEAP32[$30>>2]|0;
       $32 = $$idx103$val$i & 112;
       $33 = ($32|0)==(16);
       if ($33) {
        $34 = HEAP32[$14>>2]|0;
        $35 = (_CheckedPSizeOf($20)|0);
        $36 = Math_imul($35, $34)|0;
        $37 = HEAP32[$15>>2]|0;
        $38 = (($37) + ($36))|0;
        HEAP32[$15>>2] = $38;
        break L109;
       }
       break;
      }
      case 16:  {
       $$idx112$val$i = HEAP32[$30>>2]|0;
       $39 = $$idx112$val$i & 112;
       $trunc27 = $39&255;
       $trunc27$clear = $trunc27 & 127;
       switch ($trunc27$clear<<24>>24) {
       case 48:  {
        $40 = HEAP32[$15>>2]|0;
        $41 = (_CheckedPSizeOf($30)|0);
        $42 = Math_imul($41, $40)|0;
        $43 = HEAP32[$14>>2]|0;
        $44 = (($42) + ($43))|0;
        HEAP32[$15>>2] = $44;
        $45 = HEAP32[$13>>2]|0;
        HEAP32[$12>>2] = $45;
        break L109;
        break;
       }
       case 16:  {
        break;
       }
       default: {
        break L164;
       }
       }
       $46 = HEAP32[$14>>2]|0;
       $47 = HEAP32[$15>>2]|0;
       $48 = (($47) + ($46))|0;
       HEAP32[$15>>2] = $48;
       $49 = HEAP32[$12>>2]|0;
       $50 = (_TypeOf($49)|0);
       $$idx27$val$i133$i = HEAP32[$$idx27$i117$i>>2]|0;
       $51 = $$idx27$val$i133$i & 255;
       $52 = ($51|0)==(1);
       $53 = $50 | 32;
       $$$i134$i = $52 ? $53 : $50;
       $54 = $$$i134$i | 2048;
       $55 = (_TypeOf($30)|0);
       $$idx26$val$i136$i = HEAP32[$$idx104$i>>2]|0;
       $56 = $$idx26$val$i136$i & 255;
       $57 = ($56|0)==(1);
       $58 = $55 | 32;
       $$25$i137$i = $57 ? $58 : $55;
       (_g_typeadjust($54,$$25$i137$i)|0);
       $$idx$val$i139$i = HEAP32[$49>>2]|0;
       $59 = $$idx$val$i139$i & 15;
       $60 = ($59|0)==(4);
       if ($60) {
        label = 20;
       } else {
        $$idx$val$i$i141$i = HEAP32[$30>>2]|0;
        $61 = $$idx$val$i$i141$i & 15;
        $62 = ($61|0)==(4);
        if ($62) {
         label = 20;
        } else {
         $67 = $$idx$val$i139$i & 384;
         $68 = ($67|0)==(128);
         if ($68) {
          $71 = 10956;
         } else {
          $69 = $$idx$val$i$i141$i & 384;
          $70 = ($69|0)==(128);
          $$7$i$i145$i = $70 ? 10956 : 10940;
          $71 = $$7$i$i145$i;
         }
        }
       }
       if ((label|0) == 20) {
        label = 0;
        $63 = $$idx$val$i139$i & 384;
        $64 = ($63|0)==(128);
        if ($64) {
         $71 = 10988;
        } else {
         $$idx11$val$i$i143$i = HEAP32[$30>>2]|0;
         $65 = $$idx11$val$i$i143$i & 384;
         $66 = ($65|0)==(128);
         $$$i$i144$i = $66 ? 10988 : 10972;
         $71 = $$$i$i144$i;
        }
       }
       HEAP32[$12>>2] = $71;
       break L109;
       break;
      }
      default: {
      }
      }
     } while(0);
     _Error(38396,$vararg_buffer14);
     break;
    }
    _LoadExpr(0,$4);
    $72 = HEAP32[$13>>2]|0;
    $$idx116$val$i = HEAP32[$$idx27$i117$i>>2]|0;
    $73 = $$idx116$val$i & 255;
    $74 = ($73|0)==(1);
    L181: do {
     if ($74) {
      $$0$i = 32;
     } else {
      $trunc$i$i = $$idx116$val$i&255;
      switch ($trunc$i$i<<24>>24) {
      case 1:  {
       $$0$i = 8256;
       break L181;
       break;
      }
      case 2:  {
       $$0$i = 4160;
       break L181;
       break;
      }
      case 4:  {
       $$0$i = 64;
       break L181;
       break;
      }
      case 8:  {
       $$0$i = 32832;
       break L181;
       break;
      }
      case 16:  {
       $$0$i = 64;
       break L181;
       break;
      }
      case 32:  {
       $$0$i = 64;
       break L181;
       break;
      }
      case 64:  {
       $$0$i = 64;
       break L181;
       break;
      }
      case -128:  {
       $$0$i = 64;
       break L181;
       break;
      }
      default: {
       label = 35;
       break L7;
      }
      }
     }
    } while(0);
    $$idx111$val$i = HEAP32[$20>>2]|0;
    $75 = $$idx111$val$i & 112;
    $trunc$i = $75&255;
    $trunc$i$clear = $trunc$i & 127;
    L192: do {
     switch ($trunc$i$clear<<24>>24) {
     case 48:  {
      $$idx99$val$i = HEAP32[$72>>2]|0;
      $76 = $$idx99$val$i & 112;
      $77 = ($76|0)==(16);
      if ($77) {
       $78 = (_CheckedPSizeOf($20)|0);
       _g_scale(1,$78);
       $79 = $$0$i | 1;
       $$idx$val$i = HEAP32[$$idx27$i117$i>>2]|0;
       $80 = $$idx$val$i & 255;
       $81 = ($80|0)==(1);
       $82 = HEAP32[$15>>2]|0;
       if ($81) {
        _g_inc($79,$82);
        break L192;
       } else {
        $83 = HEAP32[$16>>2]|0;
        _g_addaddr_static($79,$83,$82);
        break L192;
       }
      } else {
       label = 56;
      }
      break;
     }
     case 16:  {
      $$idx110$val$i = HEAP32[$72>>2]|0;
      $84 = $$idx110$val$i & 112;
      $trunc26 = $84&255;
      $trunc26$clear = $trunc26 & 127;
      switch ($trunc26$clear<<24>>24) {
      case 48:  {
       $85 = (_CheckedPSizeOf($72)|0);
       $86 = $$0$i | 1;
       $87 = HEAP32[$13>>2]|0;
       HEAP32[$12>>2] = $87;
       $$idx115$val$i = HEAP32[$$idx27$i117$i>>2]|0;
       $88 = $$idx115$val$i & 255;
       $89 = ($88|0)==(1);
       $90 = $87;
       if ($89) {
        $91 = HEAP32[$15>>2]|0;
        $92 = Math_imul($91, $85)|0;
        HEAP32[$15>>2] = $92;
        _g_inc($86,$92);
        break L192;
       }
       $93 = ($85|0)==(1);
       if ($93) {
        $94 = HEAP32[$16>>2]|0;
        $95 = HEAP32[$15>>2]|0;
        _g_addaddr_static($86,$94,$95);
        break L192;
       } else {
        $96 = (_TypeOf($90)|0);
        _g_push($96,0);
        $97 = HEAP32[$16>>2]|0;
        $98 = HEAP32[$15>>2]|0;
        _g_getimmed($86,$97,$98);
        _g_scale(1,$85);
        _g_add(1,0);
        break L192;
       }
       break;
      }
      case 16:  {
       break;
      }
      default: {
       label = 56;
       break L192;
      }
      }
      $99 = HEAP32[$12>>2]|0;
      $100 = (_TypeOf($99)|0);
      $$idx27$val$i148$i = HEAP32[$$idx27$i117$i>>2]|0;
      $101 = $$idx27$val$i148$i & 255;
      $102 = ($101|0)==(1);
      $103 = $100 | 32;
      $$$i149$i = $102 ? $103 : $100;
      $104 = $$$i149$i | 2048;
      $105 = (_TypeOf($72)|0);
      $$idx26$val$i151$i = HEAP32[$$idx104$i>>2]|0;
      $106 = $$idx26$val$i151$i & 255;
      $107 = ($106|0)==(1);
      $108 = $105 | 32;
      $$25$i152$i = $107 ? $108 : $105;
      $109 = (_g_typeadjust($104,$$25$i152$i)|0);
      $$idx$val$i154$i = HEAP32[$99>>2]|0;
      $110 = $$idx$val$i154$i & 15;
      $111 = ($110|0)==(4);
      if ($111) {
       label = 49;
      } else {
       $$idx$val$i$i156$i = HEAP32[$72>>2]|0;
       $112 = $$idx$val$i$i156$i & 15;
       $113 = ($112|0)==(4);
       if ($113) {
        label = 49;
       } else {
        $118 = $$idx$val$i154$i & 384;
        $119 = ($118|0)==(128);
        if ($119) {
         $122 = 10956;
        } else {
         $120 = $$idx$val$i$i156$i & 384;
         $121 = ($120|0)==(128);
         $$7$i$i160$i = $121 ? 10956 : 10940;
         $122 = $$7$i$i160$i;
        }
       }
      }
      if ((label|0) == 49) {
       label = 0;
       $114 = $$idx$val$i154$i & 384;
       $115 = ($114|0)==(128);
       if ($115) {
        $122 = 10988;
       } else {
        $$idx11$val$i$i158$i = HEAP32[$72>>2]|0;
        $116 = $$idx11$val$i$i158$i & 384;
        $117 = ($116|0)==(128);
        $$$i$i159$i = $117 ? 10988 : 10972;
        $122 = $$$i$i159$i;
       }
      }
      HEAP32[$12>>2] = $122;
      $123 = $109 | $$0$i;
      $$idx114$val$i = HEAP32[$$idx27$i117$i>>2]|0;
      $124 = $$idx114$val$i & 255;
      $125 = ($124|0)==(1);
      $126 = HEAP32[$15>>2]|0;
      if ($125) {
       _g_inc($123,$126);
       break L192;
      } else {
       $127 = HEAP32[$16>>2]|0;
       _g_addaddr_static($123,$127,$126);
       break L192;
      }
      break;
     }
     default: {
      label = 56;
     }
     }
    } while(0);
    if ((label|0) == 56) {
     label = 0;
     _Error(38396,$vararg_buffer19);
    }
    (_ED_MakeRValExpr($0)|0);
   }
  } while(0);
  $208 = HEAP32[$$idx27$i117$i>>2]|0;
  $209 = $208 & -2049;
  HEAP32[$$idx27$i117$i>>2] = $209;
 }
 if ((label|0) == 11) {
  HEAP32[$vararg_buffer10>>2] = $24;
  $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
  HEAP32[$vararg_ptr13>>2] = $23;
  _Internal(36916,$vararg_buffer10);
  // unreachable;
 }
 else if ((label|0) == 35) {
  HEAP32[$vararg_buffer16>>2] = $$idx116$val$i;
  _Internal(36972,$vararg_buffer16);
  // unreachable;
 }
 else if ((label|0) == 61) {
  HEAP32[$vararg_buffer25>>2] = $131;
  $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
  HEAP32[$vararg_ptr28>>2] = $130;
  _Internal(36916,$vararg_buffer25);
  // unreachable;
 }
 else if ((label|0) == 100) {
  HEAP32[$vararg_buffer39>>2] = $216;
  $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
  HEAP32[$vararg_ptr42>>2] = $215;
  _Internal(36916,$vararg_buffer39);
  // unreachable;
 }
 else if ((label|0) == 164) {
  STACKTOP = sp;return;
 }
}
function _hie0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _hie1($0);
 $1 = HEAP32[11156]|0;
 $2 = ($1|0)==(52);
 if (!($2)) {
  return;
 }
 while(1) {
  _NextToken();
  _hie1($0);
  $3 = HEAP32[11156]|0;
  $4 = ($3|0)==(52);
  if (!($4)) {
   break;
  }
 }
 return;
}
function _Expression0($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = HEAP32[11252]|0;
 _hie1($0);
 $2 = HEAP32[11156]|0;
 $3 = ($2|0)==(52);
 if ($3) {
  while(1) {
   _NextToken();
   _hie1($0);
   $4 = HEAP32[11156]|0;
   $5 = ($4|0)==(52);
   if (!($5)) {
    break;
   }
  }
 }
 $6 = HEAP32[11252]|0;
 $7 = ($6|0)==($1|0);
 if ($7) {
  _LoadExpr(0,$0);
  STACKTOP = sp;return;
 }
 $8 = HEAP8[47051]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  HEAP32[$vararg_buffer2>>2] = $6;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $1;
  _Internal(36916,$vararg_buffer2);
  // unreachable;
 }
 HEAP32[$vararg_buffer>>2] = $6;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 _Error(36916,$vararg_buffer);
 _LoadExpr(0,$0);
 STACKTOP = sp;return;
}
function _ConstExpr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11252]|0;
 FUNCTION_TABLE_vi[$0 & 15]($1);
 $3 = HEAP32[11252]|0;
 $4 = ($3|0)==($2|0);
 do {
  if (!($4)) {
   $5 = HEAP8[47051]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    HEAP32[$vararg_buffer2>>2] = $3;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $2;
    _Internal(36916,$vararg_buffer2);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer>>2] = $3;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $2;
    _Error(36916,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $7 = (_ED_IsConst($1)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 _Error(38569,$vararg_buffer6);
 (_ED_MakeConstAbsInt($1,1)|0);
 STACKTOP = sp;return;
}
function _BoolExpr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11252]|0;
 FUNCTION_TABLE_vi[$0 & 15]($1);
 $3 = HEAP32[11252]|0;
 $4 = ($3|0)==($2|0);
 do {
  if (!($4)) {
   $5 = HEAP8[47051]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    HEAP32[$vararg_buffer2>>2] = $3;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $2;
    _Internal(36916,$vararg_buffer2);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer>>2] = $3;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $2;
    _Error(36916,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $7 = (_ED_IsBool($1)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 _Error(38598,$vararg_buffer6);
 (_ED_MakeConstAbsInt($1,1)|0);
 STACKTOP = sp;return;
}
function _ConstAbsIntExpr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = HEAP32[11252]|0;
 FUNCTION_TABLE_vi[$0 & 15]($1);
 $3 = HEAP32[11252]|0;
 $4 = ($3|0)==($2|0);
 do {
  if (!($4)) {
   $5 = HEAP8[47051]|0;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    HEAP32[$vararg_buffer2>>2] = $3;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $2;
    _Internal(36916,$vararg_buffer2);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer>>2] = $3;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $2;
    _Error(36916,$vararg_buffer);
    break;
   }
  }
 } while(0);
 $7 = (_ED_IsConstAbsInt($1)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 _Error(37887,$vararg_buffer6);
 (_ED_MakeConstAbsInt($1,1)|0);
 STACKTOP = sp;return;
}
function _FindOP65($0) {
 $0 = $0|0;
 var $$0 = 0, $$011$lcssa = 0, $$01112 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = (_strlen($0)|0);
 $3 = ($2>>>0)>(8);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($2|0)==(0);
 if ($4) {
  $$011$lcssa = 0;
 } else {
  $$01112 = 0;
  while(1) {
   $5 = (($0) + ($$01112)|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = (_tolower($7)|0);
   $9 = $8&255;
   $10 = (($1) + ($$01112)|0);
   HEAP8[$10>>0] = $9;
   $11 = (($$01112) + 1)|0;
   $exitcond = ($11|0)==($2|0);
   if ($exitcond) {
    $$011$lcssa = $2;
    break;
   } else {
    $$01112 = $11;
   }
  }
 }
 $12 = (($1) + ($$011$lcssa)|0);
 HEAP8[$12>>0] = 0;
 $13 = (_bsearch($1,11404,74,20,10)|0);
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _FindCmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 4|0);
 $3 = (_strcmp($0,$2)|0);
 return ($3|0);
}
function _GetInsnSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (((11404 + (($0*20)|0)|0)) + 13|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L1: do {
  if ($4) {
   do {
    switch ($1|0) {
    case 1: case 0:  {
     $$0 = 1;
     break L1;
     break;
    }
    case 2:  {
     $$0 = 2;
     break L1;
     break;
    }
    case 3:  {
     $$0 = 2;
     break L1;
     break;
    }
    case 4:  {
     $$0 = 2;
     break L1;
     break;
    }
    case 6:  {
     $$0 = 3;
     break L1;
     break;
    }
    case 7:  {
     $$0 = 3;
     break L1;
     break;
    }
    case 8:  {
     $$0 = 3;
     break L1;
     break;
    }
    case 9:  {
     $$0 = 2;
     break L1;
     break;
    }
    case 10:  {
     $$0 = 2;
     break L1;
     break;
    }
    case 11:  {
     $$0 = 2;
     break L1;
     break;
    }
    default: {
     _Internal(38626,$vararg_buffer);
     // unreachable;
    }
    }
   } while(0);
  } else {
   $5 = $3&255;
   $$0 = $5;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _GetAMUseInfo($0) {
 $0 = $0|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0|0) {
 case 1:  {
  $$0 = 1;
  break;
 }
 case 4:  {
  $$0 = 2;
  break;
 }
 case 7:  {
  $$0 = 2;
  break;
 }
 case 8:  {
  $$0 = 4;
  break;
 }
 case 9:  {
  $$0 = 2;
  break;
 }
 case 10:  {
  $$0 = 4;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _GetInverseBranch($0) {
 $0 = $0|0;
 var $$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 do {
  switch ($0|0) {
  case 3:  {
   $$0 = 4;
   break;
  }
  case 4:  {
   $$0 = 3;
   break;
  }
  case 5:  {
   $$0 = 8;
   break;
  }
  case 7:  {
   $$0 = 9;
   break;
  }
  case 8:  {
   $$0 = 5;
   break;
  }
  case 9:  {
   $$0 = 7;
   break;
  }
  case 12:  {
   $$0 = 13;
   break;
  }
  case 13:  {
   $$0 = 12;
   break;
  }
  case 30:  {
   $$0 = 31;
   break;
  }
  case 31:  {
   $$0 = 30;
   break;
  }
  case 32:  {
   $$0 = 35;
   break;
  }
  case 33:  {
   $$0 = 36;
   break;
  }
  case 35:  {
   $$0 = 32;
   break;
  }
  case 36:  {
   $$0 = 33;
   break;
  }
  case 38:  {
   $$0 = 39;
   break;
  }
  case 39:  {
   $$0 = 38;
   break;
  }
  default: {
   HEAP32[$vararg_buffer>>2] = $0;
   _Internal(38650,$vararg_buffer);
   // unreachable;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MakeShortBranch($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 switch ($0|0) {
 case 30: case 3:  {
  $$0 = 3;
  break;
 }
 case 31: case 4:  {
  $$0 = 4;
  break;
 }
 case 32: case 5:  {
  $$0 = 5;
  break;
 }
 case 33: case 7:  {
  $$0 = 7;
  break;
 }
 case 35: case 8:  {
  $$0 = 8;
  break;
 }
 case 36: case 9:  {
  $$0 = 9;
  break;
 }
 case 38: case 12:  {
  $$0 = 12;
  break;
 }
 case 39: case 13:  {
  $$0 = 13;
  break;
 }
 case 34: case 10:  {
  $1 = HEAP32[3628]|0;
  $2 = (14556 + ($1<<2)|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 8;
  $5 = ($4|0)!=(0);
  $6 = $5 ? 10 : 34;
  $$0 = $6;
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $0;
  _Internal(38687,$vararg_buffer);
  // unreachable;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _MakeLongBranch($0) {
 $0 = $0|0;
 var $$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 switch ($0|0) {
 case 30: case 3:  {
  $$0 = 30;
  break;
 }
 case 31: case 4:  {
  $$0 = 31;
  break;
 }
 case 32: case 5:  {
  $$0 = 32;
  break;
 }
 case 33: case 7:  {
  $$0 = 33;
  break;
 }
 case 35: case 8:  {
  $$0 = 35;
  break;
 }
 case 36: case 9:  {
  $$0 = 36;
  break;
 }
 case 38: case 12:  {
  $$0 = 38;
  break;
 }
 case 39: case 13:  {
  $$0 = 39;
  break;
 }
 case 34: case 10:  {
  $$0 = 34;
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $0;
  _Internal(38723,$vararg_buffer);
  // unreachable;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _GetBranchCond($0) {
 $0 = $0|0;
 var $$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 do {
  switch ($0|0) {
  case 30: case 3:  {
   $$0 = 0;
   break;
  }
  case 4:  {
   $$0 = 1;
   break;
  }
  case 5:  {
   $$0 = 2;
   break;
  }
  case 7:  {
   $$0 = 3;
   break;
  }
  case 8:  {
   $$0 = 4;
   break;
  }
  case 9:  {
   $$0 = 5;
   break;
  }
  case 12:  {
   $$0 = 6;
   break;
  }
  case 13:  {
   $$0 = 7;
   break;
  }
  case 31:  {
   $$0 = 1;
   break;
  }
  case 32:  {
   $$0 = 2;
   break;
  }
  case 33:  {
   $$0 = 3;
   break;
  }
  case 35:  {
   $$0 = 4;
   break;
  }
  case 36:  {
   $$0 = 5;
   break;
  }
  case 38:  {
   $$0 = 6;
   break;
  }
  case 39:  {
   $$0 = 7;
   break;
  }
  default: {
   HEAP32[$vararg_buffer>>2] = $0;
   _Internal(38758,$vararg_buffer);
   // unreachable;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _GetInverseCond($0) {
 $0 = $0|0;
 var $$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 switch ($0|0) {
 case 0:  {
  $$0 = 1;
  break;
 }
 case 1:  {
  $$0 = 0;
  break;
 }
 case 2:  {
  $$0 = 4;
  break;
 }
 case 3:  {
  $$0 = 5;
  break;
 }
 case 4:  {
  $$0 = 2;
  break;
 }
 case 5:  {
  $$0 = 3;
  break;
 }
 case 6:  {
  $$0 = 7;
  break;
 }
 case 7:  {
  $$0 = 6;
  break;
 }
 default: {
  HEAP32[$vararg_buffer>>2] = $0;
  _Internal(38792,$vararg_buffer);
  // unreachable;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _TypeConversion($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val = 0, $$idx31$val = 0, $$idx32$val = 0, $$idx33$val = 0, $$idx34$val = 0, $$idx34$val$pre = 0, $$idx38$val = 0, $$idx39$val = 0, $$idx41$val = 0, $$idx44$val = 0, $$pre = 0, $$pre51 = 0, $$pre53 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, $trunc47 = 0, $trunc47$clear = 0, $trunc48 = 0;
 var $trunc48$clear = 0, $trunc49 = 0, $trunc49$clear = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $$idx33$val = HEAP32[$1>>2]|0;
 $2 = $$idx33$val & 15;
 $3 = ($2|0)==(9);
 $$pre53 = ((($0)) + 4|0);
 if ($3) {
  label = 3;
 } else {
  $4 = HEAP32[$$pre53>>2]|0;
  $$idx32$val = HEAP32[$4>>2]|0;
  $5 = $$idx32$val & 15;
  $6 = ($5|0)==(9);
  if ($6) {
   label = 3;
  } else {
   $$idx34$val = $$idx32$val;$$pre51 = $4;
  }
 }
 if ((label|0) == 3) {
  _Error(38830,$vararg_buffer);
  $$pre = HEAP32[$$pre53>>2]|0;
  $$idx34$val$pre = HEAP32[$$pre>>2]|0;
  $$idx34$val = $$idx34$val$pre;$$pre51 = $$pre;
 }
 $7 = $$idx34$val & 15;
 $8 = ($7|0)==(14);
 if ($8) {
  $9 = (_PointerTo($$pre51)|0);
  HEAP32[$$pre53>>2] = $9;
  $10 = $9;
 } else {
  $10 = $$pre51;
 }
 $11 = (_TypeCmp($10,$1)|0);
 $12 = ($11>>>0)>(3);
 if ($12) {
  STACKTOP = sp;return;
 }
 $$idx38$val = HEAP32[$1>>2]|0;
 $13 = $$idx38$val & 112;
 $trunc = $13&255;
 $trunc$clear = $trunc & 127;
 L12: do {
  switch ($trunc$clear<<24>>24) {
  case 16:  {
   $14 = HEAP32[$$pre53>>2]|0;
   $$idx41$val = HEAP32[$14>>2]|0;
   $15 = $$idx41$val & 112;
   $trunc49 = $15&255;
   $trunc49$clear = $trunc49 & 127;
   switch ($trunc49$clear<<24>>24) {
   case 32: case 16:  {
    break L12;
    break;
   }
   case 48:  {
    break;
   }
   default: {
    _Error(38888,$vararg_buffer3);
    break L12;
   }
   }
   $16 = $$idx41$val & 15;
   $17 = ($16|0)==(12);
   if ($17) {
    $18 = (_ArrayToPtr($14)|0);
    HEAP32[$$pre53>>2] = $18;
   }
   _Warning(38843,$vararg_buffer1);
   break;
  }
  case 32:  {
   $19 = HEAP32[$$pre53>>2]|0;
   $$idx44$val = HEAP32[$19>>2]|0;
   $20 = $$idx44$val & 112;
   $trunc48 = $20&255;
   $trunc48$clear = $trunc48 & 127;
   switch ($trunc48$clear<<24>>24) {
   case 16: case 32:  {
    break L12;
    break;
   }
   default: {
   }
   }
   _Error(38888,$vararg_buffer5);
   break;
  }
  case 48:  {
   $21 = HEAP32[$$pre53>>2]|0;
   $$idx39$val = HEAP32[$21>>2]|0;
   $22 = $$idx39$val & 112;
   $trunc47 = $22&255;
   $trunc47$clear = $trunc47 & 127;
   switch ($trunc47$clear<<24>>24) {
   case 48:  {
    $23 = $$idx39$val & 15;
    $24 = ($23|0)==(12);
    if ($24) {
     $25 = (_ArrayToPtr($21)|0);
     HEAP32[$$pre53>>2] = $25;
    }
    $26 = (_Indirect($1)|0);
    $$idx31$val = HEAP32[$26>>2]|0;
    $27 = $$idx31$val & 15;
    $28 = ($27|0)==(9);
    if ($28) {
     break L12;
    }
    $29 = HEAP32[$$pre53>>2]|0;
    $30 = (_Indirect($29)|0);
    $$idx$val = HEAP32[$30>>2]|0;
    $31 = $$idx$val & 15;
    $32 = ($31|0)==(9);
    if ($32) {
     break L12;
    }
    $33 = HEAP32[$$pre53>>2]|0;
    $34 = (_TypeCmp($1,$33)|0);
    switch ($34|0) {
    case 0:  {
     $35 = HEAP32[$0>>2]|0;
     $36 = ($35|0)==(0|0);
     $37 = ((($35)) + 48|0);
     $38 = $36 ? 38907 : $37;
     HEAP32[$vararg_buffer7>>2] = $38;
     _Error(38915,$vararg_buffer7);
     break L12;
     break;
    }
    case 2:  {
     _Error(38950,$vararg_buffer9);
     break L12;
     break;
    }
    default: {
     break L12;
    }
    }
    break;
   }
   case 16:  {
    $39 = (_ED_IsConstAbsInt($0)|0);
    $40 = ($39|0)==(0);
    if (!($40)) {
     $41 = ((($0)) + 16|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0);
     if ($43) {
      break L12;
     }
    }
    _Warning(38990,$vararg_buffer11);
    break L12;
    break;
   }
   default: {
    _Error(38888,$vararg_buffer13);
    break L12;
   }
   }
   break;
  }
  default: {
   _Error(38888,$vararg_buffer15);
  }
  }
 } while(0);
 _DoConversion($0,$1);
 STACKTOP = sp;return;
}
function _DoConversion($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$val = 0, $$idx41$val = 0, $$idx42 = 0, $$idx42$val = 0, $$idx44$val = 0, $$lobit$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $$idx41$val = HEAP32[$1>>2]|0;
 $4 = $$idx41$val & 15;
 $5 = ($4|0)==(9);
 do {
  if ($5) {
   $6 = ((($0)) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & -257;
   HEAP32[$6>>2] = $8;
  } else {
   $$idx$val = HEAP32[$3>>2]|0;
   $9 = $$idx$val & 15;
   $10 = ($9|0)==(9);
   if ($10) {
    _Error(39035,$vararg_buffer);
    break;
   }
   $11 = (_CheckedSizeOf($3)|0);
   $12 = (_CheckedSizeOf($1)|0);
   $$idx42 = ((($0)) + 8|0);
   $$idx42$val = HEAP32[$$idx42>>2]|0;
   $$lobit$i = $$idx42$val & 256;
   $13 = ($$lobit$i|0)==(0);
   if (!($13)) {
    $14 = ($12>>>0)>($11>>>0);
    if (!($14)) {
     break;
    }
    _LoadExpr(0,$0);
    $15 = (_TypeOf($1)|0);
    $16 = (_TypeOf($3)|0);
    $17 = $16 | 512;
    (_g_typecast($15,$17)|0);
    (_ED_MakeRValExpr($0)|0);
    break;
   }
   $18 = $$idx42$val & 255;
   $19 = ($18|0)==(1);
   if (!($19)) {
    $37 = ($11|0)==($12|0);
    if ($37) {
     break;
    }
    _LoadExpr(0,$0);
    $38 = (_TypeOf($1)|0);
    $39 = (_TypeOf($3)|0);
    $40 = $39 | 512;
    (_g_typecast($38,$40)|0);
    (_ED_MakeRValExpr($0)|0);
    break;
   }
   $20 = $11 << 3;
   $21 = $12 << 3;
   $22 = ($21>>>0)>($20>>>0);
   if (!($22)) {
    $23 = (32 - ($21))|0;
    $24 = -1 >>> $23;
    $25 = ((($0)) + 16|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $26 & $24;
    HEAP32[$25>>2] = $27;
    $$idx44$val = HEAP32[$1>>2]|0;
    $28 = $$idx44$val & 384;
    $29 = ($28|0)==(256);
    if ($29) {
     $30 = (($21) + -1)|0;
     $31 = 1 << $30;
     $32 = $27 & $31;
     $33 = ($32|0)==(0);
     if (!($33)) {
      $34 = (_shl_l(-1,$21)|0);
      $35 = HEAP32[$25>>2]|0;
      $36 = $35 | $34;
      HEAP32[$25>>2] = $36;
     }
    }
   }
  }
 } while(0);
 (_ReplaceType($0,$1)|0);
 STACKTOP = sp;return;
}
function _TypeCast($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $1 = sp;
 _NextToken();
 (_ParseType($1)|0);
 (_ConsumeRParen()|0);
 _hie10($0);
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_PtrConversion($3)|0);
 HEAP32[$2>>2] = $4;
 _DoConversion($0,$1);
 STACKTOP = sp;return;
}
function _UseLineInfo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = HEAP32[3332]|0;
  $3 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$2 & 1]($3,39080,39088,128);
  // unreachable;
 } else {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 1)|0;
  HEAP32[$0>>2] = $5;
  return ($0|0);
 }
 return (0)|0;
}
function _ReleaseLineInfo($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  if (!($3)) {
   $6 = (($2) + -1)|0;
   HEAP32[$0>>2] = $6;
   $7 = ($6|0)==(0);
   if (!($7)) {
    return;
   }
   _xfree($0);
   return;
  }
 }
 $4 = HEAP32[3332]|0;
 $5 = HEAP32[3331]|0;
 FUNCTION_TABLE_viiii[$4 & 1]($5,39104,39088,140);
 // unreachable;
}
function _GetCurLineInfo() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11509]|0;
 return ($0|0);
}
function _UpdateLineInfo($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0$lcssa$i = 0, $$028$lcssa$i = 0, $$0285$i = 0, $$029$lcssa$i = 0, $$0294$i = 0, $$03$i = 0, $$12$i = 0, $$1301$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $EmptyStrBuf$ = 0;
 var $EmptyStrBuf$$idx$val = 0, $EmptyStrBuf$$idx2 = 0, $EmptyStrBuf$$idx2$val = 0, $scevgep$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[11509]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = HEAP32[$3>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $7 = HEAP32[3332]|0;
   $8 = HEAP32[3331]|0;
   FUNCTION_TABLE_viiii[$7 & 1]($8,39104,39088,140);
   // unreachable;
  }
  $9 = (($5) + -1)|0;
  HEAP32[$3>>2] = $9;
  $10 = ($9|0)==(0);
  if ($10) {
   _xfree($3);
  }
 }
 $11 = HEAP8[47027]|0;
 $12 = ($11<<24>>24)==(0);
 $EmptyStrBuf$ = $12 ? 46076 : $2;
 $EmptyStrBuf$$idx$val = HEAP32[$EmptyStrBuf$>>2]|0;
 $EmptyStrBuf$$idx2 = ((($EmptyStrBuf$)) + 4|0);
 $EmptyStrBuf$$idx2$val = HEAP32[$EmptyStrBuf$$idx2>>2]|0;
 $13 = ($EmptyStrBuf$$idx2$val|0)==(0);
 L8: do {
  if ($13) {
   $$028$lcssa$i = $EmptyStrBuf$$idx$val;$$029$lcssa$i = 0;
  } else {
   $$0285$i = $EmptyStrBuf$$idx$val;$$0294$i = $EmptyStrBuf$$idx2$val;
   while(1) {
    $14 = HEAP8[$$0285$i>>0]|0;
    $15 = (_IsBlank($14)|0);
    $16 = ($15|0)==(0);
    if ($16) {
     $$028$lcssa$i = $$0285$i;$$029$lcssa$i = $$0294$i;
     break L8;
    }
    $17 = ((($$0285$i)) + 1|0);
    $18 = (($$0294$i) + -1)|0;
    $19 = ($18|0)==(0);
    if ($19) {
     $$028$lcssa$i = $17;$$029$lcssa$i = 0;
     break;
    } else {
     $$0285$i = $17;$$0294$i = $18;
    }
   }
  }
 } while(0);
 $20 = (($$029$lcssa$i) + 16)|0;
 $21 = (_xmalloc($20)|0);
 HEAP32[$21>>2] = 1;
 $22 = ((($21)) + 4|0);
 HEAP32[$22>>2] = $0;
 $23 = ((($21)) + 8|0);
 HEAP32[$23>>2] = $1;
 $24 = ((($21)) + 12|0);
 $25 = ($$029$lcssa$i|0)==(0);
 if ($25) {
  $$0$lcssa$i = $24;
  HEAP8[$$0$lcssa$i>>0] = 0;
  HEAP32[11509] = $21;
  return;
 } else {
  $$03$i = $24;$$12$i = $$028$lcssa$i;$$1301$i = $$029$lcssa$i;
 }
 while(1) {
  $26 = (($$1301$i) + -1)|0;
  $27 = HEAP8[$$12$i>>0]|0;
  $28 = ($27<<24>>24)==(9);
  $$$i = $28 ? 32 : $27;
  HEAP8[$$03$i>>0] = $$$i;
  $29 = ((($$12$i)) + 1|0);
  $30 = ((($$03$i)) + 1|0);
  $31 = ($26|0)==(0);
  if ($31) {
   break;
  } else {
   $$03$i = $30;$$12$i = $29;$$1301$i = $26;
  }
 }
 $32 = (($$029$lcssa$i) + 12)|0;
 $scevgep$i = (($21) + ($32)|0);
 $$0$lcssa$i = $scevgep$i;
 HEAP8[$$0$lcssa$i>>0] = 0;
 HEAP32[11509] = $21;
 return;
}
function _GetInputName($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = HEAP32[3332]|0;
  $3 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$2 & 1]($3,39080,39088,183);
  // unreachable;
 } else {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_GetInputFile($5)|0);
  return ($6|0);
 }
 return (0)|0;
}
function _GetInputLine($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = HEAP32[3332]|0;
  $3 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$2 & 1]($3,39080,39088,192);
  // unreachable;
 } else {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  return ($5|0);
 }
 return (0)|0;
}
function _OptRTSJumps1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02224 = 0, $$025 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i23 = 0, $$idx$val$i26 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i23 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i23|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02224 = 0;$$025 = 0;$$idx$val$i26 = $$idx$val$i23;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02224<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 1;
  $9 = ($8<<16>>16)==(0);
  if ($9) {
   $$1 = $$025;$$idx$val$i = $$idx$val$i26;
  } else {
   $10 = ((($5)) + 20|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $$1 = $$025;$$idx$val$i = $$idx$val$i26;
   } else {
    $13 = ((($11)) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = HEAP8[$14>>0]|0;
    $16 = ($15<<24>>24)==(57);
    if ($16) {
     $17 = (($$025) + 1)|0;
     $18 = (($$02224) + 1)|0;
     $19 = ((($5)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_NewCodeEntry(57,0,0,0,$20)|0);
     _CS_InsertEntry($0,$21,$18);
     _CS_DelEntry($0,$$02224);
     $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
     $$1 = $17;$$idx$val$i = $$idx$val$i$pre;
    } else {
     $$1 = $$025;$$idx$val$i = $$idx$val$i26;
    }
   }
  }
  $22 = (($$02224) + 1)|0;
  $23 = ($22>>>0)<($$idx$val$i>>>0);
  if ($23) {
   $$02224 = $22;$$025 = $$1;$$idx$val$i26 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptRTSJumps2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04954 = 0, $$050 = 0, $$055 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i53 = 0, $$idx$val$i56 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i53 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i53|0)==(1);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$04954 = 0;$$055 = 0;$$idx$val$i56 = $$idx$val$i53;
 while(1) {
  $3 = ($$idx$val$i56>>>0)>($$04954>>>0);
  if (!($3)) {
   label = 4;
   break;
  }
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + ($$04954<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ((($8)) + 12|0);
  $10 = HEAP16[$9>>1]|0;
  $11 = $10 & 18;
  $12 = ($11<<16>>16)==(18);
  L7: do {
   if ($12) {
    $13 = ((($8)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0|0);
    if ($15) {
     $$2 = $$055;
    } else {
     $16 = ((($14)) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (_CS_GetNextEntry($0,$$04954)|0);
     $19 = HEAP8[$17>>0]|0;
     switch ($19<<24>>24) {
     case 57:  {
      $20 = ((($17)) + 36|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (_NewCodeEntry(57,0,0,0,$21)|0);
      $$050 = $22;
      break;
     }
     case 34:  {
      $23 = ((($17)) + 20|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(0|0);
      if (!($25)) {
       $$2 = $$055;
       break L7;
      }
      $26 = ((($17)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ((($17)) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (_NewCodeEntry(34,6,$27,0,$29)|0);
      $$050 = $30;
      break;
     }
     default: {
      $$2 = $$055;
      break L7;
     }
     }
     $31 = ($$050|0)==(0|0);
     if ($31) {
      $$2 = $$055;
     } else {
      $32 = (($$04954) + 1)|0;
      _CS_InsertEntry($0,$$050,$32);
      $33 = HEAP8[$8>>0]|0;
      $34 = $33&255;
      $35 = (_GetInverseBranch($34)|0);
      $36 = (_MakeShortBranch($35)|0);
      $37 = (_CS_GenLabel($0,$18)|0);
      $38 = ((($37)) + 4|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ((($8)) + 36|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (_NewCodeEntry($36,12,$39,$37,$41)|0);
      _CS_InsertEntry($0,$42,$32);
      _CS_DelEntry($0,$$04954);
      $43 = (($$055) + 1)|0;
      $$2 = $43;
     }
    }
   } else {
    $$2 = $$055;
   }
  } while(0);
  $44 = (($$04954) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $45 = (($$idx$val$i) + -1)|0;
  $46 = ($44>>>0)<($45>>>0);
  if ($46) {
   $$04954 = $44;$$055 = $$2;$$idx$val$i56 = $$idx$val$i;
  } else {
   $$0$lcssa = $$2;
   label = 14;
   break;
  }
 }
 if ((label|0) == 4) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 14) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptDeadJumps($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$0$ph26 = 0, $$018$ph25 = 0, $$022 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i21 = 0, $$idx$val$i21$pre = 0, $$idx$val$i2124 = 0, $$idx$val$i2130 = 0, $$idx$val$i2131 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i2124 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i2124|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$0$ph26 = 0;$$018$ph25 = 0;$$idx$val$i2131 = $$idx$val$i2124;
 L4: while(1) {
  $$022 = $$0$ph26;$$idx$val$i2130 = $$idx$val$i2131;
  while(1) {
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($$018$ph25<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($5)) + 1|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(12);
   if (!($8)) {
    $$idx$val$i21 = $$idx$val$i2130;
    break;
   }
   $9 = ((($5)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $$idx$val$i21 = $$idx$val$i2130;
    break;
   }
   $12 = ((($10)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_CS_GetNextEntry($0,$$018$ph25)|0);
   $15 = ($13|0)==($14|0);
   if (!($15)) {
    label = 7;
    break;
   }
   _CS_DelEntry($0,$$018$ph25);
   $16 = (($$022) + 1)|0;
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $17 = ($$018$ph25>>>0)<($$idx$val$i>>>0);
   if ($17) {
    $$022 = $16;$$idx$val$i2130 = $$idx$val$i;
   } else {
    $$0$lcssa = $16;
    label = 10;
    break L4;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   $$idx$val$i21$pre = HEAP32[$$idx$i>>2]|0;
   $$idx$val$i21 = $$idx$val$i21$pre;
  }
  $18 = (($$018$ph25) + 1)|0;
  $19 = ($18>>>0)<($$idx$val$i21>>>0);
  if ($19) {
   $$0$ph26 = $$022;$$018$ph25 = $18;$$idx$val$i2131 = $$idx$val$i21;
  } else {
   $$0$lcssa = $$022;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptDeadCode($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$0$ph38 = 0, $$026$ph37 = 0, $$034 = 0, $$idx$i = 0, $$idx$i28 = 0, $$idx$i30 = 0, $$idx$val$i = 0, $$idx$val$i29 = 0, $$idx$val$i31 = 0, $$idx$val$i33 = 0, $$idx$val$i3336 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i3336 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i3336|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$0$ph38 = 0;$$026$ph37 = 0;
 L4: while(1) {
  $3 = (($$026$ph37) + 1)|0;
  $$034 = $$0$ph38;
  while(1) {
   $4 = HEAP32[$2>>2]|0;
   $5 = (($4) + ($$026$ph37<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 12|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8 & 33;
   $10 = ($9<<16>>16)==(0);
   if ($10) {
    break;
   }
   $11 = (_CS_GetNextEntry($0,$$026$ph37)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    break;
   }
   $$idx$i30 = ((($11)) + 24|0);
   $$idx$val$i31 = HEAP32[$$idx$i30>>2]|0;
   $13 = ($$idx$val$i31|0)==(0);
   if (!($13)) {
    $14 = ((($11)) + 12|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = $15 & 1;
    $17 = ($16<<16>>16)==(0);
    if ($17) {
     break;
    }
    $18 = ((($11)) + 20|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = ($19|0)==(0|0);
    if ($20) {
     break;
    }
    $21 = ((($19)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)==($11|0);
    if (!($23)) {
     break;
    }
    $$idx$i28 = ((($19)) + 16|0);
    $$idx$val$i29 = HEAP32[$$idx$i28>>2]|0;
    $24 = ($$idx$val$i29|0)==(1);
    if (!($24)) {
     break;
    }
   }
   _CS_DelEntry($0,$3);
   $25 = (($$034) + 1)|0;
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $26 = ($$026$ph37>>>0)<($$idx$val$i>>>0);
   if ($26) {
    $$034 = $25;
   } else {
    $$0$lcssa = $25;
    label = 13;
    break L4;
   }
  }
  $$idx$val$i33 = HEAP32[$$idx$i>>2]|0;
  $27 = ($3>>>0)<($$idx$val$i33>>>0);
  if ($27) {
   $$0$ph38 = $$034;$$026$ph37 = $3;
  } else {
   $$0$lcssa = $$034;
   label = 13;
   break;
  }
 }
 if ((label|0) == 13) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptJumpCascades($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$07679 = 0, $$077 = 0, $$080 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i78 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i78 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i78|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$07679 = 0;$$080 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$07679<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 & 3;
  $10 = ($9|0)==(0);
  L6: do {
   if ($10) {
    $$2 = $$080;
   } else {
    $11 = ((($5)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $$2 = $$080;
    } else {
     $14 = ((($12)) + 12|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($5|0);
     if ($16) {
      $$2 = $$080;
     } else {
      $17 = ((($15)) + 12|0);
      $18 = HEAP16[$17>>1]|0;
      $19 = $18 & 3;
      $20 = ($19<<16>>16)==(0);
      if ($20) {
       $$2 = $$080;
      } else {
       $21 = $8 & 2;
       $22 = ($21|0)==(0);
       if (!($22)) {
        $23 = ((($15)) + 20|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = ($24|0)==(0|0);
        if ($25) {
         $$2 = $$080;
         break;
        }
       }
       $26 = $18 & 1;
       $27 = ($26<<16>>16)==(0);
       do {
        if ($27) {
         $28 = $7 & 2;
         $29 = ($28<<16>>16)==(0);
         if ($29) {
          $67 = $7;
         } else {
          $30 = HEAP8[$5>>0]|0;
          $31 = $30&255;
          $32 = (_GetBranchCond($31)|0);
          $33 = HEAP8[$15>>0]|0;
          $34 = $33&255;
          $35 = (_GetBranchCond($34)|0);
          $36 = ($32|0)==($35|0);
          if ($36) {
           break;
          }
          $$pre = HEAP16[$6>>1]|0;
          $67 = $$pre;
         }
         $66 = $67 & 2;
         $68 = ($66<<16>>16)==(0);
         if ($68) {
          $$2 = $$080;
          break L6;
         }
         $69 = HEAP16[$17>>1]|0;
         $70 = $69 & 2;
         $71 = ($70<<16>>16)==(0);
         if ($71) {
          $$2 = $$080;
          break L6;
         }
         $72 = HEAP8[$5>>0]|0;
         $73 = $72&255;
         $74 = (_GetBranchCond($73)|0);
         $75 = HEAP8[$15>>0]|0;
         $76 = $75&255;
         $77 = (_GetBranchCond($76)|0);
         $78 = (_GetInverseCond($77)|0);
         $79 = ($74|0)==($78|0);
         if (!($79)) {
          $$2 = $$080;
          break L6;
         }
         $80 = (_CS_GetEntryIndex($0,$15)|0);
         $81 = (_CS_GetNextEntry($0,$80)|0);
         $82 = ($81|0)==(0|0);
         if ($82) {
          $$2 = $$080;
          break L6;
         }
         $83 = (($$080) + 1)|0;
         $84 = (_CS_GenLabel($0,$81)|0);
         _CS_MoveLabelRef($0,$5,$84);
         $$2 = $83;
         break L6;
        }
       } while(0);
       $37 = ((($15)) + 20|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0|0);
       if ($39) {
        label = 16;
       } else {
        $40 = ((($38)) + 12|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = ($41|0)==($15|0);
        if ($42) {
         $43 = (_CS_GenLabel($0,$5)|0);
         $44 = HEAP16[$5>>1]|0;
         $45 = $44&65535;
         $46 = $45 & 255;
         $47 = ($44&65535) >>> 8;
         $48 = $47&65535;
         $49 = ((($43)) + 4|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = ((($5)) + 36|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = (_NewCodeEntry($46,$48,$50,$43,$52)|0);
         $$077 = $53;
        } else {
         label = 16;
        }
       }
       if ((label|0) == 16) {
        label = 0;
        $54 = HEAP16[$5>>1]|0;
        $55 = $54&65535;
        $56 = $55 & 255;
        $57 = ($54&65535) >>> 8;
        $58 = $57&65535;
        $59 = ((($15)) + 4|0);
        $60 = HEAP32[$59>>2]|0;
        $61 = ((($5)) + 36|0);
        $62 = HEAP32[$61>>2]|0;
        $63 = (_NewCodeEntry($56,$58,$60,$38,$62)|0);
        $$077 = $63;
       }
       $64 = (($$07679) + 1)|0;
       _CS_InsertEntry($0,$$077,$64);
       _CS_DelEntry($0,$$07679);
       $65 = (($$080) + 1)|0;
       $$2 = $65;
      }
     }
    }
   }
  } while(0);
  $85 = (($$07679) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $86 = ($85>>>0)<($$idx$val$i>>>0);
  if ($86) {
   $$07679 = $85;$$080 = $$2;
  } else {
   $$0$lcssa = $$2;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptRTS($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$01921 = 0, $$022 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i20 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i20 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i20|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$01921 = 0;$$022 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$01921<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(37);
  if ($7) {
   $8 = (_CS_GetNextEntry($0,$$01921)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$1 = $$022;
   } else {
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(57);
    if ($11) {
     $12 = (($$022) + 1)|0;
     $13 = ((($5)) + 1|0);
     HEAP8[$13>>0] = 12;
     _CE_ReplaceOPC($5,34);
     $$1 = $12;
    } else {
     $$1 = $$022;
    }
   }
  } else {
   $$1 = $$022;
  }
  $14 = (($$01921) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $15 = ($14>>>0)<($$idx$val$i>>>0);
  if ($15) {
   $$01921 = $14;$$022 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptJumpTarget1($0) {
 $0 = $0|0;
 var $$0$ph61 = 0, $$044$ph$lcssa55 = 0, $$044$ph60 = 0, $$057 = 0, $$idx$i = 0, $$idx$i45 = 0, $$idx$i47 = 0, $$idx$val$i = 0, $$idx$val$i46 = 0, $$idx$val$i48 = 0, $$idx$val$i56 = 0, $$idx$val$i5659 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i5659 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i5659|0)==(0);
 if ($1) {
  $$044$ph$lcssa55 = 0;
  return ($$044$ph$lcssa55|0);
 }
 $2 = ((($0)) + 16|0);
 $$0$ph61 = 0;$$044$ph60 = 0;
 L4: while(1) {
  $$057 = $$0$ph61;
  while(1) {
   $3 = (_CS_GetNextEntry($0,$$057)|0);
   $4 = ($3|0)==(0|0);
   if (!($4)) {
    $5 = ((($3)) + 12|0);
    $6 = HEAP16[$5>>1]|0;
    $7 = $6 & 1;
    $8 = ($7<<16>>16)==(0);
    if (!($8)) {
     $$idx$i47 = ((($3)) + 24|0);
     $$idx$val$i48 = HEAP32[$$idx$i47>>2]|0;
     $9 = ($$idx$val$i48|0)==(0);
     if ($9) {
      $10 = ((($3)) + 20|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = ($11|0)==(0|0);
      if (!($12)) {
       $13 = ((($11)) + 12|0);
       $14 = HEAP32[$13>>2]|0;
       $15 = ($14|0)==($3|0);
       if (!($15)) {
        $16 = (_CS_GetEntryIndex($0,$14)|0);
        $17 = (_CS_GetPrevEntry($0,$16)|0);
        $18 = ($17|0)==(0|0);
        $19 = ($17|0)==($3|0);
        $or$cond = $18 | $19;
        if (!($or$cond)) {
         $20 = HEAP32[$$idx$i>>2]|0;
         $21 = ($20>>>0)>($$057>>>0);
         if (!($21)) {
          label = 11;
          break L4;
         }
         $24 = HEAP32[$2>>2]|0;
         $25 = (($24) + ($$057<<2)|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = (_CodeEntriesAreEqual($26,$17)|0);
         $28 = ($27|0)==(0);
         if (!($28)) {
          break;
         }
        }
       }
      }
     }
    }
   }
   $33 = (($$057) + 1)|0;
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $34 = ($33>>>0)<($$idx$val$i>>>0);
   if ($34) {
    $$057 = $33;
   } else {
    $$044$ph$lcssa55 = $$044$ph60;
    label = 17;
    break L4;
   }
  }
  $29 = (_CS_GenLabel($0,$17)|0);
  _CS_MoveLabelRef($0,$3,$29);
  $$idx$i45 = ((($26)) + 24|0);
  $$idx$val$i46 = HEAP32[$$idx$i45>>2]|0;
  $30 = ($$idx$val$i46|0)==(0);
  if (!($30)) {
   _CS_MoveLabels($0,$26,$17);
  }
  _CS_DelEntry($0,$$057);
  $31 = (($$044$ph60) + 1)|0;
  $$idx$val$i56 = HEAP32[$$idx$i>>2]|0;
  $32 = ($$057>>>0)<($$idx$val$i56>>>0);
  if ($32) {
   $$0$ph61 = $$057;$$044$ph60 = $31;
  } else {
   $$044$ph$lcssa55 = $31;
   label = 17;
   break;
  }
 }
 if ((label|0) == 11) {
  $22 = HEAP32[3332]|0;
  $23 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$22 & 1]($23,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 17) {
  return ($$044$ph$lcssa55|0);
 }
 return (0)|0;
}
function _OptJumpTarget2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03639 = 0, $$037 = 0, $$040 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i38 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i38 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i38|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03639 = 0;$$040 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$03639<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP8[$5>>0]|0;
  switch ($6<<24>>24) {
  case 30: case 3:  {
   $$037 = 14;
   label = 5;
   break;
  }
  case 31: case 4:  {
   $$037 = 59;
   label = 5;
   break;
  }
  default: {
   $$1 = $$040;
  }
  }
  if ((label|0) == 5) {
   label = 0;
   $7 = ((($5)) + 20|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$1 = $$040;
   } else {
    $10 = ((($8)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = HEAP8[$11>>0]|0;
    $13 = $12&255;
    $14 = ($13|0)==($$037|0);
    if ($14) {
     $15 = (_CS_GetEntryIndex($0,$11)|0);
     $16 = (_CS_GetNextEntry($0,$15)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      $$1 = $$040;
     } else {
      $18 = (($$040) + 1)|0;
      $19 = (_CS_GenLabel($0,$16)|0);
      _CS_MoveLabelRef($0,$5,$19);
      $$1 = $18;
     }
    } else {
     $$1 = $$040;
    }
   }
  }
  $20 = (($$03639) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $21 = ($20>>>0)<($$idx$val$i>>>0);
  if ($21) {
   $$03639 = $20;$$040 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptJumpTarget3($0) {
 $0 = $0|0;
 var $$0$i = 0, $$0$lcssa = 0, $$05175 = 0, $$05272 = 0, $$05371 = 0, $$057 = 0, $$057$in = 0, $$057$in$ph = 0, $$076 = 0, $$154$ph = 0, $$173 = 0, $$2$ph = 0, $$255 = 0, $$4 = 0, $$idx$i = 0, $$idx$i58 = 0, $$idx$i60 = 0, $$idx$val$i = 0, $$idx$val$i59 = 0, $$idx$val$i61 = 0;
 var $$idx$val$i63 = 0, $$idx$val$i6370 = 0, $$idx$val$i74 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i74 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i74|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$05175 = 0;$$076 = 0;
 L4: while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$05175<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 64;
  $9 = ($8<<16>>16)==(0);
  if ($9) {
   $$4 = $$076;
  } else {
   $10 = (_CE_IsConstImm($5)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $$4 = $$076;
   } else {
    $$idx$i58 = ((($5)) + 24|0);
    $$idx$val$i59 = HEAP32[$$idx$i58>>2]|0;
    $12 = ($$idx$val$i59|0)==(0);
    if ($12) {
     $$4 = $$076;
    } else {
     $13 = (_CS_GetNextEntry($0,$$05175)|0);
     $14 = ($13|0)==(0|0);
     if ($14) {
      $$4 = $$076;
     } else {
      $15 = (_CE_UseLoadFlags($13)|0);
      $16 = ($15|0)==(0);
      if ($16) {
       $$idx$val$i6370 = HEAP32[$$idx$i58>>2]|0;
       $17 = ($$idx$val$i6370|0)==(0);
       if ($17) {
        $$4 = $$076;
       } else {
        $18 = ((($5)) + 32|0);
        $19 = ((($5)) + 16|0);
        $20 = ((($5)) + 8|0);
        $$05272 = 0;$$05371 = 0;$$173 = $$076;
        while(1) {
         $21 = HEAP32[$18>>2]|0;
         $22 = (($21) + ($$05272<<2)|0);
         $23 = HEAP32[$22>>2]|0;
         $$idx$i60 = ((($23)) + 16|0);
         $$idx$val$i61 = HEAP32[$$idx$i60>>2]|0;
         $24 = ((($23)) + 24|0);
         $$057$in$ph = $$idx$val$i61;$$154$ph = $$05371;$$2$ph = $$173;
         L15: while(1) {
          $$057$in = $$057$in$ph;
          while(1) {
           $$057 = (($$057$in) + -1)|0;
           $25 = ($$057|0)>(-1);
           if (!($25)) {
            break L15;
           }
           $26 = HEAP32[$$idx$i60>>2]|0;
           $27 = ($26>>>0)>($$057>>>0);
           if (!($27)) {
            label = 14;
            break L4;
           }
           $30 = HEAP32[$24>>2]|0;
           $31 = (($30) + ($$057<<2)|0);
           $32 = HEAP32[$31>>2]|0;
           $33 = HEAP16[$19>>1]|0;
           $34 = ((($32)) + 40|0);
           $35 = HEAP32[$34>>2]|0;
           $36 = $33&65535;
           $37 = $36 & 1;
           $38 = ($37|0)==(0);
           do {
            if ($38) {
             $41 = $36 & 2;
             $42 = ($41|0)==(0);
             if (!($42)) {
              $43 = ((($35)) + 34|0);
              $44 = HEAP16[$43>>1]|0;
              $$0$i = $44;
              break;
             }
             $45 = $36 & 4;
             $46 = ($45|0)==(0);
             if (!($46)) {
              $47 = ((($35)) + 36|0);
              $48 = HEAP16[$47>>1]|0;
              $$0$i = $48;
              break;
             }
             $49 = $36 & 8;
             $50 = ($49|0)==(0);
             if (!($50)) {
              $51 = ((($35)) + 46|0);
              $52 = HEAP16[$51>>1]|0;
              $$0$i = $52;
              break;
             }
             $53 = $36 & 16;
             $54 = ($53|0)==(0);
             if (!($54)) {
              $55 = ((($35)) + 42|0);
              $56 = HEAP16[$55>>1]|0;
              $$0$i = $56;
              break;
             }
             $57 = $36 & 32;
             $58 = ($57|0)==(0);
             if (!($58)) {
              $59 = ((($35)) + 44|0);
              $60 = HEAP16[$59>>1]|0;
              $$0$i = $60;
              break;
             }
             $61 = $36 & 256;
             $62 = ($61|0)==(0);
             if (!($62)) {
              $63 = ((($35)) + 38|0);
              $64 = HEAP16[$63>>1]|0;
              $$0$i = $64;
              break;
             }
             $65 = $36 & 512;
             $66 = ($65|0)==(0);
             if ($66) {
              $$0$i = -1;
              break;
             }
             $67 = ((($35)) + 40|0);
             $68 = HEAP16[$67>>1]|0;
             $$0$i = $68;
            } else {
             $39 = ((($35)) + 32|0);
             $40 = HEAP16[$39>>1]|0;
             $$0$i = $40;
            }
           } while(0);
           $69 = $$0$i << 16 >> 16;
           $70 = HEAP32[$20>>2]|0;
           $71 = $70 & 255;
           $72 = ($69|0)==($71|0);
           if ($72) {
            break;
           } else {
            $$057$in = $$057;
           }
          }
          $73 = ($$154$ph|0)==(0|0);
          if ($73) {
           $74 = (_CS_GenLabel($0,$13)|0);
           $$255 = $74;
          } else {
           $$255 = $$154$ph;
          }
          _CS_MoveLabelRef($0,$32,$$255);
          $75 = (($$2$ph) + 1)|0;
          $$057$in$ph = $$057;$$154$ph = $$255;$$2$ph = $75;
         }
         $76 = (($$05272) + 1)|0;
         $$idx$val$i63 = HEAP32[$$idx$i58>>2]|0;
         $77 = ($76>>>0)<($$idx$val$i63>>>0);
         if ($77) {
          $$05272 = $76;$$05371 = $$154$ph;$$173 = $$2$ph;
         } else {
          $$4 = $$2$ph;
          break;
         }
        }
       }
      } else {
       $$4 = $$076;
      }
     }
    }
   }
  }
  $78 = (($$05175) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $79 = ($78>>>0)<($$idx$val$i>>>0);
  if ($79) {
   $$05175 = $78;$$076 = $$4;
  } else {
   $$0$lcssa = $$4;
   label = 37;
   break;
  }
 }
 if ((label|0) == 14) {
  $28 = HEAP32[3332]|0;
  $29 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$28 & 1]($29,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 37) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptCondBranches1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$05970 = 0, $$073 = 0, $$2 = 0, $$3 = 0, $$idx$i = 0, $$idx$i60 = 0, $$idx$i62 = 0, $$idx$val$i = 0, $$idx$val$i61 = 0, $$idx$val$i63 = 0, $$idx$val$i69 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i69 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i69|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$05970 = 0;$$073 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$05970<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 64;
  $9 = ($8<<16>>16)==(0);
  L6: do {
   if ($9) {
    $$2 = $$073;
   } else {
    $10 = ((($5)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11<<24>>24)==(2);
    if ($12) {
     $13 = ((($5)) + 3|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = $14 & 2;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $$2 = $$073;
     } else {
      $17 = (_CS_GetNextEntry($0,$$05970)|0);
      $18 = ($17|0)==(0|0);
      if ($18) {
       $$2 = $$073;
      } else {
       $19 = ((($17)) + 12|0);
       $20 = HEAP16[$19>>1]|0;
       $21 = $20 & 2;
       $22 = ($21<<16>>16)==(0);
       if ($22) {
        $$2 = $$073;
       } else {
        $$idx$i62 = ((($17)) + 24|0);
        $$idx$val$i63 = HEAP32[$$idx$i62>>2]|0;
        $23 = ($$idx$val$i63|0)==(0);
        if ($23) {
         $24 = HEAP8[$17>>0]|0;
         $25 = $24&255;
         $26 = (_GetBranchCond($25)|0);
         switch ($26|0) {
         case 2:  {
          $27 = ((($5)) + 8|0);
          $28 = HEAP32[$27>>2]|0;
          $29 = ($28|0)==(0);
          if ($29) {
           $43 = ((($5)) + 8|0);
           $44 = HEAP32[$43>>2]|0;
           $45 = ($44|0)==(0);
           if ($45) {
            label = 18;
           } else {
            $$2 = $$073;
            break L6;
           }
          } else {
           label = 14;
          }
          break;
         }
         case 4:  {
          $30 = ((($5)) + 8|0);
          $31 = HEAP32[$30>>2]|0;
          $32 = ($31|0)==(0);
          if ($32) {
           label = 14;
          } else {
           $46 = ((($5)) + 8|0);
           $47 = HEAP32[$46>>2]|0;
           $48 = ($47|0)==(0);
           if ($48) {
            $$2 = $$073;
            break L6;
           } else {
            label = 18;
           }
          }
          break;
         }
         case 5:  {
          $33 = ((($5)) + 8|0);
          $34 = HEAP32[$33>>2]|0;
          $35 = $34 & 128;
          $36 = ($35|0)==(0);
          if ($36) {
           label = 18;
          } else {
           label = 14;
          }
          break;
         }
         case 3:  {
          $37 = ((($5)) + 8|0);
          $38 = HEAP32[$37>>2]|0;
          $39 = $38 & 128;
          $40 = ($39|0)==(0);
          if ($40) {
           label = 14;
          } else {
           $49 = ((($5)) + 8|0);
           $50 = HEAP32[$49>>2]|0;
           $51 = $50 & 128;
           $52 = ($51|0)==(0);
           if ($52) {
            $$2 = $$073;
            break L6;
           } else {
            label = 18;
           }
          }
          break;
         }
         default: {
          $$2 = $$073;
          break L6;
         }
         }
         if ((label|0) == 14) {
          label = 0;
          $41 = (($$05970) + 1)|0;
          _CS_DelEntry($0,$41);
          $42 = (($$073) + 1)|0;
          $$2 = $42;
          break;
         }
         else if ((label|0) == 18) {
          label = 0;
          _CE_ReplaceOPC($17,34);
          $53 = (($$073) + 1)|0;
          $$2 = $53;
          break;
         }
        } else {
         $$2 = $$073;
        }
       }
      }
     }
    } else {
     $$2 = $$073;
    }
   }
  } while(0);
  $54 = HEAP16[$6>>1]|0;
  $55 = $54 & 2;
  $56 = ($55<<16>>16)==(0);
  if ($56) {
   $$3 = $$2;
  } else {
   $57 = ((($5)) + 20|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   if ($59) {
    $$3 = $$2;
   } else {
    $60 = (_CS_GetNextEntry($0,$$05970)|0);
    $61 = ($60|0)==(0|0);
    if ($61) {
     $$3 = $$2;
    } else {
     $62 = ((($60)) + 12|0);
     $63 = HEAP16[$62>>1]|0;
     $64 = $63 & 1;
     $65 = ($64<<16>>16)==(0);
     if ($65) {
      $$3 = $$2;
     } else {
      $$idx$i60 = ((($60)) + 24|0);
      $$idx$val$i61 = HEAP32[$$idx$i60>>2]|0;
      $66 = ($$idx$val$i61|0)==(0);
      if ($66) {
       $67 = ((($58)) + 12|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = (($$05970) + 1)|0;
       $70 = (_CS_GetNextEntry($0,$69)|0);
       $71 = ($68|0)==($70|0);
       if ($71) {
        $72 = HEAP8[$5>>0]|0;
        $73 = $72&255;
        $74 = (_GetInverseBranch($73)|0);
        _CE_ReplaceOPC($60,$74);
        _CS_DelEntry($0,$$05970);
        $75 = (($$2) + 1)|0;
        $$3 = $75;
       } else {
        $$3 = $$2;
       }
      } else {
       $$3 = $$2;
      }
     }
    }
   }
  }
  $76 = (($$05970) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $77 = ($76>>>0)<($$idx$val$i>>>0);
  if ($77) {
   $$05970 = $76;$$073 = $$3;
  } else {
   $$0$lcssa = $$3;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptCondBranches2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02732 = 0, $$034 = 0, $$1 = 0, $$idx$i = 0, $$idx$i28 = 0, $$idx$val$i = 0, $$idx$val$i29 = 0, $$idx$val$i31 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i31 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i31|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02732 = 0;$$034 = 0;
 L4: while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02732<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(310);
  if ($7) {
   $8 = ((($5)) + 40|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP16[$9>>1]|0;
   $11 = ($10<<16>>16)==(0);
   if ($11) {
    $$idx$i28 = ((($5)) + 24|0);
    $$idx$val$i29 = HEAP32[$$idx$i28>>2]|0;
    $12 = ($$idx$val$i29|0)==(0);
    if ($12) {
     $13 = (_CS_GetNextEntry($0,$$02732)|0);
     $14 = ($13|0)==(0|0);
     if ($14) {
      $$1 = $$034;
     } else {
      $15 = ((($13)) + 12|0);
      $16 = HEAP16[$15>>1]|0;
      $17 = $16 & 4;
      $18 = ($17<<16>>16)==(0);
      if ($18) {
       $$1 = $$034;
      } else {
       $19 = (($$02732) + 1)|0;
       $20 = (_RegAUsed($0,$19)|0);
       $21 = ($20|0)==(0);
       if ($21) {
        $22 = HEAP8[$13>>0]|0;
        $23 = $22&255;
        $24 = (_GetBranchCond($23)|0);
        switch ($24|0) {
        case 2:  {
         _CE_ReplaceOPC($13,30);
         break;
        }
        case 4:  {
         _CE_ReplaceOPC($13,31);
         break;
        }
        default: {
         label = 12;
         break L4;
        }
        }
        _CS_DelEntry($0,$$02732);
        $25 = (($$034) + 1)|0;
        $$1 = $25;
       } else {
        $$1 = $$034;
       }
      }
     }
    } else {
     $$1 = $$034;
    }
   } else {
    $$1 = $$034;
   }
  } else {
   $$1 = $$034;
  }
  $26 = (($$02732) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $27 = ($26>>>0)<($$idx$val$i>>>0);
  if ($27) {
   $$02732 = $26;$$034 = $$1;
  } else {
   $$0$lcssa = $$1;
   label = 15;
   break;
  }
 }
 if ((label|0) == 12) {
  _Internal(39127,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptUnusedLoads($0) {
 $0 = $0|0;
 var $$0 = 0, $$027$lcssa = 0, $$02734 = 0, $$02833 = 0, $$3 = 0, $$331 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i32 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i32 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i32|0)==(0);
 if ($1) {
  $$027$lcssa = 0;
  return ($$027$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02734 = 0;$$02833 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02833<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 1344;
  $9 = ($8<<16>>16)==(0);
  L6: do {
   if ($9) {
    $$3 = $$02734;$$331 = $$02833;
   } else {
    $10 = (_CS_GetNextEntry($0,$$02833)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$3 = $$02734;$$331 = $$02833;
    } else {
     $12 = (_CE_UseLoadFlags($10)|0);
     $13 = ($12|0)==(0);
     if ($13) {
      $14 = HEAP8[$5>>0]|0;
      switch ($14<<24>>24) {
      case 73: case 71: case 40: case 26: case 21:  {
       $$0 = 1;
       break;
      }
      case 66: case 41: case 28: case 23:  {
       $$0 = 2;
       break;
      }
      case 67: case 42: case 29: case 24:  {
       $$0 = 4;
       break;
      }
      default: {
       $$3 = $$02734;$$331 = $$02833;
       break L6;
      }
      }
      $15 = (($$02833) + 1)|0;
      $16 = (_GetRegInfo($0,$15,$$0)|0);
      $17 = $16 & $$0;
      $18 = ($17|0)==(0);
      if ($18) {
       $19 = (($$02833) + -1)|0;
       $20 = (($$02734) + 1)|0;
       _CS_DelEntry($0,$$02833);
       $$3 = $20;$$331 = $19;
      } else {
       $$3 = $$02734;$$331 = $$02833;
      }
     } else {
      $$3 = $$02734;$$331 = $$02833;
     }
    }
   }
  } while(0);
  $21 = (($$331) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $22 = ($21>>>0)<($$idx$val$i>>>0);
  if ($22) {
   $$02734 = $$3;$$02833 = $21;
  } else {
   $$027$lcssa = $$3;
   break;
  }
 }
 return ($$027$lcssa|0);
}
function _OptUnusedStores($0) {
 $0 = $0|0;
 var $$024$lcssa = 0, $$024$ph33 = 0, $$02429 = 0, $$025$ph32 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i28 = 0, $$idx$val$i28$pre = 0, $$idx$val$i2831 = 0, $$idx$val$i2837 = 0, $$idx$val$i2838 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i2831 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i2831|0)==(0);
 if ($1) {
  $$024$lcssa = 0;
  return ($$024$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$024$ph33 = 0;$$025$ph32 = 0;$$idx$val$i2838 = $$idx$val$i2831;
 L4: while(1) {
  $3 = (($$025$ph32) + 1)|0;
  $$02429 = $$024$ph33;$$idx$val$i2837 = $$idx$val$i2838;
  while(1) {
   $4 = HEAP32[$2>>2]|0;
   $5 = (($4) + ($$025$ph32<<2)|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ((($6)) + 12|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8 & 128;
   $10 = ($9<<16>>16)==(0);
   if ($10) {
    $$idx$val$i28 = $$idx$val$i2837;
    break;
   }
   $11 = ((($6)) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(3);
   if (!($13)) {
    $$idx$val$i28 = $$idx$val$i2837;
    break;
   }
   $14 = ((($6)) + 16|0);
   $15 = HEAP16[$14>>1]|0;
   $16 = $15&65535;
   $17 = $16 & 65528;
   $18 = ($17|0)==(0);
   if ($18) {
    $$idx$val$i28 = $$idx$val$i2837;
    break;
   }
   $19 = (_GetRegInfo($0,$3,$17)|0);
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if (!($21)) {
    label = 8;
    break;
   }
   $22 = (($$02429) + 1)|0;
   _CS_DelEntry($0,$$025$ph32);
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $23 = ($$025$ph32>>>0)<($$idx$val$i>>>0);
   if ($23) {
    $$02429 = $22;$$idx$val$i2837 = $$idx$val$i;
   } else {
    $$024$lcssa = $22;
    label = 11;
    break L4;
   }
  }
  if ((label|0) == 8) {
   label = 0;
   $$idx$val$i28$pre = HEAP32[$$idx$i>>2]|0;
   $$idx$val$i28 = $$idx$val$i28$pre;
  }
  $24 = ($3>>>0)<($$idx$val$i28>>>0);
  if ($24) {
   $$024$ph33 = $$02429;$$025$ph32 = $3;$$idx$val$i2838 = $$idx$val$i28;
  } else {
   $$024$lcssa = $$02429;
   label = 11;
   break;
  }
 }
 if ((label|0) == 11) {
  return ($$024$lcssa|0);
 }
 return (0)|0;
}
function _OptDupLoads($0) {
 $0 = $0|0;
 var $$0$i = 0, $$0$i$in = 0, $$0$i152 = 0, $$0$i158 = 0, $$0$i162 = 0, $$0$lcssa = 0, $$0$ph194 = 0, $$0185 = 0, $$098$ph189 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i184 = 0, $$idx$val$i184188 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond249 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i184188 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i184188|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$0$ph194 = 0;$$098$ph189 = 0;
 L4: while(1) {
  $$0185 = $$0$ph194;
  L6: while(1) {
   $3 = HEAP32[$2>>2]|0;
   $4 = (($3) + ($$098$ph189<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($5)) + 40|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP16[$5>>1]|0;
   $9 = $8&255;
   $10 = ($8&65535) >>> 8;
   $11 = $10&255;
   do {
    switch ($9<<24>>24) {
    case 40:  {
     $12 = HEAP16[$7>>1]|0;
     $13 = ($12<<16>>16)<(0);
     if ($13) {
      break L6;
     }
     $14 = $12 << 16 >> 16;
     $15 = (_CE_IsKnownImm($5,$14)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      break L6;
     }
     $17 = (_CS_GetNextEntry($0,$$098$ph189)|0);
     $18 = ($17|0)==(0|0);
     if ($18) {
      break L6;
     }
     $19 = (_CE_UseLoadFlags($17)|0);
     $20 = ($19|0)==(0);
     if (!($20)) {
      break L6;
     }
     break;
    }
    case 41:  {
     $21 = ((($7)) + 2|0);
     $22 = HEAP16[$21>>1]|0;
     $23 = ($22<<16>>16)<(0);
     if ($23) {
      break L6;
     }
     $24 = $22 << 16 >> 16;
     $25 = (_CE_IsKnownImm($5,$24)|0);
     $26 = ($25|0)==(0);
     if ($26) {
      break L6;
     }
     $27 = (_CS_GetNextEntry($0,$$098$ph189)|0);
     $28 = ($27|0)==(0|0);
     if ($28) {
      break L6;
     }
     $29 = (_CE_UseLoadFlags($27)|0);
     $30 = ($29|0)==(0);
     if (!($30)) {
      break L6;
     }
     break;
    }
    case 42:  {
     $31 = ((($7)) + 4|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = ($32<<16>>16)<(0);
     if ($33) {
      break L6;
     }
     $34 = $32 << 16 >> 16;
     $35 = (_CE_IsKnownImm($5,$34)|0);
     $36 = ($35|0)==(0);
     if ($36) {
      break L6;
     }
     $37 = (_CS_GetNextEntry($0,$$098$ph189)|0);
     $38 = ($37|0)==(0|0);
     if ($38) {
      break L6;
     }
     $39 = (_CE_UseLoadFlags($37)|0);
     $40 = ($39|0)==(0);
     if (!($40)) {
      break L6;
     }
     break;
    }
    case 62:  {
     $41 = HEAP16[$7>>1]|0;
     $42 = ($41<<16>>16)>(-1);
     $43 = ($11<<24>>24)==(3);
     $or$cond = $42 & $43;
     if (!($or$cond)) {
      break L6;
     }
     $44 = ((($5)) + 16|0);
     $45 = HEAP16[$44>>1]|0;
     $46 = $45&65535;
     $47 = $46 & 8;
     $48 = ($47|0)==(0);
     do {
      if ($48) {
       $51 = $46 & 16;
       $52 = ($51|0)==(0);
       if (!($52)) {
        $53 = ((($7)) + 10|0);
        $54 = HEAP16[$53>>1]|0;
        $$0$i162 = $54;
        break;
       }
       $55 = $46 & 32;
       $56 = ($55|0)==(0);
       if (!($56)) {
        $57 = ((($7)) + 12|0);
        $58 = HEAP16[$57>>1]|0;
        $$0$i162 = $58;
        break;
       }
       $59 = $46 & 256;
       $60 = ($59|0)==(0);
       if (!($60)) {
        $61 = ((($7)) + 6|0);
        $62 = HEAP16[$61>>1]|0;
        $$0$i162 = $62;
        break;
       }
       $63 = $46 & 512;
       $64 = ($63|0)==(0);
       if ($64) {
        $$0$i162 = -1;
       } else {
        $65 = ((($7)) + 8|0);
        $66 = HEAP16[$65>>1]|0;
        $$0$i162 = $66;
       }
      } else {
       $49 = ((($7)) + 14|0);
       $50 = HEAP16[$49>>1]|0;
       $$0$i162 = $50;
      }
     } while(0);
     $67 = ($41<<16>>16)==($$0$i162<<16>>16);
     if (!($67)) {
      break L6;
     }
     break;
    }
    case 63:  {
     $68 = ((($7)) + 2|0);
     $69 = HEAP16[$68>>1]|0;
     $70 = ($69<<16>>16)<(0);
     if ($70) {
      break L6;
     }
     $71 = ($11<<24>>24)==(3);
     if (!($71)) {
      label = 43;
      break L6;
     }
     $72 = ((($5)) + 16|0);
     $73 = HEAP16[$72>>1]|0;
     $74 = $73&65535;
     $75 = $74 & 8;
     $76 = ($75|0)==(0);
     do {
      if ($76) {
       $79 = $74 & 16;
       $80 = ($79|0)==(0);
       if (!($80)) {
        $81 = ((($7)) + 10|0);
        $82 = HEAP16[$81>>1]|0;
        $$0$i158 = $82;
        break;
       }
       $83 = $74 & 32;
       $84 = ($83|0)==(0);
       if (!($84)) {
        $85 = ((($7)) + 12|0);
        $86 = HEAP16[$85>>1]|0;
        $$0$i158 = $86;
        break;
       }
       $87 = $74 & 256;
       $88 = ($87|0)==(0);
       if (!($88)) {
        $89 = ((($7)) + 6|0);
        $90 = HEAP16[$89>>1]|0;
        $$0$i158 = $90;
        break;
       }
       $91 = $74 & 512;
       $92 = ($91|0)==(0);
       if ($92) {
        $$0$i158 = -1;
       } else {
        $93 = ((($7)) + 8|0);
        $94 = HEAP16[$93>>1]|0;
        $$0$i158 = $94;
       }
      } else {
       $77 = ((($7)) + 14|0);
       $78 = HEAP16[$77>>1]|0;
       $$0$i158 = $78;
      }
     } while(0);
     $95 = ($69<<16>>16)==($$0$i158<<16>>16);
     if (!($95)) {
      label = 42;
      break L6;
     }
     break;
    }
    case 64:  {
     $98 = ((($7)) + 4|0);
     $99 = HEAP16[$98>>1]|0;
     $100 = ($99<<16>>16)<(0);
     if ($100) {
      break L6;
     }
     $101 = ($11<<24>>24)==(3);
     if (!($101)) {
      label = 60;
      break L6;
     }
     $102 = ((($5)) + 16|0);
     $103 = HEAP16[$102>>1]|0;
     $104 = $103&65535;
     $105 = $104 & 8;
     $106 = ($105|0)==(0);
     do {
      if ($106) {
       $109 = $104 & 16;
       $110 = ($109|0)==(0);
       if (!($110)) {
        $111 = ((($7)) + 10|0);
        $112 = HEAP16[$111>>1]|0;
        $$0$i152 = $112;
        break;
       }
       $113 = $104 & 32;
       $114 = ($113|0)==(0);
       if (!($114)) {
        $115 = ((($7)) + 12|0);
        $116 = HEAP16[$115>>1]|0;
        $$0$i152 = $116;
        break;
       }
       $117 = $104 & 256;
       $118 = ($117|0)==(0);
       if (!($118)) {
        $119 = ((($7)) + 6|0);
        $120 = HEAP16[$119>>1]|0;
        $$0$i152 = $120;
        break;
       }
       $121 = $104 & 512;
       $122 = ($121|0)==(0);
       if ($122) {
        $$0$i152 = -1;
       } else {
        $123 = ((($7)) + 8|0);
        $124 = HEAP16[$123>>1]|0;
        $$0$i152 = $124;
       }
      } else {
       $107 = ((($7)) + 14|0);
       $108 = HEAP16[$107>>1]|0;
       $$0$i152 = $108;
      }
     } while(0);
     $125 = ($99<<16>>16)==($$0$i152<<16>>16);
     if (!($125)) {
      label = 59;
      break L6;
     }
     break;
    }
    case 65:  {
     $131 = HEAP32[3628]|0;
     $132 = (14556 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = $133 & 8;
     $135 = ($134|0)!=(0);
     $136 = ($11<<24>>24)==(3);
     $or$cond249 = $135 & $136;
     if (!($or$cond249)) {
      break L6;
     }
     $137 = ((($5)) + 16|0);
     $138 = HEAP16[$137>>1]|0;
     $139 = $138&65535;
     $140 = $139 & 8;
     $141 = ($140|0)==(0);
     do {
      if ($141) {
       $143 = $139 & 16;
       $144 = ($143|0)==(0);
       if (!($144)) {
        $145 = ((($7)) + 10|0);
        $$0$i$in = $145;
        break;
       }
       $146 = $139 & 32;
       $147 = ($146|0)==(0);
       if (!($147)) {
        $148 = ((($7)) + 12|0);
        $$0$i$in = $148;
        break;
       }
       $149 = $139 & 256;
       $150 = ($149|0)==(0);
       if (!($150)) {
        $151 = ((($7)) + 6|0);
        $$0$i$in = $151;
        break;
       }
       $152 = $139 & 512;
       $153 = ($152|0)==(0);
       if ($153) {
        break L6;
       }
       $154 = ((($7)) + 8|0);
       $$0$i$in = $154;
      } else {
       $142 = ((($7)) + 14|0);
       $$0$i$in = $142;
      }
     } while(0);
     $$0$i = HEAP16[$$0$i$in>>1]|0;
     $155 = ($$0$i<<16>>16)==(0);
     if (!($155)) {
      break L6;
     }
     break;
    }
    case 66:  {
     $156 = HEAP16[$7>>1]|0;
     $157 = ($156<<16>>16)<(0);
     if ($157) {
      break L6;
     }
     $158 = ((($7)) + 2|0);
     $159 = HEAP16[$158>>1]|0;
     $160 = ($156<<16>>16)==($159<<16>>16);
     if (!($160)) {
      break L6;
     }
     $161 = (_CS_GetNextEntry($0,$$098$ph189)|0);
     $162 = ($161|0)==(0|0);
     if ($162) {
      break L6;
     }
     $163 = (_CE_UseLoadFlags($161)|0);
     $164 = ($163|0)==(0);
     if (!($164)) {
      break L6;
     }
     break;
    }
    case 67:  {
     $165 = HEAP16[$7>>1]|0;
     $166 = ($165<<16>>16)<(0);
     if ($166) {
      break L6;
     }
     $167 = ((($7)) + 4|0);
     $168 = HEAP16[$167>>1]|0;
     $169 = ($165<<16>>16)==($168<<16>>16);
     if (!($169)) {
      break L6;
     }
     $170 = (_CS_GetNextEntry($0,$$098$ph189)|0);
     $171 = ($170|0)==(0|0);
     if ($171) {
      break L6;
     }
     $172 = (_CE_UseLoadFlags($170)|0);
     $173 = ($172|0)==(0);
     if (!($173)) {
      break L6;
     }
     break;
    }
    case 71:  {
     $174 = ((($7)) + 2|0);
     $175 = HEAP16[$174>>1]|0;
     $176 = ($175<<16>>16)<(0);
     if ($176) {
      break L6;
     }
     $177 = HEAP16[$7>>1]|0;
     $178 = ($175<<16>>16)==($177<<16>>16);
     if (!($178)) {
      break L6;
     }
     $179 = (_CS_GetNextEntry($0,$$098$ph189)|0);
     $180 = ($179|0)==(0|0);
     if ($180) {
      break L6;
     }
     $181 = (_CE_UseLoadFlags($179)|0);
     $182 = ($181|0)==(0);
     if (!($182)) {
      break L6;
     }
     break;
    }
    case 73:  {
     $183 = ((($7)) + 4|0);
     $184 = HEAP16[$183>>1]|0;
     $185 = ($184<<16>>16)<(0);
     if ($185) {
      break L6;
     }
     $186 = HEAP16[$7>>1]|0;
     $187 = ($184<<16>>16)==($186<<16>>16);
     if (!($187)) {
      break L6;
     }
     $188 = (_CS_GetNextEntry($0,$$098$ph189)|0);
     $189 = ($188|0)==(0|0);
     if ($189) {
      break L6;
     }
     $190 = (_CE_UseLoadFlags($188)|0);
     $191 = ($190|0)==(0);
     if (!($191)) {
      break L6;
     }
     break;
    }
    default: {
     break L6;
    }
    }
   } while(0);
   _CS_DelEntry($0,$$098$ph189);
   $192 = (($$0185) + 1)|0;
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $193 = ($$098$ph189>>>0)<($$idx$val$i>>>0);
   if ($193) {
    $$0185 = $192;
   } else {
    $$0$lcssa = $192;
    label = 95;
    break L4;
   }
  }
  if ((label|0) == 42) {
   label = 0;
   if (!($70)) {
    label = 43;
   }
  }
  else if ((label|0) == 59) {
   label = 0;
   if (!($100)) {
    label = 60;
   }
  }
  L107: do {
   if ((label|0) == 43) {
    label = 0;
    $96 = HEAP16[$7>>1]|0;
    $97 = ($69<<16>>16)==($96<<16>>16);
    if ($97) {
     switch ($11<<24>>24) {
     case 5: case 8:  {
      break L107;
      break;
     }
     default: {
     }
     }
     _CE_ReplaceOPC($5,62);
    }
   }
   else if ((label|0) == 60) {
    label = 0;
    $126 = HEAP16[$7>>1]|0;
    $127 = ($99<<16>>16)==($126<<16>>16);
    if ($127) {
     _CE_ReplaceOPC($5,62);
     break;
    }
    $128 = ((($7)) + 2|0);
    $129 = HEAP16[$128>>1]|0;
    $130 = ($99<<16>>16)==($129<<16>>16);
    if ($130) {
     switch ($11<<24>>24) {
     case 4: case 7:  {
      break L107;
      break;
     }
     default: {
     }
     }
     _CE_ReplaceOPC($5,63);
    }
   }
  } while(0);
  $194 = (($$098$ph189) + 1)|0;
  $$idx$val$i184 = HEAP32[$$idx$i>>2]|0;
  $195 = ($194>>>0)<($$idx$val$i184>>>0);
  if ($195) {
   $$0$ph194 = $$0185;$$098$ph189 = $194;
  } else {
   $$0$lcssa = $$0185;
   label = 95;
   break;
  }
 }
 if ((label|0) == 95) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptStoreLoad($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$03438 = 0, $$040 = 0, $$1 = 0, $$idx$i = 0, $$idx$i35 = 0, $$idx$val$i = 0, $$idx$val$i36 = 0, $$idx$val$i37 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i37 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i37|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$03438 = 0;$$040 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$03438<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 128;
  $9 = ($8<<16>>16)==(0);
  L6: do {
   if ($9) {
    $$1 = $$040;
   } else {
    $10 = (_CS_GetNextEntry($0,$$03438)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$1 = $$040;
    } else {
     $$idx$i35 = ((($10)) + 24|0);
     $$idx$val$i36 = HEAP32[$$idx$i35>>2]|0;
     $12 = ($$idx$val$i36|0)==(0);
     if ($12) {
      $13 = ((($5)) + 1|0);
      $14 = HEAP8[$13>>0]|0;
      $15 = ((($10)) + 1|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = ($14<<24>>24)==($16<<24>>24);
      if ($17) {
       $18 = HEAP8[$5>>0]|0;
       switch ($18<<24>>24) {
       case 62:  {
        $19 = HEAP8[$10>>0]|0;
        $20 = ($19<<24>>24)==(40);
        if (!($20)) {
         $$1 = $$040;
         break L6;
        }
        break;
       }
       case 63:  {
        $21 = HEAP8[$10>>0]|0;
        $22 = ($21<<24>>24)==(41);
        if (!($22)) {
         $$1 = $$040;
         break L6;
        }
        break;
       }
       case 64:  {
        $23 = HEAP8[$10>>0]|0;
        $24 = ($23<<24>>24)==(42);
        if (!($24)) {
         $$1 = $$040;
         break L6;
        }
        break;
       }
       default: {
        $$1 = $$040;
        break L6;
       }
       }
       $25 = ((($5)) + 4|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ((($10)) + 4|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = (_strcmp($26,$28)|0);
       $30 = ($29|0)==(0);
       if ($30) {
        $31 = (($$03438) + 1)|0;
        $32 = (_CS_GetNextEntry($0,$31)|0);
        $33 = ($32|0)==(0|0);
        if ($33) {
         $$1 = $$040;
        } else {
         $34 = (_CE_UseLoadFlags($32)|0);
         $35 = ($34|0)==(0);
         if ($35) {
          $36 = (($$040) + 1)|0;
          _CS_DelEntry($0,$31);
          $$1 = $36;
         } else {
          $$1 = $$040;
         }
        }
       } else {
        $$1 = $$040;
       }
      } else {
       $$1 = $$040;
      }
     } else {
      $$1 = $$040;
     }
    }
   }
  } while(0);
  $37 = (($$03438) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $38 = ($37>>>0)<($$idx$val$i>>>0);
  if ($38) {
   $$03438 = $37;$$040 = $$1;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptTransfers1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04957 = 0, $$059 = 0, $$1 = 0, $$idx$i = 0, $$idx$i51 = 0, $$idx$val$i = 0, $$idx$val$i52 = 0, $$idx$val$i56 = 0, $$pr$pre = 0, $$pr54$pre = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i56 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i56|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$04957 = 0;$$059 = 0;
 L4: while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$04957<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 256;
  $9 = ($8<<16>>16)==(0);
  L6: do {
   if ($9) {
    $$1 = $$059;
   } else {
    $10 = (_CS_GetNextEntry($0,$$04957)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$1 = $$059;
    } else {
     $$idx$i51 = ((($10)) + 24|0);
     $$idx$val$i52 = HEAP32[$$idx$i51>>2]|0;
     $12 = ($$idx$val$i52|0)==(0);
     if ($12) {
      $13 = ((($10)) + 12|0);
      $14 = HEAP16[$13>>1]|0;
      $15 = $14 & 256;
      $16 = ($15<<16>>16)==(0);
      if ($16) {
       $$1 = $$059;
      } else {
       $17 = HEAP8[$5>>0]|0;
       $18 = ($17<<24>>24)==(66);
       if ($18) {
        $19 = HEAP8[$10>>0]|0;
        $20 = ($19<<24>>24)==(71);
        if (!($20)) {
         $$1 = $$059;
         break;
        }
        $21 = (($$04957) + 2)|0;
        $22 = (_RegXUsed($0,$21)|0);
        $23 = ($22|0)==(0);
        if (!($23)) {
         $$pr$pre = HEAP8[$5>>0]|0;
         $24 = $$pr$pre;
         label = 11;
        }
       } else {
        $24 = $17;
        label = 11;
       }
       do {
        if ((label|0) == 11) {
         label = 0;
         $25 = ($24<<24>>24)==(67);
         if ($25) {
          $26 = HEAP8[$10>>0]|0;
          $27 = ($26<<24>>24)==(73);
          if (!($27)) {
           $$1 = $$059;
           break L6;
          }
          $28 = (($$04957) + 2)|0;
          $29 = (_RegYUsed($0,$28)|0);
          $30 = ($29|0)==(0);
          if ($30) {
           break;
          }
          $$pre = HEAP8[$5>>0]|0;
          $31 = $$pre;
         } else {
          $31 = $24;
         }
         $32 = ($31<<24>>24)==(71);
         if ($32) {
          $33 = HEAP8[$10>>0]|0;
          $34 = ($33<<24>>24)==(66);
          if (!($34)) {
           $$1 = $$059;
           break L6;
          }
          $35 = (($$04957) + 2)|0;
          $36 = (_RegAUsed($0,$35)|0);
          $37 = ($36|0)==(0);
          if ($37) {
           break;
          }
          $$pr54$pre = HEAP8[$5>>0]|0;
          $38 = $$pr54$pre;
         } else {
          $38 = $31;
         }
         $39 = ($38<<24>>24)==(73);
         if (!($39)) {
          $$1 = $$059;
          break L6;
         }
         $40 = HEAP8[$10>>0]|0;
         $41 = ($40<<24>>24)==(67);
         if (!($41)) {
          $$1 = $$059;
          break L6;
         }
         $42 = (($$04957) + 2)|0;
         $43 = (_RegAUsed($0,$42)|0);
         $44 = ($43|0)==(0);
         if (!($44)) {
          $$1 = $$059;
          break L6;
         }
        }
       } while(0);
       $45 = (($$04957) + 1)|0;
       $46 = (_CS_GetNextEntry($0,$45)|0);
       $47 = ($46|0)==(0|0);
       if ($47) {
        $$1 = $$059;
       } else {
        $48 = (_CE_UseLoadFlags($46)|0);
        $49 = ($48|0)==(0);
        if (!($49)) {
         $50 = ($$04957|0)==(0);
         if ($50) {
          $$1 = $$059;
          break;
         }
         $51 = (($$04957) + -1)|0;
         $52 = HEAP32[$$idx$i>>2]|0;
         $53 = ($52>>>0)>($51>>>0);
         if (!($53)) {
          label = 26;
          break L4;
         }
         $56 = HEAP32[$2>>2]|0;
         $57 = (($56) + ($51<<2)|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = ((($58)) + 12|0);
         $60 = HEAP16[$59>>1]|0;
         $61 = $60 & 2048;
         $62 = ($61<<16>>16)==(0);
         if ($62) {
          $$1 = $$059;
          break;
         }
        }
        _CS_DelEntry($0,$45);
        _CS_DelEntry($0,$$04957);
        $63 = (($$059) + 1)|0;
        $$1 = $63;
       }
      }
     } else {
      $$1 = $$059;
     }
    }
   }
  } while(0);
  $64 = (($$04957) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $65 = ($64>>>0)<($$idx$val$i>>>0);
  if ($65) {
   $$04957 = $64;$$059 = $$1;
  } else {
   $$0$lcssa = $$1;
   label = 30;
   break;
  }
 }
 if ((label|0) == 26) {
  $54 = HEAP32[3332]|0;
  $55 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$54 & 1]($55,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 30) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptTransfers2($0) {
 $0 = $0|0;
 var $$ = 0, $$0$lcssa = 0, $$064 = 0, $$06573 = 0, $$075 = 0, $$2 = 0, $$267 = 0, $$idx$i = 0, $$idx$i68 = 0, $$idx$val$i = 0, $$idx$val$i69 = 0, $$idx$val$i72 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i72 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i72|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$06573 = 0;$$075 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$06573<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7 & 64;
  $9 = ($8<<16>>16)==(0);
  L6: do {
   if ($9) {
    $$2 = $$075;$$267 = $$06573;
   } else {
    $10 = (_CS_GetNextEntry($0,$$06573)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$2 = $$075;$$267 = $$06573;
    } else {
     $$idx$i68 = ((($10)) + 24|0);
     $$idx$val$i69 = HEAP32[$$idx$i68>>2]|0;
     $12 = ($$idx$val$i69|0)==(0);
     if ($12) {
      $13 = ((($10)) + 12|0);
      $14 = HEAP16[$13>>1]|0;
      $15 = $14 & 256;
      $16 = ($15<<16>>16)==(0);
      if ($16) {
       $$2 = $$075;$$267 = $$06573;
      } else {
       $17 = (($$06573) + 2)|0;
       $18 = ((($5)) + 16|0);
       $19 = HEAP16[$18>>1]|0;
       $20 = $19&65535;
       $21 = (_GetRegInfo($0,$17,$20)|0);
       $22 = HEAP16[$18>>1]|0;
       $23 = $22&65535;
       $24 = ($21|0)==($23|0);
       if ($24) {
        $$2 = $$075;$$267 = $$06573;
       } else {
        $25 = HEAP16[$5>>1]|0;
        $26 = $25&255;
        $27 = ($25&65535) >>> 8;
        $28 = $27&255;
        L12: do {
         switch ($26<<24>>24) {
         case 40:  {
          $29 = HEAP8[$10>>0]|0;
          switch ($29<<24>>24) {
          case 66:  {
           switch ($28<<24>>24) {
           case 8: case 6: case 3: case 2:  {
            break;
           }
           default: {
            $$2 = $$075;$$267 = $$06573;
            break L6;
           }
           }
           $30 = $27&65535;
           $31 = ((($5)) + 4|0);
           $32 = HEAP32[$31>>2]|0;
           $33 = ((($10)) + 36|0);
           $34 = HEAP32[$33>>2]|0;
           $35 = (_NewCodeEntry(41,$30,$32,0,$34)|0);
           $$064 = $35;
           break L12;
           break;
          }
          case 67:  {
           switch ($28<<24>>24) {
           case 7: case 6: case 4: case 3: case 2:  {
            break;
           }
           default: {
            $$2 = $$075;$$267 = $$06573;
            break L6;
           }
           }
           $36 = $27&65535;
           $37 = ((($5)) + 4|0);
           $38 = HEAP32[$37>>2]|0;
           $39 = ((($10)) + 36|0);
           $40 = HEAP32[$39>>2]|0;
           $41 = (_NewCodeEntry(42,$36,$38,0,$40)|0);
           $$064 = $41;
           break L12;
           break;
          }
          default: {
           $$2 = $$075;$$267 = $$06573;
           break L6;
          }
          }
          break;
         }
         case 42:  {
          $42 = HEAP8[$10>>0]|0;
          $43 = ($42<<24>>24)==(73);
          if (!($43)) {
           $$2 = $$075;$$267 = $$06573;
           break L6;
          }
          $44 = $27&65535;
          $45 = ((($5)) + 4|0);
          $46 = HEAP32[$45>>2]|0;
          $47 = ((($10)) + 36|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = (_NewCodeEntry(40,$44,$46,0,$48)|0);
          $$064 = $49;
          break;
         }
         case 41:  {
          $50 = HEAP8[$10>>0]|0;
          $51 = ($50<<24>>24)==(71);
          if (!($51)) {
           $$2 = $$075;$$267 = $$06573;
           break L6;
          }
          $52 = ($28<<24>>24)==(5);
          $53 = $27&65535;
          $$ = $52 ? 8 : $53;
          $54 = ((($5)) + 4|0);
          $55 = HEAP32[$54>>2]|0;
          $56 = ((($10)) + 36|0);
          $57 = HEAP32[$56>>2]|0;
          $58 = (_NewCodeEntry(40,$$,$55,0,$57)|0);
          $$064 = $58;
          break;
         }
         default: {
          $$2 = $$075;$$267 = $$06573;
          break L6;
         }
         }
        } while(0);
        $59 = ($$064|0)==(0|0);
        if ($59) {
         $$2 = $$075;$$267 = $$06573;
        } else {
         $60 = (($$06573) + -1)|0;
         $61 = (($$075) + 1)|0;
         _CS_InsertEntry($0,$$064,$17);
         _CS_DelEntries($0,$$06573,2);
         $$2 = $61;$$267 = $60;
        }
       }
      }
     } else {
      $$2 = $$075;$$267 = $$06573;
     }
    }
   }
  } while(0);
  $62 = (($$267) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $63 = ($62>>>0)<($$idx$val$i>>>0);
  if ($63) {
   $$06573 = $62;$$075 = $$2;
  } else {
   $$0$lcssa = $$2;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptTransfers3($0) {
 $0 = $0|0;
 var $$ = 0, $$$098 = 0, $$0 = 0, $$083$lcssa = 0, $$083112 = 0, $$084$$096 = 0, $$084111 = 0, $$088$ = 0, $$088110 = 0, $$090$idx101 = 0, $$090$idx101$val = 0, $$090109 = 0, $$092$ = 0, $$092108 = 0, $$094107 = 0, $$096$$084 = 0, $$096106 = 0, $$098105 = 0, $$189 = 0, $$191 = 0;
 var $$193 = 0, $$195 = 0, $$197 = 0, $$199 = 0, $$2100 = 0, $$3 = 0, $$387 = 0, $$idx$i = 0, $$idx$i102 = 0, $$idx$val$i = 0, $$idx$val$i103 = 0, $$idx$val$i104 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i104 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i104|0)==(0);
 if ($1) {
  $$083$lcssa = 0;
  return ($$083$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$083112 = 0;$$084111 = 0;$$088110 = 0;$$090109 = 0;$$092108 = 0;$$094107 = 0;$$096106 = 0;$$098105 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$084111<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  L6: do {
   switch ($$088110|0) {
   case 0:  {
    $$199 = 0;
    label = 5;
    break;
   }
   case 1:  {
    $$199 = $$098105;
    label = 5;
    break;
   }
   case 2:  {
    $10 = ((($5)) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 2;
    $13 = ($12|0)==(0);
    $14 = $11 >>> 16;
    if ($13) {
     $15 = $14&65535;
     $16 = ((($$092108)) + 16|0);
     $17 = HEAP16[$16>>1]|0;
     $18 = $17 & $15;
     $19 = ($18<<16>>16)==(0);
     if ($19) {
      $24 = ((($5)) + 16|0);
      $25 = HEAP16[$24>>1]|0;
      $26 = $25 & $17;
      $27 = ($26<<16>>16)==(0);
      if (!($27)) {
       $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
       break L6;
      }
      $$idx$i102 = ((($5)) + 24|0);
      $$idx$val$i103 = HEAP32[$$idx$i102>>2]|0;
      $28 = ($$idx$val$i103|0)==(0);
      $29 = $28 ? $14 : 0;
      $$$098 = $29 | $$098105;
      $$ = $28 ? 2 : 0;
      $$084$$096 = $28 ? $$084111 : $$096106;
      $$189 = $$;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$$098;$$3 = $$083112;$$387 = $$084$$096;
      break L6;
     }
     $20 = $11 & 128;
     $21 = ($20|0)==(0);
     if (!($21)) {
      $22 = (_CS_IsBasicBlock($0,$$096106,$$084111)|0);
      $23 = ($22|0)==(0);
      if (!($23)) {
       $$189 = 3;$$191 = $5;$$193 = $$092108;$$195 = $$084111;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$084111;
       break L6;
      }
     }
     $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
    } else {
     $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
    }
    break;
   }
   case 3:  {
    $30 = ((($$092108)) + 16|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $31&65535;
    $33 = (_GetRegInfo($0,$$084111,$32)|0);
    $34 = HEAP16[$30>>1]|0;
    $35 = $34&65535;
    $36 = $35 & $33;
    $37 = ($36|0)==(0);
    if ($37) {
     $38 = ((($$090109)) + 1|0);
     $39 = HEAP8[$38>>0]|0;
     switch ($39<<24>>24) {
     case 3:  {
      $40 = ((($$090109)) + 16|0);
      $41 = HEAP16[$40>>1]|0;
      $42 = $41&65535;
      $43 = $42 & $$098105;
      $44 = ($43|0)==(0);
      if (!($44)) {
       $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
       break L6;
      }
      break;
     }
     case 6:  {
      break;
     }
     default: {
      $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
      break L6;
     }
     }
     $45 = (($$096106) + 1)|0;
     $46 = (($$094107) + -1)|0;
     $$090$idx101 = ((($$090109)) + 4|0);
     $$090$idx101$val = HEAP32[$$090$idx101>>2]|0;
     $47 = (_MemAccess($0,$45,$46,$39,$$090$idx101$val)|0);
     $48 = ($47|0)==(0);
     if ($48) {
      $49 = HEAP8[$$092108>>0]|0;
      switch ($49<<24>>24) {
      case 71:  {
       $50 = HEAP8[$38>>0]|0;
       $51 = $50&255;
       $52 = HEAP32[$$090$idx101>>2]|0;
       $53 = ((($$090109)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (_NewCodeEntry(63,$51,$52,0,$54)|0);
       $$0 = $55;
       break;
      }
      case 66:  {
       $56 = HEAP8[$38>>0]|0;
       $57 = $56&255;
       $58 = HEAP32[$$090$idx101>>2]|0;
       $59 = ((($$090109)) + 36|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (_NewCodeEntry(62,$57,$58,0,$60)|0);
       $$0 = $61;
       break;
      }
      case 73:  {
       $62 = HEAP8[$38>>0]|0;
       $63 = $62&255;
       $64 = HEAP32[$$090$idx101>>2]|0;
       $65 = ((($$090109)) + 36|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (_NewCodeEntry(64,$63,$64,0,$66)|0);
       $$0 = $67;
       break;
      }
      case 67:  {
       $68 = HEAP8[$38>>0]|0;
       $69 = $68&255;
       $70 = HEAP32[$$090$idx101>>2]|0;
       $71 = ((($$090109)) + 36|0);
       $72 = HEAP32[$71>>2]|0;
       $73 = (_NewCodeEntry(62,$69,$70,0,$72)|0);
       $$0 = $73;
       break;
      }
      default: {
       $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
       break L6;
      }
      }
      $74 = ($$0|0)==(0|0);
      if ($74) {
       $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
      } else {
       $75 = (($$083112) + 1)|0;
       $76 = (($$084111) + -2)|0;
       _CS_InsertEntry($0,$$0,$45);
       _CS_DelEntry($0,$$096106);
       _CS_DelEntry($0,$$094107);
       $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $75;$$387 = $76;
      }
     } else {
      $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
     }
    } else {
     $$189 = 0;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$096106;
    }
    break;
   }
   default: {
    $$189 = $$088110;$$191 = $$090109;$$193 = $$092108;$$195 = $$094107;$$197 = $$096106;$$2100 = $$098105;$$3 = $$083112;$$387 = $$084111;
   }
   }
  } while(0);
  if ((label|0) == 5) {
   label = 0;
   $6 = ((($5)) + 12|0);
   $7 = HEAP16[$6>>1]|0;
   $8 = $7 & 256;
   $9 = ($8<<16>>16)==(0);
   $$096$$084 = $9 ? $$096106 : $$084111;
   $$092$ = $9 ? $$092108 : $5;
   $$088$ = $9 ? $$088110 : 2;
   $$189 = $$088$;$$191 = $$090109;$$193 = $$092$;$$195 = $$094107;$$197 = $$096$$084;$$2100 = $$199;$$3 = $$083112;$$387 = $$084111;
  }
  $77 = (($$387) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $78 = ($77>>>0)<($$idx$val$i>>>0);
  if ($78) {
   $$083112 = $$3;$$084111 = $77;$$088110 = $$189;$$090109 = $$191;$$092108 = $$193;$$094107 = $$195;$$096106 = $$197;$$098105 = $$2100;
  } else {
   $$083$lcssa = $$3;
   break;
  }
 }
 return ($$083$lcssa|0);
}
function _MemAccess($0,$1,$2,$$0$1$val,$$0$4$val) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $$0$1$val = $$0$1$val|0;
 $$0$4$val = $$0$4$val|0;
 var $$ = 0, $$$050 = 0, $$0484 = 0, $$0484$us = 0, $$0484$us11 = 0, $$050 = 0, $$4 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $or$cond = 0, $or$cond53$us = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strlen($$0$4$val)|0);
 $4 = ($$0$1$val<<24>>24)==(3);
 $5 = ($3>>>0)>(2);
 $or$cond = $4 & $5;
 if ($or$cond) {
  $6 = (($$0$4$val) + ($3)|0);
  $7 = ((($6)) + -2|0);
  $8 = (_strcmp($7,39172)|0);
  $9 = ($8|0)==(0);
  $$ = $9&1;
  $$050 = $$;
 } else {
  $$050 = 0;
 }
 $$off = (($$0$1$val) + -9)<<24>>24;
 $switch = ($$off&255)<(3);
 $10 = $$050 | 2;
 $$$050 = $switch ? $10 : $$050;
 $11 = ($1>>>0)>($2>>>0);
 if ($11) {
  $$4 = 0;
  return ($$4|0);
 }
 $12 = ((($0)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ((($0)) + 16|0);
 $15 = $$$050 & 1;
 $16 = ($15|0)==(0);
 $17 = $$$050 & 2;
 $18 = ($17|0)!=(0);
 $19 = (($3) + 2)|0;
 $20 = (($3) + 1)|0;
 $21 = (($3) + -2)|0;
 if ($16) {
  $$0484$us = $1;
  while(1) {
   $22 = ($13>>>0)>($$0484$us>>>0);
   if (!($22)) {
    label = 25;
    break;
   }
   $23 = HEAP32[$14>>2]|0;
   $24 = (($23) + ($$0484$us<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ((($25)) + 4|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP8[$27>>0]|0;
   $29 = ($28<<24>>24)==(0);
   if (!($29)) {
    $30 = (_strcmp($27,$$0$4$val)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $$4 = 1;
     label = 31;
     break;
    }
    $32 = (_strlen($27)|0);
    $33 = ($32|0)==($19|0);
    $or$cond53$us = $18 & $33;
    if ($or$cond53$us) {
     $34 = (_strncmp($27,$$0$4$val,$3)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $36 = (($27) + ($3)|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(43);
      if ($38) {
       $39 = (($27) + ($20)|0);
       $40 = HEAP8[$39>>0]|0;
       $41 = ($40<<24>>24)==(49);
       if ($41) {
        $$4 = 1;
        label = 31;
        break;
       }
      }
     }
    }
   }
   $42 = (($$0484$us) + 1)|0;
   $43 = ($42>>>0)>($2>>>0);
   if ($43) {
    $$4 = 0;
    label = 31;
    break;
   } else {
    $$0484$us = $42;
   }
  }
  if ((label|0) == 25) {
   $70 = HEAP32[3332]|0;
   $71 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$70 & 1]($71,40922,40950,129);
   // unreachable;
  }
  else if ((label|0) == 31) {
   return ($$4|0);
  }
 }
 if ($18) {
  $$0484$us11 = $1;
 } else {
  $$0484 = $1;
  while(1) {
   $69 = ($13>>>0)>($$0484>>>0);
   if (!($69)) {
    label = 25;
    break;
   }
   $72 = HEAP32[$14>>2]|0;
   $73 = (($72) + ($$0484<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP8[$76>>0]|0;
   $78 = ($77<<24>>24)==(0);
   if (!($78)) {
    $79 = (_strcmp($76,$$0$4$val)|0);
    $80 = ($79|0)==(0);
    if ($80) {
     $$4 = 1;
     label = 31;
     break;
    }
    $81 = (_strlen($76)|0);
    $82 = ($81|0)==($21|0);
    if ($82) {
     $83 = (_strncmp($76,$$0$4$val,$21)|0);
     $84 = ($83|0)==(0);
     if ($84) {
      $$4 = 1;
      label = 31;
      break;
     }
    }
   }
   $85 = (($$0484) + 1)|0;
   $86 = ($85>>>0)>($2>>>0);
   if ($86) {
    $$4 = 0;
    label = 31;
    break;
   } else {
    $$0484 = $85;
   }
  }
  if ((label|0) == 25) {
   $70 = HEAP32[3332]|0;
   $71 = HEAP32[3330]|0;
   FUNCTION_TABLE_viiii[$70 & 1]($71,40922,40950,129);
   // unreachable;
  }
  else if ((label|0) == 31) {
   return ($$4|0);
  }
 }
 while(1) {
  $44 = ($13>>>0)>($$0484$us11>>>0);
  if (!($44)) {
   label = 25;
   break;
  }
  $45 = HEAP32[$14>>2]|0;
  $46 = (($45) + ($$0484$us11<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ((($47)) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP8[$49>>0]|0;
  $51 = ($50<<24>>24)==(0);
  if (!($51)) {
   $52 = (_strcmp($49,$$0$4$val)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    $$4 = 1;
    label = 31;
    break;
   }
   $54 = (_strlen($49)|0);
   $55 = ($54|0)==($21|0);
   if ($55) {
    $56 = (_strncmp($49,$$0$4$val,$21)|0);
    $57 = ($56|0)==(0);
    if ($57) {
     $$4 = 1;
     label = 31;
     break;
    }
   }
   $58 = ($54|0)==($19|0);
   if ($58) {
    $59 = (_strncmp($49,$$0$4$val,$3)|0);
    $60 = ($59|0)==(0);
    if ($60) {
     $61 = (($49) + ($3)|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = ($62<<24>>24)==(43);
     if ($63) {
      $64 = (($49) + ($20)|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = ($65<<24>>24)==(49);
      if ($66) {
       $$4 = 1;
       label = 31;
       break;
      }
     }
    }
   }
  }
  $67 = (($$0484$us11) + 1)|0;
  $68 = ($67>>>0)>($2>>>0);
  if ($68) {
   $$4 = 0;
   label = 31;
   break;
  } else {
   $$0484$us11 = $67;
  }
 }
 if ((label|0) == 25) {
  $70 = HEAP32[3332]|0;
  $71 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$70 & 1]($71,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 31) {
  return ($$4|0);
 }
 return (0)|0;
}
function _OptTransfers4($0) {
 $0 = $0|0;
 var $$0 = 0, $$072$lcssa = 0, $$07296 = 0, $$073$$085 = 0, $$07395 = 0, $$077$87 = 0, $$07794 = 0, $$07993 = 0, $$081$ = 0, $$081$idx88 = 0, $$081$idx88$val = 0, $$08192 = 0, $$08391 = 0, $$085$$073 = 0, $$08590 = 0, $$178 = 0, $$180 = 0, $$182 = 0, $$184 = 0, $$186 = 0;
 var $$3 = 0, $$376 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i89 = 0, $$lobit = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i89 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i89|0)==(0);
 if ($1) {
  $$072$lcssa = 0;
  return ($$072$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$07296 = 0;$$07395 = 0;$$07794 = 0;$$07993 = 0;$$08192 = 0;$$08391 = 0;$$08590 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$07395<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  L6: do {
   switch ($$07794|0) {
   case 0:  {
    $6 = ((($5)) + 12|0);
    $7 = HEAP16[$6>>1]|0;
    $8 = $7 & 64;
    $9 = ($8<<16>>16)==(0);
    $$085$$073 = $9 ? $$08590 : $$07395;
    $$081$ = $9 ? $$08192 : $5;
    $$lobit = ($8&65535) >>> 6;
    $10 = $$lobit&65535;
    $$178 = $10;$$180 = $$07993;$$182 = $$081$;$$184 = $$08391;$$186 = $$085$$073;$$3 = $$07296;$$376 = $$07395;
    break;
   }
   case 1:  {
    $11 = ((($5)) + 12|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $12 & 2;
    $14 = ($13|0)==(0);
    if ($14) {
     $15 = $12 >>> 16;
     $16 = $15&65535;
     $17 = ((($$08192)) + 16|0);
     $18 = HEAP16[$17>>1]|0;
     $19 = $18 & $16;
     $20 = ($19<<16>>16)==(0);
     if ($20) {
      $25 = ((($5)) + 16|0);
      $26 = HEAP16[$25>>1]|0;
      $27 = $26 & $18;
      $28 = ($27<<16>>16)==(0);
      $$077$87 = $28&1;
      $$073$$085 = $28 ? $$07395 : $$08590;
      $$178 = $$077$87;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$073$$085;
      break L6;
     }
     $21 = $12 & 256;
     $22 = ($21|0)==(0);
     if (!($22)) {
      $23 = (_CS_IsBasicBlock($0,$$08590,$$07395)|0);
      $24 = ($23|0)==(0);
      if (!($24)) {
       $$178 = 2;$$180 = $5;$$182 = $$08192;$$184 = $$07395;$$186 = $$08590;$$3 = $$07296;$$376 = $$07395;
       break L6;
      }
     }
     $$178 = 0;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$08590;
    } else {
     $$178 = 0;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$08590;
    }
    break;
   }
   case 2:  {
    $29 = ((($$08192)) + 16|0);
    $30 = HEAP16[$29>>1]|0;
    $31 = $30&65535;
    $32 = (_GetRegInfo($0,$$07395,$31)|0);
    $33 = HEAP16[$29>>1]|0;
    $34 = $33&65535;
    $35 = $34 & $32;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = ((($$08192)) + 1|0);
     $38 = HEAP8[$37>>0]|0;
     switch ($38<<24>>24) {
     case 2: case 3: case 6:  {
      break;
     }
     default: {
      $$178 = 0;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$08391;
      break L6;
     }
     }
     $39 = (($$08590) + 1)|0;
     $40 = (($$08391) + -1)|0;
     $$081$idx88 = ((($$08192)) + 4|0);
     $$081$idx88$val = HEAP32[$$081$idx88>>2]|0;
     $41 = (_MemAccess($0,$39,$40,$38,$$081$idx88$val)|0);
     $42 = ($41|0)==(0);
     if ($42) {
      $43 = HEAP8[$$07993>>0]|0;
      switch ($43<<24>>24) {
      case 73: case 71:  {
       $44 = HEAP8[$37>>0]|0;
       $45 = $44&255;
       $46 = HEAP32[$$081$idx88>>2]|0;
       $47 = ((($$08192)) + 36|0);
       $48 = HEAP32[$47>>2]|0;
       $49 = (_NewCodeEntry(40,$45,$46,0,$48)|0);
       $$0 = $49;
       break;
      }
      case 66:  {
       $50 = HEAP8[$37>>0]|0;
       $51 = $50&255;
       $52 = HEAP32[$$081$idx88>>2]|0;
       $53 = ((($$08192)) + 36|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (_NewCodeEntry(41,$51,$52,0,$54)|0);
       $$0 = $55;
       break;
      }
      case 67:  {
       $56 = HEAP8[$37>>0]|0;
       $57 = $56&255;
       $58 = HEAP32[$$081$idx88>>2]|0;
       $59 = ((($$08192)) + 36|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (_NewCodeEntry(42,$57,$58,0,$60)|0);
       $$0 = $61;
       break;
      }
      default: {
       $$178 = 0;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$08391;
       break L6;
      }
      }
      $62 = ($$0|0)==(0|0);
      if ($62) {
       $$178 = 0;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$08391;
      } else {
       $63 = (($$07296) + 1)|0;
       $64 = (($$07395) + -2)|0;
       $65 = (($$08391) + 1)|0;
       _CS_InsertEntry($0,$$0,$65);
       _CS_DelEntry($0,$$08391);
       _CS_DelEntry($0,$$08590);
       $$178 = 0;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $63;$$376 = $64;
      }
     } else {
      $$178 = 0;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$08391;
     }
    } else {
     $$178 = 0;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$08391;
    }
    break;
   }
   default: {
    $$178 = $$07794;$$180 = $$07993;$$182 = $$08192;$$184 = $$08391;$$186 = $$08590;$$3 = $$07296;$$376 = $$07395;
   }
   }
  } while(0);
  $66 = (($$376) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $67 = ($66>>>0)<($$idx$val$i>>>0);
  if ($67) {
   $$07296 = $$3;$$07395 = $66;$$07794 = $$178;$$07993 = $$180;$$08192 = $$182;$$08391 = $$184;$$08590 = $$186;
  } else {
   $$072$lcssa = $$3;
   break;
  }
 }
 return ($$072$lcssa|0);
}
function _OptPushPop($0) {
 $0 = $0|0;
 var $$ = 0, $$$071 = 0, $$$073 = 0, $$0$lcssa = 0, $$06687 = 0, $$068$$066 = 0, $$06886 = 0, $$07185 = 0, $$073$ = 0, $$07383 = 0, $$07581 = 0, $$089 = 0, $$167 = 0, $$172 = 0, $$174 = 0, $$176 = 0, $$2 = 0, $$270 = 0, $$idx$i = 0, $$idx$i78 = 0;
 var $$idx$val = 0, $$idx$val$i = 0, $$idx$val$i79 = 0, $$idx$val$i80 = 0, $$idx77 = 0, $$idx77$val = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i80 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i80|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$06687 = 0;$$06886 = 0;$$07185 = 0;$$07383 = 0;$$07581 = 0;$$089 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$06886<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  L6: do {
   switch ($$07185|0) {
   case 0:  {
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(46);
    $$$073 = $7 ? 0 : $$07383;
    $$$071 = $7&1;
    $$068$$066 = $7 ? $$06886 : $$06687;
    $$167 = $$068$$066;$$172 = $$$071;$$174 = $$$073;$$176 = $$07581;$$2 = $$089;$$270 = $$06886;
    break;
   }
   case 1:  {
    $8 = HEAP8[$5>>0]|0;
    switch ($8<<24>>24) {
    case 46:  {
     $$167 = $$06886;$$172 = 1;$$174 = 0;$$176 = $$07581;$$2 = $$089;$$270 = $$06886;
     break L6;
     break;
    }
    case 50:  {
     $9 = (_CS_IsBasicBlock($0,$$06687,$$06886)|0);
     $10 = ($9|0)==(0);
     $$ = $10 ? 0 : 2;
     $$167 = $$06687;$$172 = $$;$$174 = $$07383;$$176 = $$06886;$$2 = $$089;$$270 = $$06886;
     break L6;
     break;
    }
    default: {
     $11 = ((($5)) + 16|0);
     $12 = HEAP16[$11>>1]|0;
     $13 = $12 & 1;
     $14 = ($13<<16>>16)==(0);
     $$073$ = $14 ? $$07383 : 1;
     $$167 = $$06687;$$172 = 1;$$174 = $$073$;$$176 = $$07581;$$2 = $$089;$$270 = $$06886;
     break L6;
    }
    }
    break;
   }
   case 2:  {
    $15 = HEAP16[$5>>1]|0;
    $16 = $15&255;
    $17 = ($16<<24>>24)==(62);
    L13: do {
     if ($17) {
      $18 = ($15&65535) >>> 8;
      $19 = $18&255;
      $20 = ((($5)) + 1|0);
      switch ($19<<24>>24) {
      case 3: case 6:  {
       break;
      }
      default: {
       break L13;
      }
      }
      $$idx$i78 = ((($5)) + 24|0);
      $$idx$val$i79 = HEAP32[$$idx$i78>>2]|0;
      $21 = ($$idx$val$i79|0)==(0);
      if ($21) {
       $22 = (($$06886) + 1)|0;
       $23 = (_RegAUsed($0,$22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $25 = (($$06687) + 1)|0;
        $26 = (($$07581) + -1)|0;
        $$idx$val = HEAP8[$20>>0]|0;
        $$idx77 = ((($5)) + 4|0);
        $$idx77$val = HEAP32[$$idx77>>2]|0;
        $27 = (_MemAccess($0,$25,$26,$$idx$val,$$idx77$val)|0);
        $28 = ($27|0)==(0);
        if ($28) {
         $29 = HEAP16[$5>>1]|0;
         $30 = $29&65535;
         $31 = $30 & 255;
         $32 = ($29&65535) >>> 8;
         $33 = $32&65535;
         $34 = HEAP32[$$idx77>>2]|0;
         $35 = ((($5)) + 20|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = ((($5)) + 36|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = (_NewCodeEntry($31,$33,$34,$36,$38)|0);
         _CS_InsertEntry($0,$39,$25);
         _CS_DelEntry($0,$$06687);
         _CS_DelEntries($0,$$07581,2);
         $40 = (($$06886) + -2)|0;
         $41 = (($$089) + 1)|0;
         $$167 = $$06687;$$172 = 0;$$174 = $$07383;$$176 = $$07581;$$2 = $41;$$270 = $40;
         break L6;
        }
       }
      }
     }
    } while(0);
    $42 = ((($5)) + 12|0);
    $43 = HEAP16[$42>>1]|0;
    $44 = $43 & 2;
    $45 = ($44<<16>>16)==(0);
    if ($45) {
     $46 = (_RegAUsed($0,$$06886)|0);
     $47 = ($46|0)!=(0);
     $48 = ($$07383|0)!=(0);
     $or$cond = $48 & $47;
     if ($or$cond) {
      $$167 = $$06687;$$172 = 0;$$174 = $$07383;$$176 = $$07581;$$2 = $$089;$$270 = $$06886;
     } else {
      $49 = (($$089) + 1)|0;
      $50 = (($$06886) + -2)|0;
      _CS_DelEntry($0,$$07581);
      _CS_DelEntry($0,$$06687);
      $$167 = $$06687;$$172 = 0;$$174 = $$07383;$$176 = $$07581;$$2 = $49;$$270 = $50;
     }
    } else {
     $$167 = $$06687;$$172 = 0;$$174 = $$07383;$$176 = $$07581;$$2 = $$089;$$270 = $$06886;
    }
    break;
   }
   default: {
    $$167 = $$06687;$$172 = $$07185;$$174 = $$07383;$$176 = $$07581;$$2 = $$089;$$270 = $$06886;
   }
   }
  } while(0);
  $51 = (($$270) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $52 = ($51>>>0)<($$idx$val$i>>>0);
  if ($52) {
   $$06687 = $$167;$$06886 = $51;$$07185 = $$172;$$07383 = $$174;$$07581 = $$176;$$089 = $$2;
  } else {
   $$0$lcssa = $$2;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptPrecalc($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$069 = 0, $$070 = 0, $$07183 = 0, $$085 = 0, $$2 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i82 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i82 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i82|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$07183 = 0;$$085 = 0;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$07183<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 40|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 16|0);
  $9 = HEAP16[$5>>1]|0;
  $10 = $9&255;
  $11 = ($9&65535) >>> 8;
  $12 = $11&255;
  L6: do {
   switch ($10<<24>>24) {
   case 40:  {
    $13 = ($12<<24>>24)==(2);
    if ($13) {
     $$2 = $$085;
    } else {
     $14 = HEAP16[$8>>1]|0;
     $15 = ($14<<16>>16)<(0);
     if ($15) {
      $$2 = $$085;
     } else {
      $16 = $14 << 16 >> 16;
      $17 = (_MakeHexArg($16)|0);
      $$069 = 40;$$070 = $17;
      label = 34;
     }
    }
    break;
   }
   case 41:  {
    $18 = ($12<<24>>24)==(2);
    if ($18) {
     $$2 = $$085;
    } else {
     $19 = ((($7)) + 18|0);
     $20 = HEAP16[$19>>1]|0;
     $21 = ($20<<16>>16)<(0);
     if ($21) {
      $$2 = $$085;
     } else {
      $22 = $20 << 16 >> 16;
      $23 = (_MakeHexArg($22)|0);
      $$069 = 41;$$070 = $23;
      label = 34;
     }
    }
    break;
   }
   case 42:  {
    $24 = ($12<<24>>24)==(2);
    if ($24) {
     $$2 = $$085;
    } else {
     $25 = ((($7)) + 20|0);
     $26 = HEAP16[$25>>1]|0;
     $27 = ($26<<16>>16)<(0);
     if ($27) {
      $$2 = $$085;
     } else {
      $28 = $26 << 16 >> 16;
      $29 = (_MakeHexArg($28)|0);
      $$069 = 42;$$070 = $29;
      label = 34;
     }
    }
    break;
   }
   case 25:  {
    $30 = HEAP16[$8>>1]|0;
    $31 = ($30<<16>>16)<(0);
    if ($31) {
     $$2 = $$085;
    } else {
     $32 = $30 << 16 >> 16;
     $33 = (_MakeHexArg($32)|0);
     $$069 = 40;$$070 = $33;
     label = 34;
    }
    break;
   }
   case 58: case 0:  {
    $34 = HEAP16[$7>>1]|0;
    $35 = ($34<<16>>16)==(0);
    if ($35) {
     $36 = (_CE_IsKnownImm($5,0)|0);
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $$085;
     } else {
      $38 = (($$085) + 1)|0;
      _CS_DelEntry($0,$$07183);
      $$2 = $38;
     }
    } else {
     $$2 = $$085;
    }
    break;
   }
   case 1:  {
    $39 = (_CE_IsKnownImm($5,255)|0);
    $40 = ($39|0)==(0);
    if (!($40)) {
     _CS_DelEntry($0,$$07183);
     $41 = (($$085) + 1)|0;
     $$2 = $41;
     break L6;
    }
    $42 = (_CE_IsKnownImm($5,0)|0);
    $43 = ($42|0)==(0);
    if (!($43)) {
     $44 = (_MakeHexArg(0)|0);
     $$069 = 40;$$070 = $44;
     label = 34;
     break L6;
    }
    $45 = HEAP16[$8>>1]|0;
    $46 = ($45<<16>>16)<(0);
    if (!($46)) {
     $47 = $45 << 16 >> 16;
     $48 = (_MakeHexArg($47)|0);
     $$069 = 40;$$070 = $48;
     label = 34;
     break L6;
    }
    $49 = HEAP16[$7>>1]|0;
    $50 = ($49<<16>>16)==(255);
    if ($50) {
     $51 = (($$085) + 1)|0;
     _CE_ReplaceOPC($5,40);
     $$2 = $51;
    } else {
     $$2 = $$085;
    }
    break;
   }
   case 45:  {
    $52 = (_CE_IsKnownImm($5,0)|0);
    $53 = ($52|0)==(0);
    if (!($53)) {
     _CS_DelEntry($0,$$07183);
     $54 = (($$085) + 1)|0;
     $$2 = $54;
     break L6;
    }
    $55 = (_CE_IsKnownImm($5,255)|0);
    $56 = ($55|0)==(0);
    if (!($56)) {
     $57 = (_MakeHexArg(255)|0);
     $$069 = 40;$$070 = $57;
     label = 34;
     break L6;
    }
    $58 = HEAP16[$8>>1]|0;
    $59 = ($58<<16>>16)<(0);
    if (!($59)) {
     $60 = $58 << 16 >> 16;
     $61 = (_MakeHexArg($60)|0);
     $$069 = 40;$$070 = $61;
     label = 34;
     break L6;
    }
    $62 = HEAP16[$7>>1]|0;
    $63 = ($62<<16>>16)==(0);
    if ($63) {
     $64 = (($$085) + 1)|0;
     _CE_ReplaceOPC($5,40);
     $$2 = $64;
    } else {
     $$2 = $$085;
    }
    break;
   }
   default: {
    $$2 = $$085;
   }
   }
  } while(0);
  if ((label|0) == 34) {
   label = 0;
   $65 = ($$070|0)==(0|0);
   if ($65) {
    $$2 = $$085;
   } else {
    $66 = (($$085) + 1)|0;
    $67 = (($$07183) + 1)|0;
    $68 = ((($5)) + 36|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = (_NewCodeEntry($$069,2,$$070,0,$69)|0);
    _CS_InsertEntry($0,$70,$67);
    _CS_DelEntry($0,$$07183);
    $$2 = $66;
   }
  }
  $71 = (($$07183) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $72 = ($71>>>0)<($$idx$val$i>>>0);
  if ($72) {
   $$07183 = $71;$$085 = $$2;
  } else {
   $$0$lcssa = $$2;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptBranchDist($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02936$i = 0, $$02936$i52 = 0, $$030$i = 0, $$030$i49 = 0, $$03038$i = 0, $$03038$i43 = 0, $$03040$i = 0, $$03040$i47 = 0, $$039$i = 0, $$039$i48 = 0, $$04068 = 0, $$073 = 0, $$137$i = 0, $$137$i51 = 0, $$2 = 0, $$2$i = 0, $$2$i54 = 0, $$idx$i = 0, $$idx$val$i = 0;
 var $$idx$val$i67 = 0, $$off$i = 0, $$off$i56 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i67 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i67|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$04068 = 0;$$073 = 0;
 L4: while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$04068<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 & 2;
  $10 = ($9|0)==(0);
  do {
   if ($10) {
    $67 = HEAP32[3628]|0;
    $68 = (14556 + ($67<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $69 & 8;
    $71 = ($70|0)==(0);
    $72 = $8 & 1;
    $73 = ($72|0)==(0);
    $or$cond42 = $73 | $71;
    if ($or$cond42) {
     $$2 = $$073;
    } else {
     $74 = ((($5)) + 20|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)==(0|0);
     if ($76) {
      $$2 = $$073;
     } else {
      $77 = ((($75)) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (_CS_GetEntryIndex($0,$78)|0);
      $80 = ($79>>>0)<($$04068>>>0);
      if ($80) {
       $83 = HEAP32[$$idx$i>>2]|0;
       $$02936$i = $79;$$137$i = 0;
       while(1) {
        $95 = ($83>>>0)>($$02936$i>>>0);
        if (!($95)) {
         label = 32;
         break L4;
        }
        $98 = (($$02936$i) + 1)|0;
        $99 = HEAP32[$2>>2]|0;
        $100 = (($99) + ($$02936$i<<2)|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ((($101)) + 2|0);
        $103 = HEAP8[$102>>0]|0;
        $104 = $103&255;
        $105 = (($$137$i) - ($104))|0;
        $106 = ($98>>>0)<($$04068>>>0);
        if ($106) {
         $$02936$i = $98;$$137$i = $105;
        } else {
         $$2$i = $105;
         label = 34;
         break;
        }
       }
      } else {
       $$03038$i = (($$04068) + 1)|0;
       $81 = ($$03038$i>>>0)<($79>>>0);
       if ($81) {
        $82 = HEAP32[$$idx$i>>2]|0;
        $$03040$i = $$03038$i;$$039$i = 0;
        while(1) {
         $84 = ($82>>>0)>($$03040$i>>>0);
         if (!($84)) {
          label = 29;
          break L4;
         }
         $87 = HEAP32[$2>>2]|0;
         $88 = (($87) + ($$03040$i<<2)|0);
         $89 = HEAP32[$88>>2]|0;
         $90 = ((($89)) + 2|0);
         $91 = HEAP8[$90>>0]|0;
         $92 = $91&255;
         $93 = (($92) + ($$039$i))|0;
         $$030$i = (($$03040$i) + 1)|0;
         $94 = ($$030$i>>>0)<($79>>>0);
         if ($94) {
          $$03040$i = $$030$i;$$039$i = $93;
         } else {
          $$2$i = $93;
          label = 34;
          break;
         }
        }
       }
      }
      if ((label|0) == 34) {
       label = 0;
       $$off$i = (($$2$i) + 125)|0;
       $107 = ($$off$i>>>0)<(251);
       if (!($107)) {
        $$2 = $$073;
        break;
       }
      }
      $108 = (($$073) + 1)|0;
      _CE_ReplaceOPC($5,10);
      $$2 = $108;
     }
    }
   } else {
    $11 = ((($5)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(0|0);
    if ($13) {
     $61 = $8 & 16;
     $62 = ($61|0)==(0);
     if (!($62)) {
      $$2 = $$073;
      break;
     }
     $63 = (($$073) + 1)|0;
     $64 = HEAP8[$5>>0]|0;
     $65 = $64&255;
     $66 = (_MakeLongBranch($65)|0);
     _CE_ReplaceOPC($5,$66);
     $$2 = $63;
     break;
    }
    $14 = ((($12)) + 12|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (_CS_GetEntryIndex($0,$15)|0);
    $17 = ($16>>>0)<($$04068>>>0);
    do {
     if ($17) {
      $23 = HEAP32[$$idx$i>>2]|0;
      $$02936$i52 = $16;$$137$i51 = 0;
      while(1) {
       $35 = ($23>>>0)>($$02936$i52>>>0);
       if (!($35)) {
        label = 14;
        break L4;
       }
       $38 = (($$02936$i52) + 1)|0;
       $39 = HEAP32[$2>>2]|0;
       $40 = (($39) + ($$02936$i52<<2)|0);
       $41 = HEAP32[$40>>2]|0;
       $42 = ((($41)) + 2|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = $43&255;
       $45 = (($$137$i51) - ($44))|0;
       $46 = ($38>>>0)<($$04068>>>0);
       if ($46) {
        $$02936$i52 = $38;$$137$i51 = $45;
       } else {
        $$2$i54 = $45;
        label = 16;
        break;
       }
      }
     } else {
      $$03038$i43 = (($$04068) + 1)|0;
      $18 = ($$03038$i43>>>0)<($16>>>0);
      if (!($18)) {
       $19 = HEAP16[$6>>1]|0;
       $20 = $19 & 16;
       $21 = ($20<<16>>16)!=(0);
       $55 = $21;$56 = 1;
       break;
      }
      $22 = HEAP32[$$idx$i>>2]|0;
      $$03040$i47 = $$03038$i43;$$039$i48 = 0;
      while(1) {
       $24 = ($22>>>0)>($$03040$i47>>>0);
       if (!($24)) {
        label = 11;
        break L4;
       }
       $27 = HEAP32[$2>>2]|0;
       $28 = (($27) + ($$03040$i47<<2)|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ((($29)) + 2|0);
       $31 = HEAP8[$30>>0]|0;
       $32 = $31&255;
       $33 = (($32) + ($$039$i48))|0;
       $$030$i49 = (($$03040$i47) + 1)|0;
       $34 = ($$030$i49>>>0)<($16>>>0);
       if ($34) {
        $$03040$i47 = $$030$i49;$$039$i48 = $33;
       } else {
        $$2$i54 = $33;
        label = 16;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     $$off$i56 = (($$2$i54) + 125)|0;
     $47 = ($$off$i56>>>0)<(251);
     $48 = HEAP16[$6>>1]|0;
     $49 = $48 & 16;
     $50 = ($49<<16>>16)!=(0);
     $or$cond = $47 | $50;
     if ($or$cond) {
      $55 = $50;$56 = $47;
     } else {
      $51 = HEAP8[$5>>0]|0;
      $52 = $51&255;
      $53 = (_MakeLongBranch($52)|0);
      _CE_ReplaceOPC($5,$53);
      $54 = (($$073) + 1)|0;
      $$2 = $54;
      break;
     }
    }
    $or$cond3 = $56 & $55;
    if ($or$cond3) {
     $57 = (($$073) + 1)|0;
     $58 = HEAP8[$5>>0]|0;
     $59 = $58&255;
     $60 = (_MakeShortBranch($59)|0);
     _CE_ReplaceOPC($5,$60);
     $$2 = $57;
    } else {
     $$2 = $$073;
    }
   }
  } while(0);
  $109 = (($$04068) + 1)|0;
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $110 = ($109>>>0)<($$idx$val$i>>>0);
  if ($110) {
   $$04068 = $109;$$073 = $$2;
  } else {
   $$0$lcssa = $$2;
   label = 37;
   break;
  }
 }
 if ((label|0) == 11) {
  $25 = HEAP32[3332]|0;
  $26 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$25 & 1]($26,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 14) {
  $36 = HEAP32[3332]|0;
  $37 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$36 & 1]($37,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 29) {
  $85 = HEAP32[3332]|0;
  $86 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$85 & 1]($86,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 32) {
  $96 = HEAP32[3332]|0;
  $97 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$96 & 1]($97,40922,40950,129);
  // unreachable;
 }
 else if ((label|0) == 37) {
  return ($$0$lcssa|0);
 }
 return (0)|0;
}
function _OptIndLoads1($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02527 = 0, $$028 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i26 = 0, $$idx$val$i29 = 0, $$mask = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i26 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i26|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02527 = 0;$$028 = 0;$$idx$val$i29 = $$idx$val$i26;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02527<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP16[$5>>1]|0;
  $$mask = $6 & 255;
  $7 = $$mask&65535;
  $8 = ($6<<16>>16)==(2600);
  if ($8) {
   $9 = ((($5)) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 4|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(0);
   if ($13) {
    $14 = ((($10)) + 2|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = ($15<<16>>16)==(0);
    if ($16) {
     $17 = ((($5)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($5)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_NewCodeEntry($7,9,$18,0,$20)|0);
     $22 = (($$02527) + 1)|0;
     _CS_InsertEntry($0,$21,$22);
     _CS_DelEntry($0,$$02527);
     $23 = (($$028) + 1)|0;
     $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
     $$1 = $23;$$idx$val$i = $$idx$val$i$pre;
    } else {
     $$1 = $$028;$$idx$val$i = $$idx$val$i29;
    }
   } else {
    $$1 = $$028;$$idx$val$i = $$idx$val$i29;
   }
  } else {
   $$1 = $$028;$$idx$val$i = $$idx$val$i29;
  }
  $24 = (($$02527) + 1)|0;
  $25 = ($24>>>0)<($$idx$val$i>>>0);
  if ($25) {
   $$02527 = $24;$$028 = $$1;$$idx$val$i29 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _OptIndLoads2($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$02527 = 0, $$028 = 0, $$1 = 0, $$idx$i = 0, $$idx$val$i = 0, $$idx$val$i$pre = 0, $$idx$val$i26 = 0, $$idx$val$i29 = 0, $$mask = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx$i = ((($0)) + 8|0);
 $$idx$val$i26 = HEAP32[$$idx$i>>2]|0;
 $1 = ($$idx$val$i26|0)==(0);
 if ($1) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 }
 $2 = ((($0)) + 16|0);
 $$02527 = 0;$$028 = 0;$$idx$val$i29 = $$idx$val$i26;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($$02527<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = HEAP16[$5>>1]|0;
  $$mask = $6 & 255;
  $7 = $$mask&65535;
  $8 = ($6<<16>>16)==(2344);
  if ($8) {
   $9 = ((($5)) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ((($10)) + 4|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(0);
   if ($13) {
    $14 = ((($10)) + 2|0);
    $15 = HEAP16[$14>>1]|0;
    $16 = ($15<<16>>16)==(0);
    if ($16) {
     $17 = ((($5)) + 4|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($5)) + 36|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (_NewCodeEntry($7,10,$18,0,$20)|0);
     $22 = (($$02527) + 1)|0;
     _CS_InsertEntry($0,$21,$22);
     _CS_DelEntry($0,$$02527);
     $23 = (($$028) + 1)|0;
     $$idx$val$i$pre = HEAP32[$$idx$i>>2]|0;
     $$1 = $23;$$idx$val$i = $$idx$val$i$pre;
    } else {
     $$1 = $$028;$$idx$val$i = $$idx$val$i29;
    }
   } else {
    $$1 = $$028;$$idx$val$i = $$idx$val$i29;
   }
  } else {
   $$1 = $$028;$$idx$val$i = $$idx$val$i29;
  }
  $24 = (($$02527) + 1)|0;
  $25 = ($24>>>0)<($$idx$val$i>>>0);
  if ($25) {
   $$02527 = $24;$$028 = $$1;$$idx$val$i29 = $$idx$val$i;
  } else {
   $$0$lcssa = $$1;
   break;
  }
 }
 return ($$0$lcssa|0);
}
function _Fatal($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $$0 = 0, $$03 = 0, $$idx = 0, $$idx$val = 0, $$idx4$val = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = HEAP32[(44712)>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $7 = (_GetCurrentFile()|0);
  $8 = (_GetCurrentLine()|0);
  $$0 = $8;$$03 = $7;
 } else {
  $4 = (_GetInputName($2)|0);
  $5 = HEAP32[(44712)>>2]|0;
  $6 = (_GetInputLine($5)|0);
  $$0 = $6;$$03 = $4;
 }
 $9 = HEAP32[3649]|0;
 HEAP32[$vararg_buffer>>2] = $$03;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$0;
 (_fprintf($9,39175,$vararg_buffer)|0);
 HEAP32[$1>>2] = $varargs;
 (_vfprintf($9,$0,$1)|0);
 (_fputc(10,$9)|0);
 $10 = HEAP32[11473]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _exit(1);
  // unreachable;
 }
 $$idx = ((($10)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx4$val = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $$idx$val;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $$idx4$val;
 _Print($9,1,39191,$vararg_buffer2);
 _exit(1);
 // unreachable;
}
function _Internal($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $$0 = 0, $$03 = 0, $$idx = 0, $$idx$val = 0, $$idx4$val = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 16|0;
 $2 = HEAP32[(44712)>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $7 = (_GetCurrentFile()|0);
  $8 = (_GetCurrentLine()|0);
  $$0 = $8;$$03 = $7;
 } else {
  $4 = (_GetInputName($2)|0);
  $5 = HEAP32[(44712)>>2]|0;
  $6 = (_GetInputLine($5)|0);
  $$0 = $6;$$03 = $4;
 }
 $9 = HEAP32[3649]|0;
 HEAP32[$vararg_buffer>>2] = $$03;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $$0;
 (_fprintf($9,39204,$vararg_buffer)|0);
 HEAP32[$1>>2] = $varargs;
 (_vfprintf($9,$0,$1)|0);
 (_fputc(10,$9)|0);
 $10 = HEAP32[11473]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  _abort();
  // unreachable;
 }
 $$idx = ((($10)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx4$val = HEAP32[$10>>2]|0;
 HEAP32[$vararg_buffer2>>2] = $$idx$val;
 $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
 HEAP32[$vararg_ptr5>>2] = $$idx4$val;
 (_fprintf($9,39238,$vararg_buffer2)|0);
 _abort();
 // unreachable;
}
function _Error($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $$idx$i = 0, $$idx$val$i = 0, $$idx3$val$i = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 24|0;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[(44712)>>2]|0;
 $3 = (_GetInputName($2)|0);
 $4 = HEAP32[(44712)>>2]|0;
 $5 = (_GetInputLine($4)|0);
 $6 = HEAP32[3649]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $5;
 (_fprintf($6,39252,$vararg_buffer)|0);
 (_vfprintf($6,$0,$1)|0);
 (_fputc(10,$6)|0);
 $7 = HEAP32[11473]|0;
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  $$idx$i = ((($7)) + 4|0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $$idx3$val$i = HEAP32[$7>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $$idx$val$i;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $$idx3$val$i;
  _Print($6,1,39191,$vararg_buffer2);
 }
 $9 = HEAP32[11510]|0;
 $10 = (($9) + 1)|0;
 HEAP32[11510] = $10;
 $11 = ($10>>>0)>(10);
 if ($11) {
  _Fatal(39268,$vararg_buffer6);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _PPError($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $$idx$i = 0, $$idx$val$i = 0, $$idx3$val$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = sp + 24|0;
 HEAP32[$1>>2] = $varargs;
 $2 = (_GetCurrentFile()|0);
 $3 = (_GetCurrentLine()|0);
 $4 = HEAP32[3649]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 (_fprintf($4,39252,$vararg_buffer)|0);
 (_vfprintf($4,$0,$1)|0);
 (_fputc(10,$4)|0);
 $5 = HEAP32[11473]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $$idx$i = ((($5)) + 4|0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  $$idx3$val$i = HEAP32[$5>>2]|0;
  HEAP32[$vararg_buffer2>>2] = $$idx$val$i;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = $$idx3$val$i;
  _Print($4,1,39191,$vararg_buffer2);
 }
 $7 = HEAP32[11510]|0;
 $8 = (($7) + 1)|0;
 HEAP32[11510] = $8;
 $9 = ($8>>>0)>(10);
 if ($9) {
  _Fatal(39268,$vararg_buffer6);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _Warning($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[(44712)>>2]|0;
 $3 = (_GetInputName($2)|0);
 $4 = HEAP32[(44712)>>2]|0;
 $5 = (_GetInputLine($4)|0);
 _IntWarning($3,$5,$0,$1);
 STACKTOP = sp;return;
}
function _IntWarning($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$idx = 0, $$idx$i = 0, $$idx$val = 0, $$idx$val$i = 0, $$idx3$val$i = 0, $$idx7$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer12 = sp + 32|0;
 $vararg_buffer8 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = (_IS_Get(12920)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = HEAP32[3649]|0;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $1;
  (_fprintf($6,39252,$vararg_buffer)|0);
  (_vfprintf($6,$2,$3)|0);
  (_fputc(10,$6)|0);
  $7 = HEAP32[11473]|0;
  $8 = ($7|0)==(0|0);
  if (!($8)) {
   $$idx$i = ((($7)) + 4|0);
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   $$idx3$val$i = HEAP32[$7>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $$idx$val$i;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $$idx3$val$i;
   _Print($6,1,39191,$vararg_buffer2);
  }
  $9 = HEAP32[11510]|0;
  $10 = (($9) + 1)|0;
  HEAP32[11510] = $10;
  $11 = ($10>>>0)>(10);
  if ($11) {
   _Fatal(39268,$vararg_buffer6);
   // unreachable;
  } else {
   STACKTOP = sp;return;
  }
 }
 $12 = (_IS_Get(12884)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = HEAP32[3649]|0;
 HEAP32[$vararg_buffer8>>2] = $0;
 $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
 HEAP32[$vararg_ptr11>>2] = $1;
 (_fprintf($14,39284,$vararg_buffer8)|0);
 (_vfprintf($14,$2,$3)|0);
 (_fputc(10,$14)|0);
 $15 = HEAP32[11473]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $$idx = ((($15)) + 4|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $$idx7$val = HEAP32[$15>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $$idx$val;
  $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $$idx7$val;
  _Print($14,1,39191,$vararg_buffer12);
 }
 $17 = HEAP32[11511]|0;
 $18 = (($17) + 1)|0;
 HEAP32[11511] = $18;
 STACKTOP = sp;return;
}
function _PPWarning($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = (_GetCurrentFile()|0);
 $3 = (_GetCurrentLine()|0);
 _IntWarning($2,$3,$0,$1);
 STACKTOP = sp;return;
}
function _FindWarning($0) {
 $0 = $0|0;
 var $$05 = 0, $$07$lcssa = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strcmp(39302,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$07$lcssa = 0;
 } else {
  $5 = (_strcmp(39319,$0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $$07$lcssa = 1;
  } else {
   $7 = (_strcmp(39325,$0)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$07$lcssa = 2;
   } else {
    $9 = (_strcmp(39335,$0)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$07$lcssa = 3;
    } else {
     $11 = (_strcmp(39346,$0)|0);
     $12 = ($11|0)==(0);
     if ($12) {
      $$07$lcssa = 4;
     } else {
      $13 = (_strcmp(39359,$0)|0);
      $14 = ($13|0)==(0);
      if ($14) {
       $$07$lcssa = 5;
      } else {
       $15 = (_strcmp(39374,$0)|0);
       $16 = ($15|0)==(0);
       if ($16) {
        $$07$lcssa = 6;
       } else {
        $17 = (_strcmp(39387,$0)|0);
        $18 = ($17|0)==(0);
        if ($18) {
         $$07$lcssa = 7;
        } else {
         $19 = (_strcmp(39400,$0)|0);
         $20 = ($19|0)==(0);
         if ($20) {
          $$07$lcssa = 8;
         } else {
          $$05 = 0;
          return ($$05|0);
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $3 = (13244 + ($$07$lcssa<<3)|0);
 $4 = HEAP32[$3>>2]|0;
 $$05 = $4;
 return ($$05|0);
}
function _ListWarnings($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 39302;
 (_fprintf($0,39411,$vararg_buffer)|0);
 HEAP32[$vararg_buffer1>>2] = 39319;
 (_fprintf($0,39411,$vararg_buffer1)|0);
 HEAP32[$vararg_buffer4>>2] = 39325;
 (_fprintf($0,39411,$vararg_buffer4)|0);
 HEAP32[$vararg_buffer7>>2] = 39335;
 (_fprintf($0,39411,$vararg_buffer7)|0);
 HEAP32[$vararg_buffer10>>2] = 39346;
 (_fprintf($0,39411,$vararg_buffer10)|0);
 HEAP32[$vararg_buffer13>>2] = 39359;
 (_fprintf($0,39411,$vararg_buffer13)|0);
 HEAP32[$vararg_buffer16>>2] = 39374;
 (_fprintf($0,39411,$vararg_buffer16)|0);
 HEAP32[$vararg_buffer19>>2] = 39387;
 (_fprintf($0,39411,$vararg_buffer19)|0);
 HEAP32[$vararg_buffer22>>2] = 39400;
 (_fprintf($0,39411,$vararg_buffer22)|0);
 STACKTOP = sp;return;
}
function _ErrorReport() {
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[3678]|0;
 $1 = HEAP32[11510]|0;
 $2 = HEAP32[11511]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 _Print($0,1,39415,$vararg_buffer);
 STACKTOP = sp;return;
}
function _SB_SkipWhite($0) {
 $0 = $0|0;
 var $$pre = 0, $$pre2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = ((($0)) + 4|0);
 $$pre = HEAP32[$1>>2]|0;
 $$pre2 = HEAP32[$2>>2]|0;
 $3 = $$pre;$5 = $$pre2;
 while(1) {
  $4 = ($3>>>0)<($5>>>0);
  if ($4) {
   $6 = HEAP32[$0>>2]|0;
   $7 = (($6) + ($3)|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8;
  } else {
   $9 = 0;
  }
  $10 = (_IsBlank($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
  $12 = HEAP32[$1>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if (!($14)) {
   $3 = $12;$5 = $13;
   continue;
  }
  $15 = (($12) + 1)|0;
  HEAP32[$1>>2] = $15;
  $3 = $15;$5 = $13;
 }
 return;
}
function _SB_GetSym($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$016 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0|0);
 $$ = $3 ? 47049 : $2;
 $4 = ((($1)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($1)) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($0)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if ($10) {
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + ($7)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13;
 } else {
  $14 = 0;
 }
 $15 = (_IsIdent($14)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $$016 = 0;
  return ($$016|0);
 }
 $17 = HEAP32[$6>>2]|0;
 $18 = HEAP32[$8>>2]|0;
 $19 = ($17>>>0)<($18>>>0);
 if ($19) {
  $20 = HEAP32[$0>>2]|0;
  $21 = (($20) + ($17)|0);
  $22 = HEAP8[$21>>0]|0;
  $$0 = $22;
 } else {
  $$0 = 0;
 }
 while(1) {
  $23 = $$0 << 24 >> 24;
  _SB_AppendChar($1,$23);
  $24 = HEAP32[$6>>2]|0;
  $25 = HEAP32[$8>>2]|0;
  $26 = ($24>>>0)<($25>>>0);
  if ($26) {
   $27 = (($24) + 1)|0;
   HEAP32[$6>>2] = $27;
   $28 = $27;
  } else {
   $28 = $24;
  }
  $29 = ($28>>>0)<($25>>>0);
  if ($29) {
   $30 = HEAP32[$0>>2]|0;
   $31 = (($30) + ($28)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32;
  } else {
   $33 = 0;
  }
  $34 = (_IsIdent($33)|0);
  $35 = ($34|0)==(0);
  if (!($35)) {
   $$0 = $33;
   continue;
  }
  $36 = (_IsDigit($33)|0);
  $37 = ($36|0)==(0);
  if (!($37)) {
   $$0 = $33;
   continue;
  }
  $38 = ($33<<24>>24)==(0);
  if ($38) {
   break;
  }
  $39 = $33 << 24 >> 24;
  $40 = (_strchr($$,$39)|0);
  $41 = ($40|0)==(0|0);
  if ($41) {
   break;
  } else {
   $$0 = $33;
  }
 }
 _SB_Terminate($1);
 $$016 = 1;
 return ($$016|0);
}
function _SB_GetString($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $$pre18 = 0, $$pre19 = 0, $$pre2$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = ((($1)) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($1)) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)<($7>>>0);
 if ($8) {
  $9 = HEAP32[$0>>2]|0;
  $10 = (($9) + ($5)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = ($11<<24>>24)==(34);
  if ($12) {
   $15 = $5;$17 = $7;$44 = $9;
   while(1) {
    $16 = ($15>>>0)<($17>>>0);
    if ($16) {
     $18 = (($15) + 1)|0;
     HEAP32[$4>>2] = $18;
     $19 = $18;
    } else {
     $19 = $15;
    }
    $20 = ($19>>>0)<($17>>>0);
    L8: do {
     if ($20) {
      $22 = $44;$23 = $19;$45 = $17;
      while(1) {
       $21 = (($22) + ($23)|0);
       $24 = HEAP8[$21>>0]|0;
       switch ($24<<24>>24) {
       case 34:  {
        $$pre2$i = $45;$29 = $23;
        break L8;
        break;
       }
       case 0:  {
        label = 9;
        break L8;
        break;
       }
       default: {
       }
       }
       $25 = (_ParseChar_2386($0)|0);
       _SB_AppendChar($1,$25);
       $26 = HEAP32[$4>>2]|0;
       $27 = HEAP32[$6>>2]|0;
       $28 = ($26>>>0)<($27>>>0);
       if (!($28)) {
        label = 9;
        break L8;
       }
       $$pre17 = HEAP32[$0>>2]|0;
       $22 = $$pre17;$23 = $26;$45 = $27;
      }
     } else {
      label = 9;
     }
    } while(0);
    if ((label|0) == 9) {
     label = 0;
     _Error(39439,$vararg_buffer);
     $$pre18 = HEAP32[$4>>2]|0;
     $$pre19 = HEAP32[$6>>2]|0;
     $$pre2$i = $$pre19;$29 = $$pre18;
    }
    $30 = ($29>>>0)<($$pre2$i>>>0);
    if ($30) {
     $31 = (($29) + 1)|0;
     HEAP32[$4>>2] = $31;
     $32 = $31;$34 = $$pre2$i;
    } else {
     $32 = $29;$34 = $$pre2$i;
    }
    while(1) {
     $33 = ($32>>>0)<($34>>>0);
     if ($33) {
      $35 = HEAP32[$0>>2]|0;
      $36 = (($35) + ($32)|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = $37;
     } else {
      $38 = 0;
     }
     $39 = (_IsBlank($38)|0);
     $40 = ($39|0)==(0);
     $13 = HEAP32[$4>>2]|0;
     $41 = HEAP32[$6>>2]|0;
     $42 = ($13>>>0)<($41>>>0);
     if ($40) {
      break;
     }
     $43 = (($13) + 1)|0;
     if (!($42)) {
      $32 = $13;$34 = $41;
      continue;
     }
     HEAP32[$4>>2] = $43;
     $32 = $43;$34 = $41;
    }
    if (!($42)) {
     break;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$phi$trans$insert = (($$pre) + ($13)|0);
    $$pre16 = HEAP8[$$phi$trans$insert>>0]|0;
    $14 = ($$pre16<<24>>24)==(34);
    if ($14) {
     $15 = $13;$17 = $41;$44 = $$pre;
    } else {
     break;
    }
   }
   _SB_Terminate($1);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _SB_Terminate($1);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _ParseChar_2386($0) {
 $0 = $0|0;
 var $$0 = 0, $$030$lcssa = 0, $$03051 = 0, $$03150 = 0, $$not = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 L1: do {
  if ($5) {
   $6 = (($2) + 1)|0;
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$0>>2]|0;
   $8 = (($7) + ($2)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($9<<24>>24)==(92);
   if ($11) {
    $12 = ($6>>>0)<($4>>>0);
    if ($12) {
     $13 = (($7) + ($6)|0);
     $14 = HEAP8[$13>>0]|0;
     $16 = $14;
    } else {
     $16 = 0;
    }
    $15 = $16 << 24 >> 24;
    do {
     switch ($15|0) {
     case 63:  {
      if (!($12)) {
       $$0 = 63;
       break L1;
      }
      $17 = (($2) + 2)|0;
      HEAP32[$1>>2] = $17;
      $$0 = 63;
      break L1;
      break;
     }
     case 97:  {
      if (!($12)) {
       $$0 = 7;
       break L1;
      }
      $18 = (($2) + 2)|0;
      HEAP32[$1>>2] = $18;
      $$0 = 7;
      break L1;
      break;
     }
     case 98:  {
      if (!($12)) {
       $$0 = 8;
       break L1;
      }
      $19 = (($2) + 2)|0;
      HEAP32[$1>>2] = $19;
      $$0 = 8;
      break L1;
      break;
     }
     case 102:  {
      if (!($12)) {
       $$0 = 12;
       break L1;
      }
      $20 = (($2) + 2)|0;
      HEAP32[$1>>2] = $20;
      $$0 = 12;
      break L1;
      break;
     }
     case 114:  {
      if (!($12)) {
       $$0 = 13;
       break L1;
      }
      $21 = (($2) + 2)|0;
      HEAP32[$1>>2] = $21;
      $$0 = 13;
      break L1;
      break;
     }
     case 110:  {
      if (!($12)) {
       $$0 = 10;
       break L1;
      }
      $22 = (($2) + 2)|0;
      HEAP32[$1>>2] = $22;
      $$0 = 10;
      break L1;
      break;
     }
     case 116:  {
      if (!($12)) {
       $$0 = 9;
       break L1;
      }
      $23 = (($2) + 2)|0;
      HEAP32[$1>>2] = $23;
      $$0 = 9;
      break L1;
      break;
     }
     case 118:  {
      if (!($12)) {
       $$0 = 11;
       break L1;
      }
      $24 = (($2) + 2)|0;
      HEAP32[$1>>2] = $24;
      $$0 = 11;
      break L1;
      break;
     }
     case 34:  {
      if (!($12)) {
       $$0 = 34;
       break L1;
      }
      $25 = (($2) + 2)|0;
      HEAP32[$1>>2] = $25;
      $$0 = 34;
      break L1;
      break;
     }
     case 39:  {
      if (!($12)) {
       $$0 = 39;
       break L1;
      }
      $26 = (($2) + 2)|0;
      HEAP32[$1>>2] = $26;
      $$0 = 39;
      break L1;
      break;
     }
     case 92:  {
      if (!($12)) {
       $$0 = 92;
       break L1;
      }
      $27 = (($2) + 2)|0;
      HEAP32[$1>>2] = $27;
      $$0 = 92;
      break L1;
      break;
     }
     case 88: case 120:  {
      if ($12) {
       $28 = (($2) + 2)|0;
       HEAP32[$1>>2] = $28;
       $29 = $28;
      } else {
       $29 = $6;
      }
      $30 = ($29>>>0)<($4>>>0);
      if ($30) {
       $31 = (($29) + 1)|0;
       HEAP32[$1>>2] = $31;
       $32 = (($7) + ($29)|0);
       $33 = HEAP8[$32>>0]|0;
       $35 = $33;
      } else {
       $35 = 0;
      }
      $34 = $35 << 24 >> 24;
      $36 = (_HexVal($34)|0);
      $37 = $36 << 4;
      $38 = HEAP32[$1>>2]|0;
      $39 = HEAP32[$3>>2]|0;
      $40 = ($38>>>0)<($39>>>0);
      if ($40) {
       $41 = (($38) + 1)|0;
       HEAP32[$1>>2] = $41;
       $42 = HEAP32[$0>>2]|0;
       $43 = (($42) + ($38)|0);
       $44 = HEAP8[$43>>0]|0;
       $46 = $44;
      } else {
       $46 = 0;
      }
      $45 = $46 << 24 >> 24;
      $47 = (_HexVal($45)|0);
      $48 = $47 | $37;
      $$0 = $48;
      break L1;
      break;
     }
     case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
      if ($12) {
       $49 = (($2) + 2)|0;
       HEAP32[$1>>2] = $49;
       $50 = (($7) + ($6)|0);
       $51 = HEAP8[$50>>0]|0;
       $53 = $51;$55 = $49;
      } else {
       $53 = 0;$55 = $6;
      }
      $52 = $53 << 24 >> 24;
      $54 = (($52) + -48)|0;
      $56 = ($55>>>0)<($4>>>0);
      L48: do {
       if ($56) {
        $$03051 = $54;$$03150 = 0;$58 = $55;
        while(1) {
         $57 = (($7) + ($58)|0);
         $59 = HEAP8[$57>>0]|0;
         $60 = ($59<<24>>24)>(47);
         if (!($60)) {
          $$030$lcssa = $$03051;
          break L48;
         }
         $61 = ($58>>>0)<($4>>>0);
         $$not = $61 ^ 1;
         $62 = ($59<<24>>24)<(56);
         $or$cond = $62 | $$not;
         if (!($or$cond)) {
          $$030$lcssa = $$03051;
          break L48;
         }
         $63 = (($$03150) + 1)|0;
         $64 = ($63>>>0)<(4);
         if (!($64)) {
          $$030$lcssa = $$03051;
          break L48;
         }
         $65 = $$03051 << 3;
         if ($61) {
          $66 = (($58) + 1)|0;
          HEAP32[$1>>2] = $66;
          $67 = HEAP8[$57>>0]|0;
          $69 = $67;$72 = $66;
         } else {
          $69 = 0;$72 = $58;
         }
         $68 = $69 << 24 >> 24;
         $70 = (($68) + -48)|0;
         $71 = $70 | $65;
         $73 = ($72>>>0)<($4>>>0);
         if ($73) {
          $$03051 = $71;$$03150 = $63;$58 = $72;
         } else {
          $$030$lcssa = $71;
          break;
         }
        }
       } else {
        $$030$lcssa = $54;
       }
      } while(0);
      $74 = ($$030$lcssa>>>0)>(256);
      if (!($74)) {
       $$0 = $$030$lcssa;
       break L1;
      }
      _Error(39464,$vararg_buffer);
      $$0 = 32;
      break L1;
      break;
     }
     default: {
      if ($12) {
       $75 = (($2) + 2)|0;
       HEAP32[$1>>2] = $75;
       $76 = (($7) + ($6)|0);
       $77 = HEAP8[$76>>0]|0;
       $79 = $77;
      } else {
       $79 = 0;
      }
      $78 = $79 << 24 >> 24;
      HEAP32[$vararg_buffer1>>2] = $78;
      _Error(39496,$vararg_buffer1);
      $$0 = 32;
      break L1;
     }
     }
    } while(0);
   } else {
    $$0 = $10;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _SB_GetNumber($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$048$ph = 0, $$049 = 0, $$1 = 0, $$pre = 0, $$pre68 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = (($7) + ($3)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(39);
   if (!($10)) {
    $23 = HEAP32[$0>>2]|0;
    $24 = (($23) + ($3)|0);
    $25 = HEAP8[$24>>0]|0;
    $27 = $25;
    break;
   }
   $11 = (($3) + 1)|0;
   HEAP32[$2>>2] = $11;
   $12 = (_ParseChar_2386($0)|0);
   $13 = (_TgtTranslateChar($12)|0);
   $14 = (_SignExtendChar($13)|0);
   HEAP32[$1>>2] = $14;
   $15 = HEAP32[$2>>2]|0;
   $16 = HEAP32[$4>>2]|0;
   $17 = ($15>>>0)<($16>>>0);
   if ($17) {
    $18 = HEAP32[$0>>2]|0;
    $19 = (($18) + ($15)|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = ($20<<24>>24)==(39);
    if ($21) {
     $22 = (($15) + 1)|0;
     HEAP32[$2>>2] = $22;
     $$0 = 1;
     STACKTOP = sp;return ($$0|0);
    }
   }
   _Error(39530,$vararg_buffer);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $27 = 0;
  }
 } while(0);
 $26 = $27 << 24 >> 24;
 switch ($26|0) {
 case 45:  {
  $$049 = -1;
  label = 10;
  break;
 }
 case 43:  {
  $$049 = 1;
  label = 10;
  break;
 }
 default: {
  $$1 = 1;$40 = $3;$42 = $5;
 }
 }
 if ((label|0) == 10) {
  $28 = (($3) + 1)|0;
  $29 = ($5>>>0)>($28>>>0);
  if ($29) {
   $30 = HEAP32[$0>>2]|0;
   $31 = (($30) + ($28)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32;
  } else {
   $33 = 0;
  }
  $34 = (_IsDigit($33)|0);
  $35 = ($34|0)==(0);
  if ($35) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $36 = HEAP32[$2>>2]|0;
  $37 = HEAP32[$4>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1)|0;
   HEAP32[$2>>2] = $39;
   $$1 = $$049;$40 = $39;$42 = $37;
  } else {
   $$1 = $$049;$40 = $36;$42 = $37;
  }
 }
 $41 = ($40>>>0)<($42>>>0);
 if ($41) {
  $43 = HEAP32[$0>>2]|0;
  $44 = (($43) + ($40)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45;
 } else {
  $46 = 0;
 }
 $47 = (_IsDigit($46)|0);
 $48 = ($47|0)==(0);
 if ($48) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = ($46<<24>>24)==(48);
 if ($49) {
  $50 = HEAP32[$2>>2]|0;
  $51 = HEAP32[$4>>2]|0;
  $52 = ($50>>>0)<($51>>>0);
  if ($52) {
   $53 = (($50) + 1)|0;
   HEAP32[$2>>2] = $53;
   $54 = $53;
  } else {
   $54 = $50;
  }
  $55 = ($54>>>0)<($51>>>0);
  if ($55) {
   $56 = HEAP32[$0>>2]|0;
   $57 = (($56) + ($54)|0);
   $58 = HEAP8[$57>>0]|0;
   $60 = $58;
  } else {
   $60 = 0;
  }
  $59 = $60 << 24 >> 24;
  $61 = (_tolower($59)|0);
  $62 = ($61|0)==(120);
  if ($62) {
   if ($55) {
    $63 = (($54) + 1)|0;
    HEAP32[$2>>2] = $63;
    $64 = $63;
   } else {
    $64 = $54;
   }
   $65 = ($64>>>0)<($51>>>0);
   if ($65) {
    $66 = HEAP32[$0>>2]|0;
    $67 = (($66) + ($64)|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68;
   } else {
    $69 = 0;
   }
   $70 = (_IsXDigit($69)|0);
   $71 = ($70|0)==(0);
   if ($71) {
    _Error(39543,$vararg_buffer1);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$048$ph = 16;
   }
  } else {
   $$048$ph = 8;
  }
 } else {
  $$048$ph = 10;
 }
 $$pre = HEAP32[$2>>2]|0;
 $$pre68 = HEAP32[$4>>2]|0;
 $72 = $$pre;$74 = $$pre68;
 while(1) {
  $73 = ($72>>>0)<($74>>>0);
  if ($73) {
   $75 = HEAP32[$0>>2]|0;
   $76 = (($75) + ($72)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77;
  } else {
   $78 = 0;
  }
  $79 = (_IsXDigit($78)|0);
  $80 = ($79|0)==(0);
  if ($80) {
   break;
  }
  $81 = $78 << 24 >> 24;
  $82 = (_HexVal($81)|0);
  $83 = ($82>>>0)<($$048$ph>>>0);
  if (!($83)) {
   break;
  }
  $84 = HEAP32[$1>>2]|0;
  $85 = Math_imul($84, $$048$ph)|0;
  $86 = (($85) + ($82))|0;
  HEAP32[$1>>2] = $86;
  $87 = HEAP32[$2>>2]|0;
  $88 = HEAP32[$4>>2]|0;
  $89 = ($87>>>0)<($88>>>0);
  if (!($89)) {
   $72 = $87;$74 = $88;
   continue;
  }
  $90 = (($87) + 1)|0;
  HEAP32[$2>>2] = $90;
  $72 = $90;$74 = $88;
 }
 $91 = HEAP32[$2>>2]|0;
 $92 = HEAP32[$4>>2]|0;
 $93 = ($91>>>0)<($92>>>0);
 L58: do {
  if ($93) {
   $94 = HEAP32[$0>>2]|0;
   $95 = (($94) + ($91)|0);
   $96 = HEAP8[$95>>0]|0;
   switch ($96<<24>>24) {
   case 85: case 117:  {
    $97 = (($91) + 1)|0;
    HEAP32[$2>>2] = $97;
    $98 = ($97>>>0)<($92>>>0);
    if (!($98)) {
     break L58;
    }
    $99 = (($94) + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    switch ($100<<24>>24) {
    case 76: case 108:  {
     break;
    }
    default: {
     break L58;
    }
    }
    $101 = (($91) + 2)|0;
    HEAP32[$2>>2] = $101;
    break L58;
    break;
   }
   case 76: case 108:  {
    $102 = (($91) + 1)|0;
    HEAP32[$2>>2] = $102;
    $103 = ($102>>>0)<($92>>>0);
    if (!($103)) {
     break L58;
    }
    $104 = (($94) + ($102)|0);
    $105 = HEAP8[$104>>0]|0;
    switch ($105<<24>>24) {
    case 85: case 117:  {
     break;
    }
    default: {
     break L58;
    }
    }
    $106 = (($91) + 2)|0;
    HEAP32[$2>>2] = $106;
    break L58;
    break;
   }
   default: {
    break L58;
   }
   }
  }
 } while(0);
 $107 = HEAP32[$1>>2]|0;
 $108 = Math_imul($107, $$1)|0;
 HEAP32[$1>>2] = $108;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _DefaultCheckFailed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 _AbEnd(39626,$vararg_buffer);
 // unreachable;
}
function _AbEnd($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $1 = sp + 8|0;
 $2 = HEAP32[3649]|0;
 $3 = HEAP32[11515]|0;
 HEAP32[$vararg_buffer>>2] = $3;
 (_fprintf($2,39651,$vararg_buffer)|0);
 HEAP32[$1>>2] = $varargs;
 (_vfprintf($2,$0,$1)|0);
 (_fputc(10,$2)|0);
 _exit(1);
 // unreachable;
}
function _Print($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = HEAP8[47050]|0;
 $5 = $4&255;
 $6 = ($5>>>0)<($1>>>0);
 if ($6) {
  STACKTOP = sp;return;
 }
 HEAP32[$3>>2] = $varargs;
 (_vfprintf($0,$2,$3)|0);
 STACKTOP = sp;return;
}
function _FindTarget($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_bsearch($0,13332,30,16,11)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = -1;
  return ($5|0);
 }
 $3 = ((($1)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 return ($5|0);
}
function _Compare_2417($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strcmp($0,$1)|0);
 return ($2|0);
}
function _GetTargetProperties($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(29);
 if ($1) {
  $4 = (13812 + (($0*24)|0)|0);
  return ($4|0);
 } else {
  $2 = HEAP32[3332]|0;
  $3 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$2 & 1]($3,39656,39690,250);
  // unreachable;
 }
 return (0)|0;
}
function _NewSearchPath() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_NewCollection()|0);
 return ($0|0);
}
function _AddSearchPath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = (_strlen($1)|0);
 $4 = ($3|0)==(0);
 L4: do {
  if ($4) {
   $$0$i$i = 0;
  } else {
   $5 = (($3) + -1)|0;
   $6 = (($1) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   switch ($7<<24>>24) {
   case 47: case 92:  {
    break;
   }
   default: {
    $$0$i$i = $3;
    break L4;
   }
   }
   $$0$i$i = $5;
  }
 } while(0);
 $8 = (($$0$i$i) + 1)|0;
 $9 = (_xmalloc($8)|0);
 _memcpy(($9|0),($1|0),($$0$i$i|0))|0;
 $10 = (($9) + ($$0$i$i)|0);
 HEAP8[$10>>0] = 0;
 $11 = HEAP32[$0>>2]|0;
 _CollInsert($0,$9,$11);
 return;
}
function _AddSearchPathFromEnv($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_getenv(($1|0))|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = (_strlen($2)|0);
 $5 = ($4|0)==(0);
 L4: do {
  if ($5) {
   $$0$i$i$i = 0;
  } else {
   $6 = (($4) + -1)|0;
   $7 = (($2) + ($6)|0);
   $8 = HEAP8[$7>>0]|0;
   switch ($8<<24>>24) {
   case 47: case 92:  {
    break;
   }
   default: {
    $$0$i$i$i = $4;
    break L4;
   }
   }
   $$0$i$i$i = $6;
  }
 } while(0);
 $9 = (($$0$i$i$i) + 1)|0;
 $10 = (_xmalloc($9)|0);
 _memcpy(($10|0),($2|0),($$0$i$i$i|0))|0;
 $11 = (($10) + ($$0$i$i$i)|0);
 HEAP8[$11>>0] = 0;
 $12 = HEAP32[$0>>2]|0;
 _CollInsert($0,$10,$12);
 return;
}
function _AddSubSearchPathFromEnv($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i$i = 0, $$idx = 0, $$idx$val = 0, $$idx10$val = 0, $$idx8$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
 $4 = (_getenv(($1|0))|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (_strlen($4)|0);
 _SB_CopyBuf($3,$4,$6);
 $$idx = ((($3)) + 4|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $7 = ($$idx$val|0)==(0);
 L4: do {
  if (!($7)) {
   $$idx8$val = HEAP32[$3>>2]|0;
   $8 = (($$idx$val) + -1)|0;
   $9 = (($$idx8$val) + ($8)|0);
   $10 = HEAP8[$9>>0]|0;
   switch ($10<<24>>24) {
   case 47: case 92:  {
    break L4;
    break;
   }
   default: {
   }
   }
   _SB_AppendChar($3,47);
  }
 } while(0);
 $11 = (_strlen($2)|0);
 _SB_AppendBuf($3,$2,$11);
 _SB_Terminate($3);
 $$idx10$val = HEAP32[$3>>2]|0;
 $12 = ($$idx10$val|0)==(0|0);
 if (!($12)) {
  $13 = (_strlen($$idx10$val)|0);
  $14 = ($13|0)==(0);
  L10: do {
   if ($14) {
    $$0$i$i$i = 0;
   } else {
    $15 = (($13) + -1)|0;
    $16 = (($$idx10$val) + ($15)|0);
    $17 = HEAP8[$16>>0]|0;
    switch ($17<<24>>24) {
    case 47: case 92:  {
     break;
    }
    default: {
     $$0$i$i$i = $13;
     break L10;
    }
    }
    $$0$i$i$i = $15;
   }
  } while(0);
  $18 = (($$0$i$i$i) + 1)|0;
  $19 = (_xmalloc($18)|0);
  _memcpy(($19|0),($$idx10$val|0),($$0$i$i$i|0))|0;
  $20 = (($19) + ($$0$i$i$i)|0);
  HEAP8[$20>>0] = 0;
  $21 = HEAP32[$0>>2]|0;
  _CollInsert($0,$19,$21);
 }
 _SB_Done($3);
 STACKTOP = sp;return;
}
function _AddSubSearchPathFromWinBin($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _PushSearchPath($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$idx$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0$i = 0;
  } else {
   $4 = (($2) + -1)|0;
   $5 = (($1) + ($4)|0);
   $6 = HEAP8[$5>>0]|0;
   switch ($6<<24>>24) {
   case 47: case 92:  {
    break;
   }
   default: {
    $$0$i = $2;
    break L1;
   }
   }
   $$0$i = $4;
  }
 } while(0);
 $7 = (($$0$i) + 1)|0;
 $8 = (_xmalloc($7)|0);
 _memcpy(($8|0),($1|0),($$0$i|0))|0;
 $9 = (($8) + ($$0$i)|0);
 HEAP8[$9>>0] = 0;
 $$idx$val = HEAP32[$0>>2]|0;
 $10 = ($$idx$val|0)==(0);
 if (!($10)) {
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (_strcmp($13,$8)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   _xfree($8);
   $$0 = 0;
   return ($$0|0);
  }
 }
 _CollInsert($0,$8,0);
 $$0 = 1;
 return ($$0|0);
}
function _PopSearchPath($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,40922,40950,129);
  // unreachable;
 } else {
  $5 = ((($0)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  _xfree($7);
  _CollDelete($0,0);
  return;
 }
}
function _SearchFile($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$014 = 0, $$09 = 0, $$idx = 0, $$idx$val = 0, $$idx10$val = 0, $$idx10$val13 = 0, $$idx11$val = 0, $$idx12$val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $$idx10$val13 = HEAP32[$0>>2]|0;
 $3 = ($$idx10$val13|0)==(0);
 if ($3) {
  $$09 = 0;
  _SB_Done($2);
  STACKTOP = sp;return ($$09|0);
 }
 $4 = ((($0)) + 8|0);
 $$idx = ((($2)) + 4|0);
 $$014 = 0;$7 = $$idx10$val13;
 while(1) {
  $8 = ($7>>>0)>($$014>>>0);
  if (!($8)) {
   label = 5;
   break;
  }
  $11 = HEAP32[$4>>2]|0;
  $12 = (($11) + ($$014<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_strlen($13)|0);
  _SB_CopyBuf($2,$13,$14);
  $$idx$val = HEAP32[$$idx>>2]|0;
  $15 = ($$idx$val|0)==(0);
  if (!($15)) {
   _SB_AppendChar($2,47);
  }
  $16 = (_strlen($1)|0);
  _SB_AppendBuf($2,$1,$16);
  _SB_Terminate($2);
  $$idx12$val = HEAP32[$2>>2]|0;
  $17 = (_access($$idx12$val,0)|0);
  $18 = ($17|0)==(0);
  $5 = (($$014) + 1)|0;
  if ($18) {
   label = 9;
   break;
  }
  $$idx10$val = HEAP32[$0>>2]|0;
  $6 = ($5>>>0)<($$idx10$val>>>0);
  if ($6) {
   $$014 = $5;$7 = $$idx10$val;
  } else {
   $$09 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 5) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40922,40950,155);
  // unreachable;
 }
 else if ((label|0) == 9) {
  $$idx11$val = HEAP32[$2>>2]|0;
  $19 = (_xstrdup($$idx11$val)|0);
  $$09 = $19;
  _SB_Done($2);
  STACKTOP = sp;return ($$09|0);
 }
 else if ((label|0) == 10) {
  _SB_Done($2);
  STACKTOP = sp;return ($$09|0);
 }
 return (0)|0;
}
function _InitCmdLine($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0$i = 0, $$0$lcssa$i = 0, $$016$i = 0, $$034 = 0, $$sroa$0$0$lcssa = 0, $$sroa$0$033 = 0, $$sroa$0$1 = 0, $$sroa$0$2 = 0, $$sroa$0$3 = 0, $$sroa$0$4 = 0, $$sroa$0$5 = 0, $$sroa$0$6 = 0, $$sroa$12$0$lcssa = 0, $$sroa$12$032 = 0, $$sroa$12$1 = 0, $$sroa$12$2 = 0, $$sroa$12$3 = 0, $$sroa$12$4 = 0, $$sroa$22$031 = 0;
 var $$sroa$22$1 = 0, $$sroa$22$2 = 0, $$sroa$22$3 = 0, $$sroa$22$4 = 0, $$sroa$22$5 = 0, $$sroa$22$6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $storemerge = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $storemerge = $2;
 } else {
  $7 = (_FindName($5)|0);
  HEAP32[11515] = $7;
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  $$ = $9 ? $2 : $7;
  $storemerge = $$;
 }
 HEAP32[11515] = $storemerge;
 $10 = (_xmalloc(32)|0);
 $11 = $10;
 $12 = HEAP32[$0>>2]|0;
 $13 = ($12|0)<(0);
 if ($13) {
  $$sroa$0$0$lcssa = $11;$$sroa$12$0$lcssa = 0;
  $70 = (($$sroa$12$0$lcssa) + -1)|0;
  HEAP32[11514] = $70;
  HEAP32[11513] = $$sroa$0$0$lcssa;
  HEAP32[$0>>2] = $70;
  HEAP32[$1>>2] = $$sroa$0$0$lcssa;
  STACKTOP = sp;return;
 }
 $$034 = 0;$$sroa$0$033 = $11;$$sroa$12$032 = 0;$$sroa$22$031 = 8;
 while(1) {
  $14 = HEAP32[$1>>2]|0;
  $15 = (($14) + ($$034<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   label = 22;
  } else {
   $18 = HEAP8[$16>>0]|0;
   $19 = ($18<<24>>24)==(64);
   if ($19) {
    $20 = ((($16)) + 1|0);
    $21 = (_fopen($20,40730)|0);
    $22 = ($21|0)==(0|0);
    if ($22) {
     label = 9;
     break;
    }
    $23 = (_fgets($3,256,$21)|0);
    $24 = ($23|0)==(0|0);
    if ($24) {
     $$sroa$0$4 = $$sroa$0$033;$$sroa$12$3 = $$sroa$12$032;$$sroa$22$4 = $$sroa$22$031;
    } else {
     $$sroa$0$1 = $$sroa$0$033;$$sroa$12$1 = $$sroa$12$032;$$sroa$22$1 = $$sroa$22$031;
     while(1) {
      $28 = (_strlen($3)|0);
      $$0$i = $28;
      while(1) {
       $29 = ($$0$i|0)==(0);
       if ($29) {
        $$0$lcssa$i = 0;
        break;
       }
       $30 = (($$0$i) + -1)|0;
       $31 = (($3) + ($30)|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = (_IsSpace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        $$0$lcssa$i = $$0$i;
        break;
       } else {
        $$0$i = $30;
       }
      }
      $35 = (($3) + ($$0$lcssa$i)|0);
      HEAP8[$35>>0] = 0;
      $$016$i = $3;
      while(1) {
       $36 = HEAP8[$$016$i>>0]|0;
       $37 = (_IsSpace($36)|0);
       $38 = ($37|0)==(0);
       $39 = ((($$016$i)) + 1|0);
       if ($38) {
        break;
       } else {
        $$016$i = $39;
       }
      }
      $40 = HEAP8[$$016$i>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if ($41) {
       $$sroa$0$2 = $$sroa$0$1;$$sroa$12$2 = $$sroa$12$1;$$sroa$22$2 = $$sroa$22$1;
      } else {
       $44 = (_xstrdup($$016$i)|0);
       $45 = ($$sroa$22$1>>>0)>($$sroa$12$1>>>0);
       if ($45) {
        $46 = $$sroa$0$1;
        $$sroa$0$3 = $$sroa$0$1;$$sroa$22$3 = $$sroa$22$1;$55 = $46;
       } else {
        $47 = $$sroa$22$1 << 1;
        $48 = $$sroa$22$1 << 3;
        $49 = (_xmalloc($48)|0);
        $50 = $$sroa$0$1;
        $51 = $$sroa$12$1 << 2;
        _memcpy(($49|0),($50|0),($51|0))|0;
        _xfree($50);
        $52 = $49;
        $$sroa$0$3 = $52;$$sroa$22$3 = $47;$55 = $49;
       }
       $53 = (($$sroa$12$1) + 1)|0;
       $54 = (($55) + ($$sroa$12$1<<2)|0);
       HEAP32[$54>>2] = $44;
       $$sroa$0$2 = $$sroa$0$3;$$sroa$12$2 = $53;$$sroa$22$2 = $$sroa$22$3;
      }
      $42 = (_fgets($3,256,$21)|0);
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$sroa$0$4 = $$sroa$0$2;$$sroa$12$3 = $$sroa$12$2;$$sroa$22$4 = $$sroa$22$2;
       break;
      } else {
       $$sroa$0$1 = $$sroa$0$2;$$sroa$12$1 = $$sroa$12$2;$$sroa$22$1 = $$sroa$22$2;
      }
     }
    }
    (_fclose($21)|0);
    $$sroa$0$6 = $$sroa$0$4;$$sroa$12$4 = $$sroa$12$3;$$sroa$22$6 = $$sroa$22$4;
   } else {
    label = 22;
   }
  }
  if ((label|0) == 22) {
   label = 0;
   $56 = ($$sroa$22$031>>>0)>($$sroa$12$032>>>0);
   if ($56) {
    $57 = $$sroa$0$033;
    $$sroa$0$5 = $$sroa$0$033;$$sroa$22$5 = $$sroa$22$031;$66 = $57;
   } else {
    $58 = $$sroa$22$031 << 1;
    $59 = $$sroa$22$031 << 3;
    $60 = (_xmalloc($59)|0);
    $61 = $$sroa$0$033;
    $62 = $$sroa$12$032 << 2;
    _memcpy(($60|0),($61|0),($62|0))|0;
    _xfree($61);
    $63 = $60;
    $$sroa$0$5 = $63;$$sroa$22$5 = $58;$66 = $60;
   }
   $64 = (($$sroa$12$032) + 1)|0;
   $65 = (($66) + ($$sroa$12$032<<2)|0);
   HEAP32[$65>>2] = $16;
   $$sroa$0$6 = $$sroa$0$5;$$sroa$12$4 = $64;$$sroa$22$6 = $$sroa$22$5;
  }
  $67 = (($$034) + 1)|0;
  $68 = HEAP32[$0>>2]|0;
  $69 = ($$034|0)<($68|0);
  if ($69) {
   $$034 = $67;$$sroa$0$033 = $$sroa$0$6;$$sroa$12$032 = $$sroa$12$4;$$sroa$22$031 = $$sroa$22$6;
  } else {
   $$sroa$0$0$lcssa = $$sroa$0$6;$$sroa$12$0$lcssa = $$sroa$12$4;
   label = 27;
   break;
  }
 }
 if ((label|0) == 9) {
  $25 = (___errno_location()|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_strerror($26)|0);
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $27;
  _AbEnd(40732,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 27) {
  $70 = (($$sroa$12$0$lcssa) + -1)|0;
  HEAP32[11514] = $70;
  HEAP32[11513] = $$sroa$0$0$lcssa;
  HEAP32[$0>>2] = $70;
  HEAP32[$1>>2] = $$sroa$0$0$lcssa;
  STACKTOP = sp;return;
 }
}
function _UnknownOption($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 _AbEnd(40753,$vararg_buffer);
 // unreachable;
}
function _NeedArg($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 _AbEnd(40772,$vararg_buffer);
 // unreachable;
}
function _InvArg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 _AbEnd(40804,$vararg_buffer);
 // unreachable;
}
function _InvDef($0) {
 $0 = $0|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 _AbEnd(40834,$vararg_buffer);
 // unreachable;
}
function _GetArg($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[11513]|0;
 $4 = (($3) + ($2<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($1)|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $$0 = $6;
  return ($$0|0);
 }
 $9 = (($2) + 1)|0;
 $10 = (($3) + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  _NeedArg($5);
  // unreachable;
 }
 HEAP32[$0>>2] = $9;
 $$0 = $11;
 return ($$0|0);
}
function _LongOption($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01719 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[11513]|0;
 $5 = (($4) + ($3<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($2|0)==(0);
 if ($7) {
  _UnknownOption($6);
  // unreachable;
 } else {
  $$01719 = $2;$$020 = $1;
 }
 while(1) {
  $8 = HEAP32[$$020>>2]|0;
  $9 = (_strcmp($6,$8)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   break;
  }
  $22 = (($$01719) + -1)|0;
  $23 = ((($$020)) + 12|0);
  $24 = ($22|0)==(0);
  if ($24) {
   label = 10;
   break;
  } else {
   $$01719 = $22;$$020 = $23;
  }
 }
 if ((label|0) == 10) {
  _UnknownOption($6);
  // unreachable;
 }
 $11 = ((($$020)) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $20 = ((($$020)) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$21 & 63]($6,0);
  return;
 }
 $14 = (($3) + 1)|0;
 HEAP32[$0>>2] = $14;
 $15 = (($4) + ($14<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  _NeedArg($6);
  // unreachable;
 }
 $18 = ((($$020)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 FUNCTION_TABLE_vii[$19 & 63]($6,$16);
 return;
}
function _SS_Get($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,41834,40859,52);
  // unreachable;
 } else {
  $5 = (($1) + -1)|0;
  $6 = (((($0)) + 4|0) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  return ($7|0);
 }
 return (0)|0;
}
function _SS_Set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,41834,40859,61);
  // unreachable;
 } else {
  $6 = (($2) + -1)|0;
  $7 = (((($0)) + 4|0) + ($6<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  _xfree($8);
  $9 = (_xstrdup($1)|0);
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + -1)|0;
  $12 = (((($0)) + 4|0) + ($11<<2)|0);
  HEAP32[$12>>2] = $9;
  return;
 }
}
function _SS_Drop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>(1);
 if ($2) {
  $5 = (($1) + -1)|0;
  HEAP32[$0>>2] = $5;
  $6 = (((($0)) + 4|0) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  _xfree($7);
  return;
 } else {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,40877,40859,71);
  // unreachable;
 }
}
function _SS_Push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)<(8);
 if ($3) {
  $6 = (_xstrdup($1)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 1)|0;
  HEAP32[$0>>2] = $8;
  $9 = (((($0)) + 4|0) + ($7<<2)|0);
  HEAP32[$9>>2] = $6;
  return;
 } else {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,41865,40859,80);
  // unreachable;
 }
}
function _HashStr($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$010 = 0, $$069 = 0, $$078 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $$0$lcssa = 0;
  return ($$0$lcssa|0);
 } else {
  $$010 = 0;$$069 = 0;$$078 = $0;$6 = $1;
 }
 while(1) {
  $3 = $$010 << 3;
  $4 = ((($$078)) + 1|0);
  $5 = $6&255;
  $7 = $5 ^ $3;
  $8 = (($$069) + 1)|0;
  $9 = (($7) + ($$069))|0;
  $10 = HEAP8[$4>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$0$lcssa = $9;
   break;
  } else {
   $$010 = $9;$$069 = $8;$$078 = $4;$6 = $10;
  }
 }
 return ($$0$lcssa|0);
}
function _InitCollection($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function _DoneCollection($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _xfree($2);
 return;
}
function _NewCollection() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xmalloc(12)|0);
 HEAP32[$0>>2] = 0;
 $1 = ((($0)) + 4|0);
 HEAP32[$1>>2] = 0;
 $2 = ((($0)) + 8|0);
 HEAP32[$2>>2] = 0;
 return ($0|0);
}
function _FreeCollection($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _xfree($2);
 _xfree($0);
 return;
}
function _CollInsert($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$pre = 0, $$pre18 = 0, $$pre19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3>>>0)<($2>>>0);
 if ($4) {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,40890,40908,138);
  // unreachable;
 }
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($3>>>0)<($8>>>0);
 if ($9) {
  $20 = $3;
 } else {
  $10 = ($8|0)==(0);
  $11 = $8 << 1;
  $$ = $10 ? 4 : $11;
  $12 = ($8>>>0)<($$>>>0);
  if ($12) {
   HEAP32[$7>>2] = $$;
   $13 = $$ << 2;
   $14 = (_xmalloc($13)|0);
   $15 = ((($0)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = HEAP32[$0>>2]|0;
   $18 = $17 << 2;
   _memcpy(($14|0),($16|0),($18|0))|0;
   $19 = HEAP32[$15>>2]|0;
   _xfree($19);
   HEAP32[$15>>2] = $14;
   $$pre = HEAP32[$0>>2]|0;
   $20 = $$pre;
  } else {
   $20 = $3;
  }
 }
 $21 = ($20|0)==($2|0);
 $$pre19 = ((($0)) + 8|0);
 if ($21) {
  $28 = $2;
  $27 = (($28) + 1)|0;
  HEAP32[$0>>2] = $27;
  $29 = HEAP32[$$pre19>>2]|0;
  $30 = (($29) + ($2<<2)|0);
  HEAP32[$30>>2] = $1;
  return;
 }
 $22 = HEAP32[$$pre19>>2]|0;
 $23 = (($22) + ($2<<2)|0);
 $24 = ((($23)) + 4|0);
 $25 = (($20) - ($2))|0;
 $26 = $25 << 2;
 _memmove(($24|0),($23|0),($26|0))|0;
 $$pre18 = HEAP32[$0>>2]|0;
 $28 = $$pre18;
 $27 = (($28) + 1)|0;
 HEAP32[$0>>2] = $27;
 $29 = HEAP32[$$pre19>>2]|0;
 $30 = (($29) + ($2<<2)|0);
 HEAP32[$30>>2] = $1;
 return;
}
function _CollIndex($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07 = 0, $$08 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $$07 = -1;
  return ($$07|0);
 }
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $$08 = 0;
 while(1) {
  $6 = (($5) + ($$08<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==($1|0);
  if ($8) {
   $$07 = $$08;
   label = 5;
   break;
  }
  $9 = (($$08) + 1)|0;
  $10 = ($9>>>0)<($2>>>0);
  if ($10) {
   $$08 = $9;
  } else {
   $$07 = -1;
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  return ($$07|0);
 }
 return (0)|0;
}
function _CollDelete($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)>($1>>>0);
 if ($3) {
  $6 = (($2) + -1)|0;
  HEAP32[$0>>2] = $6;
  $7 = ((($0)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($1<<2)|0);
  $10 = ((($9)) + 4|0);
  $11 = (($6) - ($1))|0;
  $12 = $11 << 2;
  _memmove(($9|0),($10|0),($12|0))|0;
  return;
 } else {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,40922,40908,268);
  // unreachable;
 }
}
function _CollDeleteItem($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$08$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 L1: do {
  if (!($3)) {
   $4 = ((($0)) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $$08$i = 0;
   while(1) {
    $6 = (($5) + ($$08$i<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==($1|0);
    if ($8) {
     break;
    }
    $9 = (($$08$i) + 1)|0;
    $10 = ($9>>>0)<($2>>>0);
    if ($10) {
     $$08$i = $9;
    } else {
     break L1;
    }
   }
   $11 = ($$08$i|0)>(-1);
   if ($11) {
    $14 = (($2) + -1)|0;
    HEAP32[$0>>2] = $14;
    $15 = ((($6)) + 4|0);
    $16 = (($14) - ($$08$i))|0;
    $17 = $16 << 2;
    _memmove(($6|0),($15|0),($17|0))|0;
    return;
   }
  }
 } while(0);
 $12 = HEAP32[3332]|0;
 $13 = HEAP32[3331]|0;
 FUNCTION_TABLE_viiii[$12 & 1]($13,40939,40908,284);
 // unreachable;
}
function _CollMove($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$i = 0, $$pre$i = 0, $$pre18$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3>>>0)>($1>>>0);
 if (!($4)) {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,40922,40950,129);
  // unreachable;
 }
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($1<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($3) + -1)|0;
 HEAP32[$0>>2] = $11;
 $12 = ((($9)) + 4|0);
 $13 = (($11) - ($1))|0;
 $14 = $13 << 2;
 _memmove(($9|0),($12|0),($14|0))|0;
 $15 = ($2>>>0)>($1>>>0);
 $16 = $15 << 31 >> 31;
 $$ = (($16) + ($2))|0;
 $17 = HEAP32[$0>>2]|0;
 $18 = ($17>>>0)<($$>>>0);
 if ($18) {
  $19 = HEAP32[3332]|0;
  $20 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$19 & 1]($20,40890,40908,138);
  // unreachable;
 }
 $21 = ((($0)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($17>>>0)<($22>>>0);
 if ($23) {
  $33 = $17;
 } else {
  $24 = ($22|0)==(0);
  $25 = $22 << 1;
  $$$i = $24 ? 4 : $25;
  $26 = ($22>>>0)<($$$i>>>0);
  if ($26) {
   HEAP32[$21>>2] = $$$i;
   $27 = $$$i << 2;
   $28 = (_xmalloc($27)|0);
   $29 = HEAP32[$7>>2]|0;
   $30 = HEAP32[$0>>2]|0;
   $31 = $30 << 2;
   _memcpy(($28|0),($29|0),($31|0))|0;
   $32 = HEAP32[$7>>2]|0;
   _xfree($32);
   HEAP32[$7>>2] = $28;
   $$pre$i = HEAP32[$0>>2]|0;
   $33 = $$pre$i;
  } else {
   $33 = $17;
  }
 }
 $34 = ($33|0)==($$|0);
 if ($34) {
  $41 = $$;
  $40 = (($41) + 1)|0;
  HEAP32[$0>>2] = $40;
  $42 = HEAP32[$7>>2]|0;
  $43 = (($42) + ($$<<2)|0);
  HEAP32[$43>>2] = $10;
  return;
 }
 $35 = HEAP32[$7>>2]|0;
 $36 = (($35) + ($$<<2)|0);
 $37 = ((($36)) + 4|0);
 $38 = (($33) - ($$))|0;
 $39 = $38 << 2;
 _memmove(($37|0),($36|0),($39|0))|0;
 $$pre18$i = HEAP32[$0>>2]|0;
 $41 = $$pre18$i;
 $40 = (($41) + 1)|0;
 HEAP32[$0>>2] = $40;
 $42 = HEAP32[$7>>2]|0;
 $43 = (($42) + ($$<<2)|0);
 HEAP32[$43>>2] = $10;
 return;
}
function _CollMoveMultiple($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4>>>0)>($1>>>0);
 if (!($5)) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40964,40908,378);
  // unreachable;
 }
 $6 = (($2) + ($1))|0;
 $7 = ($6>>>0)>($4>>>0);
 $8 = ($4>>>0)<($3>>>0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,40964,40908,378);
  // unreachable;
 }
 $11 = ($2|0)==(0);
 $12 = ($1|0)==($3|0);
 $or$cond54 = $11 | $12;
 if ($or$cond54) {
  return;
 }
 $13 = $2 << 2;
 $14 = (_xmalloc($13)|0);
 $15 = ((($0)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + ($1<<2)|0);
 _memcpy(($14|0),($17|0),($13|0))|0;
 $18 = ($3>>>0)<($1>>>0);
 do {
  if ($18) {
   $19 = (($1) - ($3))|0;
   $20 = $19 << 2;
   $21 = HEAP32[$15>>2]|0;
   $22 = (($21) + ($3<<2)|0);
   $23 = (($22) + ($2<<2)|0);
   _memmove(($23|0),($22|0),($20|0))|0;
   $$0 = $3;
  } else {
   $24 = ($6>>>0)>($3>>>0);
   if ($24) {
    $25 = HEAP32[3332]|0;
    $26 = HEAP32[3329]|0;
    FUNCTION_TABLE_viiii[$25 & 1]($26,41032,40908,407);
    // unreachable;
   } else {
    $27 = (($3) - ($1))|0;
    $28 = (($27) - ($2))|0;
    $29 = $28 << 2;
    $30 = HEAP32[$15>>2]|0;
    $31 = (($30) + ($1<<2)|0);
    $32 = (($30) + ($3<<2)|0);
    $33 = (0 - ($28))|0;
    $34 = (($32) + ($33<<2)|0);
    _memmove(($31|0),($34|0),($29|0))|0;
    $35 = (($3) - ($2))|0;
    $$0 = $35;
    break;
   }
  }
 } while(0);
 $36 = HEAP32[$15>>2]|0;
 $37 = (($36) + ($$0<<2)|0);
 _memcpy(($37|0),($14|0),($13|0))|0;
 _xfree($14);
 return;
}
function _CollSort($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3>>>0)>(1);
 if (!($4)) {
  return;
 }
 $5 = (($3) + -1)|0;
 _QuickSort($0,0,$5,$1,$2);
 return;
}
function _QuickSort($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$ph93 = 0, $$072$ph92 = 0, $$074$be = 0, $$074$lcssa = 0, $$07488 = 0, $$076$be = 0, $$07687 = 0, $$090 = 0, $$17584 = 0, $$177$lcssa = 0, $$17781 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($2|0)>($1|0);
 if ($7) {
  $$0$ph93 = $1;$$072$ph92 = $2;
 } else {
  return;
 }
 L3: while(1) {
  $$090 = $$0$ph93;
  while(1) {
   $8 = ($$090|0)<($$072$ph92|0);
   if ($8) {
    $9 = (($$090) + 1)|0;
    $10 = (($6) + ($$090<<2)|0);
    $$07488 = $$072$ph92;$$07687 = $9;
    while(1) {
     $11 = ($$07687|0)>($$07488|0);
     L11: do {
      if ($11) {
       $$177$lcssa = $$07687;
      } else {
       $$17781 = $$07687;
       while(1) {
        $13 = HEAP32[$10>>2]|0;
        $14 = (($6) + ($$17781<<2)|0);
        $15 = HEAP32[$14>>2]|0;
        $16 = (FUNCTION_TABLE_iiii[$3 & 7]($4,$13,$15)|0);
        $17 = ($16|0)>(-1);
        if (!($17)) {
         $$177$lcssa = $$17781;
         break L11;
        }
        $18 = (($$17781) + 1)|0;
        $19 = ($$17781|0)<($$07488|0);
        if ($19) {
         $$17781 = $18;
        } else {
         $$177$lcssa = $18;
         break;
        }
       }
      }
     } while(0);
     $12 = ($$177$lcssa|0)>($$07488|0);
     L16: do {
      if ($12) {
       $$074$be = $$07488;$$076$be = $$177$lcssa;
      } else {
       $$17584 = $$07488;
       while(1) {
        $20 = HEAP32[$10>>2]|0;
        $21 = (($6) + ($$17584<<2)|0);
        $22 = HEAP32[$21>>2]|0;
        $23 = (FUNCTION_TABLE_iiii[$3 & 7]($4,$20,$22)|0);
        $24 = ($23|0)<(0);
        if (!($24)) {
         break;
        }
        $25 = (($$17584) + -1)|0;
        $26 = ($$177$lcssa|0)<($$17584|0);
        if ($26) {
         $$17584 = $25;
        } else {
         $$074$be = $25;$$076$be = $$177$lcssa;
         break L16;
        }
       }
       $27 = (($6) + ($$177$lcssa<<2)|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = HEAP32[$21>>2]|0;
       HEAP32[$27>>2] = $29;
       HEAP32[$21>>2] = $28;
       $30 = (($$177$lcssa) + 1)|0;
       $31 = (($$17584) + -1)|0;
       $$074$be = $31;$$076$be = $30;
      }
     } while(0);
     $32 = ($$076$be|0)>($$074$be|0);
     if ($32) {
      $$074$lcssa = $$074$be;
      break;
     } else {
      $$07488 = $$074$be;$$07687 = $$076$be;
     }
    }
   } else {
    $$074$lcssa = $$072$ph92;
   }
   $33 = ($$074$lcssa|0)==($$090|0);
   if (!($33)) {
    $34 = (($6) + ($$074$lcssa<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($6) + ($$090<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    HEAP32[$34>>2] = $37;
    HEAP32[$36>>2] = $35;
   }
   $38 = (($$090) + ($$072$ph92))|0;
   $39 = (($38|0) / 2)&-1;
   $40 = ($$074$lcssa|0)>($39|0);
   if ($40) {
    break;
   }
   $44 = (($$074$lcssa) + -1)|0;
   _QuickSort($0,$$090,$44,$3,$4);
   $45 = (($$074$lcssa) + 1)|0;
   $46 = ($$072$ph92|0)>($45|0);
   if ($46) {
    $$090 = $45;
   } else {
    label = 18;
    break L3;
   }
  }
  $41 = (($$074$lcssa) + 1)|0;
  _QuickSort($0,$41,$$072$ph92,$3,$4);
  $42 = (($$074$lcssa) + -1)|0;
  $43 = ($42|0)>($$090|0);
  if ($43) {
   $$0$ph93 = $$090;$$072$ph92 = $42;
  } else {
   label = 18;
   break;
  }
 }
 if ((label|0) == 18) {
  return;
 }
}
function _ValidSegName($0) {
 $0 = $0|0;
 var $$0 = 0, $$06 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(95);
 if ($2) {
  label = 3;
 } else {
  $3 = (_IsAlpha($1)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$06 = 0;
  } else {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $5 = (_strlen($0)|0);
   $6 = ($5>>>0)>(80);
   if ($6) {
    $$06 = 0;
   } else {
    $$0 = $0;
    L5: while(1) {
     $7 = ((($$0)) + 1|0);
     $8 = HEAP8[$7>>0]|0;
     switch ($8<<24>>24) {
     case 0:  {
      $$06 = 1;
      break L3;
      break;
     }
     case 95:  {
      $$0 = $7;
      continue L5;
      break;
     }
     default: {
     }
     }
     $9 = (_IsAlNum($8)|0);
     $10 = ($9|0)==(0);
     if ($10) {
      $$06 = 0;
      break L3;
     } else {
      $$0 = $7;
     }
    }
   }
  }
 } while(0);
 return ($$06|0);
}
function _FindMemoryModel($0) {
 $0 = $0|0;
 var $$ = 0, $$05 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strcmp(41049,$0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$05 = 0;
  return ($$05|0);
 }
 $3 = (_strcmp(41054,$0)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $$05 = 1;
  return ($$05|0);
 } else {
  $5 = (_strcmp(41058,$0)|0);
  $6 = ($5|0)==(0);
  $$ = $6 ? 2 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function _SetMemoryModel($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[3627] = $0;
 switch ($0|0) {
 case 0:  {
  HEAP8[41046] = 2;
  HEAP8[41047] = 2;
  break;
 }
 case 1:  {
  HEAP8[41046] = 3;
  HEAP8[41047] = 2;
  break;
 }
 case 2:  {
  HEAP8[41046] = 3;
  HEAP8[41047] = 3;
  break;
 }
 default: {
 }
 }
 HEAP8[41048] = 1;
 return;
}
function _IsAlpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & -33;
 $2 = (($1) + -65)<<24>>24;
 $3 = ($2&255)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _IsAlNum($0) {
 $0 = $0|0;
 var $$off8 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & -33;
 $2 = (($1) + -65)<<24>>24;
 $3 = ($2&255)<(26);
 $$off8 = (($0) + -48)<<24>>24;
 $4 = ($$off8&255)<(10);
 $5 = $3 | $4;
 $6 = $5&1;
 return ($6|0);
}
function _IsBlank($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0<<24>>24)==(32);
 $2 = ($0<<24>>24)==(9);
 $$ = $1 | $2;
 $3 = $$&1;
 return ($3|0);
}
function _IsSpace($0) {
 $0 = $0|0;
 var $$clear = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $switch$cast = 0, $switch$cast$clear = 0, $switch$downshift = 0, $switch$masked = 0, $switch$tableidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $switch$tableidx = (($0) + -9)<<24>>24;
 $1 = ($switch$tableidx&255)<(24);
 $switch$cast = $switch$tableidx&255;
 $switch$cast$clear = $switch$cast & 16777215;
 $switch$downshift = 8388639 >>> $switch$cast$clear;
 $2 = $switch$downshift & 1;
 $$clear = $2 & 16777215;
 $switch$masked = ($$clear|0)!=(0);
 $3 = $1 & $switch$masked;
 $4 = $3&1;
 return ($4|0);
}
function _IsDigit($0) {
 $0 = $0|0;
 var $$off = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($0) + -48)<<24>>24;
 $1 = ($$off&255)<(10);
 $2 = $1&1;
 return ($2|0);
}
function _IsODigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & -8;
 $2 = ($1<<24>>24)==(48);
 $3 = $2&1;
 return ($3|0);
}
function _IsXDigit($0) {
 $0 = $0|0;
 var $$off8 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($0<<24>>24) {
 case 65: case 66: case 67: case 68: case 69: case 70: case 97: case 98: case 99: case 100: case 101: case 102:  {
  $3 = 1;
  break;
 }
 default: {
  $$off8 = (($0) + -48)<<24>>24;
  $1 = ($$off8&255)<(10);
  $3 = $1;
 }
 }
 $2 = $3&1;
 return ($2|0);
}
function _IsQuote($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0<<24>>24)==(34);
 $2 = ($0<<24>>24)==(39);
 $$ = $1 | $2;
 $3 = $$&1;
 return ($3|0);
}
function _StrCopy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strlen($2)|0);
 $4 = ($3>>>0)<($1>>>0);
 if ($4) {
  $7 = (($3) + 1)|0;
  _memcpy(($0|0),($2|0),($7|0))|0;
  return ($0|0);
 } else {
  $5 = (($1) + -1)|0;
  _memcpy(($0|0),($2|0),($5|0))|0;
  $6 = (($0) + ($5)|0);
  HEAP8[$6>>0] = 0;
  return ($0|0);
 }
 return (0)|0;
}
function _StrCaseCmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$068 = 0, $$09 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_toupper($3)|0);
 $5 = HEAP8[$1>>0]|0;
 $6 = $5 << 24 >> 24;
 $7 = (_toupper($6)|0);
 $8 = (($4) - ($7))|0;
 $9 = ($8|0)!=(0);
 $10 = ($2<<24>>24)==(0);
 $or$cond7 = $10 | $9;
 if ($or$cond7) {
  $$lcssa = $8;
  return ($$lcssa|0);
 } else {
  $$068 = $1;$$09 = $0;
 }
 while(1) {
  $11 = ((($$09)) + 1|0);
  $12 = ((($$068)) + 1|0);
  $13 = HEAP8[$11>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = (_toupper($14)|0);
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_toupper($17)|0);
  $19 = (($15) - ($18))|0;
  $20 = ($19|0)!=(0);
  $21 = ($13<<24>>24)==(0);
  $or$cond = $21 | $20;
  if ($or$cond) {
   $$lcssa = $19;
   break;
  } else {
   $$068 = $12;$$09 = $11;
  }
 }
 return ($$lcssa|0);
}
function _FP_F_Size() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function _FP_D_Size() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function _FP_D_Make($0) {
 $0 = +$0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (+$0);
}
function _FP_D_FromInt($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+($0|0));
 return (+$1);
}
function _FP_D_Add($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$0>>3];
 $3 = +HEAPF64[$1>>3];
 $4 = $2 + $3;
 return (+$4);
}
function _FP_D_Mul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$0>>3];
 $3 = +HEAPF64[$1>>3];
 $4 = $2 * $3;
 return (+$4);
}
function _FP_D_Div($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF64[$0>>3];
 $3 = +HEAPF64[$1>>3];
 $4 = $2 / $3;
 return (+$4);
}
function _FindName($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $$0 = $1;
 L1: while(1) {
  $2 = ($$0|0)>(0);
  if (!($2)) {
   break;
  }
  $3 = (($$0) + -1)|0;
  $4 = (($0) + ($3)|0);
  $5 = HEAP8[$4>>0]|0;
  switch ($5<<24>>24) {
  case 47: case 92:  {
   break L1;
   break;
  }
  default: {
   $$0 = $3;
  }
  }
 }
 $6 = (($0) + ($$0)|0);
 return ($6|0);
}
function _MakeFilename($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$014$i = 0, $$pn$i = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = ($2>>>0)<(2);
 L1: do {
  if (!($3)) {
   $4 = (($0) + ($2)|0);
   $$pn$i = $4;
   L3: while(1) {
    $$014$i = ((($$pn$i)) + -1|0);
    $5 = ($$014$i>>>0)<($0>>>0);
    $$pre$i = HEAP8[$$014$i>>0]|0;
    if ($5) {
     label = 5;
     break;
    }
    switch ($$pre$i<<24>>24) {
    case 92: case 47:  {
     break L1;
     break;
    }
    case 46:  {
     break L3;
     break;
    }
    default: {
     $$pn$i = $$014$i;
    }
    }
   }
   if ((label|0) == 5) {
    $6 = ($$pre$i<<24>>24)==(46);
    if (!($6)) {
     break;
    }
   }
   $12 = $$014$i;
   $13 = $0;
   $14 = (($12) - ($13))|0;
   $15 = (_strlen($1)|0);
   $16 = (($14) + 1)|0;
   $17 = (($16) + ($15))|0;
   $18 = (_xmalloc($17)|0);
   _memcpy(($18|0),($0|0),($14|0))|0;
   $19 = (($18) + ($14)|0);
   (_strcpy($19,$1)|0);
   $$0 = $18;
   return ($$0|0);
  }
 } while(0);
 $7 = (_strlen($0)|0);
 $8 = (_strlen($1)|0);
 $9 = (($7) + 1)|0;
 $10 = (($9) + ($8))|0;
 $11 = (_xmalloc($10)|0);
 (_strcpy($11,$0)|0);
 (_strcat($11,$1)|0);
 $$0 = $11;
 return ($$0|0);
}
function _shl_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$06$lcssa = 0, $$067 = 0, $$08 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 if ($2) {
  $$067 = $0;$$08 = $1;
  while(1) {
   $3 = $$067 << 31;
   $4 = (($$08) + -31)|0;
   $5 = ($4>>>0)>(31);
   if ($5) {
    $$067 = $3;$$08 = $4;
   } else {
    $$0$lcssa = $4;$$06$lcssa = $3;
    break;
   }
  }
 } else {
  $$0$lcssa = $1;$$06$lcssa = $0;
 }
 $6 = $$06$lcssa << $$0$lcssa;
 return ($6|0);
}
function _TgtTranslateInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11512]|0;
 $1 = (_GetTargetProperties($0)|0);
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 _memcpy((41063|0),($3|0),256)|0;
 return;
}
function _TgtTranslateChar($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 & 255;
 $2 = (41063 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 return ($4|0);
}
function _TgtTranslateBuf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$056 = 0, $$07 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  return;
 } else {
  $$056 = $1;$$07 = $0;
 }
 while(1) {
  $3 = (($$056) + -1)|0;
  $4 = HEAP8[$$07>>0]|0;
  $5 = $4&255;
  $6 = (41063 + ($5)|0);
  $7 = HEAP8[$6>>0]|0;
  HEAP8[$$07>>0] = $7;
  $8 = ((($$07)) + 1|0);
  $9 = ($3|0)==(0);
  if ($9) {
   break;
  } else {
   $$056 = $3;$$07 = $8;
  }
 }
 return;
}
function _TgtTranslateSet($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0>>>0)<(256);
 if ($2) {
  $5 = (41063 + ($0)|0);
  HEAP8[$5>>0] = $1;
  return;
 } else {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,41319,41340,127);
  // unreachable;
 }
}
function _xvsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$066$ph$be = 0, $$066$ph$ph206 = 0, $$066$ph140154 = 0, $$066$ph200 = 0, $$070 = 0, $$070$phi = 0, $$1$ph$be = 0, $$1$ph$ph207 = 0, $$1$ph179 = 0, $$1$ph201 = 0, $$167 = 0, $$268 = 0, $$3 = 0, $$369 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$clear = 0;
 var $$clear407 = 0, $$clear408 = 0, $$clear409 = 0, $$clear410 = 0, $$idx = 0, $$idx$val = 0, $$idx73 = 0, $$idx73$val = 0, $$idx74$val = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$mask$i = 0, $$mask$i79 = 0, $$mask$i83 = 0, $$mask15$i = 0, $$mask15$i78 = 0, $$mask15$i82 = 0, $$pre149 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current101 = 0, $arglist_current104 = 0, $arglist_current107 = 0, $arglist_current11 = 0, $arglist_current110 = 0, $arglist_current113 = 0, $arglist_current116 = 0, $arglist_current119 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current65 = 0, $arglist_current68 = 0, $arglist_current71 = 0, $arglist_current74 = 0, $arglist_current77 = 0;
 var $arglist_current8 = 0, $arglist_current80 = 0, $arglist_current83 = 0, $arglist_current86 = 0, $arglist_current89 = 0, $arglist_current92 = 0, $arglist_current95 = 0, $arglist_current98 = 0, $arglist_next = 0, $arglist_next102 = 0, $arglist_next105 = 0, $arglist_next108 = 0, $arglist_next111 = 0, $arglist_next114 = 0, $arglist_next117 = 0, $arglist_next12 = 0, $arglist_next120 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next66 = 0, $arglist_next69 = 0, $arglist_next72 = 0, $arglist_next75 = 0;
 var $arglist_next78 = 0, $arglist_next81 = 0, $arglist_next84 = 0, $arglist_next87 = 0, $arglist_next9 = 0, $arglist_next90 = 0, $arglist_next93 = 0, $arglist_next96 = 0, $arglist_next99 = 0, $expanded = 0, $expanded121 = 0, $expanded123 = 0, $expanded124 = 0, $expanded125 = 0, $expanded127 = 0, $expanded128 = 0, $expanded130 = 0, $expanded131 = 0, $expanded132 = 0, $expanded134 = 0;
 var $expanded135 = 0, $expanded137 = 0, $expanded138 = 0, $expanded139 = 0, $expanded141 = 0, $expanded142 = 0, $expanded144 = 0, $expanded145 = 0, $expanded146 = 0, $expanded148 = 0, $expanded149 = 0, $expanded151 = 0, $expanded152 = 0, $expanded153 = 0, $expanded155 = 0, $expanded156 = 0, $expanded158 = 0, $expanded159 = 0, $expanded160 = 0, $expanded162 = 0;
 var $expanded163 = 0, $expanded165 = 0, $expanded166 = 0, $expanded167 = 0, $expanded169 = 0, $expanded170 = 0, $expanded172 = 0, $expanded173 = 0, $expanded174 = 0, $expanded176 = 0, $expanded177 = 0, $expanded179 = 0, $expanded180 = 0, $expanded181 = 0, $expanded183 = 0, $expanded184 = 0, $expanded186 = 0, $expanded187 = 0, $expanded188 = 0, $expanded190 = 0;
 var $expanded191 = 0, $expanded193 = 0, $expanded194 = 0, $expanded195 = 0, $expanded197 = 0, $expanded198 = 0, $expanded200 = 0, $expanded201 = 0, $expanded202 = 0, $expanded204 = 0, $expanded205 = 0, $expanded207 = 0, $expanded208 = 0, $expanded209 = 0, $expanded211 = 0, $expanded212 = 0, $expanded214 = 0, $expanded215 = 0, $expanded216 = 0, $expanded218 = 0;
 var $expanded219 = 0, $expanded221 = 0, $expanded222 = 0, $expanded223 = 0, $expanded225 = 0, $expanded226 = 0, $expanded228 = 0, $expanded229 = 0, $expanded230 = 0, $expanded232 = 0, $expanded233 = 0, $expanded235 = 0, $expanded236 = 0, $expanded237 = 0, $expanded239 = 0, $expanded240 = 0, $expanded242 = 0, $expanded243 = 0, $expanded244 = 0, $expanded246 = 0;
 var $expanded247 = 0, $expanded249 = 0, $expanded250 = 0, $expanded251 = 0, $expanded253 = 0, $expanded254 = 0, $expanded256 = 0, $expanded257 = 0, $expanded258 = 0, $expanded260 = 0, $expanded261 = 0, $expanded263 = 0, $expanded264 = 0, $expanded265 = 0, $expanded267 = 0, $expanded268 = 0, $expanded270 = 0, $expanded271 = 0, $expanded272 = 0, $expanded274 = 0;
 var $expanded275 = 0, $expanded277 = 0, $expanded278 = 0, $expanded279 = 0, $expanded281 = 0, $expanded282 = 0, $expanded284 = 0, $expanded285 = 0, $expanded286 = 0, $expanded288 = 0, $expanded289 = 0, $expanded291 = 0, $expanded292 = 0, $expanded293 = 0, $expanded295 = 0, $expanded296 = 0, $expanded298 = 0, $expanded299 = 0, $expanded300 = 0, $expanded302 = 0;
 var $expanded303 = 0, $expanded305 = 0, $expanded306 = 0, $expanded307 = 0, $expanded309 = 0, $expanded310 = 0, $expanded312 = 0, $expanded313 = 0, $expanded314 = 0, $expanded316 = 0, $expanded317 = 0, $expanded319 = 0, $expanded320 = 0, $expanded321 = 0, $expanded323 = 0, $expanded324 = 0, $expanded326 = 0, $expanded327 = 0, $expanded328 = 0, $expanded330 = 0;
 var $expanded331 = 0, $expanded333 = 0, $expanded334 = 0, $expanded335 = 0, $expanded337 = 0, $expanded338 = 0, $expanded340 = 0, $expanded341 = 0, $expanded342 = 0, $expanded344 = 0, $expanded345 = 0, $expanded347 = 0, $expanded348 = 0, $expanded349 = 0, $expanded351 = 0, $expanded352 = 0, $expanded354 = 0, $expanded355 = 0, $expanded356 = 0, $expanded358 = 0;
 var $expanded359 = 0, $expanded361 = 0, $expanded362 = 0, $expanded363 = 0, $expanded365 = 0, $expanded366 = 0, $expanded368 = 0, $expanded369 = 0, $expanded370 = 0, $expanded372 = 0, $expanded373 = 0, $expanded375 = 0, $expanded376 = 0, $expanded377 = 0, $expanded379 = 0, $expanded380 = 0, $expanded382 = 0, $expanded383 = 0, $expanded384 = 0, $expanded386 = 0;
 var $expanded387 = 0, $expanded389 = 0, $expanded390 = 0, $expanded391 = 0, $expanded393 = 0, $expanded394 = 0, $expanded396 = 0, $expanded397 = 0, $expanded398 = 0, $expanded400 = 0, $expanded401 = 0, $expanded403 = 0, $expanded404 = 0, $expanded405 = 0, $not$ = 0, $not$199 = 0, $not$199205 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $4 = sp;
 $5 = sp + 312|0;
 $vacopy_currentptr = HEAP32[$3>>2]|0;
 HEAP32[$4>>2] = $vacopy_currentptr;
 $6 = ((($4)) + 16|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($4)) + 20|0);
 HEAP32[$7>>2] = $1;
 $8 = ((($4)) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($4)) + 288|0);
 $10 = ((($4)) + 300|0);
 $11 = ((($4)) + 304|0);
 $12 = ((($4)) + 308|0);
 $13 = ((($4)) + 292|0);
 $14 = ((($5)) + 1|0);
 $$0 = $2;$$070 = 0;
 L1: while(1) {
  $15 = ((($$0)) + 1|0);
  $16 = HEAP8[$$0>>0]|0;
  switch ($16<<24>>24) {
  case 0:  {
   label = 118;
   break L1;
   break;
  }
  case 37:  {
   break;
  }
  default: {
   $17 = HEAP32[$8>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[$8>>2] = $18;
   $19 = HEAP32[$7>>2]|0;
   $20 = ($18>>>0)>($19>>>0);
   if ($20) {
    $$070$phi = $$070;$$0 = $15;$$070 = $$070$phi;
    continue L1;
   }
   $21 = HEAP32[$6>>2]|0;
   $22 = ((($21)) + 1|0);
   HEAP32[$6>>2] = $22;
   HEAP8[$21>>0] = $16;
   $$070$phi = $$070;$$0 = $15;$$070 = $$070$phi;
   continue L1;
  }
  }
  $23 = HEAP8[$15>>0]|0;
  $24 = ($23<<24>>24)==(37);
  $25 = ((($$0)) + 2|0);
  if ($24) {
   $26 = HEAP32[$8>>2]|0;
   $27 = (($26) + 1)|0;
   HEAP32[$8>>2] = $27;
   $28 = HEAP32[$7>>2]|0;
   $29 = ($27>>>0)>($28>>>0);
   if ($29) {
    $$070$phi = $$070;$$0 = $25;$$070 = $$070$phi;
    continue;
   }
   $30 = HEAP32[$6>>2]|0;
   $31 = ((($30)) + 1|0);
   HEAP32[$6>>2] = $31;
   HEAP8[$30>>0] = 37;
   $$070$phi = $$070;$$0 = $25;$$070 = $$070$phi;
   continue;
  }
  HEAP32[$9>>2] = 0;
  $32 = $23 << 24 >> 24;
  $not$199205 = ($23<<24>>24)==(0);
  L11: do {
   if ($not$199205) {
    $$066$ph140154 = 0;$$1$ph179 = $25;$62 = $32;
    label = 21;
   } else {
    $$066$ph$ph206 = $23;$$1$ph$ph207 = $25;$530 = $32;$531 = 0;
    L12: while(1) {
     $$066$ph200 = $$066$ph$ph206;$$1$ph201 = $$1$ph$ph207;$33 = $530;$35 = $531;
     L14: while(1) {
      switch ($33|0) {
      case 45:  {
       $34 = $35 | 1;
       HEAP32[$9>>2] = $34;
       $532 = $34;
       break;
      }
      case 43:  {
       $36 = $35 | 2;
       HEAP32[$9>>2] = $36;
       $532 = $36;
       break;
      }
      case 32:  {
       $37 = $35 | 4;
       HEAP32[$9>>2] = $37;
       $532 = $37;
       break;
      }
      case 35:  {
       $38 = $35 | 8;
       HEAP32[$9>>2] = $38;
       $532 = $38;
       break;
      }
      default: {
       break L14;
      }
      }
      $$1$ph$be = ((($$1$ph201)) + 1|0);
      $$066$ph$be = HEAP8[$$1$ph201>>0]|0;
      $39 = $$066$ph$be << 24 >> 24;
      $not$ = ($$066$ph$be<<24>>24)==(0);
      if ($not$) {
       $$066$ph140154 = 0;$$1$ph179 = $$1$ph$be;$62 = $39;
       label = 21;
       break L11;
      } else {
       $$066$ph200 = $$066$ph$be;$$1$ph201 = $$1$ph$be;$33 = $39;$35 = $532;
      }
     }
     switch ($$066$ph200<<24>>24) {
     case 42:  {
      break L12;
      break;
     }
     case 48:  {
      break;
     }
     default: {
      $$066$ph140154 = $$066$ph200;$$1$ph179 = $$1$ph201;$62 = $33;
      label = 21;
      break L11;
     }
     }
     $40 = $35 | 16;
     HEAP32[$9>>2] = $40;
     $41 = ((($$1$ph201)) + 1|0);
     $42 = HEAP8[$$1$ph201>>0]|0;
     $43 = $42 << 24 >> 24;
     $not$199 = ($42<<24>>24)==(0);
     if ($not$199) {
      $$066$ph140154 = 0;$$1$ph179 = $41;$62 = $43;
      label = 21;
      break L11;
     } else {
      $$066$ph$ph206 = $42;$$1$ph$ph207 = $41;$530 = $43;$531 = $40;
     }
    }
    $arglist_current = HEAP32[$4>>2]|0;
    $44 = $arglist_current;
    $45 = ((0) + 4|0);
    $expanded121 = $45;
    $expanded = (($expanded121) - 1)|0;
    $46 = (($44) + ($expanded))|0;
    $47 = ((0) + 4|0);
    $expanded125 = $47;
    $expanded124 = (($expanded125) - 1)|0;
    $expanded123 = $expanded124 ^ -1;
    $48 = $46 & $expanded123;
    $49 = $48;
    $50 = HEAP32[$49>>2]|0;
    $arglist_next = ((($49)) + 4|0);
    HEAP32[$4>>2] = $arglist_next;
    HEAP32[$10>>2] = $50;
    $51 = ($50|0)<(0);
    $52 = HEAP32[$9>>2]|0;
    if ($51) {
     $53 = $52 | 1;
     HEAP32[$9>>2] = $53;
     $54 = (0 - ($50))|0;
     HEAP32[$10>>2] = $54;
     $58 = $53;
    } else {
     $58 = $52;
    }
    $55 = ((($$1$ph201)) + 1|0);
    $56 = HEAP8[$$1$ph201>>0]|0;
    $57 = $58 | 32;
    HEAP32[$9>>2] = $57;
    $$167 = $56;$$3 = $55;
   }
  } while(0);
  if ((label|0) == 21) {
   label = 0;
   $59 = (_IsDigit($$066$ph140154)|0);
   $60 = ($59|0)==(0);
   if ($60) {
    $$167 = $$066$ph140154;$$3 = $$1$ph179;
   } else {
    $61 = (($62) + -48)|0;
    HEAP32[$10>>2] = $61;
    $63 = ((($$1$ph179)) + 1|0);
    $64 = HEAP8[$$1$ph179>>0]|0;
    $65 = (_IsDigit($64)|0);
    $66 = ($65|0)==(0);
    if ($66) {
     $$lcssa97 = $64;$$lcssa98 = $63;
    } else {
     $70 = $64;$74 = $63;
     while(1) {
      $67 = HEAP32[$10>>2]|0;
      $68 = ($67*10)|0;
      $69 = $70 << 24 >> 24;
      $71 = (($69) + -48)|0;
      $72 = (($71) + ($68))|0;
      HEAP32[$10>>2] = $72;
      $73 = ((($74)) + 1|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = (_IsDigit($75)|0);
      $77 = ($76|0)==(0);
      if ($77) {
       $$lcssa97 = $75;$$lcssa98 = $73;
       break;
      } else {
       $70 = $75;$74 = $73;
      }
     }
    }
    $78 = HEAP32[$9>>2]|0;
    $79 = $78 | 32;
    HEAP32[$9>>2] = $79;
    $$167 = $$lcssa97;$$3 = $$lcssa98;
   }
  }
  $80 = ($$167<<24>>24)==(46);
  L36: do {
   if ($80) {
    $81 = ((($$3)) + 1|0);
    $82 = HEAP8[$$3>>0]|0;
    $83 = HEAP32[$9>>2]|0;
    $84 = $83 | 64;
    HEAP32[$9>>2] = $84;
    $85 = $82 << 24 >> 24;
    $86 = ($82<<24>>24)==(42);
    if ($86) {
     $arglist_current2 = HEAP32[$4>>2]|0;
     $87 = $arglist_current2;
     $88 = ((0) + 4|0);
     $expanded128 = $88;
     $expanded127 = (($expanded128) - 1)|0;
     $89 = (($87) + ($expanded127))|0;
     $90 = ((0) + 4|0);
     $expanded132 = $90;
     $expanded131 = (($expanded132) - 1)|0;
     $expanded130 = $expanded131 ^ -1;
     $91 = $89 & $expanded130;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next3 = ((($92)) + 4|0);
     HEAP32[$4>>2] = $arglist_next3;
     HEAP32[$11>>2] = $93;
     $94 = ($93|0)<(0);
     if ($94) {
      $95 = HEAP32[$9>>2]|0;
      $96 = $95 & -65;
      HEAP32[$9>>2] = $96;
     }
     $97 = ((($$3)) + 2|0);
     $98 = HEAP8[$81>>0]|0;
     $$268 = $98;$$6 = $97;
     break;
    }
    $99 = (_IsDigit($82)|0);
    $100 = ($99|0)==(0);
    if (!($100)) {
     $101 = (($85) + -48)|0;
     HEAP32[$11>>2] = $101;
     $102 = ((($$3)) + 2|0);
     $103 = HEAP8[$81>>0]|0;
     $104 = (_IsDigit($103)|0);
     $105 = ($104|0)==(0);
     if ($105) {
      $$268 = $103;$$6 = $102;
      break;
     } else {
      $109 = $103;$113 = $102;
     }
     while(1) {
      $106 = HEAP32[$11>>2]|0;
      $107 = ($106*10)|0;
      $108 = $109 << 24 >> 24;
      $110 = (($108) + -48)|0;
      $111 = (($110) + ($107))|0;
      HEAP32[$11>>2] = $111;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$113>>0]|0;
      $115 = (_IsDigit($114)|0);
      $116 = ($115|0)==(0);
      if ($116) {
       $$268 = $114;$$6 = $112;
       break L36;
      } else {
       $109 = $114;$113 = $112;
      }
     }
    }
    $117 = ($82<<24>>24)==(45);
    if (!($117)) {
     HEAP32[$11>>2] = 0;
     $$268 = $82;$$6 = $81;
     break;
    }
    $118 = ((($$3)) + 2|0);
    $$5 = $118;
    while(1) {
     $119 = ((($$5)) + 1|0);
     $120 = HEAP8[$$5>>0]|0;
     $121 = (_IsDigit($120)|0);
     $122 = ($121|0)==(0);
     if ($122) {
      break;
     } else {
      $$5 = $119;
     }
    }
    $123 = HEAP32[$9>>2]|0;
    $124 = $123 & -65;
    HEAP32[$9>>2] = $124;
    $$268 = $120;$$6 = $119;
   } else {
    $$268 = $$167;$$6 = $$3;
   }
  } while(0);
  HEAP32[$12>>2] = 2;
  $125 = $$268 << 24 >> 24;
  L56: do {
   switch ($125|0) {
   case 104:  {
    $126 = ((($$6)) + 1|0);
    $127 = HEAP8[$$6>>0]|0;
    $128 = ($127<<24>>24)==(104);
    if ($128) {
     $129 = ((($$6)) + 2|0);
     $130 = HEAP8[$126>>0]|0;
     HEAP32[$12>>2] = 0;
     $$369 = $130;$$7 = $129;$158 = 0;
     break L56;
    } else {
     HEAP32[$12>>2] = 1;
     $$369 = $127;$$7 = $126;$158 = 1;
     break L56;
    }
    break;
   }
   case 108:  {
    $131 = ((($$6)) + 1|0);
    $132 = HEAP8[$$6>>0]|0;
    $133 = ($132<<24>>24)==(108);
    if ($133) {
     $134 = ((($$6)) + 2|0);
     $135 = HEAP8[$131>>0]|0;
     HEAP32[$12>>2] = 3;
     $$369 = $135;$$7 = $134;$158 = 3;
     break L56;
    } else {
     HEAP32[$12>>2] = 3;
     $$369 = $132;$$7 = $131;$158 = 3;
     break L56;
    }
    break;
   }
   case 106:  {
    HEAP32[$12>>2] = 4;
    $136 = ((($$6)) + 1|0);
    $137 = HEAP8[$$6>>0]|0;
    $$369 = $137;$$7 = $136;$158 = 4;
    break;
   }
   case 122:  {
    HEAP32[$12>>2] = 5;
    $138 = ((($$6)) + 1|0);
    $139 = HEAP8[$$6>>0]|0;
    $$369 = $139;$$7 = $138;$158 = 5;
    break;
   }
   case 116:  {
    HEAP32[$12>>2] = 6;
    $140 = ((($$6)) + 1|0);
    $141 = HEAP8[$$6>>0]|0;
    $$369 = $141;$$7 = $140;$158 = 6;
    break;
   }
   case 76:  {
    HEAP32[$12>>2] = 7;
    $142 = ((($$6)) + 1|0);
    $143 = HEAP8[$$6>>0]|0;
    $$369 = $143;$$7 = $142;$158 = 7;
    break;
   }
   default: {
    $$369 = $$268;$$7 = $$6;$158 = 2;
   }
   }
  } while(0);
  $144 = HEAP32[$9>>2]|0;
  $145 = $144 & 6;
  $146 = ($145|0)==(6);
  if ($146) {
   $147 = $144 & -5;
   HEAP32[$9>>2] = $147;
   $149 = $147;
  } else {
   $149 = $144;
  }
  $148 = $149 & 17;
  $150 = ($148|0)==(17);
  $151 = $149 & -17;
  $152 = $150 ? $151 : $149;
  $153 = $152 & 64;
  $154 = ($153|0)==(0);
  $$ = $154 ? $152 : $151;
  $155 = $154 ^ 1;
  $156 = $150 | $155;
  if ($156) {
   HEAP32[$9>>2] = $$;
  }
  $157 = $$369 << 24 >> 24;
  switch ($157|0) {
  case 109:  {
   $$0 = $$7;$$070 = 1;
   continue L1;
   break;
  }
  case 110:  {
   label = 108;
   break L1;
   break;
  }
  case 105: case 100:  {
   HEAP32[$13>>2] = 10;
   $$clear = $158 & 7;
   switch ($$clear<<24>>24) {
   case 0:  {
    $arglist_current5 = HEAP32[$4>>2]|0;
    $159 = $arglist_current5;
    $160 = ((0) + 4|0);
    $expanded135 = $160;
    $expanded134 = (($expanded135) - 1)|0;
    $161 = (($159) + ($expanded134))|0;
    $162 = ((0) + 4|0);
    $expanded139 = $162;
    $expanded138 = (($expanded139) - 1)|0;
    $expanded137 = $expanded138 ^ -1;
    $163 = $161 & $expanded137;
    $164 = $163;
    $165 = HEAP32[$164>>2]|0;
    $arglist_next6 = ((($164)) + 4|0);
    HEAP32[$4>>2] = $arglist_next6;
    $166 = $165&255;
    $167 = $166 << 24 >> 24;
    $168 = ($167|0)<(0);
    $169 = $168 << 31 >> 31;
    $229 = $167;$230 = $169;
    break;
   }
   case 1:  {
    $arglist_current8 = HEAP32[$4>>2]|0;
    $170 = $arglist_current8;
    $171 = ((0) + 4|0);
    $expanded142 = $171;
    $expanded141 = (($expanded142) - 1)|0;
    $172 = (($170) + ($expanded141))|0;
    $173 = ((0) + 4|0);
    $expanded146 = $173;
    $expanded145 = (($expanded146) - 1)|0;
    $expanded144 = $expanded145 ^ -1;
    $174 = $172 & $expanded144;
    $175 = $174;
    $176 = HEAP32[$175>>2]|0;
    $arglist_next9 = ((($175)) + 4|0);
    HEAP32[$4>>2] = $arglist_next9;
    $177 = $176&65535;
    $178 = $177 << 16 >> 16;
    $179 = ($178|0)<(0);
    $180 = $179 << 31 >> 31;
    $229 = $178;$230 = $180;
    break;
   }
   case 2:  {
    $arglist_current11 = HEAP32[$4>>2]|0;
    $181 = $arglist_current11;
    $182 = ((0) + 4|0);
    $expanded149 = $182;
    $expanded148 = (($expanded149) - 1)|0;
    $183 = (($181) + ($expanded148))|0;
    $184 = ((0) + 4|0);
    $expanded153 = $184;
    $expanded152 = (($expanded153) - 1)|0;
    $expanded151 = $expanded152 ^ -1;
    $185 = $183 & $expanded151;
    $186 = $185;
    $187 = HEAP32[$186>>2]|0;
    $arglist_next12 = ((($186)) + 4|0);
    HEAP32[$4>>2] = $arglist_next12;
    $188 = ($187|0)<(0);
    $189 = $188 << 31 >> 31;
    $229 = $187;$230 = $189;
    break;
   }
   case 3:  {
    $arglist_current14 = HEAP32[$4>>2]|0;
    $190 = $arglist_current14;
    $191 = ((0) + 4|0);
    $expanded156 = $191;
    $expanded155 = (($expanded156) - 1)|0;
    $192 = (($190) + ($expanded155))|0;
    $193 = ((0) + 4|0);
    $expanded160 = $193;
    $expanded159 = (($expanded160) - 1)|0;
    $expanded158 = $expanded159 ^ -1;
    $194 = $192 & $expanded158;
    $195 = $194;
    $196 = HEAP32[$195>>2]|0;
    $arglist_next15 = ((($195)) + 4|0);
    HEAP32[$4>>2] = $arglist_next15;
    $197 = ($196|0)<(0);
    $198 = $197 << 31 >> 31;
    $229 = $196;$230 = $198;
    break;
   }
   case 4:  {
    $arglist_current17 = HEAP32[$4>>2]|0;
    $199 = $arglist_current17;
    $200 = ((0) + 8|0);
    $expanded163 = $200;
    $expanded162 = (($expanded163) - 1)|0;
    $201 = (($199) + ($expanded162))|0;
    $202 = ((0) + 8|0);
    $expanded167 = $202;
    $expanded166 = (($expanded167) - 1)|0;
    $expanded165 = $expanded166 ^ -1;
    $203 = $201 & $expanded165;
    $204 = $203;
    $205 = $204;
    $206 = $205;
    $207 = HEAP32[$206>>2]|0;
    $208 = (($205) + 4)|0;
    $209 = $208;
    $210 = HEAP32[$209>>2]|0;
    $arglist_next18 = ((($204)) + 8|0);
    HEAP32[$4>>2] = $arglist_next18;
    $229 = $207;$230 = $210;
    break;
   }
   case 5:  {
    $arglist_current20 = HEAP32[$4>>2]|0;
    $211 = $arglist_current20;
    $212 = ((0) + 4|0);
    $expanded170 = $212;
    $expanded169 = (($expanded170) - 1)|0;
    $213 = (($211) + ($expanded169))|0;
    $214 = ((0) + 4|0);
    $expanded174 = $214;
    $expanded173 = (($expanded174) - 1)|0;
    $expanded172 = $expanded173 ^ -1;
    $215 = $213 & $expanded172;
    $216 = $215;
    $217 = HEAP32[$216>>2]|0;
    $arglist_next21 = ((($216)) + 4|0);
    HEAP32[$4>>2] = $arglist_next21;
    $229 = $217;$230 = 0;
    break;
   }
   case 6:  {
    $arglist_current23 = HEAP32[$4>>2]|0;
    $218 = $arglist_current23;
    $219 = ((0) + 4|0);
    $expanded177 = $219;
    $expanded176 = (($expanded177) - 1)|0;
    $220 = (($218) + ($expanded176))|0;
    $221 = ((0) + 4|0);
    $expanded181 = $221;
    $expanded180 = (($expanded181) - 1)|0;
    $expanded179 = $expanded180 ^ -1;
    $222 = $220 & $expanded179;
    $223 = $222;
    $224 = HEAP32[$223>>2]|0;
    $arglist_next24 = ((($223)) + 4|0);
    HEAP32[$4>>2] = $arglist_next24;
    $225 = ($224|0)<(0);
    $226 = $225 << 31 >> 31;
    $229 = $224;$230 = $226;
    break;
   }
   default: {
    label = 62;
    break L1;
   }
   }
   _FormatInt($4,$229,$230);
   $$070$phi = $$070;$$0 = $$7;$$070 = $$070$phi;
   continue L1;
   break;
  }
  case 111:  {
   $231 = $$ | 128;
   HEAP32[$9>>2] = $231;
   HEAP32[$13>>2] = 8;
   $$clear407 = $158 & 7;
   switch ($$clear407<<24>>24) {
   case 0:  {
    $arglist_current26 = HEAP32[$4>>2]|0;
    $232 = $arglist_current26;
    $233 = ((0) + 4|0);
    $expanded184 = $233;
    $expanded183 = (($expanded184) - 1)|0;
    $234 = (($232) + ($expanded183))|0;
    $235 = ((0) + 4|0);
    $expanded188 = $235;
    $expanded187 = (($expanded188) - 1)|0;
    $expanded186 = $expanded187 ^ -1;
    $236 = $234 & $expanded186;
    $237 = $236;
    $238 = HEAP32[$237>>2]|0;
    $arglist_next27 = ((($237)) + 4|0);
    HEAP32[$4>>2] = $arglist_next27;
    $$mask15$i = $238 & 255;
    $290 = $$mask15$i;$291 = 0;
    break;
   }
   case 1:  {
    $arglist_current29 = HEAP32[$4>>2]|0;
    $239 = $arglist_current29;
    $240 = ((0) + 4|0);
    $expanded191 = $240;
    $expanded190 = (($expanded191) - 1)|0;
    $241 = (($239) + ($expanded190))|0;
    $242 = ((0) + 4|0);
    $expanded195 = $242;
    $expanded194 = (($expanded195) - 1)|0;
    $expanded193 = $expanded194 ^ -1;
    $243 = $241 & $expanded193;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $arglist_next30 = ((($244)) + 4|0);
    HEAP32[$4>>2] = $arglist_next30;
    $$mask$i = $245 & 65535;
    $290 = $$mask$i;$291 = 0;
    break;
   }
   case 2:  {
    $arglist_current32 = HEAP32[$4>>2]|0;
    $246 = $arglist_current32;
    $247 = ((0) + 4|0);
    $expanded198 = $247;
    $expanded197 = (($expanded198) - 1)|0;
    $248 = (($246) + ($expanded197))|0;
    $249 = ((0) + 4|0);
    $expanded202 = $249;
    $expanded201 = (($expanded202) - 1)|0;
    $expanded200 = $expanded201 ^ -1;
    $250 = $248 & $expanded200;
    $251 = $250;
    $252 = HEAP32[$251>>2]|0;
    $arglist_next33 = ((($251)) + 4|0);
    HEAP32[$4>>2] = $arglist_next33;
    $290 = $252;$291 = 0;
    break;
   }
   case 3:  {
    $arglist_current35 = HEAP32[$4>>2]|0;
    $253 = $arglist_current35;
    $254 = ((0) + 4|0);
    $expanded205 = $254;
    $expanded204 = (($expanded205) - 1)|0;
    $255 = (($253) + ($expanded204))|0;
    $256 = ((0) + 4|0);
    $expanded209 = $256;
    $expanded208 = (($expanded209) - 1)|0;
    $expanded207 = $expanded208 ^ -1;
    $257 = $255 & $expanded207;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $arglist_next36 = ((($258)) + 4|0);
    HEAP32[$4>>2] = $arglist_next36;
    $290 = $259;$291 = 0;
    break;
   }
   case 4:  {
    $arglist_current38 = HEAP32[$4>>2]|0;
    $260 = $arglist_current38;
    $261 = ((0) + 8|0);
    $expanded212 = $261;
    $expanded211 = (($expanded212) - 1)|0;
    $262 = (($260) + ($expanded211))|0;
    $263 = ((0) + 8|0);
    $expanded216 = $263;
    $expanded215 = (($expanded216) - 1)|0;
    $expanded214 = $expanded215 ^ -1;
    $264 = $262 & $expanded214;
    $265 = $264;
    $266 = $265;
    $267 = $266;
    $268 = HEAP32[$267>>2]|0;
    $269 = (($266) + 4)|0;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $arglist_next39 = ((($265)) + 8|0);
    HEAP32[$4>>2] = $arglist_next39;
    $290 = $268;$291 = $271;
    break;
   }
   case 5:  {
    $arglist_current41 = HEAP32[$4>>2]|0;
    $272 = $arglist_current41;
    $273 = ((0) + 4|0);
    $expanded219 = $273;
    $expanded218 = (($expanded219) - 1)|0;
    $274 = (($272) + ($expanded218))|0;
    $275 = ((0) + 4|0);
    $expanded223 = $275;
    $expanded222 = (($expanded223) - 1)|0;
    $expanded221 = $expanded222 ^ -1;
    $276 = $274 & $expanded221;
    $277 = $276;
    $278 = HEAP32[$277>>2]|0;
    $arglist_next42 = ((($277)) + 4|0);
    HEAP32[$4>>2] = $arglist_next42;
    $290 = $278;$291 = 0;
    break;
   }
   case 6:  {
    $arglist_current44 = HEAP32[$4>>2]|0;
    $279 = $arglist_current44;
    $280 = ((0) + 4|0);
    $expanded226 = $280;
    $expanded225 = (($expanded226) - 1)|0;
    $281 = (($279) + ($expanded225))|0;
    $282 = ((0) + 4|0);
    $expanded230 = $282;
    $expanded229 = (($expanded230) - 1)|0;
    $expanded228 = $expanded229 ^ -1;
    $283 = $281 & $expanded228;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $arglist_next45 = ((($284)) + 4|0);
    HEAP32[$4>>2] = $arglist_next45;
    $286 = ($285|0)<(0);
    $287 = $286 << 31 >> 31;
    $290 = $285;$291 = $287;
    break;
   }
   default: {
    label = 72;
    break L1;
   }
   }
   _FormatInt($4,$290,$291);
   $$070$phi = $$070;$$0 = $$7;$$070 = $$070$phi;
   continue L1;
   break;
  }
  case 117:  {
   $292 = $$ | 128;
   HEAP32[$9>>2] = $292;
   HEAP32[$13>>2] = 10;
   $$clear408 = $158 & 7;
   switch ($$clear408<<24>>24) {
   case 0:  {
    $arglist_current47 = HEAP32[$4>>2]|0;
    $293 = $arglist_current47;
    $294 = ((0) + 4|0);
    $expanded233 = $294;
    $expanded232 = (($expanded233) - 1)|0;
    $295 = (($293) + ($expanded232))|0;
    $296 = ((0) + 4|0);
    $expanded237 = $296;
    $expanded236 = (($expanded237) - 1)|0;
    $expanded235 = $expanded236 ^ -1;
    $297 = $295 & $expanded235;
    $298 = $297;
    $299 = HEAP32[$298>>2]|0;
    $arglist_next48 = ((($298)) + 4|0);
    HEAP32[$4>>2] = $arglist_next48;
    $$mask15$i78 = $299 & 255;
    $351 = $$mask15$i78;$352 = 0;
    break;
   }
   case 1:  {
    $arglist_current50 = HEAP32[$4>>2]|0;
    $300 = $arglist_current50;
    $301 = ((0) + 4|0);
    $expanded240 = $301;
    $expanded239 = (($expanded240) - 1)|0;
    $302 = (($300) + ($expanded239))|0;
    $303 = ((0) + 4|0);
    $expanded244 = $303;
    $expanded243 = (($expanded244) - 1)|0;
    $expanded242 = $expanded243 ^ -1;
    $304 = $302 & $expanded242;
    $305 = $304;
    $306 = HEAP32[$305>>2]|0;
    $arglist_next51 = ((($305)) + 4|0);
    HEAP32[$4>>2] = $arglist_next51;
    $$mask$i79 = $306 & 65535;
    $351 = $$mask$i79;$352 = 0;
    break;
   }
   case 2:  {
    $arglist_current53 = HEAP32[$4>>2]|0;
    $307 = $arglist_current53;
    $308 = ((0) + 4|0);
    $expanded247 = $308;
    $expanded246 = (($expanded247) - 1)|0;
    $309 = (($307) + ($expanded246))|0;
    $310 = ((0) + 4|0);
    $expanded251 = $310;
    $expanded250 = (($expanded251) - 1)|0;
    $expanded249 = $expanded250 ^ -1;
    $311 = $309 & $expanded249;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $arglist_next54 = ((($312)) + 4|0);
    HEAP32[$4>>2] = $arglist_next54;
    $351 = $313;$352 = 0;
    break;
   }
   case 3:  {
    $arglist_current56 = HEAP32[$4>>2]|0;
    $314 = $arglist_current56;
    $315 = ((0) + 4|0);
    $expanded254 = $315;
    $expanded253 = (($expanded254) - 1)|0;
    $316 = (($314) + ($expanded253))|0;
    $317 = ((0) + 4|0);
    $expanded258 = $317;
    $expanded257 = (($expanded258) - 1)|0;
    $expanded256 = $expanded257 ^ -1;
    $318 = $316 & $expanded256;
    $319 = $318;
    $320 = HEAP32[$319>>2]|0;
    $arglist_next57 = ((($319)) + 4|0);
    HEAP32[$4>>2] = $arglist_next57;
    $351 = $320;$352 = 0;
    break;
   }
   case 4:  {
    $arglist_current59 = HEAP32[$4>>2]|0;
    $321 = $arglist_current59;
    $322 = ((0) + 8|0);
    $expanded261 = $322;
    $expanded260 = (($expanded261) - 1)|0;
    $323 = (($321) + ($expanded260))|0;
    $324 = ((0) + 8|0);
    $expanded265 = $324;
    $expanded264 = (($expanded265) - 1)|0;
    $expanded263 = $expanded264 ^ -1;
    $325 = $323 & $expanded263;
    $326 = $325;
    $327 = $326;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    $arglist_next60 = ((($326)) + 8|0);
    HEAP32[$4>>2] = $arglist_next60;
    $351 = $329;$352 = $332;
    break;
   }
   case 5:  {
    $arglist_current62 = HEAP32[$4>>2]|0;
    $333 = $arglist_current62;
    $334 = ((0) + 4|0);
    $expanded268 = $334;
    $expanded267 = (($expanded268) - 1)|0;
    $335 = (($333) + ($expanded267))|0;
    $336 = ((0) + 4|0);
    $expanded272 = $336;
    $expanded271 = (($expanded272) - 1)|0;
    $expanded270 = $expanded271 ^ -1;
    $337 = $335 & $expanded270;
    $338 = $337;
    $339 = HEAP32[$338>>2]|0;
    $arglist_next63 = ((($338)) + 4|0);
    HEAP32[$4>>2] = $arglist_next63;
    $351 = $339;$352 = 0;
    break;
   }
   case 6:  {
    $arglist_current65 = HEAP32[$4>>2]|0;
    $340 = $arglist_current65;
    $341 = ((0) + 4|0);
    $expanded275 = $341;
    $expanded274 = (($expanded275) - 1)|0;
    $342 = (($340) + ($expanded274))|0;
    $343 = ((0) + 4|0);
    $expanded279 = $343;
    $expanded278 = (($expanded279) - 1)|0;
    $expanded277 = $expanded278 ^ -1;
    $344 = $342 & $expanded277;
    $345 = $344;
    $346 = HEAP32[$345>>2]|0;
    $arglist_next66 = ((($345)) + 4|0);
    HEAP32[$4>>2] = $arglist_next66;
    $347 = ($346|0)<(0);
    $348 = $347 << 31 >> 31;
    $351 = $346;$352 = $348;
    break;
   }
   default: {
    label = 82;
    break L1;
   }
   }
   _FormatInt($4,$351,$352);
   $$070$phi = $$070;$$0 = $$7;$$070 = $$070$phi;
   continue L1;
   break;
  }
  case 88:  {
   $353 = $$ | 384;
   HEAP32[$9>>2] = $353;
   break;
  }
  case 120:  {
   break;
  }
  case 99:  {
   $arglist_current89 = HEAP32[$4>>2]|0;
   $414 = $arglist_current89;
   $415 = ((0) + 4|0);
   $expanded331 = $415;
   $expanded330 = (($expanded331) - 1)|0;
   $416 = (($414) + ($expanded330))|0;
   $417 = ((0) + 4|0);
   $expanded335 = $417;
   $expanded334 = (($expanded335) - 1)|0;
   $expanded333 = $expanded334 ^ -1;
   $418 = $416 & $expanded333;
   $419 = $418;
   $420 = HEAP32[$419>>2]|0;
   $arglist_next90 = ((($419)) + 4|0);
   HEAP32[$4>>2] = $arglist_next90;
   $421 = $420&255;
   HEAP8[$5>>0] = $421;
   HEAP8[$14>>0] = 0;
   _FormatStr($4,$5);
   $$070$phi = $$070;$$0 = $$7;$$070 = $$070$phi;
   continue L1;
   break;
  }
  case 115:  {
   $arglist_current92 = HEAP32[$4>>2]|0;
   $422 = $arglist_current92;
   $423 = ((0) + 4|0);
   $expanded338 = $423;
   $expanded337 = (($expanded338) - 1)|0;
   $424 = (($422) + ($expanded337))|0;
   $425 = ((0) + 4|0);
   $expanded342 = $425;
   $expanded341 = (($expanded342) - 1)|0;
   $expanded340 = $expanded341 ^ -1;
   $426 = $424 & $expanded340;
   $427 = $426;
   $428 = HEAP32[$427>>2]|0;
   $arglist_next93 = ((($427)) + 4|0);
   HEAP32[$4>>2] = $arglist_next93;
   $429 = ($428|0)==(0|0);
   if ($429) {
    label = 97;
    break L1;
   }
   _FormatStr($4,$428);
   $$070$phi = $$070;$$0 = $$7;$$070 = $$070$phi;
   continue L1;
   break;
  }
  case 112:  {
   $432 = ($$070|0)==(0);
   if ($432) {
    $449 = $$ | 192;
    HEAP32[$9>>2] = $449;
    HEAP32[$11>>2] = 8;
    HEAP32[$13>>2] = 16;
    $arglist_current98 = HEAP32[$4>>2]|0;
    $450 = $arglist_current98;
    $451 = ((0) + 4|0);
    $expanded352 = $451;
    $expanded351 = (($expanded352) - 1)|0;
    $452 = (($450) + ($expanded351))|0;
    $453 = ((0) + 4|0);
    $expanded356 = $453;
    $expanded355 = (($expanded356) - 1)|0;
    $expanded354 = $expanded355 ^ -1;
    $454 = $452 & $expanded354;
    $455 = $454;
    $456 = HEAP32[$455>>2]|0;
    $arglist_next99 = ((($455)) + 4|0);
    HEAP32[$4>>2] = $arglist_next99;
    $457 = $456;
    _FormatInt($4,$457,0);
    $$0 = $$7;$$070 = 0;
    continue L1;
   }
   $arglist_current95 = HEAP32[$4>>2]|0;
   $433 = $arglist_current95;
   $434 = ((0) + 4|0);
   $expanded345 = $434;
   $expanded344 = (($expanded345) - 1)|0;
   $435 = (($433) + ($expanded344))|0;
   $436 = ((0) + 4|0);
   $expanded349 = $436;
   $expanded348 = (($expanded349) - 1)|0;
   $expanded347 = $expanded348 ^ -1;
   $437 = $435 & $expanded347;
   $438 = $437;
   $439 = HEAP32[$438>>2]|0;
   $arglist_next96 = ((($438)) + 4|0);
   HEAP32[$4>>2] = $arglist_next96;
   $440 = ($439|0)==(0|0);
   if ($440) {
    label = 101;
    break L1;
   }
   $443 = HEAP32[$9>>2]|0;
   $444 = $443 & 64;
   $445 = ($444|0)==(0);
   if ($445) {
    $448 = $443 | 64;
    HEAP32[$9>>2] = $448;
    $$idx = ((($439)) + 4|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    HEAP32[$11>>2] = $$idx$val;
   } else {
    $446 = HEAP32[$11>>2]|0;
    $$idx73 = ((($439)) + 4|0);
    $$idx73$val = HEAP32[$$idx73>>2]|0;
    $447 = ($446>>>0)>($$idx73$val>>>0);
    if ($447) {
     HEAP32[$11>>2] = $$idx73$val;
    }
   }
   $$idx74$val = HEAP32[$439>>2]|0;
   _FormatStr($4,$$idx74$val);
   $$0 = $$7;$$070 = 0;
   continue L1;
   break;
  }
  default: {
   label = 117;
   break L1;
  }
  }
  HEAP32[$13>>2] = 16;
  $$clear409 = $158 & 7;
  switch ($$clear409<<24>>24) {
  case 0:  {
   $arglist_current68 = HEAP32[$4>>2]|0;
   $354 = $arglist_current68;
   $355 = ((0) + 4|0);
   $expanded282 = $355;
   $expanded281 = (($expanded282) - 1)|0;
   $356 = (($354) + ($expanded281))|0;
   $357 = ((0) + 4|0);
   $expanded286 = $357;
   $expanded285 = (($expanded286) - 1)|0;
   $expanded284 = $expanded285 ^ -1;
   $358 = $356 & $expanded284;
   $359 = $358;
   $360 = HEAP32[$359>>2]|0;
   $arglist_next69 = ((($359)) + 4|0);
   HEAP32[$4>>2] = $arglist_next69;
   $$mask15$i82 = $360 & 255;
   $412 = $$mask15$i82;$413 = 0;
   break;
  }
  case 1:  {
   $arglist_current71 = HEAP32[$4>>2]|0;
   $361 = $arglist_current71;
   $362 = ((0) + 4|0);
   $expanded289 = $362;
   $expanded288 = (($expanded289) - 1)|0;
   $363 = (($361) + ($expanded288))|0;
   $364 = ((0) + 4|0);
   $expanded293 = $364;
   $expanded292 = (($expanded293) - 1)|0;
   $expanded291 = $expanded292 ^ -1;
   $365 = $363 & $expanded291;
   $366 = $365;
   $367 = HEAP32[$366>>2]|0;
   $arglist_next72 = ((($366)) + 4|0);
   HEAP32[$4>>2] = $arglist_next72;
   $$mask$i83 = $367 & 65535;
   $412 = $$mask$i83;$413 = 0;
   break;
  }
  case 2:  {
   $arglist_current74 = HEAP32[$4>>2]|0;
   $368 = $arglist_current74;
   $369 = ((0) + 4|0);
   $expanded296 = $369;
   $expanded295 = (($expanded296) - 1)|0;
   $370 = (($368) + ($expanded295))|0;
   $371 = ((0) + 4|0);
   $expanded300 = $371;
   $expanded299 = (($expanded300) - 1)|0;
   $expanded298 = $expanded299 ^ -1;
   $372 = $370 & $expanded298;
   $373 = $372;
   $374 = HEAP32[$373>>2]|0;
   $arglist_next75 = ((($373)) + 4|0);
   HEAP32[$4>>2] = $arglist_next75;
   $412 = $374;$413 = 0;
   break;
  }
  case 3:  {
   $arglist_current77 = HEAP32[$4>>2]|0;
   $375 = $arglist_current77;
   $376 = ((0) + 4|0);
   $expanded303 = $376;
   $expanded302 = (($expanded303) - 1)|0;
   $377 = (($375) + ($expanded302))|0;
   $378 = ((0) + 4|0);
   $expanded307 = $378;
   $expanded306 = (($expanded307) - 1)|0;
   $expanded305 = $expanded306 ^ -1;
   $379 = $377 & $expanded305;
   $380 = $379;
   $381 = HEAP32[$380>>2]|0;
   $arglist_next78 = ((($380)) + 4|0);
   HEAP32[$4>>2] = $arglist_next78;
   $412 = $381;$413 = 0;
   break;
  }
  case 4:  {
   $arglist_current80 = HEAP32[$4>>2]|0;
   $382 = $arglist_current80;
   $383 = ((0) + 8|0);
   $expanded310 = $383;
   $expanded309 = (($expanded310) - 1)|0;
   $384 = (($382) + ($expanded309))|0;
   $385 = ((0) + 8|0);
   $expanded314 = $385;
   $expanded313 = (($expanded314) - 1)|0;
   $expanded312 = $expanded313 ^ -1;
   $386 = $384 & $expanded312;
   $387 = $386;
   $388 = $387;
   $389 = $388;
   $390 = HEAP32[$389>>2]|0;
   $391 = (($388) + 4)|0;
   $392 = $391;
   $393 = HEAP32[$392>>2]|0;
   $arglist_next81 = ((($387)) + 8|0);
   HEAP32[$4>>2] = $arglist_next81;
   $412 = $390;$413 = $393;
   break;
  }
  case 5:  {
   $arglist_current83 = HEAP32[$4>>2]|0;
   $394 = $arglist_current83;
   $395 = ((0) + 4|0);
   $expanded317 = $395;
   $expanded316 = (($expanded317) - 1)|0;
   $396 = (($394) + ($expanded316))|0;
   $397 = ((0) + 4|0);
   $expanded321 = $397;
   $expanded320 = (($expanded321) - 1)|0;
   $expanded319 = $expanded320 ^ -1;
   $398 = $396 & $expanded319;
   $399 = $398;
   $400 = HEAP32[$399>>2]|0;
   $arglist_next84 = ((($399)) + 4|0);
   HEAP32[$4>>2] = $arglist_next84;
   $412 = $400;$413 = 0;
   break;
  }
  case 6:  {
   $arglist_current86 = HEAP32[$4>>2]|0;
   $401 = $arglist_current86;
   $402 = ((0) + 4|0);
   $expanded324 = $402;
   $expanded323 = (($expanded324) - 1)|0;
   $403 = (($401) + ($expanded323))|0;
   $404 = ((0) + 4|0);
   $expanded328 = $404;
   $expanded327 = (($expanded328) - 1)|0;
   $expanded326 = $expanded327 ^ -1;
   $405 = $403 & $expanded326;
   $406 = $405;
   $407 = HEAP32[$406>>2]|0;
   $arglist_next87 = ((($406)) + 4|0);
   HEAP32[$4>>2] = $arglist_next87;
   $408 = ($407|0)<(0);
   $409 = $408 << 31 >> 31;
   $412 = $407;$413 = $409;
   break;
  }
  default: {
   label = 93;
   break L1;
  }
  }
  _FormatInt($4,$412,$413);
  $$070$phi = $$070;$$0 = $$7;$$070 = $$070$phi;
 }
 if ((label|0) == 62) {
  $227 = HEAP32[3332]|0;
  $228 = HEAP32[3329]|0;
  FUNCTION_TABLE_viiii[$227 & 1]($228,41358,41388,160);
  // unreachable;
 }
 else if ((label|0) == 72) {
  $288 = HEAP32[3332]|0;
  $289 = HEAP32[3329]|0;
  FUNCTION_TABLE_viiii[$288 & 1]($289,41406,41388,179);
  // unreachable;
 }
 else if ((label|0) == 82) {
  $349 = HEAP32[3332]|0;
  $350 = HEAP32[3329]|0;
  FUNCTION_TABLE_viiii[$349 & 1]($350,41406,41388,179);
  // unreachable;
 }
 else if ((label|0) == 93) {
  $410 = HEAP32[3332]|0;
  $411 = HEAP32[3329]|0;
  FUNCTION_TABLE_viiii[$410 & 1]($411,41406,41388,179);
  // unreachable;
 }
 else if ((label|0) == 97) {
  $430 = HEAP32[3332]|0;
  $431 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$430 & 1]($431,41436,41388,571);
  // unreachable;
 }
 else if ((label|0) == 101) {
  $441 = HEAP32[3332]|0;
  $442 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$441 & 1]($442,41446,41388,580);
  // unreachable;
 }
 else if ((label|0) == 108) {
  $$clear410 = $158 & 7;
  switch ($$clear410<<24>>24) {
  case 0:  {
   $458 = HEAP32[$8>>2]|0;
   $arglist_current101 = HEAP32[$4>>2]|0;
   $459 = $arglist_current101;
   $460 = ((0) + 4|0);
   $expanded359 = $460;
   $expanded358 = (($expanded359) - 1)|0;
   $461 = (($459) + ($expanded358))|0;
   $462 = ((0) + 4|0);
   $expanded363 = $462;
   $expanded362 = (($expanded363) - 1)|0;
   $expanded361 = $expanded362 ^ -1;
   $463 = $461 & $expanded361;
   $464 = $463;
   $465 = HEAP32[$464>>2]|0;
   $arglist_next102 = ((($464)) + 4|0);
   HEAP32[$4>>2] = $arglist_next102;
   HEAP32[$465>>2] = $458;
   label = 110;
   break;
  }
  case 1:  {
   label = 110;
   break;
  }
  case 2:  {
   label = 111;
   break;
  }
  case 3:  {
   label = 112;
   break;
  }
  case 4:  {
   label = 113;
   break;
  }
  case 5:  {
   label = 114;
   break;
  }
  case 6:  {
   break;
  }
  default: {
   $518 = HEAP32[3332]|0;
   $519 = HEAP32[3329]|0;
   FUNCTION_TABLE_viiii[$518 & 1]($519,41453,41388,362);
   // unreachable;
  }
  }
  if ((label|0) == 110) {
   $466 = HEAP32[$8>>2]|0;
   $arglist_current104 = HEAP32[$4>>2]|0;
   $467 = $arglist_current104;
   $468 = ((0) + 4|0);
   $expanded366 = $468;
   $expanded365 = (($expanded366) - 1)|0;
   $469 = (($467) + ($expanded365))|0;
   $470 = ((0) + 4|0);
   $expanded370 = $470;
   $expanded369 = (($expanded370) - 1)|0;
   $expanded368 = $expanded369 ^ -1;
   $471 = $469 & $expanded368;
   $472 = $471;
   $473 = HEAP32[$472>>2]|0;
   $arglist_next105 = ((($472)) + 4|0);
   HEAP32[$4>>2] = $arglist_next105;
   HEAP32[$473>>2] = $466;
   label = 111;
  }
  if ((label|0) == 111) {
   $474 = HEAP32[$8>>2]|0;
   $arglist_current107 = HEAP32[$4>>2]|0;
   $475 = $arglist_current107;
   $476 = ((0) + 4|0);
   $expanded373 = $476;
   $expanded372 = (($expanded373) - 1)|0;
   $477 = (($475) + ($expanded372))|0;
   $478 = ((0) + 4|0);
   $expanded377 = $478;
   $expanded376 = (($expanded377) - 1)|0;
   $expanded375 = $expanded376 ^ -1;
   $479 = $477 & $expanded375;
   $480 = $479;
   $481 = HEAP32[$480>>2]|0;
   $arglist_next108 = ((($480)) + 4|0);
   HEAP32[$4>>2] = $arglist_next108;
   HEAP32[$481>>2] = $474;
   label = 112;
  }
  if ((label|0) == 112) {
   $482 = HEAP32[$8>>2]|0;
   $arglist_current110 = HEAP32[$4>>2]|0;
   $483 = $arglist_current110;
   $484 = ((0) + 4|0);
   $expanded380 = $484;
   $expanded379 = (($expanded380) - 1)|0;
   $485 = (($483) + ($expanded379))|0;
   $486 = ((0) + 4|0);
   $expanded384 = $486;
   $expanded383 = (($expanded384) - 1)|0;
   $expanded382 = $expanded383 ^ -1;
   $487 = $485 & $expanded382;
   $488 = $487;
   $489 = HEAP32[$488>>2]|0;
   $arglist_next111 = ((($488)) + 4|0);
   HEAP32[$4>>2] = $arglist_next111;
   HEAP32[$489>>2] = $482;
   label = 113;
  }
  if ((label|0) == 113) {
   $490 = HEAP32[$8>>2]|0;
   $arglist_current113 = HEAP32[$4>>2]|0;
   $491 = $arglist_current113;
   $492 = ((0) + 4|0);
   $expanded387 = $492;
   $expanded386 = (($expanded387) - 1)|0;
   $493 = (($491) + ($expanded386))|0;
   $494 = ((0) + 4|0);
   $expanded391 = $494;
   $expanded390 = (($expanded391) - 1)|0;
   $expanded389 = $expanded390 ^ -1;
   $495 = $493 & $expanded389;
   $496 = $495;
   $497 = HEAP32[$496>>2]|0;
   $arglist_next114 = ((($496)) + 4|0);
   HEAP32[$4>>2] = $arglist_next114;
   $498 = $497;
   $499 = $498;
   HEAP32[$499>>2] = $490;
   $500 = (($498) + 4)|0;
   $501 = $500;
   HEAP32[$501>>2] = 0;
   label = 114;
  }
  if ((label|0) == 114) {
   $502 = HEAP32[$8>>2]|0;
   $arglist_current116 = HEAP32[$4>>2]|0;
   $503 = $arglist_current116;
   $504 = ((0) + 4|0);
   $expanded394 = $504;
   $expanded393 = (($expanded394) - 1)|0;
   $505 = (($503) + ($expanded393))|0;
   $506 = ((0) + 4|0);
   $expanded398 = $506;
   $expanded397 = (($expanded398) - 1)|0;
   $expanded396 = $expanded397 ^ -1;
   $507 = $505 & $expanded396;
   $508 = $507;
   $509 = HEAP32[$508>>2]|0;
   $arglist_next117 = ((($508)) + 4|0);
   HEAP32[$4>>2] = $arglist_next117;
   HEAP32[$509>>2] = $502;
  }
  $510 = HEAP32[$8>>2]|0;
  $arglist_current119 = HEAP32[$4>>2]|0;
  $511 = $arglist_current119;
  $512 = ((0) + 4|0);
  $expanded401 = $512;
  $expanded400 = (($expanded401) - 1)|0;
  $513 = (($511) + ($expanded400))|0;
  $514 = ((0) + 4|0);
  $expanded405 = $514;
  $expanded404 = (($expanded405) - 1)|0;
  $expanded403 = $expanded404 ^ -1;
  $515 = $513 & $expanded403;
  $516 = $515;
  $517 = HEAP32[$516>>2]|0;
  $arglist_next120 = ((($516)) + 4|0);
  HEAP32[$4>>2] = $arglist_next120;
  HEAP32[$517>>2] = $510;
  $518 = HEAP32[3332]|0;
  $519 = HEAP32[3329]|0;
  FUNCTION_TABLE_viiii[$518 & 1]($519,41453,41388,362);
  // unreachable;
 }
 else if ((label|0) == 117) {
  $520 = HEAP32[3332]|0;
  $521 = HEAP32[3329]|0;
  FUNCTION_TABLE_viiii[$520 & 1]($521,41508,41388,616);
  // unreachable;
 }
 else if ((label|0) == 118) {
  $522 = HEAP32[$8>>2]|0;
  $523 = (($522) + 1)|0;
  HEAP32[$8>>2] = $523;
  $524 = HEAP32[$7>>2]|0;
  $525 = ($523>>>0)>($524>>>0);
  if ($525) {
   $529 = $523;
   $528 = (($529) + -1)|0;
   STACKTOP = sp;return ($528|0);
  }
  $526 = HEAP32[$6>>2]|0;
  $527 = ((($526)) + 1|0);
  HEAP32[$6>>2] = $527;
  HEAP8[$526>>0] = 0;
  $$pre149 = HEAP32[$8>>2]|0;
  $529 = $$pre149;
  $528 = (($529) + -1)|0;
  STACKTOP = sp;return ($528|0);
 }
 return (0)|0;
}
function _FormatInt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa$i = 0, $$02$i = 0, $$02$i78 = 0, $$02$i82 = 0, $$02$i87 = 0, $$07191 = 0, $$072 = 0, $$073 = 0, $$074 = 0, $$175 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $$pre = 0, $$pre$i = 0, $$pre94 = 0, $$pre95 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $4 = ((($0)) + 288|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 256;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 41547 : 41564;
 $9 = ((($0)) + 296|0);
 HEAP32[$9>>2] = $8;
 $10 = $5 & 128;
 $11 = ($10|0)==(0);
 $12 = ($2|0)<(0);
 $or$cond = $12 & $11;
 do {
  if ($or$cond) {
   $13 = (_i64Subtract(0,0,($1|0),($2|0))|0);
   $14 = tempRet0;
   HEAP8[$3>>0] = 45;
   $$074 = 1;$20 = $13;$22 = $14;
  } else {
   $15 = $5 & 2;
   $16 = ($15|0)==(0);
   if (!($16)) {
    HEAP8[$3>>0] = 43;
    $$074 = 1;$20 = $1;$22 = $2;
    break;
   }
   $17 = $5 & 4;
   $18 = ($17|0)==(0);
   if ($18) {
    $$074 = 0;$20 = $1;$22 = $2;
   } else {
    HEAP8[$3>>0] = 32;
    $$074 = 1;$20 = $1;$22 = $2;
   }
  }
 } while(0);
 $19 = ((($0)) + 28|0);
 $21 = ($20|0)==(0);
 $23 = ($22|0)==(0);
 $24 = $21 & $23;
 if ($24) {
  $$0$lcssa$i = $19;$61 = $5;
 } else {
  $25 = ((($0)) + 292|0);
  $$pre$i = HEAP32[$25>>2]|0;
  $26 = (___uremdi3(($20|0),($22|0),($$pre$i|0),0)|0);
  $27 = tempRet0;
  $28 = (($8) + ($26)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = ((($0)) + 29|0);
  HEAP8[$19>>0] = $29;
  $31 = HEAP32[$25>>2]|0;
  $32 = (0)>($22>>>0);
  $33 = ($31>>>0)>($20>>>0);
  $34 = (0)==($22|0);
  $35 = $34 & $33;
  $36 = $32 | $35;
  if ($36) {
   $$lcssa = $30;
  } else {
   $37 = $20;$38 = $22;$39 = $31;$40 = 0;$43 = $31;$49 = $30;
   while(1) {
    $41 = (___udivdi3(($37|0),($38|0),($39|0),($40|0))|0);
    $42 = tempRet0;
    $$pre = HEAP32[$9>>2]|0;
    $44 = (___uremdi3(($41|0),($42|0),($43|0),0)|0);
    $45 = tempRet0;
    $46 = (($$pre) + ($44)|0);
    $47 = HEAP8[$46>>0]|0;
    $48 = ((($49)) + 1|0);
    HEAP8[$49>>0] = $47;
    $50 = HEAP32[$25>>2]|0;
    $51 = (0)>($42>>>0);
    $52 = ($50>>>0)>($41>>>0);
    $53 = (0)==($42|0);
    $54 = $53 & $52;
    $55 = $51 | $54;
    if ($55) {
     $$lcssa = $48;
     break;
    } else {
     $37 = $41;$38 = $42;$39 = $50;$40 = 0;$43 = $50;$49 = $48;
    }
   }
  }
  $$pre94 = HEAP32[$4>>2]|0;
  $$0$lcssa$i = $$lcssa;$61 = $$pre94;
 }
 $56 = $$0$lcssa$i;
 $57 = $19;
 $58 = (($56) - ($57))|0;
 $59 = ((($0)) + 284|0);
 HEAP32[$59>>2] = $58;
 $60 = $61 & 64;
 $62 = ($60|0)==(0);
 if ($62) {
  $63 = ((($0)) + 304|0);
  $64 = $61 | 64;
  HEAP32[$4>>2] = $64;
  HEAP32[$63>>2] = 1;
  $66 = $64;
 } else {
  $66 = $61;
 }
 $65 = $66 & 8;
 $67 = ($65|0)==(0);
 L19: do {
  if ($67) {
   $$175 = $$074;
  } else {
   $68 = ((($0)) + 292|0);
   $69 = HEAP32[$68>>2]|0;
   switch ($69|0) {
   case 16:  {
    $70 = (($$074) + 1)|0;
    $71 = (($3) + ($$074)|0);
    HEAP8[$71>>0] = 48;
    $72 = $66 >>> 3;
    $73 = $72 & 32;
    $74 = $73 ^ 120;
    $75 = $74&255;
    $76 = $$074 | 2;
    $77 = (($3) + ($70)|0);
    HEAP8[$77>>0] = $75;
    $$175 = $76;
    break L19;
    break;
   }
   case 8:  {
    break;
   }
   default: {
    $$175 = $$074;
    break L19;
   }
   }
   $78 = ((($0)) + 304|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)>($58|0);
   if ($80) {
    $$175 = $$074;
   } else {
    $81 = (($3) + ($$074)|0);
    $82 = (($$074) + 1)|0;
    HEAP8[$81>>0] = 48;
    $$175 = $82;
   }
  }
 } while(0);
 $83 = ((($0)) + 304|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)>($58|0);
 $86 = (($84) - ($58))|0;
 $$073 = $85 ? $86 : 0;
 $87 = $66 & 32;
 $88 = ($87|0)==(0);
 $89 = (($58) + ($$175))|0;
 $90 = (($89) + ($$073))|0;
 if ($88) {
  $$2 = 0;
 } else {
  $91 = ((($0)) + 300|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92|0)>($90|0);
  $94 = (($92) - ($90))|0;
  $$072 = $93 ? $94 : 0;
  $95 = $66 & 17;
  $96 = ($95|0)==(0);
  $97 = ($$072|0)!=(0);
  $or$cond3 = $96 & $97;
  if ($or$cond3) {
   $98 = ((($0)) + 24|0);
   $99 = ((($0)) + 20|0);
   $100 = ((($0)) + 16|0);
   $$02$i87 = $94;
   while(1) {
    $101 = (($$02$i87) + -1)|0;
    $102 = HEAP32[$98>>2]|0;
    $103 = (($102) + 1)|0;
    HEAP32[$98>>2] = $103;
    $104 = HEAP32[$99>>2]|0;
    $105 = ($103>>>0)>($104>>>0);
    if (!($105)) {
     $107 = HEAP32[$100>>2]|0;
     $108 = ((($107)) + 1|0);
     HEAP32[$100>>2] = $108;
     HEAP8[$107>>0] = 32;
    }
    $106 = ($101|0)==(0);
    if ($106) {
     $$2 = 0;
     break;
    } else {
     $$02$i87 = $101;
    }
   }
  } else {
   $$2 = $$072;
  }
 }
 $109 = ($$175|0)==(0);
 if (!($109)) {
  $110 = ((($0)) + 24|0);
  $111 = ((($0)) + 20|0);
  $112 = ((($0)) + 16|0);
  $$07191 = 0;
  while(1) {
   $113 = (($3) + ($$07191)|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = HEAP32[$110>>2]|0;
   $116 = (($115) + 1)|0;
   HEAP32[$110>>2] = $116;
   $117 = HEAP32[$111>>2]|0;
   $118 = ($116>>>0)>($117>>>0);
   if (!($118)) {
    $119 = HEAP32[$112>>2]|0;
    $120 = ((($119)) + 1|0);
    HEAP32[$112>>2] = $120;
    HEAP8[$119>>0] = $114;
   }
   $121 = (($$07191) + 1)|0;
   $exitcond = ($121|0)==($$175|0);
   if ($exitcond) {
    break;
   } else {
    $$07191 = $121;
   }
  }
 }
 $122 = HEAP32[$4>>2]|0;
 $123 = $122 & 16;
 $124 = ($123|0)!=(0);
 $125 = ($$2|0)!=(0);
 $or$cond5 = $125 & $124;
 if ($or$cond5) {
  $126 = ((($0)) + 24|0);
  $127 = ((($0)) + 20|0);
  $128 = ((($0)) + 16|0);
  $$02$i82 = $$2;
  while(1) {
   $129 = (($$02$i82) + -1)|0;
   $130 = HEAP32[$126>>2]|0;
   $131 = (($130) + 1)|0;
   HEAP32[$126>>2] = $131;
   $132 = HEAP32[$127>>2]|0;
   $133 = ($131>>>0)>($132>>>0);
   if (!($133)) {
    $135 = HEAP32[$128>>2]|0;
    $136 = ((($135)) + 1|0);
    HEAP32[$128>>2] = $136;
    HEAP8[$135>>0] = 48;
   }
   $134 = ($129|0)==(0);
   if ($134) {
    $$3 = 0;
    break;
   } else {
    $$02$i82 = $129;
   }
  }
 } else {
  $$3 = $$2;
 }
 $137 = ($$073|0)==(0);
 if (!($137)) {
  $138 = ((($0)) + 24|0);
  $139 = ((($0)) + 20|0);
  $140 = ((($0)) + 16|0);
  $$02$i78 = $86;
  while(1) {
   $141 = (($$02$i78) + -1)|0;
   $142 = HEAP32[$138>>2]|0;
   $143 = (($142) + 1)|0;
   HEAP32[$138>>2] = $143;
   $144 = HEAP32[$139>>2]|0;
   $145 = ($143>>>0)>($144>>>0);
   if (!($145)) {
    $152 = HEAP32[$140>>2]|0;
    $153 = ((($152)) + 1|0);
    HEAP32[$140>>2] = $153;
    HEAP8[$152>>0] = 48;
   }
   $146 = ($141|0)==(0);
   if ($146) {
    break;
   } else {
    $$02$i78 = $141;
   }
  }
 }
 $147 = HEAP32[$59>>2]|0;
 $148 = ($147|0)>(0);
 if ($148) {
  $149 = ((($0)) + 24|0);
  $150 = ((($0)) + 20|0);
  $151 = ((($0)) + 16|0);
  $155 = $147;
  while(1) {
   $154 = (($155) + -1)|0;
   HEAP32[$59>>2] = $154;
   $156 = (((($0)) + 28|0) + ($154)|0);
   $157 = HEAP8[$156>>0]|0;
   $158 = HEAP32[$149>>2]|0;
   $159 = (($158) + 1)|0;
   HEAP32[$149>>2] = $159;
   $160 = HEAP32[$150>>2]|0;
   $161 = ($159>>>0)>($160>>>0);
   if ($161) {
    $162 = $154;
   } else {
    $164 = HEAP32[$151>>2]|0;
    $165 = ((($164)) + 1|0);
    HEAP32[$151>>2] = $165;
    HEAP8[$164>>0] = $157;
    $$pre95 = HEAP32[$59>>2]|0;
    $162 = $$pre95;
   }
   $163 = ($162|0)>(0);
   if ($163) {
    $155 = $162;
   } else {
    break;
   }
  }
 }
 $166 = ($$3|0)==(0);
 if ($166) {
  STACKTOP = sp;return;
 }
 $167 = ((($0)) + 24|0);
 $168 = ((($0)) + 20|0);
 $169 = ((($0)) + 16|0);
 $$02$i = $$3;
 while(1) {
  $170 = (($$02$i) + -1)|0;
  $171 = HEAP32[$167>>2]|0;
  $172 = (($171) + 1)|0;
  HEAP32[$167>>2] = $172;
  $173 = HEAP32[$168>>2]|0;
  $174 = ($172>>>0)>($173>>>0);
  if (!($174)) {
   $176 = HEAP32[$169>>2]|0;
   $177 = ((($176)) + 1|0);
   HEAP32[$169>>2] = $177;
   HEAP8[$176>>0] = 32;
  }
  $175 = ($170|0)==(0);
  if ($175) {
   break;
  } else {
   $$02$i = $170;
  }
 }
 STACKTOP = sp;return;
}
function _FormatStr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$02$i = 0, $$02$i32 = 0, $$037 = 0, $$1 = 0, $$130$ph = 0, $$236 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 288|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 64;
 $5 = ($4|0)==(0);
 if ($5) {
  $13 = (_strlen($1)|0);
  $$1 = $13;
 } else {
  $6 = ((($0)) + 304|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_memchr($1,0,$7)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$1 = $7;
  } else {
   $10 = $8;
   $11 = $1;
   $12 = (($10) - ($11))|0;
   $$1 = $12;
  }
 }
 $14 = $3 & 32;
 $15 = ($14|0)==(0);
 if ($15) {
  $$130$ph = 0;
 } else {
  $20 = ((($0)) + 300|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)>($$1|0);
  $23 = (($21) - ($$1))|0;
  $$ = $22 ? $23 : 0;
  $24 = $3 & 1;
  $25 = ($24|0)!=(0);
  $26 = ($$|0)!=(0);
  $or$cond = $25 & $26;
  if ($or$cond) {
   $27 = ((($0)) + 24|0);
   $28 = ((($0)) + 20|0);
   $29 = ((($0)) + 16|0);
   $$02$i = $23;
   while(1) {
    $30 = (($$02$i) + -1)|0;
    $31 = HEAP32[$27>>2]|0;
    $32 = (($31) + 1)|0;
    HEAP32[$27>>2] = $32;
    $33 = HEAP32[$28>>2]|0;
    $34 = ($32>>>0)>($33>>>0);
    if (!($34)) {
     $36 = HEAP32[$29>>2]|0;
     $37 = ((($36)) + 1|0);
     HEAP32[$29>>2] = $37;
     HEAP8[$36>>0] = 32;
    }
    $35 = ($30|0)==(0);
    if ($35) {
     $$130$ph = 0;
     break;
    } else {
     $$02$i = $30;
    }
   }
  } else {
   $$130$ph = $$;
  }
 }
 $16 = ($$1|0)==(0);
 if (!($16)) {
  $17 = ((($0)) + 24|0);
  $18 = ((($0)) + 20|0);
  $19 = ((($0)) + 16|0);
  $$037 = $1;$$236 = $$1;
  while(1) {
   $38 = (($$236) + -1)|0;
   $39 = ((($$037)) + 1|0);
   $40 = HEAP8[$$037>>0]|0;
   $41 = HEAP32[$17>>2]|0;
   $42 = (($41) + 1)|0;
   HEAP32[$17>>2] = $42;
   $43 = HEAP32[$18>>2]|0;
   $44 = ($42>>>0)>($43>>>0);
   if (!($44)) {
    $46 = HEAP32[$19>>2]|0;
    $47 = ((($46)) + 1|0);
    HEAP32[$19>>2] = $47;
    HEAP8[$46>>0] = $40;
   }
   $45 = ($38|0)==(0);
   if ($45) {
    break;
   } else {
    $$037 = $39;$$236 = $38;
   }
  }
 }
 $48 = ($$130$ph|0)==(0);
 if ($48) {
  return;
 }
 $49 = ((($0)) + 24|0);
 $50 = ((($0)) + 20|0);
 $51 = ((($0)) + 16|0);
 $$02$i32 = $$130$ph;
 while(1) {
  $52 = (($$02$i32) + -1)|0;
  $53 = HEAP32[$49>>2]|0;
  $54 = (($53) + 1)|0;
  HEAP32[$49>>2] = $54;
  $55 = HEAP32[$50>>2]|0;
  $56 = ($54>>>0)>($55>>>0);
  if (!($56)) {
   $58 = HEAP32[$51>>2]|0;
   $59 = ((($58)) + 1|0);
   HEAP32[$51>>2] = $59;
   HEAP8[$58>>0] = 32;
  }
  $57 = ($52|0)==(0);
  if ($57) {
   break;
  } else {
   $$02$i32 = $52;
  }
 }
 return;
}
function _xsnprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_xvsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _xsprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_xvsnprintf($0,$1,$2,$3)|0);
 $5 = ($4|0)>(-1);
 $6 = (($4) + 1)|0;
 $7 = ($6>>>0)<($1>>>0);
 $or$cond$i = $5 & $7;
 if ($or$cond$i) {
  STACKTOP = sp;return ($4|0);
 } else {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,41581,41388,676);
  // unreachable;
 }
 return (0)|0;
}
function _xvsprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_xvsnprintf($0,$1,$2,$3)|0);
 $5 = ($4|0)>(-1);
 $6 = (($4) + 1)|0;
 $7 = ($6>>>0)<($1>>>0);
 $or$cond = $5 & $7;
 if ($or$cond) {
  return ($4|0);
 } else {
  $8 = HEAP32[3332]|0;
  $9 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$8 & 1]($9,41581,41388,676);
  // unreachable;
 }
 return (0)|0;
}
function _xmalloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_malloc($0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  HEAP32[$vararg_buffer>>2] = $0;
  _AbEnd(41622,$vararg_buffer);
  // unreachable;
 } else {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _xrealloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $2 = (_realloc($0,$1)|0);
 $3 = ($2|0)==(0|0);
 $4 = ($1|0)!=(0);
 $or$cond = $4 & $3;
 if ($or$cond) {
  HEAP32[$vararg_buffer>>2] = $1;
  _AbEnd(41665,$vararg_buffer);
  // unreachable;
 } else {
  STACKTOP = sp;return ($2|0);
 }
 return (0)|0;
}
function _xfree($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($0);
 return;
}
function _xstrdup($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$0$i = 0;
 } else {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   HEAP32[$vararg_buffer>>2] = $3;
   _AbEnd(41622,$vararg_buffer);
   // unreachable;
  } else {
   $$0$i = $5;
  }
 }
 _memcpy(($$0$i|0),($0|0),($3|0))|0;
 $$0 = $$0$i;
 STACKTOP = sp;return ($$0|0);
}
function _FindCPU($0) {
 $0 = $0|0;
 var $$ = 0, $$05 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[3629]|0;
 $2 = (_StrCaseCmp($1,$0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$05 = 0;
  return ($$05|0);
 }
 $4 = HEAP32[(14520)>>2]|0;
 $5 = (_StrCaseCmp($4,$0)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $$05 = 1;
  return ($$05|0);
 }
 $7 = HEAP32[(14524)>>2]|0;
 $8 = (_StrCaseCmp($7,$0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$05 = 2;
  return ($$05|0);
 }
 $10 = HEAP32[(14528)>>2]|0;
 $11 = (_StrCaseCmp($10,$0)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $$05 = 3;
  return ($$05|0);
 }
 $13 = HEAP32[(14532)>>2]|0;
 $14 = (_StrCaseCmp($13,$0)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  $$05 = 4;
  return ($$05|0);
 }
 $16 = HEAP32[(14536)>>2]|0;
 $17 = (_StrCaseCmp($16,$0)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $$05 = 5;
  return ($$05|0);
 }
 $19 = HEAP32[(14540)>>2]|0;
 $20 = (_StrCaseCmp($19,$0)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $$05 = 6;
  return ($$05|0);
 }
 $22 = HEAP32[(14544)>>2]|0;
 $23 = (_StrCaseCmp($22,$0)|0);
 $24 = ($23|0)==(0);
 if ($24) {
  $$05 = 7;
  return ($$05|0);
 }
 $25 = HEAP32[(14548)>>2]|0;
 $26 = (_StrCaseCmp($25,$0)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  $$05 = 8;
  return ($$05|0);
 } else {
  $28 = HEAP32[(14552)>>2]|0;
  $29 = (_StrCaseCmp($28,$0)|0);
  $30 = ($29|0)==(0);
  $$ = $30 ? 9 : -1;
  return ($$|0);
 }
 return (0)|0;
}
function _FileStat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_stat($0,$1)|0);
 return ($2|0);
}
function _SB_Done($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 _xfree($4);
 return;
}
function _NewStrBuf() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_xmalloc(16)|0);
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
 return ($0|0);
}
function _FreeStrBuf($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  _xfree($5);
 }
 _xfree($0);
 return;
}
function _SB_Drop($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)<($1>>>0);
 if ($4) {
  $5 = HEAP32[3332]|0;
  $6 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$5 & 1]($6,41780,41796,206);
  // unreachable;
 }
 $7 = (($3) - ($1))|0;
 HEAP32[$2>>2] = $7;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>($7>>>0);
 if (!($10)) {
  return;
 }
 HEAP32[$8>>2] = $7;
 return;
}
function _SB_Terminate($0) {
 $0 = $0|0;
 var $$$i = 0, $$0$i = 0, $$pre = 0, $$pre7 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>($5>>>0);
 if (!($6)) {
  $$pre7 = HEAP32[$0>>2]|0;
  $16 = $$pre7;$17 = $2;
  $15 = (($16) + ($17)|0);
  HEAP8[$15>>0] = 0;
  return;
 }
 $7 = ($5|0)==(0);
 $$$i = $7 ? 8 : $5;
 $$0$i = $$$i;
 while(1) {
  $8 = ($$0$i>>>0)<($3>>>0);
  $9 = $$0$i << 1;
  if ($8) {
   $$0$i = $9;
  } else {
   break;
  }
 }
 if ($7) {
  $12 = (_xmalloc($$0$i)|0);
  $13 = HEAP32[$0>>2]|0;
  $14 = HEAP32[$1>>2]|0;
  _memcpy(($12|0),($13|0),($14|0))|0;
  HEAP32[$0>>2] = $12;
  $18 = $12;
 } else {
  $10 = HEAP32[$0>>2]|0;
  $11 = (_xrealloc($10,$$0$i)|0);
  HEAP32[$0>>2] = $11;
  $18 = $11;
 }
 HEAP32[$4>>2] = $$0$i;
 $$pre = HEAP32[$1>>2]|0;
 $16 = $18;$17 = $$pre;
 $15 = (($16) + ($17)|0);
 HEAP8[$15>>0] = 0;
 return;
}
function _SB_CopyBuf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0$i = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $13 = ((($0)) + 4|0);
  HEAP32[$13>>2] = $2;
  return;
 }
 $4 = ((($0)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5>>>0)<($2>>>0);
 if ($6) {
  $7 = ($5|0)==(0);
  $$$i = $7 ? 8 : $5;
  $$0$i = $$$i;
  while(1) {
   $8 = ($$0$i>>>0)<($2>>>0);
   $9 = $$0$i << 1;
   if ($8) {
    $$0$i = $9;
   } else {
    break;
   }
  }
  if (!($7)) {
   $10 = HEAP32[$0>>2]|0;
   _xfree($10);
  }
  $11 = (_xmalloc($$0$i)|0);
  HEAP32[$0>>2] = $11;
  HEAP32[$4>>2] = $$0$i;
  $12 = $11;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $12 = $$pre;
 }
 _memcpy(($12|0),($1|0),($2|0))|0;
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $2;
 return;
}
function _SB_AppendChar($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0$i = 0, $$pre = 0, $$pre10 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 if (!($7)) {
  $$pre10 = HEAP32[$0>>2]|0;
  $18 = $$pre10;$19 = $3;
  $16 = $1&255;
  $17 = (($18) + ($19)|0);
  HEAP8[$17>>0] = $16;
  HEAP32[$2>>2] = $4;
  return;
 }
 $8 = ($6|0)==(0);
 $$$i = $8 ? 8 : $6;
 $$0$i = $$$i;
 while(1) {
  $9 = ($$0$i>>>0)<($4>>>0);
  $10 = $$0$i << 1;
  if ($9) {
   $$0$i = $10;
  } else {
   break;
  }
 }
 if ($8) {
  $13 = (_xmalloc($$0$i)|0);
  $14 = HEAP32[$0>>2]|0;
  $15 = HEAP32[$2>>2]|0;
  _memcpy(($13|0),($14|0),($15|0))|0;
  HEAP32[$0>>2] = $13;
  $20 = $13;
 } else {
  $11 = HEAP32[$0>>2]|0;
  $12 = (_xrealloc($11,$$0$i)|0);
  HEAP32[$0>>2] = $12;
  $20 = $12;
 }
 HEAP32[$5>>2] = $$0$i;
 $$pre = HEAP32[$2>>2]|0;
 $18 = $20;$19 = $$pre;
 $16 = $1&255;
 $17 = (($18) + ($19)|0);
 HEAP8[$17>>0] = $16;
 HEAP32[$2>>2] = $4;
 return;
}
function _SB_AppendBuf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0$i = 0, $$pre = 0, $$pre12 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 $6 = ((($0)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if (!($8)) {
  $$pre = HEAP32[$0>>2]|0;
  $18 = $$pre;$19 = $4;
  $17 = (($18) + ($19)|0);
  _memcpy(($17|0),($1|0),($2|0))|0;
  HEAP32[$3>>2] = $5;
  return;
 }
 $9 = ($7|0)==(0);
 $$$i = $9 ? 8 : $7;
 $$0$i = $$$i;
 while(1) {
  $10 = ($$0$i>>>0)<($5>>>0);
  $11 = $$0$i << 1;
  if ($10) {
   $$0$i = $11;
  } else {
   break;
  }
 }
 if ($9) {
  $14 = (_xmalloc($$0$i)|0);
  $15 = HEAP32[$0>>2]|0;
  $16 = HEAP32[$3>>2]|0;
  _memcpy(($14|0),($15|0),($16|0))|0;
  HEAP32[$0>>2] = $14;
  $20 = $14;
 } else {
  $12 = HEAP32[$0>>2]|0;
  $13 = (_xrealloc($12,$$0$i)|0);
  HEAP32[$0>>2] = $13;
  $20 = $13;
 }
 HEAP32[$6>>2] = $$0$i;
 $$pre12 = HEAP32[$3>>2]|0;
 $18 = $20;$19 = $$pre12;
 $17 = (($18) + ($19)|0);
 _memcpy(($17|0),($1|0),($2|0))|0;
 HEAP32[$3>>2] = $5;
 return;
}
function _SB_Move($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = HEAP32[$0>>2]|0;
  _xfree($5);
 }
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 return;
}
function _SB_Compare($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = HEAP32[$1>>2]|0;
  $9 = (_memcmp($7,$8,$3)|0);
  $10 = ($9|0)==(0);
  $$ = $10 ? -1 : $9;
  $$0 = $$;
  return ($$0|0);
 }
 $11 = ($3>>>0)>($5>>>0);
 $12 = HEAP32[$0>>2]|0;
 $13 = HEAP32[$1>>2]|0;
 if ($11) {
  $14 = (_memcmp($12,$13,$5)|0);
  $15 = ($14|0)==(0);
  $$1 = $15 ? 1 : $14;
  $$0 = $$1;
  return ($$0|0);
 } else {
  $16 = (_memcmp($12,$13,$3)|0);
  $$0 = $16;
  return ($$0|0);
 }
 return (0)|0;
}
function _SB_CompareStr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4>>>0)<($2>>>0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (_memcmp($6,$1,$4)|0);
  $8 = ($7|0)==(0);
  $$ = $8 ? -1 : $7;
  $$0 = $$;
  return ($$0|0);
 }
 $9 = ($4>>>0)>($2>>>0);
 $10 = HEAP32[$0>>2]|0;
 if ($9) {
  $11 = (_memcmp($10,$1,$2)|0);
  $12 = ($11|0)==(0);
  $$1 = $12 ? 1 : $11;
  $$0 = $$1;
  return ($$0|0);
 } else {
  $13 = (_memcmp($10,$1,$4)|0);
  $$0 = $13;
  return ($$0|0);
 }
 return (0)|0;
}
function _SB_VPrintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = sp;
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_xvsnprintf($4,$6,$1,$3)|0);
 $8 = ($7|0)>(-1);
 if (!($8)) {
  $9 = HEAP32[3332]|0;
  $10 = HEAP32[3331]|0;
  FUNCTION_TABLE_viiii[$9 & 1]($10,41812,41796,468);
  // unreachable;
 }
 $11 = HEAP32[$5>>2]|0;
 $12 = ($7>>>0)<($11>>>0);
 if ($12) {
  $19 = ((($0)) + 4|0);
  HEAP32[$19>>2] = $7;
  $20 = ((($0)) + 8|0);
  HEAP32[$20>>2] = 0;
  STACKTOP = sp;return;
 }
 $13 = (($7) + 1)|0;
 $14 = ($11|0)==(0);
 $$$i = $14 ? 8 : $11;
 $$0$i = $$$i;
 while(1) {
  $15 = ($$0$i>>>0)<($13>>>0);
  $16 = $$0$i << 1;
  if ($15) {
   $$0$i = $16;
  } else {
   break;
  }
 }
 if (!($14)) {
  $17 = HEAP32[$0>>2]|0;
  _xfree($17);
 }
 $18 = (_xmalloc($$0$i)|0);
 HEAP32[$0>>2] = $18;
 HEAP32[$5>>2] = $$0$i;
 (_xvsnprintf($18,$$0$i,$1,$2)|0);
 $19 = ((($0)) + 4|0);
 HEAP32[$19>>2] = $7;
 $20 = ((($0)) + 8|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _SB_Printf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 _SB_VPrintf($0,$1,$2);
 STACKTOP = sp;return;
}
function _GetVersionAsString() {
 var $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 15;
 (_xsnprintf(47052,60,41828,$vararg_buffer)|0);
 STACKTOP = sp;return (47052|0);
}
function _GetVersionAsNumber() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 752;
}
function _IS_Get($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,41834,41847,51);
  // unreachable;
 } else {
  $5 = (($1) + -1)|0;
  $6 = (((($0)) + 4|0) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  return ($7|0);
 }
 return (0)|0;
}
function _IS_Set($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,41834,41847,60);
  // unreachable;
 } else {
  $6 = (($2) + -1)|0;
  $7 = (((($0)) + 4|0) + ($6<<2)|0);
  HEAP32[$7>>2] = $1;
  return;
 }
}
function _IS_Drop($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = HEAP32[3332]|0;
  $4 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$3 & 1]($4,41834,41847,69);
  // unreachable;
 } else {
  $5 = (($1) + -1)|0;
  HEAP32[$0>>2] = $5;
  return;
 }
}
function _IS_Push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2>>>0)<(8);
 if ($3) {
  $6 = (($2) + 1)|0;
  HEAP32[$0>>2] = $6;
  $7 = (((($0)) + 4|0) + ($2<<2)|0);
  HEAP32[$7>>2] = $1;
  return;
 } else {
  $4 = HEAP32[3332]|0;
  $5 = HEAP32[3330]|0;
  FUNCTION_TABLE_viiii[$4 & 1]($5,41865,41847,78);
  // unreachable;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[11523]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((13|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[11523]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 46136;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[11523]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((14|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function _cleanup_276($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 1;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function _tolower($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isupper($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 | 32;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _isupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -65)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _toupper($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_islower($0)|0);
 $2 = ($1|0)==(0);
 $3 = $0 & 95;
 $$0 = $2 ? $0 : $3;
 return ($$0|0);
}
function _islower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 return ($3|0);
}
function _strtox_638($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155188 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156206 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162$lcssa = 0, $$3162211 = 0, $$4163$be = 0, $$4163$lcssa = 0;
 var $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7194 = 0, $$8 = 0, $$9$be = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond183 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   $19 = ($16|0)==(45);
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((41918) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((41918) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $69 = ($$1165|0)==(10);
    if ($69) {
     $70 = (($$1160) + -48)|0;
     $71 = ($70>>>0)<(10);
     if ($71) {
      $$0154222 = 0;$74 = $70;
      while(1) {
       $72 = ($$0154222*10)|0;
       $73 = (($72) + ($74))|0;
       $75 = HEAP32[$6>>2]|0;
       $76 = HEAP32[$7>>2]|0;
       $77 = ($75>>>0)<($76>>>0);
       if ($77) {
        $78 = ((($75)) + 1|0);
        HEAP32[$6>>2] = $78;
        $79 = HEAP8[$75>>0]|0;
        $80 = $79&255;
        $$2161$be = $80;
       } else {
        $81 = (___shgetc($0)|0);
        $$2161$be = $81;
       }
       $82 = (($$2161$be) + -48)|0;
       $83 = ($82>>>0)<(10);
       $84 = ($73>>>0)<(429496729);
       $85 = $83 & $84;
       if ($85) {
        $$0154222 = $73;$74 = $82;
       } else {
        break;
       }
      }
      $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
     } else {
      $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
     }
     $86 = (($$2161$lcssa) + -48)|0;
     $87 = ($86>>>0)<(10);
     if ($87) {
      $$3162211 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
      while(1) {
       $90 = (___muldi3(($88|0),($89|0),10,0)|0);
       $91 = tempRet0;
       $93 = ($92|0)<(0);
       $94 = $93 << 31 >> 31;
       $95 = $92 ^ -1;
       $96 = $94 ^ -1;
       $97 = ($91>>>0)>($96>>>0);
       $98 = ($90>>>0)>($95>>>0);
       $99 = ($91|0)==($96|0);
       $100 = $99 & $98;
       $101 = $97 | $100;
       if ($101) {
        $$3162$lcssa = $$3162211;$$lcssa = $92;$293 = $88;$294 = $89;
        break;
       }
       $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
       $103 = tempRet0;
       $104 = HEAP32[$6>>2]|0;
       $105 = HEAP32[$7>>2]|0;
       $106 = ($104>>>0)<($105>>>0);
       if ($106) {
        $107 = ((($104)) + 1|0);
        HEAP32[$6>>2] = $107;
        $108 = HEAP8[$104>>0]|0;
        $109 = $108&255;
        $$3162$be = $109;
       } else {
        $110 = (___shgetc($0)|0);
        $$3162$be = $110;
       }
       $111 = (($$3162$be) + -48)|0;
       $112 = ($111>>>0)<(10);
       $113 = ($103>>>0)<(429496729);
       $114 = ($102>>>0)<(2576980378);
       $115 = ($103|0)==(429496729);
       $116 = $115 & $114;
       $117 = $113 | $116;
       $or$cond7 = $112 & $117;
       if ($or$cond7) {
        $$3162211 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
       } else {
        $$3162$lcssa = $$3162$be;$$lcssa = $111;$293 = $102;$294 = $103;
        break;
       }
      }
      $118 = ($$lcssa>>>0)>(9);
      if ($118) {
       $$1158 = $$0157;$262 = $294;$264 = $293;
      } else {
       $$1165167 = 10;$$8 = $$3162$lcssa;$295 = $293;$296 = $294;
       label = 72;
      }
     } else {
      $$1158 = $$0157;$262 = $292;$264 = $291;
     }
    } else {
     $$1160169 = $$1160;$$1165168 = $$1165;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (42174 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((41918) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155188 = 0;$138 = $134;
       while(1) {
        $136 = $$1155188 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((41918) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155188 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond183 = $156 | $163;
      if ($or$cond183) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$295 = $159;$296 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((41918) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$295 = $170;$296 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((41918) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156206 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156206, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((41918) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156206 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$297 = $188;$298 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$297 = 0;$298 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7194 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((41918) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7194 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$295 = $225;$296 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$295 = $297;$296 = $298;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((41918) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((41918) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $296;$264 = $295;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 7]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 7]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _strtoul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_638($0,$1,$2,-1,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _iscntrl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(32);
 $2 = ($0|0)==(127);
 $3 = $1 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=15036; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 7]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((42183 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_328($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 42663;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 42663;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 42663;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 42663 : (42665);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (42664);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 42663;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 42663;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 42673;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 42680;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (42681) : (42686);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (42683);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (42647 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(42711,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(42711,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 42699 : 42703;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 44618 : 42707;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 42663;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (42647 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (42663 + ($255)|0);
    $$332 = $or$cond282 ? 42663 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 42663;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg_328($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 7]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 7]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg_328($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (42713 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 42801;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 42801;
  } else {
   $$01113 = 42801;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall195(195,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _access($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall33(33,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 7]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(44605,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(44605,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 6;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 1;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 2;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 116;
   $37 = HEAP32[(46096)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((46120)|0));
   $40 = HEAP32[(46116)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(46116)>>2] = $7;
   ___unlock(((46120)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbrtowc($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$03750 = 0, $$03849 = 0, $$04148 = 0, $$1 = 0, $$139 = 0, $$142 = 0, $$2 = 0, $$45 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $4 = sp;
 $5 = ($3|0)==(0|0);
 $$ = $5 ? 46140 : $3;
 $6 = HEAP32[$$>>2]|0;
 $7 = ($1|0)==(0|0);
 L1: do {
  if ($7) {
   $8 = ($6|0)==(0);
   if ($8) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $9 = ($0|0)==(0|0);
   $$45 = $9 ? $4 : $0;
   $10 = ($2|0)==(0);
   if ($10) {
    $$0 = -2;
   } else {
    $11 = ($6|0)==(0);
    if ($11) {
     $12 = HEAP8[$1>>0]|0;
     $13 = $12&255;
     $14 = ($12<<24>>24)>(-1);
     if ($14) {
      HEAP32[$$45>>2] = $13;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      break;
     }
     $17 = (($13) + -194)|0;
     $18 = ($17>>>0)>(50);
     if ($18) {
      label = 15;
      break;
     }
     $19 = ((($1)) + 1|0);
     $20 = (14832 + ($17<<2)|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($2) + -1)|0;
     $23 = ($22|0)==(0);
     if ($23) {
      $$2 = $21;
     } else {
      $$03750 = $19;$$03849 = $21;$$04148 = $22;
      label = 9;
     }
    } else {
     $$03750 = $1;$$03849 = $6;$$04148 = $2;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $24 = HEAP8[$$03750>>0]|0;
      $25 = $24&255;
      $26 = $25 >>> 3;
      $27 = (($26) + -16)|0;
      $28 = $$03849 >> 26;
      $29 = (($26) + ($28))|0;
      $30 = $27 | $29;
      $31 = ($30>>>0)>(7);
      if ($31) {
       label = 15;
       break L1;
      } else {
       $$1 = $$03750;$$139 = $$03849;$$142 = $$04148;$35 = $24;
      }
      while(1) {
       $32 = $$139 << 6;
       $33 = ((($$1)) + 1|0);
       $34 = $35&255;
       $36 = (($34) + -128)|0;
       $37 = $36 | $32;
       $38 = (($$142) + -1)|0;
       $39 = ($37|0)<(0);
       if (!($39)) {
        break;
       }
       $41 = ($38|0)==(0);
       if ($41) {
        $$2 = $37;
        break L11;
       }
       $42 = HEAP8[$33>>0]|0;
       $43 = $42 & -64;
       $44 = ($43<<24>>24)==(-128);
       if ($44) {
        $$1 = $33;$$139 = $37;$$142 = $38;$35 = $42;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$>>2] = 0;
      HEAP32[$$45>>2] = $37;
      $40 = (($2) - ($38))|0;
      $$0 = $40;
      break L1;
     }
    } while(0);
    HEAP32[$$>>2] = $$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$>>2] = 0;
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[3707]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[3707]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((46120)|0));
   $$02325 = HEAP32[(46116)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((46120)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 7]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 7]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _vfscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$$0266 = 0, $$$0268 = 0, $$0$i = 0, $$0266$lcssa = 0, $$0266408 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273420 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph331 = 0, $$0283419 = 0, $$0286411 = 0, $$0288$ = 0, $$0288416 = 0, $$0292 = 0, $$0293 = 0;
 var $$0294415 = 0, $$0305414 = 0, $$10 = 0, $$10304 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1295 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0;
 var $$2290 = 0, $$2296 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$319 = 0, $$320 = 0, $$321 = 0, $$322 = 0, $$3281 = 0, $$3291 = 0, $$3297$ph = 0, $$3407 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6300 = 0;
 var $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7301 = 0, $$7312 = 0, $$8 = 0, $$8302 = 0, $$8313 = 0, $$9 = 0, $$9303 = 0, $$9314 = 0, $$lcssa349 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi493Z2D = 0, $$pre482 = 0, $$pre484 = 0, $$pre486 = 0, $$pre488 = 0;
 var $$pre489 = 0, $$pre490 = 0, $$pre491 = 0, $$pre492 = 0, $$sroa$2$0$$sroa_idx13 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0.0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor327 = 0, $isdigit = 0, $isdigit316 = 0, $isdigit316406 = 0, $isdigittmp = 0, $isdigittmp315 = 0, $isdigittmp315405 = 0, $not$ = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond318 = 0, $or$cond5 = 0, $trunc = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp + 33|0;
 $6 = sp;
 $7 = sp + 32|0;
 $8 = ((($0)) + 76|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)>(-1);
 if ($10) {
  $11 = (___lockfile($0)|0);
  $332 = $11;
 } else {
  $332 = 0;
 }
 $12 = HEAP8[$1>>0]|0;
 $13 = ($12<<24>>24)==(0);
 L4: do {
  if ($13) {
   $$3291 = 0;
  } else {
   $14 = ((($0)) + 4|0);
   $15 = ((($0)) + 100|0);
   $16 = ((($0)) + 108|0);
   $17 = ((($0)) + 8|0);
   $18 = ((($5)) + 10|0);
   $19 = ((($5)) + 33|0);
   $$sroa$2$0$$sroa_idx13 = ((($4)) + 4|0);
   $20 = ((($5)) + 46|0);
   $21 = ((($5)) + 94|0);
   $22 = ((($5)) + 1|0);
   $23 = ((($5)) + 1|0);
   $$0273420 = $1;$$0283419 = 0;$$0288416 = 0;$$0294415 = 0;$$0305414 = 0;$25 = $12;
   L6: while(1) {
    $24 = $25&255;
    $26 = (_isspace($24)|0);
    $27 = ($26|0)==(0);
    L8: do {
     if ($27) {
      $54 = ($25<<24>>24)==(37);
      L10: do {
       if ($54) {
        $55 = ((($$0273420)) + 1|0);
        $56 = HEAP8[$55>>0]|0;
        L12: do {
         switch ($56<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $77 = ((($$0273420)) + 2|0);
          $$0293 = 0;$$2275 = $77;
          break;
         }
         default: {
          $78 = $56&255;
          $isdigittmp = (($78) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $79 = ((($$0273420)) + 2|0);
           $80 = HEAP8[$79>>0]|0;
           $81 = ($80<<24>>24)==(36);
           if ($81) {
            $vacopy_currentptr = HEAP32[$2>>2]|0;
            HEAP32[$3>>2] = $vacopy_currentptr;
            $$0$i = $isdigittmp;
            while(1) {
             $82 = ($$0$i>>>0)>(1);
             $arglist_current = HEAP32[$3>>2]|0;
             $83 = $arglist_current;
             $84 = ((0) + 4|0);
             $expanded4 = $84;
             $expanded = (($expanded4) - 1)|0;
             $85 = (($83) + ($expanded))|0;
             $86 = ((0) + 4|0);
             $expanded8 = $86;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $87 = $85 & $expanded6;
             $88 = $87;
             $89 = HEAP32[$88>>2]|0;
             $arglist_next = ((($88)) + 4|0);
             HEAP32[$3>>2] = $arglist_next;
             $90 = (($$0$i) + -1)|0;
             if ($82) {
              $$0$i = $90;
             } else {
              break;
             }
            }
            $91 = ((($$0273420)) + 3|0);
            $$0293 = $89;$$2275 = $91;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$2>>2]|0;
          $92 = $arglist_current2;
          $93 = ((0) + 4|0);
          $expanded11 = $93;
          $expanded10 = (($expanded11) - 1)|0;
          $94 = (($92) + ($expanded10))|0;
          $95 = ((0) + 4|0);
          $expanded15 = $95;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $96 = $94 & $expanded13;
          $97 = $96;
          $98 = HEAP32[$97>>2]|0;
          $arglist_next3 = ((($97)) + 4|0);
          HEAP32[$2>>2] = $arglist_next3;
          $$0293 = $98;$$2275 = $55;
         }
         }
        } while(0);
        $99 = HEAP8[$$2275>>0]|0;
        $100 = $99&255;
        $isdigittmp315405 = (($100) + -48)|0;
        $isdigit316406 = ($isdigittmp315405>>>0)<(10);
        if ($isdigit316406) {
         $$0266408 = 0;$$3407 = $$2275;$104 = $100;
         while(1) {
          $101 = ($$0266408*10)|0;
          $102 = (($101) + -48)|0;
          $103 = (($102) + ($104))|0;
          $105 = ((($$3407)) + 1|0);
          $106 = HEAP8[$105>>0]|0;
          $107 = $106&255;
          $isdigittmp315 = (($107) + -48)|0;
          $isdigit316 = ($isdigittmp315>>>0)<(10);
          if ($isdigit316) {
           $$0266408 = $103;$$3407 = $105;$104 = $107;
          } else {
           $$0266$lcssa = $103;$$3$lcssa = $105;$$lcssa349 = $106;
           break;
          }
         }
        } else {
         $$0266$lcssa = 0;$$3$lcssa = $$2275;$$lcssa349 = $99;
        }
        $108 = ($$lcssa349<<24>>24)==(109);
        if ($108) {
         $109 = ($$0293|0)!=(0|0);
         $110 = $109&1;
         $111 = ((($$3$lcssa)) + 1|0);
         $$pre482 = HEAP8[$111>>0]|0;
         $$0270 = $110;$$1295 = 0;$$1306 = 0;$$4 = $111;$113 = $$pre482;
        } else {
         $$0270 = 0;$$1295 = $$0294415;$$1306 = $$0305414;$$4 = $$3$lcssa;$113 = $$lcssa349;
        }
        $112 = ((($$4)) + 1|0);
        switch ($113<<24>>24) {
        case 104:  {
         $114 = HEAP8[$112>>0]|0;
         $115 = ($114<<24>>24)==(104);
         $116 = ((($$4)) + 2|0);
         $$319 = $115 ? $116 : $112;
         $$320 = $115 ? -2 : -1;
         $$0268 = $$320;$$5 = $$319;
         break;
        }
        case 108:  {
         $117 = HEAP8[$112>>0]|0;
         $118 = ($117<<24>>24)==(108);
         $119 = ((($$4)) + 2|0);
         $$321 = $118 ? $119 : $112;
         $$322 = $118 ? 3 : 1;
         $$0268 = $$322;$$5 = $$321;
         break;
        }
        case 106:  {
         $$0268 = 3;$$5 = $112;
         break;
        }
        case 116: case 122:  {
         $$0268 = 1;$$5 = $112;
         break;
        }
        case 76:  {
         $$0268 = 2;$$5 = $112;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $$0268 = 0;$$5 = $$4;
         break;
        }
        default: {
         $$7312 = $$1306;$$8302 = $$1295;
         label = 154;
         break L6;
        }
        }
        $120 = HEAP8[$$5>>0]|0;
        $121 = $120&255;
        $122 = $121 & 47;
        $123 = ($122|0)==(3);
        $124 = $121 | 32;
        $$ = $123 ? $124 : $121;
        $$$0268 = $123 ? 1 : $$0268;
        $trunc = $$&255;
        switch ($trunc<<24>>24) {
        case 99:  {
         $125 = ($$0266$lcssa|0)<(1);
         $$$0266 = $125 ? 1 : $$0266$lcssa;
         $$1267 = $$$0266;$$1284 = $$0283419;
         break;
        }
        case 91:  {
         $$1267 = $$0266$lcssa;$$1284 = $$0283419;
         break;
        }
        case 110:  {
         $126 = ($$0283419|0)<(0);
         $127 = $126 << 31 >> 31;
         $128 = ($$0293|0)==(0|0);
         if ($128) {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         switch ($$$0268|0) {
         case -2:  {
          $129 = $$0283419&255;
          HEAP8[$$0293>>0] = $129;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case -1:  {
          $130 = $$0283419&65535;
          HEAP16[$$0293>>1] = $130;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$$0293>>2] = $$0283419;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         case 3:  {
          $131 = $$0293;
          $132 = $131;
          HEAP32[$132>>2] = $$0283419;
          $133 = (($131) + 4)|0;
          $134 = $133;
          HEAP32[$134>>2] = $127;
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
          break;
         }
         default: {
          $$11 = $$5;$$1289 = $$0288416;$$2285 = $$0283419;$$6311 = $$1306;$$7301 = $$1295;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($0,0);
         while(1) {
          $135 = HEAP32[$14>>2]|0;
          $136 = HEAP32[$15>>2]|0;
          $137 = ($135>>>0)<($136>>>0);
          if ($137) {
           $138 = ((($135)) + 1|0);
           HEAP32[$14>>2] = $138;
           $139 = HEAP8[$135>>0]|0;
           $140 = $139&255;
           $142 = $140;
          } else {
           $141 = (___shgetc($0)|0);
           $142 = $141;
          }
          $143 = (_isspace($142)|0);
          $144 = ($143|0)==(0);
          if ($144) {
           break;
          }
         }
         $145 = HEAP32[$15>>2]|0;
         $146 = ($145|0)==(0|0);
         if ($146) {
          $$pre484 = HEAP32[$14>>2]|0;
          $154 = $$pre484;
         } else {
          $147 = HEAP32[$14>>2]|0;
          $148 = ((($147)) + -1|0);
          HEAP32[$14>>2] = $148;
          $149 = $148;
          $154 = $149;
         }
         $150 = HEAP32[$16>>2]|0;
         $151 = HEAP32[$17>>2]|0;
         $152 = (($150) + ($$0283419))|0;
         $153 = (($152) + ($154))|0;
         $155 = (($153) - ($151))|0;
         $$1267 = $$0266$lcssa;$$1284 = $155;
        }
        }
        ___shlim($0,$$1267);
        $156 = HEAP32[$14>>2]|0;
        $157 = HEAP32[$15>>2]|0;
        $158 = ($156>>>0)<($157>>>0);
        if ($158) {
         $159 = ((($156)) + 1|0);
         HEAP32[$14>>2] = $159;
         $162 = $157;
        } else {
         $160 = (___shgetc($0)|0);
         $161 = ($160|0)<(0);
         if ($161) {
          $$7312 = $$1306;$$8302 = $$1295;
          label = 154;
          break L6;
         }
         $$pre486 = HEAP32[$15>>2]|0;
         $162 = $$pre486;
        }
        $163 = ($162|0)==(0|0);
        if (!($163)) {
         $164 = HEAP32[$14>>2]|0;
         $165 = ((($164)) + -1|0);
         HEAP32[$14>>2] = $165;
        }
        L68: do {
         switch ($trunc<<24>>24) {
         case 91: case 99: case 115:  {
          $166 = ($$|0)==(99);
          $167 = $$ | 16;
          $168 = ($167|0)==(115);
          L70: do {
           if ($168) {
            $169 = ($$|0)==(115);
            _memset(($22|0),-1,256)|0;
            HEAP8[$5>>0] = 0;
            if ($169) {
             HEAP8[$19>>0] = 0;
             ;HEAP8[$18>>0]=0|0;HEAP8[$18+1>>0]=0|0;HEAP8[$18+2>>0]=0|0;HEAP8[$18+3>>0]=0|0;HEAP8[$18+4>>0]=0|0;
             $$9 = $$5;
            } else {
             $$9 = $$5;
            }
           } else {
            $170 = ((($$5)) + 1|0);
            $171 = HEAP8[$170>>0]|0;
            $172 = ($171<<24>>24)==(94);
            $173 = ((($$5)) + 2|0);
            $$0292 = $172&1;
            $$6 = $172 ? $173 : $170;
            $174 = $172&1;
            _memset(($23|0),($174|0),256)|0;
            HEAP8[$5>>0] = 0;
            $175 = HEAP8[$$6>>0]|0;
            switch ($175<<24>>24) {
            case 45:  {
             $176 = ((($$6)) + 1|0);
             $177 = $$0292 ^ 1;
             $178 = $177&255;
             HEAP8[$20>>0] = $178;
             $$7$ph = $176;$$pre$phi493Z2D = $178;
             break;
            }
            case 93:  {
             $179 = ((($$6)) + 1|0);
             $180 = $$0292 ^ 1;
             $181 = $180&255;
             HEAP8[$21>>0] = $181;
             $$7$ph = $179;$$pre$phi493Z2D = $181;
             break;
            }
            default: {
             $$pre491 = $$0292 ^ 1;
             $$pre492 = $$pre491&255;
             $$7$ph = $$6;$$pre$phi493Z2D = $$pre492;
            }
            }
            $$7 = $$7$ph;
            while(1) {
             $182 = HEAP8[$$7>>0]|0;
             L81: do {
              switch ($182<<24>>24) {
              case 0:  {
               $$7312 = $$1306;$$8302 = $$1295;
               label = 154;
               break L6;
               break;
              }
              case 93:  {
               $$9 = $$7;
               break L70;
               break;
              }
              case 45:  {
               $183 = ((($$7)) + 1|0);
               $184 = HEAP8[$183>>0]|0;
               switch ($184<<24>>24) {
               case 93: case 0:  {
                $$8 = $$7;$195 = 45;
                break L81;
                break;
               }
               default: {
               }
               }
               $185 = ((($$7)) + -1|0);
               $186 = HEAP8[$185>>0]|0;
               $187 = ($186&255)<($184&255);
               if ($187) {
                $188 = $186&255;
                $$0286411 = $188;
                while(1) {
                 $189 = (($$0286411) + 1)|0;
                 $190 = (($5) + ($189)|0);
                 HEAP8[$190>>0] = $$pre$phi493Z2D;
                 $191 = HEAP8[$183>>0]|0;
                 $192 = $191&255;
                 $193 = ($189|0)<($192|0);
                 if ($193) {
                  $$0286411 = $189;
                 } else {
                  $$8 = $183;$195 = $191;
                  break;
                 }
                }
               } else {
                $$8 = $183;$195 = $184;
               }
               break;
              }
              default: {
               $$8 = $$7;$195 = $182;
              }
              }
             } while(0);
             $194 = $195&255;
             $196 = (($194) + 1)|0;
             $197 = (($5) + ($196)|0);
             HEAP8[$197>>0] = $$pre$phi493Z2D;
             $198 = ((($$8)) + 1|0);
             $$7 = $198;
            }
           }
          } while(0);
          $199 = (($$1267) + 1)|0;
          $200 = $166 ? $199 : 31;
          $201 = ($$$0268|0)==(1);
          $202 = ($$0270|0)!=(0);
          L89: do {
           if ($201) {
            if ($202) {
             $203 = $200 << 2;
             $204 = (_malloc($203)|0);
             $205 = ($204|0)==(0|0);
             if ($205) {
              $$7312 = 0;$$8302 = $204;
              label = 154;
              break L6;
             } else {
              $$2296 = $204;
             }
            } else {
             $$2296 = $$0293;
            }
            HEAP32[$4>>2] = 0;
            HEAP32[$$sroa$2$0$$sroa_idx13>>2] = 0;
            $$0276$ph = $200;$$0278$ph = 0;$$3297$ph = $$2296;
            L95: while(1) {
             $206 = ($$3297$ph|0)==(0|0);
             $$0278$ph331 = $$0278$ph;
             while(1) {
              L99: while(1) {
               $207 = HEAP32[$14>>2]|0;
               $208 = HEAP32[$15>>2]|0;
               $209 = ($207>>>0)<($208>>>0);
               if ($209) {
                $210 = ((($207)) + 1|0);
                HEAP32[$14>>2] = $210;
                $211 = HEAP8[$207>>0]|0;
                $212 = $211&255;
                $215 = $212;
               } else {
                $213 = (___shgetc($0)|0);
                $215 = $213;
               }
               $214 = (($215) + 1)|0;
               $216 = (($5) + ($214)|0);
               $217 = HEAP8[$216>>0]|0;
               $218 = ($217<<24>>24)==(0);
               if ($218) {
                break L95;
               }
               $219 = $215&255;
               HEAP8[$7>>0] = $219;
               $220 = (_mbrtowc($6,$7,1,$4)|0);
               switch ($220|0) {
               case -1:  {
                $$7312 = 0;$$8302 = $$3297$ph;
                label = 154;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L99;
               }
               }
              }
              if ($206) {
               $$1279 = $$0278$ph331;
              } else {
               $221 = (($$3297$ph) + ($$0278$ph331<<2)|0);
               $222 = (($$0278$ph331) + 1)|0;
               $223 = HEAP32[$6>>2]|0;
               HEAP32[$221>>2] = $223;
               $$1279 = $222;
              }
              $224 = ($$1279|0)==($$0276$ph|0);
              $or$cond = $202 & $224;
              if ($or$cond) {
               break;
              } else {
               $$0278$ph331 = $$1279;
              }
             }
             $factor327 = $$0276$ph << 1;
             $225 = $factor327 | 1;
             $226 = $225 << 2;
             $227 = (_realloc($$3297$ph,$226)|0);
             $228 = ($227|0)==(0|0);
             if ($228) {
              $$7312 = 0;$$8302 = $$3297$ph;
              label = 154;
              break L6;
             } else {
              $$0278$ph$phi = $$0276$ph;$$0276$ph = $225;$$3297$ph = $227;$$0278$ph = $$0278$ph$phi;
             }
            }
            $229 = (_mbsinit($4)|0);
            $230 = ($229|0)==(0);
            if ($230) {
             $$7312 = 0;$$8302 = $$3297$ph;
             label = 154;
             break L6;
            } else {
             $$4282 = $$0278$ph331;$$4309 = 0;$$5299 = $$3297$ph;
            }
           } else {
            if ($202) {
             $231 = (_malloc($200)|0);
             $232 = ($231|0)==(0|0);
             if ($232) {
              $$7312 = 0;$$8302 = 0;
              label = 154;
              break L6;
             } else {
              $$1277$ph = $200;$$2280$ph = 0;$$2307$ph = $231;
             }
             while(1) {
              $$2280 = $$2280$ph;
              while(1) {
               $233 = HEAP32[$14>>2]|0;
               $234 = HEAP32[$15>>2]|0;
               $235 = ($233>>>0)<($234>>>0);
               if ($235) {
                $236 = ((($233)) + 1|0);
                HEAP32[$14>>2] = $236;
                $237 = HEAP8[$233>>0]|0;
                $238 = $237&255;
                $241 = $238;
               } else {
                $239 = (___shgetc($0)|0);
                $241 = $239;
               }
               $240 = (($241) + 1)|0;
               $242 = (($5) + ($240)|0);
               $243 = HEAP8[$242>>0]|0;
               $244 = ($243<<24>>24)==(0);
               if ($244) {
                $$4282 = $$2280;$$4309 = $$2307$ph;$$5299 = 0;
                break L89;
               }
               $245 = $241&255;
               $246 = (($$2280) + 1)|0;
               $247 = (($$2307$ph) + ($$2280)|0);
               HEAP8[$247>>0] = $245;
               $248 = ($246|0)==($$1277$ph|0);
               if ($248) {
                break;
               } else {
                $$2280 = $246;
               }
              }
              $factor = $$1277$ph << 1;
              $249 = $factor | 1;
              $250 = (_realloc($$2307$ph,$249)|0);
              $251 = ($250|0)==(0|0);
              if ($251) {
               $$7312 = $$2307$ph;$$8302 = 0;
               label = 154;
               break L6;
              } else {
               $$2280$ph$phi = $$1277$ph;$$1277$ph = $249;$$2307$ph = $250;$$2280$ph = $$2280$ph$phi;
              }
             }
            }
            $252 = ($$0293|0)==(0|0);
            if ($252) {
             $270 = $162;
             while(1) {
              $268 = HEAP32[$14>>2]|0;
              $269 = ($268>>>0)<($270>>>0);
              if ($269) {
               $271 = ((($268)) + 1|0);
               HEAP32[$14>>2] = $271;
               $272 = HEAP8[$268>>0]|0;
               $273 = $272&255;
               $276 = $273;
              } else {
               $274 = (___shgetc($0)|0);
               $276 = $274;
              }
              $275 = (($276) + 1)|0;
              $277 = (($5) + ($275)|0);
              $278 = HEAP8[$277>>0]|0;
              $279 = ($278<<24>>24)==(0);
              if ($279) {
               $$4282 = 0;$$4309 = 0;$$5299 = 0;
               break L89;
              }
              $$pre489 = HEAP32[$15>>2]|0;
              $270 = $$pre489;
             }
            } else {
             $$3281 = 0;$255 = $162;
             while(1) {
              $253 = HEAP32[$14>>2]|0;
              $254 = ($253>>>0)<($255>>>0);
              if ($254) {
               $256 = ((($253)) + 1|0);
               HEAP32[$14>>2] = $256;
               $257 = HEAP8[$253>>0]|0;
               $258 = $257&255;
               $261 = $258;
              } else {
               $259 = (___shgetc($0)|0);
               $261 = $259;
              }
              $260 = (($261) + 1)|0;
              $262 = (($5) + ($260)|0);
              $263 = HEAP8[$262>>0]|0;
              $264 = ($263<<24>>24)==(0);
              if ($264) {
               $$4282 = $$3281;$$4309 = $$0293;$$5299 = 0;
               break L89;
              }
              $265 = $261&255;
              $266 = (($$3281) + 1)|0;
              $267 = (($$0293) + ($$3281)|0);
              HEAP8[$267>>0] = $265;
              $$pre488 = HEAP32[$15>>2]|0;
              $$3281 = $266;$255 = $$pre488;
             }
            }
           }
          } while(0);
          $280 = HEAP32[$15>>2]|0;
          $281 = ($280|0)==(0|0);
          if ($281) {
           $$pre490 = HEAP32[$14>>2]|0;
           $288 = $$pre490;
          } else {
           $282 = HEAP32[$14>>2]|0;
           $283 = ((($282)) + -1|0);
           HEAP32[$14>>2] = $283;
           $284 = $283;
           $288 = $284;
          }
          $285 = HEAP32[$16>>2]|0;
          $286 = HEAP32[$17>>2]|0;
          $287 = (($288) - ($286))|0;
          $289 = (($287) + ($285))|0;
          $290 = ($289|0)==(0);
          if ($290) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          $$not = $166 ^ 1;
          $291 = ($289|0)==($$1267|0);
          $or$cond318 = $291 | $$not;
          if (!($or$cond318)) {
           $$10304 = $$5299;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$4309;
           break L6;
          }
          do {
           if ($202) {
            if ($201) {
             HEAP32[$$0293>>2] = $$5299;
             break;
            } else {
             HEAP32[$$0293>>2] = $$4309;
             break;
            }
           }
          } while(0);
          if ($166) {
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          } else {
           $292 = ($$5299|0)==(0|0);
           if (!($292)) {
            $293 = (($$5299) + ($$4282<<2)|0);
            HEAP32[$293>>2] = 0;
           }
           $294 = ($$4309|0)==(0|0);
           if ($294) {
            $$10 = $$9;$$5310 = 0;$$6300 = $$5299;
            break L68;
           }
           $295 = (($$4309) + ($$4282)|0);
           HEAP8[$295>>0] = 0;
           $$10 = $$9;$$5310 = $$4309;$$6300 = $$5299;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $$0272 = 16;
          label = 136;
          break;
         }
         case 111:  {
          $$0272 = 8;
          label = 136;
          break;
         }
         case 117: case 100:  {
          $$0272 = 10;
          label = 136;
          break;
         }
         case 105:  {
          $$0272 = 0;
          label = 136;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $313 = (+___floatscan($0,$$$0268,0));
          $314 = HEAP32[$16>>2]|0;
          $315 = HEAP32[$14>>2]|0;
          $316 = HEAP32[$17>>2]|0;
          $317 = (($316) - ($315))|0;
          $318 = ($314|0)==($317|0);
          if ($318) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $319 = ($$0293|0)==(0|0);
          if ($319) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case 0:  {
            $320 = $313;
            HEAPF32[$$0293>>2] = $320;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 1:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           case 2:  {
            HEAPF64[$$0293>>3] = $313;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L68;
           }
           }
          }
          break;
         }
         default: {
          $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
         }
         }
        } while(0);
        L169: do {
         if ((label|0) == 136) {
          label = 0;
          $296 = (___intscan($0,$$0272,0,-1,-1)|0);
          $297 = tempRet0;
          $298 = HEAP32[$16>>2]|0;
          $299 = HEAP32[$14>>2]|0;
          $300 = HEAP32[$17>>2]|0;
          $301 = (($300) - ($299))|0;
          $302 = ($298|0)==($301|0);
          if ($302) {
           $$10304 = $$1295;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$1306;
           break L6;
          }
          $303 = ($$|0)==(112);
          $304 = ($$0293|0)!=(0|0);
          $or$cond3 = $304 & $303;
          if ($or$cond3) {
           $305 = $296;
           HEAP32[$$0293>>2] = $305;
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
           break;
          }
          $306 = ($$0293|0)==(0|0);
          if ($306) {
           $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
          } else {
           switch ($$$0268|0) {
           case -2:  {
            $307 = $296&255;
            HEAP8[$$0293>>0] = $307;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case -1:  {
            $308 = $296&65535;
            HEAP16[$$0293>>1] = $308;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 0:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 1:  {
            HEAP32[$$0293>>2] = $296;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           case 3:  {
            $309 = $$0293;
            $310 = $309;
            HEAP32[$310>>2] = $296;
            $311 = (($309) + 4)|0;
            $312 = $311;
            HEAP32[$312>>2] = $297;
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
            break;
           }
           default: {
            $$10 = $$5;$$5310 = $$1306;$$6300 = $$1295;
            break L169;
           }
           }
          }
         }
        } while(0);
        $321 = HEAP32[$16>>2]|0;
        $322 = HEAP32[$14>>2]|0;
        $323 = HEAP32[$17>>2]|0;
        $324 = (($321) + ($$1284))|0;
        $325 = (($324) + ($322))|0;
        $326 = (($325) - ($323))|0;
        $not$ = ($$0293|0)!=(0|0);
        $327 = $not$&1;
        $$0288$ = (($327) + ($$0288416))|0;
        $$11 = $$10;$$1289 = $$0288$;$$2285 = $326;$$6311 = $$5310;$$7301 = $$6300;
        break L8;
       }
      } while(0);
      $57 = $54&1;
      $58 = (($$0273420) + ($57)|0);
      ___shlim($0,0);
      $59 = HEAP32[$14>>2]|0;
      $60 = HEAP32[$15>>2]|0;
      $61 = ($59>>>0)<($60>>>0);
      if ($61) {
       $62 = ((($59)) + 1|0);
       HEAP32[$14>>2] = $62;
       $63 = HEAP8[$59>>0]|0;
       $64 = $63&255;
       $68 = $64;
      } else {
       $65 = (___shgetc($0)|0);
       $68 = $65;
      }
      $66 = HEAP8[$58>>0]|0;
      $67 = $66&255;
      $69 = ($68|0)==($67|0);
      if (!($69)) {
       label = 22;
       break L6;
      }
      $76 = (($$0283419) + 1)|0;
      $$11 = $58;$$1289 = $$0288416;$$2285 = $76;$$6311 = $$0305414;$$7301 = $$0294415;
     } else {
      $$1274 = $$0273420;
      while(1) {
       $28 = ((($$1274)) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = (_isspace($30)|0);
       $32 = ($31|0)==(0);
       if ($32) {
        break;
       } else {
        $$1274 = $28;
       }
      }
      ___shlim($0,0);
      while(1) {
       $33 = HEAP32[$14>>2]|0;
       $34 = HEAP32[$15>>2]|0;
       $35 = ($33>>>0)<($34>>>0);
       if ($35) {
        $36 = ((($33)) + 1|0);
        HEAP32[$14>>2] = $36;
        $37 = HEAP8[$33>>0]|0;
        $38 = $37&255;
        $40 = $38;
       } else {
        $39 = (___shgetc($0)|0);
        $40 = $39;
       }
       $41 = (_isspace($40)|0);
       $42 = ($41|0)==(0);
       if ($42) {
        break;
       }
      }
      $43 = HEAP32[$15>>2]|0;
      $44 = ($43|0)==(0|0);
      if ($44) {
       $$pre = HEAP32[$14>>2]|0;
       $52 = $$pre;
      } else {
       $45 = HEAP32[$14>>2]|0;
       $46 = ((($45)) + -1|0);
       HEAP32[$14>>2] = $46;
       $47 = $46;
       $52 = $47;
      }
      $48 = HEAP32[$16>>2]|0;
      $49 = HEAP32[$17>>2]|0;
      $50 = (($48) + ($$0283419))|0;
      $51 = (($50) + ($52))|0;
      $53 = (($51) - ($49))|0;
      $$11 = $$1274;$$1289 = $$0288416;$$2285 = $53;$$6311 = $$0305414;$$7301 = $$0294415;
     }
    } while(0);
    $328 = ((($$11)) + 1|0);
    $329 = HEAP8[$328>>0]|0;
    $330 = ($329<<24>>24)==(0);
    if ($330) {
     $$3291 = $$1289;
     break L4;
    } else {
     $$0273420 = $328;$$0283419 = $$2285;$$0288416 = $$1289;$$0294415 = $$7301;$$0305414 = $$6311;$25 = $329;
    }
   }
   if ((label|0) == 22) {
    $70 = HEAP32[$15>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = HEAP32[$14>>2]|0;
     $73 = ((($72)) + -1|0);
     HEAP32[$14>>2] = $73;
    }
    $74 = ($68|0)>(-1);
    $75 = ($$0288416|0)!=(0);
    $or$cond5 = $75 | $74;
    if ($or$cond5) {
     $$3291 = $$0288416;
     break;
    } else {
     $$1271 = 0;$$8313 = $$0305414;$$9303 = $$0294415;
     label = 155;
    }
   }
   else if ((label|0) == 154) {
    $$old4 = ($$0288416|0)==(0);
    if ($$old4) {
     $$1271 = $$0270;$$8313 = $$7312;$$9303 = $$8302;
     label = 155;
    } else {
     $$10304 = $$8302;$$2 = $$0270;$$2290 = $$0288416;$$9314 = $$7312;
    }
   }
   if ((label|0) == 155) {
    $$10304 = $$9303;$$2 = $$1271;$$2290 = -1;$$9314 = $$8313;
   }
   $331 = ($$2|0)==(0);
   if ($331) {
    $$3291 = $$2290;
   } else {
    _free($$9314);
    _free($$10304);
    $$3291 = $$2290;
   }
  }
 } while(0);
 $333 = ($332|0)==(0);
 if (!($333)) {
  ___unlockfile($0);
 }
 STACKTOP = sp;return ($$3291|0);
}
function _mbsinit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $5 = 1;
 } else {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (44609 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (44618 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if ($81) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $162 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $162 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $163 = ($162|0)==(48);
           if ($163) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $162;$$2144$i = 1;$172 = 0;$174 = 0;$216 = $160;$218 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $174;$694 = $172;$695 = $174;$696 = $172;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $173 = ($172|0)<(0);
          $175 = ($174>>>0)<(8);
          $176 = ($172|0)==(0);
          $177 = $176 & $175;
          $178 = $173 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($172|0)<(0);
            $182 = ($174>>>0)<(14);
            $183 = ($172|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($174|0),($172|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $216;$694 = $218;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $217 = $215 ? $174 : $216;
        $219 = $215 ? $172 : $218;
        $220 = ($172|0)<(0);
        $221 = ($174>>>0)<(8);
        $222 = ($172|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $174;$227 = $172;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($217|0),($219|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$396 = $703;$397 = $705;$399 = $704;$400 = $706;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$396 = $697;$397 = 0;$399 = $698;$400 = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $398 = $395 ? $397 : $396;
        $401 = $395 ? $400 : $399;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $398;$710 = $401;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $398;$716 = $401;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($398|0),($401|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$429 = $417;$431 = $397;$432 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$429 = $709;$431 = $707;$432 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$429 = $715;$431 = $712;$432 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $430 = ($429|0)==($431|0);
        $433 = ($432|0)==($434|0);
        $435 = $430 & $433;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($432|0)>($449|0);
        $451 = ($429>>>0)>($447>>>0);
        $452 = ($432|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($432|0)<($461|0);
        $463 = ($429>>>0)<($459>>>0);
        $464 = ($432|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($429|0);
         $480 = ($429|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($429|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($429|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($429))|0;
           $492 = (15148 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($429, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($429) + -10)|0;
           $504 = (15148 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($429|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $429;
        } else {
         $510 = ($429|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (15148 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $429;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $429;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $612 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (15180 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $613 = ($612|0)==($$$5350$i|0);
          if (!($613)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $612;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 $12 = ($11|0)==(45);
 switch ($11|0) {
 case 43: case 45:  {
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$96 = $89;$98 = $90;
      while(1) {
       if ($154) {
        $97 = ($96|0)==(0);
        $99 = ($98|0)==(0);
        $100 = $97 & $99;
        if ($100) {
         break;
        } else {
         $102 = $96;$103 = $98;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$96 = $108;$98 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$115 = $108;$117 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$115 = $89;$117 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $116 = ($115|0)==(0);
     $118 = ($117|0)==(0);
     $119 = $116 & $118;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $120 = $117;$122 = $115;
     }
    } else {
     $120 = $158;$122 = $157;
    }
    $121 = ($120>>>0)<(1048576);
    $123 = ($122>>>0)<(0);
    $124 = ($120|0)==(1048576);
    $125 = $124 & $123;
    $126 = $121 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $122;$129 = $120;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $122;$140 = $120;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$153 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$153 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $150;$152 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,$2,1,$1)|0);
 $4 = (($3) + -1)|0;
 return ($4|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $9 = (___lockfile($3)|0);
  $phitmp = ($9|0)==(0);
  $10 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $11 = $10;
  } else {
   ___unlockfile($3);
   $11 = $10;
  }
 } else {
  $8 = (___fwritex($0,$4,$3)|0);
  $11 = $8;
 }
 $12 = ($11|0)==($4|0);
 if ($12) {
  $14 = $2;
 } else {
  $13 = (($11>>>0) / ($1>>>0))&-1;
  $14 = $13;
 }
 return ($14|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==($0|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = $0&255;
     $30 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $30;
     HEAP8[$25>>0] = $29;
     $31 = $0 & 255;
     $33 = $31;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($1)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = $0&255;
     $17 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $17;
     HEAP8[$12>>0] = $16;
     $18 = $0 & 255;
     $$0 = $18;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $$old2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $15 = $6;
 } else {
  $15 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($7|0)==(0);
  L11: do {
   if ($$old2) {
    $$1 = $0;
    label = 17;
   } else {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($15|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  (___lockfile($0)|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((46120)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(46116)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(46116)>>2] = $15;
  }
  ___unlock(((46120)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 127]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[3678]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _sscanf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsscanf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsscanf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 32|0);
 HEAP32[$4>>2] = 7;
 $5 = ((($3)) + 44|0);
 HEAP32[$5>>2] = $0;
 $6 = ((($3)) + 76|0);
 HEAP32[$6>>2] = -1;
 $7 = ((($3)) + 84|0);
 HEAP32[$7>>2] = $0;
 $8 = (_vfscanf($3,$1,$2)|0);
 STACKTOP = sp;return ($8|0);
}
function _do_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___string_read($0,$1,$2)|0);
 return ($3|0);
}
function ___string_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$027 = 0, $$027$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 256)|0;
 $6 = (_memchr($4,0,$5)|0);
 $7 = ($6|0)==(0|0);
 $8 = $6;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $$027 = $7 ? $5 : $10;
 $11 = ($$027>>>0)<($2>>>0);
 $$027$ = $11 ? $$027 : $2;
 _memcpy(($1|0),($4|0),($$027$|0))|0;
 $12 = (($4) + ($$027$)|0);
 $13 = ((($0)) + 4|0);
 HEAP32[$13>>2] = $12;
 $14 = (($4) + ($$027)|0);
 $15 = ((($0)) + 8|0);
 HEAP32[$15>>2] = $14;
 HEAP32[$3>>2] = $14;
 return ($$027$|0);
}
function _remove($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall10(10,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $9 = 0;
 } else {
  $4 = (___errno_location()|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(21);
  if ($6) {
   HEAP32[$vararg_buffer1>>2] = $0;
   $7 = (___syscall40(40,($vararg_buffer1|0))|0);
   $8 = (___syscall_ret($7)|0);
   $9 = $8;
  } else {
   $9 = $2;
  }
 }
 STACKTOP = sp;return ($9|0);
}
function _puts($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[3678]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = (___lockfile($1)|0);
  $20 = $5;
 } else {
  $20 = 0;
 }
 $6 = (_fputs($0,$1)|0);
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $19 = 1;
  } else {
   $8 = ((($1)) + 75|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(10);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $16;
     HEAP8[$12>>0] = 10;
     $19 = 0;
     break;
    }
   }
   $17 = (___overflow($1,10)|0);
   $phitmp = ($17|0)<(0);
   $19 = $phitmp;
  }
 } while(0);
 $18 = $19 << 31 >> 31;
 $21 = ($20|0)==(0);
 if (!($21)) {
  ___unlockfile($1);
 }
 return ($18|0);
}
function _fgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (___lockfile($0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $15 = ((($0)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ((($0)) + 8|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16>>>0)<($18>>>0);
   if ($19) {
    $20 = ((($16)) + 1|0);
    HEAP32[$15>>2] = $20;
    $21 = HEAP8[$16>>0]|0;
    $22 = $21&255;
    $24 = $22;
   } else {
    $23 = (___uflow($0)|0);
    $24 = $23;
   }
   $$0 = $24;
  }
 }
 do {
  if ((label|0) == 3) {
   $6 = ((($0)) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ((($0)) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($7>>>0)<($9>>>0);
   if ($10) {
    $11 = ((($7)) + 1|0);
    HEAP32[$6>>2] = $11;
    $12 = HEAP8[$7>>0]|0;
    $13 = $12&255;
    $$0 = $13;
    break;
   } else {
    $14 = (___uflow($0)|0);
    $$0 = $14;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _bsearch($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$018$ = 0, $$01821 = 0, $$01920 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==(0);
 L1: do {
  if ($5) {
   $$0 = 0;
  } else {
   $$01821 = $1;$$01920 = $2;
   while(1) {
    $6 = $$01920 >>> 1;
    $7 = Math_imul($6, $3)|0;
    $8 = (($$01821) + ($7)|0);
    $9 = (FUNCTION_TABLE_iii[$4 & 15]($0,$8)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     $$0 = $8;
     break L1;
    }
    $11 = ($$01920|0)==(1);
    if ($11) {
     $$0 = 0;
     break L1;
    }
    $12 = ($9|0)<(0);
    $13 = (($$01920) - ($6))|0;
    $$ = $12 ? $6 : $13;
    $$018$ = $12 ? $$01821 : $8;
    $14 = ($$|0)==(0);
    if ($14) {
     $$0 = 0;
     break;
    } else {
     $$01821 = $$018$;$$01920 = $$;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[11536]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (46184 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[11536] = $24;
     } else {
      $25 = HEAP32[(46160)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(46152)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (46184 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[11536] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(46160)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(46164)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (46184 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[11536] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(46160)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(46152)>>2] = $84;
     HEAP32[(46164)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(46148)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (46448 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(46160)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (46448 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(46148)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(46160)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(46160)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(46160)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(46164)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (46184 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[11536] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(46160)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(46152)>>2] = $$0191$i;
      HEAP32[(46164)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(46148)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (46448 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (46448 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(46152)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(46160)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (46448 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(46148)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(46160)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(46160)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(46160)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (46184 + ($425<<2)|0);
          $427 = HEAP32[11536]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[11536] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(46160)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (46448 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(46148)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(46160)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(46160)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(46152)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(46164)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(46164)>>2] = $511;
   HEAP32[(46152)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(46152)>>2] = 0;
   HEAP32[(46164)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(46156)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(46156)>>2] = $526;
  $527 = HEAP32[(46168)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(46168)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[11654]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(46624)>>2] = 4096;
  HEAP32[(46620)>>2] = 4096;
  HEAP32[(46628)>>2] = -1;
  HEAP32[(46632)>>2] = -1;
  HEAP32[(46636)>>2] = 0;
  HEAP32[(46588)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[11654] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(46624)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(46584)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(46576)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(46588)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(46168)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (46592);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(46620)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(46576)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(46584)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(46624)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(46588)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(46588)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(46576)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(46576)>>2] = $624;
  $625 = HEAP32[(46580)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(46580)>>2] = $624;
  }
  $627 = HEAP32[(46168)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(46160)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(46160)>>2] = $$748$i;
    }
    HEAP32[(46592)>>2] = $$748$i;
    HEAP32[(46596)>>2] = $$723947$i;
    HEAP32[(46604)>>2] = 0;
    $632 = HEAP32[11654]|0;
    HEAP32[(46180)>>2] = $632;
    HEAP32[(46176)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (46184 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(46168)>>2] = $646;
    HEAP32[(46156)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(46632)>>2]|0;
    HEAP32[(46172)>>2] = $652;
   } else {
    $$024370$i = (46592);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(46156)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(46168)>>2] = $676;
       HEAP32[(46156)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(46632)>>2]|0;
       HEAP32[(46172)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(46160)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(46160)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (46592);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (46592);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(46156)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(46156)>>2] = $724;
        HEAP32[(46168)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(46164)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(46152)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(46152)>>2] = $730;
         HEAP32[(46164)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (46184 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[11536]|0;
            $757 = $756 & $755;
            HEAP32[11536] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (46448 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(46148)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(46148)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(46160)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(46160)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(46160)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (46184 + ($834<<2)|0);
         $836 = HEAP32[11536]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[11536] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(46160)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (46448 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(46148)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(46148)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(46160)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(46160)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (46592);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(46168)>>2] = $944;
    HEAP32[(46156)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(46632)>>2]|0;
    HEAP32[(46172)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(46592)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(46592)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(46592)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(46592)+12>>2]|0;
    HEAP32[(46592)>>2] = $$748$i;
    HEAP32[(46596)>>2] = $$723947$i;
    HEAP32[(46604)>>2] = 0;
    HEAP32[(46600)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (46184 + ($965<<2)|0);
      $967 = HEAP32[11536]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[11536] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(46160)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (46448 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(46148)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(46148)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(46160)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(46160)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(46156)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(46156)>>2] = $1047;
   $1048 = HEAP32[(46168)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(46168)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(46160)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(46164)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(46152)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (46184 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[11536]|0;
     $38 = $37 & $36;
     HEAP32[11536] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (46448 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(46148)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(46148)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(46160)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(46160)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(46160)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(46168)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(46156)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(46156)>>2] = $123;
   HEAP32[(46168)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(46164)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(46164)>>2] = 0;
   HEAP32[(46152)>>2] = 0;
   return;
  }
  $128 = HEAP32[(46164)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(46152)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(46152)>>2] = $131;
   HEAP32[(46164)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (46184 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(46160)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[11536]|0;
     $155 = $154 & $153;
     HEAP32[11536] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(46160)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(46160)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(46160)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (46448 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(46148)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(46148)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(46160)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(46160)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(46160)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(46164)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(46152)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (46184 + ($236<<2)|0);
  $238 = HEAP32[11536]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[11536] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(46160)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (46448 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(46148)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(46148)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(46160)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(46160)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(46176)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(46176)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (46600);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(46176)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(46160)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(46624)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(46168)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(46156)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(46168)>>2] = $40;
  HEAP32[(46156)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(46164)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(46152)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(46152)>>2] = $storemerge1;
  HEAP32[(46164)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (46184 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[11536]|0;
    $93 = $92 & $91;
    HEAP32[11536] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (46448 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(46148)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(46148)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(46160)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(46160)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(46160)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(46160)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(46164)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(46152)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (46184 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[11536]|0;
     $34 = $33 & $32;
     HEAP32[11536] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (46448 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(46148)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(46148)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(46160)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(46160)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(46160)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(46160)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(46168)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(46156)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(46156)>>2] = $118;
   HEAP32[(46168)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(46164)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(46164)>>2] = 0;
   HEAP32[(46152)>>2] = 0;
   return;
  }
  $123 = HEAP32[(46164)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(46152)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(46152)>>2] = $126;
   HEAP32[(46164)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (46184 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[11536]|0;
     $149 = $148 & $147;
     HEAP32[11536] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (46448 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(46148)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(46148)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(46160)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(46160)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(46160)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(46164)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(46152)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (46184 + ($227<<2)|0);
  $229 = HEAP32[11536]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[11536] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(46160)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (46448 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(46148)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(46148)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(46160)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(46160)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&15](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&127](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&1](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(0);return 0;
}
function b1(p0) {
 p0 = p0|0; abort(1);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(2);
}
function b3(p0) {
 p0 = p0|0; abort(3);return 0;
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(4);return 0;
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(5);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,___stdio_write,___stdio_seek,___stdout_write,_sn_write,_Compare,___stdio_read,_do_read];
var FUNCTION_TABLE_vi = [b1,_NoReturnAttr,_UnusedAttr,_hie1,_hie0,_hie8,_hie2,_hie3,_hie4,_hie5,_hie6,_ShiftExpr,_hie10,_cleanup,_cleanup_276,b1];
var FUNCTION_TABLE_vii = [b2,_StdFunc_memcpy,_StdFunc_memset,_StdFunc_strcmp,_StdFunc_strcpy,_StdFunc_strlen,_OptAddSource,_OptAllCDecl,_OptBssName,_OptCheckStack,_OptCodeName,_OptCodeSize,_OptCPU,_OptCreateDep,_OptCreateFullDep,_OptDataName,_OptDebug,_OptDebugInfo,_OptDebugOpt,_OptDebugOptOutput,_OptDepTarget,_OptDisableOpt,_OptEnableOpt,_OptHelp,_OptIncludeDir,_OptListOptSteps,_OptListWarnings,_OptLocalStrings,_OptMemoryModel
,_OptRegisterSpace,_OptRegisterVars,_OptRodataName,_OptSignedChars,_OptStandard,_OptStaticLocals,_OptTarget,_OptVerbose,_OptVersion,_OptWritableStrings,_g_add,_g_sub,_g_mul,_g_div,_g_mod,_g_asl,_g_asr,_g_and,_g_xor,_g_or,_g_eq,_g_ne,_g_lt,_g_le,_g_ge,_g_gt,b2,b2,b2,b2
,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_ii = [b3,_Opt65C02BitOps,_Opt65C02Ind,_Opt65C02Stores,_OptAdd1,_OptAdd2,_OptAdd3,_OptAdd4,_OptAdd5,_OptAdd6,_OptBNegA1,_OptBNegA2,_OptBNegAX1,_OptBNegAX2,_OptBNegAX3,_OptBNegAX4,_OptBoolTrans,_OptBranchDist,_OptCmp1,_OptCmp2,_OptCmp3,_OptCmp4,_OptCmp5,_OptCmp6,_OptCmp7,_OptCmp8,_OptCmp9,_OptComplAX1,_OptCondBranches1
,_OptCondBranches2,_OptDeadCode,_OptDeadJumps,_OptDecouple,_OptDupLoads,_OptIndLoads1,_OptIndLoads2,_OptJumpCascades,_OptJumpTarget1,_OptJumpTarget2,_OptJumpTarget3,_OptLoad1,_OptLoad2,_OptLoad3,_OptNegAX1,_OptNegAX2,_OptPrecalc,_OptPtrLoad1,_OptPtrLoad11,_OptPtrLoad12,_OptPtrLoad13,_OptPtrLoad14,_OptPtrLoad15,_OptPtrLoad16,_OptPtrLoad17,_OptPtrLoad2,_OptPtrLoad3,_OptPtrLoad4,_OptPtrLoad5,_OptPtrLoad6
,_OptPtrLoad7,_OptPtrStore1,_OptPtrStore2,_OptPtrStore3,_OptPush1,_OptPush2,_OptPushPop,_OptRTS,_OptRTSJumps1,_OptRTSJumps2,_OptShift1,_OptShift2,_OptShift3,_OptShift4,_OptShift5,_OptShift6,_OptSize1,_OptSize2,_OptStackOps,_OptStackPtrOps,_OptStore1,_OptStore2,_OptStore3,_OptStore4,_OptStore5,_OptStoreLoad,_OptSub1,_OptSub2,_OptSub3,_OptTest1
,_OptTest2,_OptTransfers1,_OptTransfers2,_OptTransfers3,_OptTransfers4,_OptUnusedLoads,_OptUnusedStores,_Opt___bzero,_Opt_staspidx,_Opt_staxspidx,_Opt_tosaddax,_Opt_tosandax,_Opt_tosaslax,_Opt_tosasrax,_Opt_toseqax,_Opt_tosgeax,_Opt_tosltax,_Opt_tosneax,_Opt_tosorax,_Opt_tosshlax,_Opt_tosshrax,_Opt_tossubax,_Opt_tosugeax,_Opt_tosugtax,_Opt_tosuleax,_Opt_tosultax,_Opt_tosxorax,___stdio_close,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iii = [b4,_CmpFunc,_CmpKey,_CompareFuncInfo,_CompareZPInfo,_CmpOptStep,_CmpKey_1045,_CmpFunc_1160,_CmpHarmless,_CmpToken,_FindCmp,_Compare_2417,b4,b4,b4,b4];
var FUNCTION_TABLE_viiii = [b5,_DefaultCheckFailed];

  return { ___muldsi3: ___muldsi3, _sbrk: _sbrk, _i64Subtract: _i64Subtract, _free: _free, _main: _main, _i64Add: _i64Add, _memmove: _memmove, _pthread_self: _pthread_self, _memset: _memset, _llvm_cttz_i32: _llvm_cttz_i32, _malloc: _malloc, _memcpy: _memcpy, ___muldi3: ___muldi3, _bitshift64Shl: _bitshift64Shl, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, ___errno_location: ___errno_location, ___udivmoddi4: ___udivmoddi4, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _memset = Module["_memset"] = asm["_memset"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===

Module["FS"] = FS;



function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }


  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}




  return cc65;
};
